#+SETUPFILE: ../theme-rose.setup
#+DATE: <2020-07-22 三>
#+TITLE: 数据库原理

#+begin_quote
临近自考，本篇整理下2018年自考教材的的一些重点知识，希望自己能过吧！
#+end_quote
* 数据库系统概述
** 数据库基本概念
*** 数据是什么?
	描述事物的符号记录
*** 数据库是什么?
	简称DB,长期存储在计算机内， **有组织，可共享的大量数据集合** 。
	
	数据库的数据特点:
	- 永久存储
	- 有组织
	- 可共享
*** 数据库管理系统是什么?
	#+begin_quote
	前三点重点
	#+end_quote
	一款软件，简称DBMS，功能有:
	1. 数据定义功能
	   使用数据定义语言 **(DDL)** ，来定义数据。
	2. 数据操纵功能
	   数据操纵语言 **(DML)**，对数据进行操作，例如增删改查。
	3. 数据库的运行管理
	   用于保证数据的:
       - 安全性（数据的访问权限）
	   - 完整性（保证数据不会出错）
	   - 多用户对数据的并发处理（12306，并发访问）
	   - 系统恢复
	4. 数据的建立和维护
	   例如:
	   - 创建数据库
	   - 维护数据库
	   - 备份数据库
	   - 恢复数据库
	   - 重组数据库
	   - 性能分析、监视
	5. 数据组织、存储和管理功能
	   - 索引查找
	   - 顺序查找等
*** 数据库系统
	简称DBS，包含了上面所有，以及相关的实用工具，以及 **数据库管理员(DBA)** 。
** 数据库管理技术的发展
*** 人工管理阶段
	**记录内无结构，整体无结构**
	- 数据无法长期保存
	- 使用应用程序管理数据（关闭数据就丢失）
	- 数据面向应用
*** 文件系统阶段
	- 数据的管理者 :: 文件系统，**数据可长期保存**
	- 数据面向的对象 :: 某一应用程序
	- 数据的共享程度 :: ** 共享性差，冗余度大**
	- 数据的结构化 :: **记录内有结构，整体无结构**
	- 数据的独立性 :: **独立性差**，改变数据逻辑结构必须改变应用程序。
	- 数据控制能力 :: 由应用程序控制
*** 数据库系统阶段
	1. 数据集成（存放在一起）
	2. 数据共享性高 （不同的应用可以使用同一部分数据）
	3. 数据冗余度低 （数据可复用）
	4. 数据一致性（保证数据不会出错）
	5. 数据独立性高（数据跟应用分开）
	6. 统一管理于控制（由DBA管理）
** 数据库系统的结构
   **必考**
*** 数据库系统的三级 **模式** 结构
	1. 模式
	   描述库中数据的 **逻辑** 结构和 **特征** 。
	   1. 概念模式
		  描述数据的结构的逻辑，称为概念。
	   2. 逻辑模式
	2. 外模式
	   又叫 **子模式(SbuScheme)**
	   DBMS提供子模式描述语言。
	3. 内模式
	   又称为存储模式
	   用于描述数据库中数据 **物理** 结构和 **存储方式** 的描述。
	4. 三级模式结构的两层映像与数据独立性
	   1. 外模式/模式映像（逻辑独立性）
		  保证数据库设计变化但是处理数据的逻辑不需要变化
	   2. 模式/内模式映像（物理独立性）
		  保证数据跟应用独立
*** 数据库系统的运行于应用结构
	1. C/S
	   例如Emasc Daemon
	2. B/S
	   例如4399
** 数据模型
*** 数据特性与数据模型组成要素
	1. 数据结构
	   例如树形，队列，链式
	   用于描述系统的 **静态特征**
	2. 数据操作
	   用于描述系统的 **动态特征**
	3. 数据约束条件
	   限制数据间的语法和语义关联
	   保证数据库正确，有效，相容性
*** 数据模型的分类
	1. 概念层数据模型
	   1. 实体(Entity)
		  可以单独区分的事物，例如微信中的用户和朋友圈之间的关系。
		  客观存在并可相互区别的事物称为实体。
	   2. 属性(Attribute)
		  实体具有某一特性叫做属性，例如人这个实体有名字，身高，性别等。
	   3. 码(Key)
		  唯一标识实体的属性集，例如想在国内找到一个人，可以通过身份证号来筛选。
	   4. 域(Domain)
		  属性的取值范围，例如一个人的出生月份只能是1-12月，不能超过也不能是零或负数。
	   5. 实体型(Entity Type)
		  用实体名及其属性名集合到一起抽象刻画，同类实体就可称为实体型。
	   6. 实体集(Entity Set)
		  实体型的集合称为实体集
	   7. 联系(Relationship)
		  实体型间的联系:
		  - 1 VS 1 :: 一对一
			一人一个身份证
		  - 1 VS n :: 一对多
			一个人可以有多个子女
		  - n VS n :: 多对多
			多个人可以选多门不同的课程
	   8. 概念模型的表示方法
		  用来描述现实世界的事物，与具体计算机系统无关。
		  例如E-R图：
		  - 实体 :: 矩形
		  - 联系 :: 菱形
		  - 属性 :: 椭圆
	2. 逻辑层数据模型
	   1. 层次模型
	   2. 网状模型
	   3. **关系模型**
	   4. 面向对象模型
	3. 物理层数据模型
	   也就是硬件那些
**** 总结
	 三层模型，从上到下 概念->逻辑->物理
	 两层映像，概念->外模式 | 逻辑->模式 | 物理->内模式
* 关系数据库
** 关系数据库概述
   常用系统:
   - ORACLE :: 占有率最高
   - MYSQL :: 开源
   - IBM DB2 :: 工业行业常用
** 关系数据模型
   **关系也就是二维表格**
*** 关系数据结构
	基本术语:
	1. 表(Table)
	   由表名，以及表的列（学号，姓名），行的数据（一个学生的信息）组成。
	2. 关系(Relation)
	   一个关系在逻辑上对应一张二维表。
	3. 列(Column)
	   表中的列，称作 **字段(Filed)或属性(Attribute)** ， 每一列都有一个名称，也就是字段名或列名或属性名，每一列代表实体的一个属性。
	4. 属性(Attribute)
	   一列即一属性，表中属性个数成为关系的元或度，属性值的取值范围称为值域。
	5. 行(Row)
	   称为元组(Tuple)，也就是属性的集合，也可以称为记录(Record)
	6. 元组(Tuple)
	   例如学生表中一行的记录，也就是一个学生的所有信息。
	7. 分量(Componetn)
	   元组中的一个属性值。
	8. 码或键(Key)
	   作为标识一条元祖信息的唯一标识。
	9. 超码或超键(Super Key)
	   即基于某个码去除其中一个条件但仍然可以作为唯一标识的称为超码。
	10. 候选码或候选键(Candidate Key)
		超码的反义，基于某个码中去除其中一个就能作为唯一标识的码称为候选码。
	11. 主码或主键(Primary Key)
		从候选码中挑选一个唯一标识关系的码。
	12. 全码或全建(All-Key)
		如果把所有属性组合在一起可以组成主码，但是去掉一个就不能作为主码的叫做全码。
	13. 主属性(Primary Attribute)和非主属性(Nonprimary Attribute)
		表中存在任何一个候选码中的属性称为主属性或码属性，不包含则称为非主属性或非码属性
	14. 外码和外键(Foreign Key)
		当表中某个字段（或元组）不是当前表的主码或候选码，而是另外一个表的主码时，那么就为另外标的外码或外键。
	15. 参照关系(Referencing Relation)及被参照关系(Referenced Relation)
		例如表A的1字段是表B的外键4字段，那么表A就是表B的参照关系，而被参照关系反之。
	16. 域(Domain)
		域表示属性的取值范围
	17. 数据类型(Data Type)
		用于指定字段存放数据的类型，例如编号字段的数据类型可以是整型，而邮箱字段可以是字符串类型类型。
	18. 关系模式(Relation Schema)
		算是一种表示方式，例如可以将学生表表生成:
		学生(学号，年龄，入学时间，家庭地址，籍贯)
		#+begin_quote
		表名(字段名...)
		#+end_quote
	19. 关系数据库(relation Database)
		以关系模式作为数据的逻辑模型，并采用关系作为数据组织方式作为数据组织方式的一种数据库。
*** 关系操作集合
	1. 基本的关系操作
	   1. 查询
		  选择、投影、连接、除、并、交、差、笛卡尔积
	   2. 数据更新
		  插入、删除、修改
	   3. 关系操作的特点
		  集合操作方法，即操作的对象和结果都是集合。
	2. 关系数据语言的分类
	   分为两类，分别是:
	   1. 代数方式
		  代数方式主要为 **关系代数**，通过对关系的操作来查询要求方式。
		  1. 关系代数
			 1. 集合运算符
				数据:
				#+begin_center
				A={1,2,3,4}
				B={3,4,5,6}
				#+end_center
				1. 并集 
				   #+begin_center
				   A 并 B
				   并 = {1,2,3,4,5,6}
				   #+end_center
				2. 差
				   #+begin_center
				   A 差 B
				   差 = {1,2}
				   #+end_center
				3. 交
				   #+begin_center
				   A 交 B
				   交 = {3,4}
				   #+end_center
				4. 笛卡尔积
				   #+begin_center
				   A 笛卡尔积 B
				   笛卡尔积 = {[1,3],[1,4],[1,5],[1,6],[2,3],[2,4],[2,5],[2,6],...[4,3],[4,4]}
				   #+end_center
			 2. 专有的关系运算符
				1. 选择(SELECT)
				   行变，列不变
				   ~SELECT 表名 WHERE 条件~
				2. 投影(PROJECTION)
				   行不变，列变
				   ~PROJECTION 表名(字段名)~
				3. 连接(JOIN)
				   像笛卡尔积加条件
				   ~JOIN 表1 AND 表2 WHERE 条件~
				4. 除(DIVISION)
				   笛卡尔积的逆运算
			 3. 比较操作
				
			 4. 逻辑操作
	   2. 逻辑方式
	3. 关系的完整性约束
	   1. 实体完整性约束
		  关系必须有一个主属性
	   2. 参照完整性约束
		  保证多个实体之间必须存在某种联系
		  用来保证多个关系之间属性的完整性
	   3. 用户定义完整性约束
		  针对某场景的完整性约束条件
	   4. 关系模型完整性约束的检验
		  1. 执行插入
		  2. 执行查询
		  3. 执行删除
** 关系数据库的规范理论 重点
*** 关系模式中存在的冗余和异常问题
**** 数据冗余
**** 更新异常
**** 插入异常
**** 删除异常
*** 函数依赖与关键字
	函数依赖是指 **关系中属性间的对应关系**
	 下面有几种依赖的定义，每个依赖都不同，将会一一说明=。
	 1. 完全函数依赖
	   举例说明：
	   #+begin_center
	   现有学生选课关系SC(SNO,CNO,CTITLE,INAME,IPLACE,GRADE)，其中有(SNO,CNO)->GRADE完全依赖关系，因为学生成绩必须由学号和课程号同时满足此依赖，也就是说少了学号就无法判断此课程的成绩算
	   谁的，反之亦然。
	   #+end_center
	 2. 部分函数依赖
		此种依赖关系跟完全函数依赖很像，以上面的举例假设说明，(SNO,CNO)->GRADE关系，上面的完全函数依赖是指SNO,CNO缺一不可，而部分函数依赖则是只需要其中一个就可以满足->GRADE的依赖关系。
	 3. 传递函数依赖
		数学表示: 设R为任一给定关系，X,Y,Z为其不同属性子集，若X->Y,Y-x>X(-x>代表不满足依赖定义),Y->Z，那么X->Z，称为Z传递函数依赖于X。
		例子: 书本管理表BOOKS(BNO,PNAME,PADDRESS)，属性含义分别是，书号，出版社名，出版社地址，其中书号可以决定出版社名，出版社名可以决定出版社地址，正好满足传递函数依赖，
		BNO->PNAME PNAME-x>BNO PNAME->PADDRESS		
*** 范式于关系规范化过程
	
* 数据库设计
** 数据库设计概述
   本章介绍数据库设计的特点、方法于过程，其中关系数据库的结构设计是本章的学习重点。
*** 数据库的生命周期
	从数据库演变过程看，分为两个阶段:
 	1. 数据库分析与设计
	   1. 需求分析
	   2. 概念设计
	   3. 逻辑设计
	   4. 物理设计
	2. 数据库实现与操作
	   1. 实现
	   2. 操作
	   3. 监督
	   4. 修改
	   5. 调整
*** 数据库设计的目标
	1. 满足功能需求
	   增删改查
	2. 数据库性能
	   保证数据完整性，共享性，一致性，安全保密性。
*** 数据库设计的内容
	1. 数据库结构设计
	   静态的，用来定义数据库的组成方式，一般定义好后不会随意更改。
	   - 概念结构
	   - 逻辑结构
	   - 物理结构
	2. 数据库行为设计
	   由应用程序实现，动态的，用来操作数据库中的数据。
*** 数据库设计的方法
	1. 直观设计法
	   特点：根据经验设计数据库模式
	   缺点：缺乏科学理论的指导，设计的质量无法保证。
	2. 规范设计法
	   常用，普遍，有三种
	   1. 新奥尔良(New Orleans)设计方法
		  优点：规范，权威，公认的好设计方法
		  特点：注重数据库结构设计，行为设计不太在意。
		  设计阶段：
		  1. 需求分析
		  2. 概念结构设计
		  3. 逻辑结构设计
		  4. 物理结构设计
	   2. 基于E-R模型的数据库设计方法
		  优点：有模型图可看
	   3. 基于第三范式的设计方法
		  是一种结构化设计方法，思想为：在需求分析基础上提前确定数据库的模式，属性，及属性间的依赖关系，随后将其组织在一个单一的关系模式中，如果模式中存在
		  不符合第三范式的约束条件，则进行分解。
	3. 计算机辅助设计方法
	   以数据库领域专家的知识或经验为主导，然后通过一些应用程序辅助设计，例如CASE，以及Rotaional的Rose。
*** 数据库设计的过程
	分为以下几个阶段:
	1. 需求分析阶段
	2. 结构设计阶段
	   - 概念结构设计
	   - 逻辑结构设计
	   - 物理结构设计
	3. 行为设计阶段
	   1. 功能设计
	   2. 事务设计
	   3. 程序设计
	4. 实施阶段
	   1. 加载数据
	   2. 调试运行
	5. 运行维护阶段
** 数据库设计的基本步骤
   目前分阶段规范设计方法已在数据库设计中得到广泛应用，通过自顶向下，逐步求精的原则，将数据库设计分为以下几个步骤，下面将会详细盘点。
   #+begin_quote
   由于数据库设计将结构设计阶段跟行为设计阶段划分的很开，所以本章侧重于结构设计阶段。
   #+end_quote
*** 第一步-需求分析
	目标: 了解、分析客户要求，并且按照一定格式整理为一个需求分析报告，这个报告在后面的结构设计阶段有大大滴用处。
	主要分为四个步骤:
	1. 确定数据库范围
	   大白话解释: 确定数据库是拿来干嘛的，用处是啥。
	   注意事项: 数据库设计应该尽可能的让其有更广泛的应用领域，但是越广泛意味着更复杂，更复杂意味着成本的提高，所以我们必须在实现客户的基本需求之上再提升数据库的应用场景。
	2. 应用过程分析
	   大白话解释: 对应着行为设计那部分的，主要是提前了解分析到时候数据要如何处理。
	   其他: 应用过程分析可以借助流程图等软件来进行设计。
	3. 收集与分析数据
	   定义: 作用是了解并分析数据的组成格式及操作特性，确定每个数据元素的语义及关系，并将其收集起来归档。
	   数据有两种结构，分为静态和动态，并且我们还需要有其他的特殊要求：
	   1. 静态结构
		  静态结构是指不施加应用操作于数据上时，数据的原始状况。这些静态信息可以由数据分类表和数据元素表进行说明。
		  - 数据分类表
			对数据的总体描述，例如学生数据表可以有以下说明:
			| 数据ID | 数据名 | 用途 | 主人 | 用户 | 来源 | 去向 | 存档时间 | 数据量 |
			这些静态信息足以提供数据的相关信息。
		  - 数据元素表
			元素表用以记录每个数据列的说明，例如下表:
			| 数据ID | 数据元素ID | 元素名 | 意义 | 类型 | 长度 | 算法 | 备注 |
	   2. 动态结构
		  动态结构是指将应用操作施加于数据之上后数据的情况，可通过任务分类表和数据操作特征表进行描述。
		  - 任务分类表
			如果根据数据流程图的分析，可将业务处理过程划分为不同任务。
			| 任务ID | 名称 | 功能 | 类型 | 主人 | 用户 | 执行日期 | 频率 | 操作过程 | 备注 |
			类型属性可分为输入、查询、制表、统计、修改、删除等;频率为此项任务执行次数。
		  - 数据操作特征表
			数据操作特征表用以描述任务和数据之间的关系。
	   3. 数据约束 
		  数据约束用于指定使用数据时的特殊要求，有以下几个点:
		  - 安全保密性
			针对各种不同类型数据，谁拥有什么操作（增删改查）的权限。
		  - 数据的完整性
			保证数据的正确性，通过取值范围和验证准则进行保护。
		  - 响应时间
			某些特定应用要求数据存取时间限制。
		  - 数据恢复
			当数据需要转储及恢复的时机与范围要求。
	4. 编写需求分析报告
	   需求分析报告通常由以下内容组成:
	   - 数据库的应用功能目标
	   - 标明不同用户视图的范围
	   - 应用处理过程需求说明
		 - 数据流程图
		 - 任务分类表
		 - 数据操作特性表
		 - 操作过程说明书
	   - 数据字典
		 (DAta Dictionary,DD)，是数据库系统中存储三级结构定义的数据库，通常指的是数据库系统中各类数据详细描述的集合。
	   - 数据量
	   - 数据约束
*** 第二步-概念结构设计
	特点: 不受DBMS限制，纯概念。
	目标: 基于需求分析作最大限度满足应用需求
*** 逻辑结构设计
	目标: 设计基于概念模型以及为特定DBMS中所支持数据模型的结构。
	逻辑模型的数据模型表示有层次，网状，关系几种。
	1. 逻辑结构设计的输入与输出信息
	   - 输入信息:
		 1. 独立与特定DBMS的概念模型
		 2. 有关响应时间、安全保密性，数据完整性的要求说明，包括保持数据一致性的规则说明。
		 3. 数据量及使用频率
		 4. 特定DBMS特性，包括DBMS支持的数据模型及数据定义的说明。
	   - 输出信息:
		 1. 一个特定DBMS支持的概念模式，又称之为模式。
		 2. 一个或多个外部视图，称之为子模式。
		 3. 物理设计说明，其主要包括存入数据库中的数据量，使用频率及响应时间要去。
** 关系数据库设计方法
* SQL与关系数据库基本操作
** SQL概述
** MySQL预备知识
** 数据定义
** 数据更新
** 数据查询
** 视图
* 数据库编程
** 存储过程
** 存储函数
* 数据库安全与保护
** 数据库完整性
** 触发器
** 安全性与访问控制
** 事务与并发控制
** 备份与恢复
* 数据库应用设计与开发实例
** 需求描述与分析
** 系统设计
* 数据管理技术的发展
** 数据库技术发展概述
** 数据仓库与数据挖掘
** 大数据管理技术


   
