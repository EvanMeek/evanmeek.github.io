#+SETUPFILE: ../theme-rose.setup
#+DATE: <2020-12-04 Fri>
#+TITLE: The-CPP-Programming-Language-NOTE

* 书中生词/字记录
  - 擘划
    bo(4) hua(4)
  - 遴选
    lin(2) xuan(3)

* 值得记录的句子
  * 4th前言-第4段
    #+begin_quote
    C++是一种通用程序设计语言，它强调富类型，轻量级抽象的设计和使用。
    #+end_quote
  * 4h前言-第2页-第4段-最后一句话
    #+begin_quote
    计算机是一种通用机器，而C++在其中起着重要作用。特别是，C++的设计目标就是足够灵活和通用，以便处理那些连它的设计者都未曾想象过的未来难题。
    #+end_quote
  * p6-第7段-第3-4句话
    #+begin_quote
    书中的主要程序片段都已在多个C++实现上进行了实验，那些使用了新特性的代码在某些编译器上会编译失败。但我认为指出某某编译器不能编译某某例子没有什么意义，这些信息很快就会过时，因为编译器设计者都在努力工作以确保他们的编译器能正确支持所有C++特性。
    #+end_quote
  * p6-第8段-第1句话
    #+begin_quote
    当我发现在某个地方C++11特性最适合时，我就会使用C++11特性。例如，我倾向于使用{}风格的初始化方式以及使用using定义类型别名。有时，这些用法可能会让“老程序员”惊讶。但是，惊讶通常是促使你学习新知识的很好的诱因。
    #+end_quote
    我就是看了FinalCut的示例代码，代码中用到了using定义类型别名和使用{}风格的初始化方式而看不懂才来看这本书的，果然被作者说中了！
  * p7-第1段-最后一句话
    #+begin_quote
    C++的设计理念是同时提供
    1. 将内置操作和内置类型直接映射到硬件，从而提供高效的内存利用和高校的底层操作。
    2. 灵活且低开销的抽象机制，使得用户自定义类型无论是符号表达，使用范围还是性能都与内置类型相当。   
    #+end_quote
    这应该就是为什么C++十分强大，但执行速度又非常高的原因了吧。
  * p11-第2段-第1-2句话
    #+begin_quote
    我们用来思考/编程的语言与我们能够想象的问题/解决方案的联系是非常紧密的。为此，以消除程序员的错误为目的的限制语言特性是无意义的，最好情况也只是一种危险的理念。
    #+end_quote
    这句话我觉得作者是在抨击一些编程语言，例如很多现代编程语言都提供了动态类型，不再需要指明变量的类型，这算不算是“以消除程序员的错误为目的的限制语言特性”呢？有待思考。
  * p13-第1段-第2句话
    #+begin_quote
    一个精心设计的用户自定义类型与内置类型的区别仅仅在于定义的方式，而使用方式则是完全一样的。
    #+end_quote
    


