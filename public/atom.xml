<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我不会编程的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://evanmeek.github.io/"/>
  <updated>2019-09-22T07:59:47.281Z</updated>
  <id>https://evanmeek.github.io/</id>
  
  <author>
    <name>EvanMeek</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Python-04]Python列表、元组、字典和集合</title>
    <link href="https://evanmeek.github.io/2019/09/08/Python-04-Python%E5%88%97%E8%A1%A8%E3%80%81%E5%85%83%E7%BB%84%E3%80%81%E5%AD%97%E5%85%B8%E5%92%8C%E9%9B%86%E5%90%88/"/>
    <id>https://evanmeek.github.io/2019/09/08/Python-04-Python列表、元组、字典和集合/</id>
    <published>2019-09-08T07:00:28.000Z</published>
    <updated>2019-09-22T07:59:47.281Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是序列，Python序列详解（包括序列类型和常用操作）"><a href="#什么是序列，Python序列详解（包括序列类型和常用操作）" class="headerlink" title="什么是序列，Python序列详解（包括序列类型和常用操作）"></a>什么是序列，Python序列详解（包括序列类型和常用操作）</h1><p>序列：一块可存放多个且连续的内存空间，并且这些值有顺序，可通过索引进行访问。</p><p>常见的序列有: 字符串、列表、元组、集合和字典。</p><p>这些常见的序列，除了集合和字典不支持索引、切片、相加和相乘的操作，其余的都可以。</p><h2 id="序列索引"><a href="#序列索引" class="headerlink" title="序列索引"></a>序列索引</h2><p>索引就是一个序列中每个元素的编号。第一个元素的索引是0，也就是说想要访问某个序列的第一个元素，那么它的索引就是0，而想要访问最后一个元素，那么它的索引就是序列长度-1</p><p>索引还分为正索引值和负索引值，它们的区别仅仅在于访问方式不同。</p><p><strong>注意:</strong></p><ul><li><p>正索引值的起始位置是0，结束位置是序列长度-1</p></li><li><p>负索引值的起始位置是-1,结束位置是-(序列长度-1)</p></li></ul><p>例子:</p><p><strong>根据索引访问序列元素</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str = &quot;Hello World&quot;</span><br><span class="line">print(&quot;str 的第一个字符是:%s，最后一个字符是:%s&quot; % (str[0],str[len(str)-1]))</span><br></pre></td></tr></table></figure><p>输出结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str 的第一个字符是:H，最后一个字符是:d</span><br></pre></td></tr></table></figure></p><h2 id="序列切片"><a href="#序列切片" class="headerlink" title="序列切片"></a>序列切片</h2><p>刚刚我们通过索引值进行访问序列元素，那么序列切片也是可以做到的，它可以访问某个范围内的元素。</p><p>语法格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sname[start:end:step]</span><br></pre></td></tr></table></figure><ul><li><p>sname:序列名称</p></li><li><p>start:切片开始的索引位置（包括该位置），此参数可不指定，默认为0。</p></li><li><p>end:切片结束的索引位置(不包括该位置)，此参数可不指定，默认为序列的长度。</p></li><li><p>step:切片的范围，也就是每次取元素时，要隔多少个位置，此参数可不指定，可以直接忽略最后一个冒号</p></li></ul><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str = &quot;Hello World&quot;</span><br><span class="line"># 获取整个字符串</span><br><span class="line">print(str[:])</span><br><span class="line"># 从索引4开始，一直到最后一个，没隔2个字符取一次。</span><br><span class="line">print(str[4::2])</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello World</span><br><span class="line">oWrd</span><br></pre></td></tr></table></figure><h2 id="序列相加"><a href="#序列相加" class="headerlink" title="序列相加"></a>序列相加</h2><p>序列可以使用<code>+</code>运算符，进行相加操作，他会将两个序列进行连接，但不会去除重复的元素。</p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1=&quot;hello&quot;</span><br><span class="line">str2=&quot;world&quot;</span><br><span class="line">print(str1+str2)</span><br></pre></td></tr></table></figure><p>输出结果:<code>helloworld</code></p><h2 id="序列相乘"><a href="#序列相乘" class="headerlink" title="序列相乘"></a>序列相乘</h2><p>使用<code>*</code>运算符，可以将序列的元素进行重复。</p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 = &quot;hello\t&quot;</span><br><span class="line">print(str1*3)</span><br></pre></td></tr></table></figure><p>输出结果:<code>hello    hello    hello</code></p><p><strong>tips:可以使用序列相乘，创建指定长度空列表</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test_list = [None]*5</span><br></pre></td></tr></table></figure><h2 id="检查元素是否包含在序列中"><a href="#检查元素是否包含在序列中" class="headerlink" title="检查元素是否包含在序列中"></a>检查元素是否包含在序列中</h2><p>使用<code>in</code>关键字可以检查序列中的元素是否存在。 </p><p>语法格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value in sequence</span><br></pre></td></tr></table></figure><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1=&quot;Hello&quot;</span><br><span class="line">print(&apos;o&apos; in str1)</span><br></pre></td></tr></table></figure><p>输出结果: <code>True</code></p><p><strong>tips:使用<code>not in</code>关键字可以检查是否不存在</strong></p><h2 id="和序列相关的内置函数"><a href="#和序列相关的内置函数" class="headerlink" title="和序列相关的内置函数"></a>和序列相关的内置函数</h2><p>Python提供了几个用于操作序列的内置函数，可以很方便的操作序列。</p><p><img src="/2019/09/08/Python-04-Python列表、元组、字典和集合/Python序列内置函数.png" alt="Python序列内置函数"></p><h1 id="Python-list列表详解"><a href="#Python-list列表详解" class="headerlink" title="Python list列表详解"></a>Python list列表详解</h1><p>Python提供了一种数据结构————<code>list</code>(列表)</p><p><strong>列表可以存储多个不同数据类型的元素。</strong></p><h2 id="Python创建列表"><a href="#Python创建列表" class="headerlink" title="Python创建列表"></a>Python创建列表</h2><p>创建列表分为两种方式</p><p>使用<code>=</code>运算符创建列表</p><p>语法格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listname = [element1,element2...elementn]</span><br></pre></td></tr></table></figure><p>listname: 列表的名称</p><p>element1: 列表的元素</p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个列表</span><br><span class="line">test_list1 =[&quot;one&quot;,1,True,1.0]</span><br><span class="line">print(test_list1)</span><br><span class="line"># 创建一个空列表</span><br><span class="line">empty_list = []</span><br><span class="line">print(empty_list)</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&apos;one&apos;, 1, True, 1.0]</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><p><strong>使用list()函数创建列表</strong></p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1=&quot;HelloWorld&quot;</span><br><span class="line">test_list = list(str1)</span><br><span class="line">print(test_list)</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&apos;H&apos;, &apos;e&apos;, &apos;l&apos;, &apos;l&apos;, &apos;o&apos;, &apos;W&apos;, &apos;o&apos;, &apos;r&apos;, &apos;l&apos;, &apos;d&apos;]</span><br></pre></td></tr></table></figure><h2 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h2><p>两种方式：通过索引访问和通过切片访问。</p><h2 id="删除列表"><a href="#删除列表" class="headerlink" title="删除列表"></a>删除列表</h2><p>不常用，因为Python具有垃圾回收机制，有些不需要再使用的列表将会自动回收。</p><p>使用<code>del</code>关键字进行删除</p><p>语法格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del listname</span><br></pre></td></tr></table></figure><p><strong>注意:删除后的列表不能再次使用</strong></p><h1 id="Python-list列表添加元素的3种方法"><a href="#Python-list列表添加元素的3种方法" class="headerlink" title="Python list列表添加元素的3种方法"></a>Python list列表添加元素的3种方法</h1><h2 id="Python-append-方法添加元素"><a href="#Python-append-方法添加元素" class="headerlink" title="Python append()方法添加元素"></a>Python append()方法添加元素</h2><p><code>append()</code>方法在列表的末尾追加元素。</p><p>语法格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listname.append(obj)</span><br></pre></td></tr></table></figure><p>listname代表要添加元素的列表;obj代表要添加到列表末尾的数据。</p><p>obj可以是单个元素，也可以是其他序列。</p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 追加单个元素</span><br><span class="line">list1 = [0,1,2,3]</span><br><span class="line">print(list1)</span><br><span class="line">list1.append(4)</span><br><span class="line">print(list1)</span><br><span class="line"># 追加一个列表</span><br><span class="line">list2 = [5,6,7,8]</span><br><span class="line">print(list2)</span><br><span class="line">list1.append(list2)</span><br><span class="line">print(list1)</span><br></pre></td></tr></table></figure><p>输出结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[0, 1, 2, 3]</span><br><span class="line">[0, 1, 2, 3, 4]</span><br><span class="line">[5, 6, 7, 8]</span><br><span class="line">[0, 1, 2, 3, 4, [5, 6, 7, 8]]</span><br></pre></td></tr></table></figure></p><p><strong>注意:使用append()函数时，如果是传递的单个数据，将会直接追加到列表后，但是如果传入的是个列表（序列），那么则会追加一个列表形式的元素。</strong></p><p>想要访问刚刚追加的列表元素的其中一个可以这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = [0,1,2]</span><br><span class="line">list2 = [3,4,5]</span><br><span class="line">list1.append(list2)</span><br><span class="line">print(list1[3][2])</span><br></pre></td></tr></table></figure><p>输出结果:<code>5</code></p><h2 id="Python-extend-方法添加元素"><a href="#Python-extend-方法添加元素" class="headerlink" title="Python extend()方法添加元素"></a>Python extend()方法添加元素</h2><p>刚刚我们使用<code>append()</code>函数追加了个列表元素，但是并没有像添加单个字符一样作为一个整体添加，而我们只需要使用<code>extend()</code>方法就可以将列表以整体的方式添加进去。</p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list1 = [0,1,2,3]</span><br><span class="line">print(list1)</span><br><span class="line">list2 = [5,6,7,8]</span><br><span class="line">print(list2)</span><br><span class="line">list1.extend(list2)</span><br><span class="line">print(list1)</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[0, 1, 2, 3]</span><br><span class="line">[5, 6, 7, 8]</span><br><span class="line">[0, 1, 2, 3, 5, 6, 7, 8]</span><br></pre></td></tr></table></figure><h2 id="Python-insert-方法插入元素"><a href="#Python-insert-方法插入元素" class="headerlink" title="Python insert()方法插入元素"></a>Python insert()方法插入元素</h2><p>需要指定插入列表元素的位置时，可以使用insert()方法。</p><p>语法格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listname.insert(index,obj)</span><br></pre></td></tr></table></figure><p>index: 将obj插入到listname列表的索引</p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test_list1 = list(range(1,11))</span><br><span class="line">print(test_list1)</span><br><span class="line"></span><br><span class="line">print(len(test_list1))</span><br><span class="line">test_list1.insert(len(test_list1),11)</span><br><span class="line">print(test_list1)</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span><br><span class="line">10</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]</span><br></pre></td></tr></table></figure><h2 id="Pyhton-list列表删除元素-3种方法"><a href="#Pyhton-list列表删除元素-3种方法" class="headerlink" title="Pyhton list列表删除元素(3种方法)"></a>Pyhton list列表删除元素(3种方法)</h2><blockquote><p>del删除</p></blockquote><p><strong>del语句在Python中可以删除变量、列表的元素</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test_list = list(range(1, 11))</span><br><span class="line">print(test_list)</span><br><span class="line">del test_list[1::2]</span><br><span class="line">print(test_list)</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span><br><span class="line">[1, 3, 5, 7, 9]</span><br></pre></td></tr></table></figure><blockquote><p>根据元素值进行删除</p></blockquote><p>可以使用remove()方法来删除列表元素。</p><p>删除第一个被查找到的元素。</p><p><strong>注意:remove()方法不是根据索引来删除元素的，而是查找元素本身，再进行删除，所以如果找不到元素，则会报错</strong></p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test_list = [&apos;test&apos;, 30, &apos;test2&apos;, 10, 30]</span><br><span class="line">test_list.remove(&apos;test&apos;)</span><br><span class="line">test_list.remove(30)</span><br><span class="line">print(test_list)</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&apos;test2&apos;, 10, 30]</span><br></pre></td></tr></table></figure><blockquote><p>删除列表所有元素</p></blockquote><p>使用clear()方法可以删除列表的所有元素。</p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test_list = [&apos;test&apos;, 30, &apos;test2&apos;, 10, 30]</span><br><span class="line">test_list.clear()</span><br><span class="line">print(test_list)</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[]</span><br></pre></td></tr></table></figure><h1 id="Python-list列表修改元素"><a href="#Python-list列表修改元素" class="headerlink" title="Python list列表修改元素"></a>Python list列表修改元素</h1><p>修改列表元素，可以通过列表索引获取元素进行赋值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">testlist = list(range(1,10))</span><br><span class="line">print(testlist)</span><br><span class="line">testlist[len(testlist)-1] = 100</span><br><span class="line">print(testlist)</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8, 100]</span><br><span class="line"></span><br><span class="line">[Process exited 0]</span><br></pre></td></tr></table></figure><p>使用slice语法对列表部分进行赋值。</p><p>slice语法，不要求新赋值的元素个数与原来的元素个数相等。也就是说使用slice剩余法既可以为列表增加元素，也可以为列表删除元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">b_list = list(range(1,5))</span><br><span class="line">print(b_list)</span><br><span class="line"></span><br><span class="line">b_list[1:3] = [&apos;a&apos;,&apos;b&apos;]</span><br><span class="line">print(b_list)</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4]</span><br><span class="line">[1, &apos;a&apos;, &apos;b&apos;, 4]</span><br></pre></td></tr></table></figure><h1 id="Pyhthon-list常用方法-count、index、pop、reverse和sort-快速攻略"><a href="#Pyhthon-list常用方法-count、index、pop、reverse和sort-快速攻略" class="headerlink" title="Pyhthon list常用方法(count、index、pop、reverse和sort)快速攻略"></a>Pyhthon list常用方法(count、index、pop、reverse和sort)快速攻略</h1><p>Pyhton为list提供了一些常用的方法。</p><p>我们使用dir(list)方法可以看到列表包含的所有方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(dir(list))</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">6 _&apos;, &apos;__iter__&apos;, &apos;__le__&apos;, &apos;__len__&apos;, &apos;__lt__&apos;, &apos;__mul__&apos;, &apos;__ne__&apos;, &apos;__new__&apos;,</span><br><span class="line">5 &apos;__reduce__&apos;, &apos;__reduce_ex__&apos;, &apos;__repr__&apos;, &apos;__reversed__&apos;, &apos;__rmul__&apos;, &apos;__setat</span><br><span class="line">4 tr__&apos;, &apos;__setitem__&apos;, &apos;__sizeof__&apos;, &apos;__str__&apos;, &apos;__subclasshook__&apos;, &apos;append&apos;, &apos;c</span><br><span class="line">3 lear&apos;, &apos;copy&apos;, &apos;count&apos;, &apos;extend&apos;, &apos;index&apos;, &apos;insert&apos;, &apos;pop&apos;, &apos;remove&apos;, &apos;reverse&apos;</span><br><span class="line">2 , &apos;sort&apos;]</span><br></pre></td></tr></table></figure><p><strong>注意，方法名包含双下划线的不推荐使用</strong> </p><h2 id="count-方法"><a href="#count-方法" class="headerlink" title="count()方法"></a>count()方法</h2><p>count()方法用于统计列表中某个元素出现的次数</p><p>语法格式</p><p><code>listname.count(obj)</code> </p><p>listname:列表名称</p><p>obj:表示判断是否存在的元素</p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a_list = [2]*5</span><br><span class="line">print(a_list)</span><br><span class="line">print(&quot;2出现%d次&quot; % a_list.count(2))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[2, 2, 2, 2, 2]</span><br><span class="line">2出现5次</span><br></pre></td></tr></table></figure><h2 id="index-用法"><a href="#index-用法" class="headerlink" title="index()用法"></a>index()用法</h2><p>index()方法用于定位某元素在列表的索引位置，如果该元素没有出现，则会引发ValueError错误。 </p><p>语法格式:</p><p><code>listname.index(obj,start,end)</code></p><p>index()方法可以传入start,end参数，用于指定在列表的某范围内搜索元素</p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test_list = list(range(1,10))</span><br><span class="line">print(test_list)</span><br><span class="line">print(test_list.index(9))</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line">8</span><br></pre></td></tr></table></figure><h2 id="pop用法"><a href="#pop用法" class="headerlink" title="pop用法"></a>pop用法</h2><p>pop()方法会溢出列表中指定索引处的元素，如果没有传入参数，则会移除列表中最后一个元素。</p><p>语法格式:</p><p><code>listname.pop(index)</code> </p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">test_list = list(range(1,10))</span><br><span class="line">print(test_list)</span><br><span class="line"># 默认移除最后一个元素</span><br><span class="line">test_list.pop()</span><br><span class="line">print(test_list)</span><br><span class="line"># 移除第一次元素</span><br><span class="line">print(test_list.pop(0))</span><br><span class="line">print(test_list)</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8]</span><br><span class="line">1</span><br><span class="line">[2, 3, 4, 5, 6, 7, 8]</span><br></pre></td></tr></table></figure><h2 id="reverse-方法"><a href="#reverse-方法" class="headerlink" title="reverse()方法"></a>reverse()方法</h2><p>reverse()方法会将列表中所有元素反向存放。</p><p>语法格式;</p><p><code>listname.reverse()</code></p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test_list = list(range(1,11))</span><br><span class="line">print(test_list)</span><br><span class="line">test_list.reverse()</span><br><span class="line">print(test_list)</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span><br><span class="line">[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]</span><br></pre></td></tr></table></figure><h2 id="sort-用法"><a href="#sort-用法" class="headerlink" title="sort()用法"></a>sort()用法</h2><p>sort()方法用于对列表元素进行排序。</p><p>语法格式:</p><p><code>listname.sort(key=None,reserse=Fale)</code></p><ul><li><p>key参数用于指定从每个元素中提取一个用于比较的键。</p></li><li><p>reverse参数用于设置是否需要逆序，默认为False也就是从小打到排序，否则反之。</p></li></ul><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a_list = [123,213,1,325,1,51,213,5132,4156]</span><br><span class="line">print(a_list)</span><br><span class="line"># 对列表进行排序</span><br><span class="line">a_list.sort()</span><br><span class="line">print(a_list)</span><br><span class="line"># 逆序排序</span><br><span class="line">a_list.sort(reverse=True)</span><br><span class="line">print(a_list)</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[123, 213, 1, 325, 1, 51, 213, 5132, 4156]</span><br><span class="line">[1, 1, 51, 123, 213, 213, 325, 4156, 5132]</span><br><span class="line">[5132, 4156, 325, 213, 213, 123, 51, 1, 1]</span><br></pre></td></tr></table></figure><h1 id="Python-range-快速初始化数字列表"><a href="#Python-range-快速初始化数字列表" class="headerlink" title="Python range()快速初始化数字列表"></a>Python range()快速初始化数字列表</h1><p>Python的range()函数能够生成一系列的数字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for value in range(1,5):</span><br><span class="line">  print(value)</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>range()方法是指定从第一个值开始，生成连续的数字，直到指定的第二值为止(不包括第二个值)</p><p>range()方法可以指定步长，也就是说，每次连续增加时所增加的数值。</p><h1 id="Python-tuple元组详解"><a href="#Python-tuple元组详解" class="headerlink" title="Python tuple元组详解"></a>Python tuple元组详解</h1><p>与列表类似，元组也可以存储任何Python的数据类型，但元组是不可变的，一旦赋值则不可修改。</p><p>Python中，使用<code>()</code>小括号包住的一列数据，被称为元组，而各数据之间又由<code>,</code>逗号隔开。</p><p>元组的数据类型是:<code>tuple</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test_tuple = tuple(range(1,11))</span><br><span class="line">print(type(test_tuple))</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &apos;tuple&apos;&gt;</span><br><span class="line"></span><br><span class="line">[Process exited 0]</span><br></pre></td></tr></table></figure><h2 id="Python创建元组"><a href="#Python创建元组" class="headerlink" title="Python创建元组"></a>Python创建元组</h2><h3 id="运算符直接创建元组"><a href="#运算符直接创建元组" class="headerlink" title="= 运算符直接创建元组"></a>= 运算符直接创建元组</h3><p>可以使用赋值运算符<code>=</code>将一个元组赋值给变量。</p><p>语法格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuplename = (element1,element2...elementn)</span><br></pre></td></tr></table></figure><p>其中tuplename表示要创建的元组名,element代表元素。</p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">num_tuple = tuple(range(1,11))</span><br><span class="line">str_tuple = (&quot;Just A Test&quot;,)</span><br><span class="line">object_tuple = (&quot;a&quot;,1,2.22,num_tuple,list(range(1,5)))</span><br><span class="line"></span><br><span class="line">print(num_tuple)</span><br><span class="line">print(str_tuple)</span><br><span class="line">print(object_tuple)</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</span><br><span class="line">Just A Test</span><br><span class="line">(&apos;a&apos;, 1, 2.22, (1, 2, 3, 4, 5, 6, 7, 8, 9, 10), [1, 2, 3, 4])</span><br></pre></td></tr></table></figure><p><strong>注意</strong> :创建元组时，如果元组内只有一个元素，那么必须要在元素后加上一个逗号，否则Python解释器将会一位是字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test_str = (&quot;Just a Test&quot;)</span><br><span class="line">str_tuple = (&quot;Jest a Test&quot;,)</span><br><span class="line">print(type(test_str))</span><br><span class="line">print(type(str_tuple))</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &apos;str&apos;&gt;</span><br><span class="line">&lt;class &apos;tuple&apos;&gt;</span><br></pre></td></tr></table></figure><h3 id="使用tuple-函数创建元组"><a href="#使用tuple-函数创建元组" class="headerlink" title="使用tuple()函数创建元组"></a>使用tuple()函数创建元组</h3><p>Python提供了tuple()函数创建元组，我们可以将一些常见的对象，转化成元组。</p><p>语法格式:</p><p><code>tuple(iterable: Iterable[_T_co]=...)</code></p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test_list = list(range(1,21,2))</span><br><span class="line">test_tuple = tuple(test_list)</span><br><span class="line"></span><br><span class="line">print(type(test_list))</span><br><span class="line">print(type(test_tuple))</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &apos;list&apos;&gt;</span><br><span class="line">&lt;class &apos;tuple&apos;&gt;</span><br></pre></td></tr></table></figure><h2 id="Python访问元组元素"><a href="#Python访问元组元素" class="headerlink" title="Python访问元组元素"></a>Python访问元组元素</h2><p>可以通过元素的下标获取或通过切片操作获取。</p><h2 id="Python修改元组元素"><a href="#Python修改元组元素" class="headerlink" title="Python修改元组元素"></a>Python修改元组元素</h2><p>虽然前面提到元组是不可变序列，但还是可以通过一些手段进行修改元组内的数据。</p><h3 id="重新赋值"><a href="#重新赋值" class="headerlink" title="重新赋值"></a>重新赋值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test_tuple = tuple(range(1,6))</span><br><span class="line">print(test_tuple)</span><br><span class="line">test_tuple = tuple(range(1,20))</span><br><span class="line">print(test_tuple)</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(1, 2, 3, 4, 5)</span><br><span class="line">(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)</span><br></pre></td></tr></table></figure><h3 id="连接多个元组"><a href="#连接多个元组" class="headerlink" title="连接多个元组"></a>连接多个元组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test_tuple = tuple(range(1,6))</span><br><span class="line">print(test_tuple)</span><br><span class="line">test_tuple2 = tuple(range(6,11))</span><br><span class="line">test_tuple += test_tuple2</span><br><span class="line">print(test_tuple)</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(1, 2, 3, 4, 5)</span><br><span class="line">(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</span><br></pre></td></tr></table></figure><h2 id="Python删除元组"><a href="#Python删除元组" class="headerlink" title="Python删除元组"></a>Python删除元组</h2><p>若创建的元组不再使用可以使用<code>del</code>语句将其删除。</p><h1 id="Python元组和列表的区别"><a href="#Python元组和列表的区别" class="headerlink" title="Python元组和列表的区别"></a>Python元组和列表的区别</h1><p>本节讨论元组和列表的区别:</p><table><thead><tr><th>区别</th><th>元组</th><th>列表</th></tr></thead><tbody><tr><td>元素是否允许任意修改</td><td>❌</td><td>⭕</td></tr><tr><td>是否能作为map的key</td><td>⭕</td><td>❌</td></tr><tr><td>内存占用小</td><td>⭕</td><td>❌</td></tr></tbody></table><h1 id="Python列表和元组的底层实现"><a href="#Python列表和元组的底层实现" class="headerlink" title="Python列表和元组的底层实现"></a>Python列表和元组的底层实现</h1><p>这里就不记录笔记了，总的来说就是列表是一个长度可变且连续的内存空间，当列表的元素满了后，将会申请更多的内存空间，再将原本的内存空间拷贝过去。而元组则是一个空间带下固定且连续的内存空间。Python对元组进行了优化，例如为了避免系统老是释放和申请内存空间这一繁琐且耗时的操作，所以每次释放元组时其实是将其放入一个缓存中，如果下次还需要申请相同数据的元组，则可以直接从缓存中拿到。</p><p>具体介绍看这里<a href="http://c.biancheng.net/view/5360.html" target="_blank" rel="noopener">💿Python列表和元组的底层实现</a> </p><h1 id="Python-dict字典"><a href="#Python-dict字典" class="headerlink" title="Python dict字典"></a>Python dict字典</h1><p>dict字典属于可变序列，但是无序的序列，其内容是键值对的形式保存的。</p><p>键值对也可以称为映射，所以字典的值与键是互相对应的关系。</p><p>Python字典特征</p><table><thead><tr><th>特征</th><th>解释</th></tr></thead><tbody><tr><td>通过键读取元素</td><td>通过字典中的键来获取指定项，而不是通过索引获取</td></tr><tr><td>字典是任意数据类型的无序集合</td><td>和列表、元组不同，索引值可以通过数字获取对应的元素，而字典中的元素是无序的。</td></tr><tr><td>字典是可变的，并且可以任意嵌套</td><td>字典可以在原处增长或缩短，并且它支持任意深度的嵌套，即字典存储的值也可以是列表或其他字典</td></tr><tr><td>字典中的键必须是唯一的</td><td>字典中不允许出现相同的键，否则只会保留最后一个键值对</td></tr><tr><td>字典中的键必须是不可变的</td><td>字典中的值是不可变的，所以只能使用数字、或元组、字符串等，不能使用可变，例如可变序列：列表</td></tr></tbody></table><p><strong>Python中字典的数据类型为<code>dict</code></strong> </p><h2 id="Python创建字典"><a href="#Python创建字典" class="headerlink" title="Python创建字典"></a>Python创建字典</h2><h3 id="花括号语法创建字典"><a href="#花括号语法创建字典" class="headerlink" title="花括号语法创建字典"></a>花括号语法创建字典</h3><p>字典中每个元素都包含两个部分，分别是键和值。因此在创建字典元素时，需要在键和值之间以冒号<code>:</code>分隔，相邻元素之间使用逗号分隔，所有元素放下大括号<code>{}</code>间。</p><p>语法格式:</p><p><code>dictname = {&#39;key1&#39;:&#39;value&#39;,&quot;key2&quot;:&quot;value&quot;}</code></p><p>其中<code>dictname</code> 代表字典名，<code>key:value</code> 表示各个元素的键值对。</p><p>使用花括号创建字典例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test_dict = &#123;&quot;语文&quot;:80,&quot;数学&quot;:12&#125;</span><br><span class="line">print(test_dict)</span><br></pre></td></tr></table></figure><p>输出结果</p><p><code>{&#39;语文&#39;: 80, &#39;数学&#39;: 12}</code></p><h3 id="通过fromkey-方法创建字典"><a href="#通过fromkey-方法创建字典" class="headerlink" title="通过fromkey()方法创建字典"></a>通过fromkey()方法创建字典</h3><p>Python中使用dict字典类型提供的fromkeys()方法创建所有键值为空的字典。</p><p>语法格式</p><p><code>dictname=dict.fromkeys(list,value=None)</code> </p><p>list参数表示字典中键的列表，value参数默认为None，表示所有键对应的值。</p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">knowledge = &#123;&apos;语文&apos;,&apos;数学&apos;,&apos;英语&apos;&#125;</span><br><span class="line">scores = dict.fromkeys(knowledge,100)</span><br><span class="line">print(scores)</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&apos;语文&apos;: 100, &apos;英语&apos;: 100, &apos;数学&apos;: 100&#125;</span><br></pre></td></tr></table></figure><h3 id="通过dict-映射函数创建字典"><a href="#通过dict-映射函数创建字典" class="headerlink" title="通过dict()映射函数创建字典"></a>通过dict()映射函数创建字典</h3><p>dict()函数常用创建字典方法</p><p><img src="/2019/09/08/Python-04-Python列表、元组、字典和集合/./Python-04-Python列表、元组、字典和集合/dict(" alt="dict()函数创建字典">函数创建字典.png)</p><h2 id="Pyton访问字典"><a href="#Pyton访问字典" class="headerlink" title="Pyton访问字典"></a>Pyton访问字典</h2><p>dict()通过元素的键进行访问值，不能像列表或元组通过下标或切片的形式来访问。</p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test_dict = ([&apos;姓名&apos;,&apos;LTy&apos;],[&apos;性别&apos;,True])</span><br><span class="line">test_dict = dict(test_dict)</span><br><span class="line">print(type(test_dict))</span><br><span class="line">print(test_dict[&apos;姓名&apos;])</span><br><span class="line">print(test_dict.get(&quot;性别&quot;))</span><br></pre></td></tr></table></figure><h2 id="Python删除字典"><a href="#Python删除字典" class="headerlink" title="Python删除字典"></a>Python删除字典</h2><p>如需手动删除，可以使用del语句。</p><h1 id="Pythton-dict字典基本操作-包括添加、修改、删除键值对"><a href="#Pythton-dict字典基本操作-包括添加、修改、删除键值对" class="headerlink" title="Pythton dict字典基本操作(包括添加、修改、删除键值对)"></a>Pythton dict字典基本操作(包括添加、修改、删除键值对)</h1><p>本小节对字典实现常见的操作:</p><ul><li><p>向字典中添加新的键值对</p></li><li><p>修改字典中的键值对</p></li><li><p>从字典中删除指定的键值对</p></li><li><p>判断字典中是否存在指定的键值对</p></li></ul><hr><h3 id="Python字典添加键值对"><a href="#Python字典添加键值对" class="headerlink" title="Python字典添加键值对"></a>Python字典添加键值对</h3><p>为字典中添加新的键值对只需要为不存在的<code>key</code>赋值。</p><p>语法格式:</p><p><code>dict[key]= value</code> </p><p><code>dict</code>表示字典名称,<code>key</code>代表新建键值对的键,<code>value</code>代表新建键值对的值</p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test_dict = ([&apos;姓名&apos;,&apos;LTy&apos;],[&apos;性别&apos;,True])</span><br><span class="line">test_dict = dict(test_dict)</span><br><span class="line">test_dict[&apos;班级&apos;] = 502</span><br><span class="line">print(test_dict.get(&quot;班级&quot;))</span><br></pre></td></tr></table></figure><p>输出结果:</p><p><code>502</code> </p><h3 id="Python字典修改键值对"><a href="#Python字典修改键值对" class="headerlink" title="Python字典修改键值对"></a>Python字典修改键值对</h3><p>这里的修改是指:修改键值对的值。</p><p><strong>Python中如果新添加的键值对的键存在，那么则会覆盖原本的键值对的值</strong> </p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test_dict = ([&apos;姓名&apos;,&apos;LTy&apos;],[&apos;性别&apos;,True])</span><br><span class="line">test_dict = dict(test_dict)</span><br><span class="line">test_dict[&apos;班级&apos;] = 502</span><br><span class="line">print(test_dict.get(&quot;班级&quot;))</span><br><span class="line">test_dict[&apos;班级&apos;] = 999</span><br><span class="line">print(test_dict.get(&quot;班级&quot;))</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">502</span><br><span class="line">999</span><br></pre></td></tr></table></figure><h3 id="Python字典删除键值对"><a href="#Python字典删除键值对" class="headerlink" title="Python字典删除键值对"></a>Python字典删除键值对</h3><p>如果要删除字典中的键值对，则可以使用<code>del</code>语句，指定要删除的键值对的键。</p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test_dict = ([&apos;姓名&apos;,&apos;LTy&apos;],[&apos;性别&apos;,True])</span><br><span class="line">test_dict = dict(test_dict)</span><br><span class="line">test_dict[&apos;班级&apos;] = 502</span><br><span class="line">print(test_dict.get(&quot;班级&quot;))</span><br><span class="line">del test_dict[&apos;班级&apos;]</span><br><span class="line">print(test_dict.get(&quot;班级&quot;))</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">502</span><br><span class="line">None</span><br></pre></td></tr></table></figure><h3 id="判断字典中是否存在指定键值对"><a href="#判断字典中是否存在指定键值对" class="headerlink" title="判断字典中是否存在指定键值对"></a>判断字典中是否存在指定键值对</h3><p>如果需要判断字典是否存在指定键值对的键，可以使用<code>in</code>或<code>not in</code>运算符。</p><p><strong>注意:这里的<code>in</code>或<code>not in</code>运算符都是基于<code>key</code>来判断字典中某个键值对是否存在的.</strong> </p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test_dict = ([&apos;姓名&apos;,&apos;LTy&apos;],[&apos;性别&apos;,True])</span><br><span class="line">test_dict = dict(test_dict)</span><br><span class="line">del test_dict[&apos;姓名&apos;]</span><br><span class="line">print(test_dict.get(&quot;姓名&quot;))</span><br><span class="line">print(&apos;姓名&apos; in test_dict)</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">None</span><br><span class="line">False</span><br></pre></td></tr></table></figure><h1 id="Python-dict字典方法完全攻略-全"><a href="#Python-dict字典方法完全攻略-全" class="headerlink" title="Python dict字典方法完全攻略(全)"></a>Python dict字典方法完全攻略(全)</h1><p>想查看<code>dict</code>该类包包含哪些方法，可以使用<code>dir()</code>方法进行查看。</p><hr><h2 id="Python-keys-values-和items-方法"><a href="#Python-keys-values-和items-方法" class="headerlink" title="Python keys(),values()和items()方法"></a>Python keys(),values()和items()方法</h2><p>这三个方法可以获取字典中特定的数据.</p><p><code>keys()</code>方法用于返回字典中的所有键;</p><p><code>values()</code>用于返回字典中所有键对应的值;</p><p><code>items()</code>用于返回字典中所有的键值对;</p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test_dict = &#123;&apos;语文&apos;,&apos;数学&apos;,&apos;英语&apos;&#125;</span><br><span class="line">test_dict = dict.fromkeys(test_dict,100)</span><br><span class="line">print(test_dict.keys())</span><br><span class="line">print(test_dict.values())</span><br><span class="line">print(test_dict.items())</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict_keys([&apos;英语&apos;, &apos;语文&apos;, &apos;数学&apos;])</span><br><span class="line">dict_values([100, 100, 100])</span><br><span class="line">dict_items([(&apos;英语&apos;, 100), (&apos;语文&apos;, 100), (&apos;数学&apos;, 100)])</span><br></pre></td></tr></table></figure><p><strong>注意:<code>Python2.x</code>中，上面提到的方法的返回值是列表类型。但在<code>Python3.x</code>中，以上方法返回的类型不是序列类型。</strong> </p><h2 id="Python-copy-方法"><a href="#Python-copy-方法" class="headerlink" title="Python copy()方法"></a>Python copy()方法</h2><p><code>copy()</code>方法用于返回一个具有相同键值对的新字典:</p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test_dict = &#123;&apos;语文&apos;,&apos;数学&apos;,&apos;英语&apos;&#125;</span><br><span class="line">test_dict = dict.fromkeys(test_dict,100)</span><br><span class="line">test_dict2 = test_dict.copy()</span><br><span class="line">print(test_dict,&quot;\n&quot;,test_dict2)</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&apos;英语&apos;: 100, &apos;语文&apos;: 100, &apos;数学&apos;: 100&#125;</span><br><span class="line">&#123;&apos;英语&apos;: 100, &apos;语文&apos;: 100, &apos;数学&apos;: 100&#125;</span><br></pre></td></tr></table></figure><p><strong>注意Python的copy()方法涉及到<code>深拷贝</code>与<code>浅拷贝</code>的关系，当字典A拷贝键值对给字典B后，那么拷贝的数据(字典B内)将会在字典A对键值对进行修改时发生变化，而字典A添加新的键值对，字典B不收影响。</strong> </p><h2 id="Python-update-方法"><a href="#Python-update-方法" class="headerlink" title="Python update()方法"></a>Python update()方法</h2><p>updae()方法可以使用一个字典所包含的键值对来更新已有的字典。</p><p>如果被更新的字典中已存在对应的键值对，那么原键值对值将会被覆盖，否则将会被添加。</p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">test_dict = &#123;&apos;语文&apos;,&apos;数学&apos;,&apos;英语&apos;&#125;</span><br><span class="line">test_dict = dict.fromkeys(test_dict,100)</span><br><span class="line">test_dict2 = test_dict.copy()</span><br><span class="line">print(type(test_dict))</span><br><span class="line">test_dict[&apos;语文&apos;]=100</span><br><span class="line">test_dict2[&apos;物理&apos;]=200</span><br><span class="line">test_dict2.update(test_dict)</span><br><span class="line">print(test_dict,&quot;\n&quot;,test_dict2)</span><br><span class="line">print(test_dict,&quot;\n&quot;,test_dict2)</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &apos;dict&apos;&gt;</span><br><span class="line">&#123;&apos;英语&apos;: 100, &apos;数学&apos;: 100, &apos;语文&apos;: 100&#125;</span><br><span class="line">&#123;&apos;英语&apos;: 100, &apos;数学&apos;: 100, &apos;语文&apos;: 100, &apos;物理&apos;: 200&#125;</span><br><span class="line">&#123;&apos;英语&apos;: 100, &apos;数学&apos;: 100, &apos;语文&apos;: 100&#125;</span><br><span class="line">&#123;&apos;英语&apos;: 100, &apos;数学&apos;: 100, &apos;语文&apos;: 100, &apos;物理&apos;: 200&#125;</span><br></pre></td></tr></table></figure><h2 id="Python-pop方法"><a href="#Python-pop方法" class="headerlink" title="Python pop方法"></a>Python pop方法</h2><p>pop()方法可以获取指定key的value，并删除。</p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test_dict = &#123;&apos;语文&apos;,&apos;数学&apos;,&apos;英语&apos;&#125;</span><br><span class="line">test_dict = dict.fromkeys(test_dict,100)</span><br><span class="line">print(test_dict.pop(&apos;语文&apos;))</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">100</span><br><span class="line">&#123;&apos;英语&apos;: 100, &apos;数学&apos;: 100&#125;</span><br></pre></td></tr></table></figure><h2 id="Python-popitem-方法"><a href="#Python-popitem-方法" class="headerlink" title="Python popitem()方法"></a>Python popitem()方法</h2><p>popitem()方法用于弹出字典中最后一个键值对(这里的最后一个其实是随机的，因为字典是无序序列，所以并不能说的某个键值对的位置取向).</p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test_dict = &#123;&apos;语文&apos;,&apos;数学&apos;,&apos;英语&apos;&#125;</span><br><span class="line">test_dict = dict.fromkeys(test_dict,100)</span><br><span class="line">print(test_dict.popitem())</span><br><span class="line">print(test_dict)</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(&apos;数学&apos;, 100)</span><br><span class="line">&#123;&apos;英语&apos;: 100, &apos;语文&apos;: 100&#125;</span><br></pre></td></tr></table></figure><h2 id="Python-setdefault-方法"><a href="#Python-setdefault-方法" class="headerlink" title="Python setdefault()方法"></a>Python setdefault()方法</h2><p>setdefault()方法用于根据key来获取value，但有两种场景，第一种是，如果获取的键值对的key存在字典中，则会直接获取改键值对的value，不存在则会为该key先将value设置为默认的value，然后再返回该key对应的value。</p><p><strong>特点:setdefault方法总能返回指定key对应的value;</strong></p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">test_dict = &#123;&apos;语文&apos;,&apos;数学&apos;,&apos;英语&apos;&#125;</span><br><span class="line">test_dict = dict.fromkeys(test_dict,100)</span><br><span class="line"># 要设置的键值对的key不存在.</span><br><span class="line">test_dict.setdefault(&apos;物理&apos;,120)</span><br><span class="line">print(test_dict)</span><br><span class="line"># 要设置的键值对的key存在.</span><br><span class="line">test_dict.setdefault(&apos;语文&apos;,200)</span><br><span class="line">print(test_dict)</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&apos;数学&apos;: 100, &apos;英语&apos;: 100, &apos;语文&apos;: 100, &apos;物理&apos;: 120&#125;</span><br><span class="line">&#123;&apos;数学&apos;: 100, &apos;英语&apos;: 100, &apos;语文&apos;: 100, &apos;物理&apos;: 120&#125;</span><br></pre></td></tr></table></figure><h1 id="Python使用字典格式化字符串"><a href="#Python使用字典格式化字符串" class="headerlink" title="Python使用字典格式化字符串"></a>Python使用字典格式化字符串</h1><p>&lt;++&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是序列，Python序列详解（包括序列类型和常用操作）&quot;&gt;&lt;a href=&quot;#什么是序列，Python序列详解（包括序列类型和常用操作）&quot; class=&quot;headerlink&quot; title=&quot;什么是序列，Python序列详解（包括序列类型和常用操作）&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Python" scheme="https://evanmeek.github.io/categories/Python/"/>
    
    
      <category term="Python系列" scheme="https://evanmeek.github.io/tags/Python%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>[Python-03]Python变量类型和运算符</title>
    <link href="https://evanmeek.github.io/2019/08/31/Python-03-Python%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://evanmeek.github.io/2019/08/31/Python-03-Python变量类型和运算符/</id>
    <published>2019-08-31T07:03:13.000Z</published>
    <updated>2019-09-08T07:49:21.546Z</updated>
    
    <content type="html"><![CDATA[<p>Python系列第三章笔记，查看Python系列所有文章，请点击<a href="https://evanmeek.github.io/Python/">💿</a><br><a id="more"></a></p><p><strong>本章重点:Python变量数据类型、运算符。</strong></p><p>Python是弱类型语言。</p><p>弱类型含义:</p><ul><li><p>所有变量无需声明即可使用。</p></li><li><p>变量的数据类型随时可变。</p></li></ul><h1 id="Python变量及其使用"><a href="#Python变量及其使用" class="headerlink" title="Python变量及其使用"></a>Python变量及其使用</h1><p>变量:</p><ul><li><p>数据可发生无数次变化。</p></li><li><p>数据类型可发生变化。</p></li></ul><p>常量: 一旦保存数据，则不可修改。</p><p>赋值运算符: <code>=</code></p><p><strong>type()作用:</strong>查看变量的数据类型</p><h1 id="Python数值类型（整型、浮点型和复数）及其用法"><a href="#Python数值类型（整型、浮点型和复数）及其用法" class="headerlink" title="Python数值类型（整型、浮点型和复数）及其用法"></a>Python数值类型（整型、浮点型和复数）及其用法</h1><p>Python中的数值类型都是不可变的。</p><p>有些人可能会问，不是不可变么，为什么我定义的int类型变量的值仍然可以变化，那是因为底层实现将新的值存放到新的一块内存中，然后将修改变量指针的指向。</p><blockquote><p>Python整型</p></blockquote><p>整型是用来表示没有小数部分的数，整数包括：正整数、0、负整数</p><p>Python整型的四种表示形式：</p><ul><li><p>十进制(0-9)</p></li><li><p>二进制(0-1)</p></li><li><p>八进制(0-7)</p></li><li><p>十六进制(0-9-A-F/a-f)</p></li></ul><blockquote><p>Python浮点型</p></blockquote><p>浮点型是用来保存带小数的数值，浮点数包括:十进制形式、科学计数形式。</p><p>十进制形式的写法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">float_dex = 1.100111</span><br></pre></td></tr></table></figure><p>科学计数形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">float2 = 2e3</span><br></pre></td></tr></table></figure><blockquote><p>Python复数</p></blockquote><p>我跳过了本节，如果读者想看，可以点击进行访问<a href="http://c.biancheng.net/view/2173.html" target="_blank" rel="noopener">💿Python复数</a></p><h1 id="Python字符串详解-包含长字符串和原始字符串"><a href="#Python字符串详解-包含长字符串和原始字符串" class="headerlink" title="Python字符串详解(包含长字符串和原始字符串)"></a>Python字符串详解(包含长字符串和原始字符串)</h1><p>Python字符串必须使用引号括起来，可以是单引号也可以是双引号，但必须成对。</p><p>如果字符串内仍然包含引号，可以使用以下两种方法解决:</p><p><strong>用另一种成对的引号包括起来</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1 = &quot;I&apos;m EvanMeek.&quot;</span><br><span class="line"></span><br><span class="line">str2 = &apos;Evan:&quot;Hello World.&quot;&apos;</span><br></pre></td></tr></table></figure><p><strong>用转义字符进行转义</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str1 = &apos;I\&apos;m EvanMeek&apos;</span><br></pre></td></tr></table></figure><p>转义字符还可以用来转义换行符，应用场景通常是:</p><p><strong>字符串过长，转义换行符，使其不换行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;mac mac macmac mac macmac mac mac \</span><br><span class="line">mac mac macmac mac mac&quot;)</span><br></pre></td></tr></table></figure><blockquote><p>Python长字符串</p></blockquote><p>长字符串常用场景是:</p><p><strong>定义大段文本内容为字符串时</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 = &apos;&apos;&apos; &quot;Fuck you ! Bitch!&quot;,said he.</span><br><span class="line">&quot;Mother fuck!&quot;,said she.</span><br></pre></td></tr></table></figure><blockquote><p>Python原始字符串</p></blockquote><p>在Windows下,路径是使用反斜杠作为路径区分的，如果需要将反斜杠转义，那必须再加一个反斜杠，这样非常麻烦，就可以使用下面的案例来解决:</p><p><strong>转义反斜杠写路径</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path = &apos;C:\\User\\Admin\\Desktop&apos;</span><br></pre></td></tr></table></figure><p><strong>使用原始字符串写反斜杠</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path = r&apos;C:\User\Admin\Desktop&apos;</span><br></pre></td></tr></table></figure><p>注意: 原始字符串中的引号同样需要使用<code>\</code>进行转义</p><h1 id="Python-bytes类型及用法"><a href="#Python-bytes类型及用法" class="headerlink" title="Python bytes类型及用法"></a>Python bytes类型及用法</h1><p>bytes类型代表了字节串。</p><p>字节串与字符串不同的是:</p><ul><li><p>字节串是以字节为单位进行操作</p></li><li><p>字节串可直接用于网络通信数据互联</p></li></ul><p>字节串是由多个字节组成的，每个字节由8个bit位组成。</p><p>字节串保存的数据都是二进制格式的数据。</p><p>字节串可以转换成字符串，而字符串也能恢复成字节串。</p><blockquote><p>字节串转换为字符串</p></blockquote><p><strong>创建字节串</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个空的bytes</span><br><span class="line">b1 = bytes()</span><br><span class="line"># 创建一个空的bytes值</span><br><span class="line">b2 = b&apos;&apos;</span><br><span class="line"># 创建一个非空的字节串</span><br><span class="line">b3 = b&apos;hello&apos;</span><br></pre></td></tr></table></figure><p><strong>字符串转换为字节串</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 使用encode方法将字符串以utf-8字符集转换为字节串</span><br><span class="line">b4 = &quot;I love Python&quot;.encode(&apos;utf-8&apos;)</span><br><span class="line"></span><br><span class="line"># 创建bytes对象时将字符串的字符集指定为&apos;utf-8&apos;，自动转换为字节串</span><br><span class="line">b5 = bytes(&apos;I love Python&apos;, encoding=&apos;utf-8&apos;)</span><br></pre></td></tr></table></figure><blockquote><p>字节串转换为字符串</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 使用字节串对象的方法decode，指定字符集转化字节串</span><br><span class="line">str1 = b&apos;I love Python&apos;.decode(&apos;utf-8&apos;)</span><br></pre></td></tr></table></figure><h1 id="Python-bool布尔类型"><a href="#Python-bool布尔类型" class="headerlink" title="Python bool布尔类型"></a>Python bool布尔类型</h1><p>bool变量只有两个值分别是: True,False。它们都是Python的关键字。</p><p>True代表真</p><p>False代表假</p><p>例如表达式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 &gt; 5</span><br></pre></td></tr></table></figure><p>结果是False</p><p>Python中所有对象都可以进行真假值的测试。</p><h1 id="Python-len-函数详解：获取字符串长度或字节数"><a href="#Python-len-函数详解：获取字符串长度或字节数" class="headerlink" title="Python len()函数详解：获取字符串长度或字节数"></a>Python len()函数详解：获取字符串长度或字节数</h1><p>len()函数是Python内置函数，用于获取字符串或字节串的长度（数量）。</p><p>例子:</p><p><strong>统计字符串的长度</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(len(&quot;Hello World&quot;))</span><br></pre></td></tr></table></figure><p>输出结果: 11</p><p><strong>统计字节串的长度</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(len(&quot;你好世界&quot;.encode()))</span><br></pre></td></tr></table></figure><p>输出结果: 12</p><p>不同的语言所占的字节数不同，并且不同的编码格式所占的字节数也不同。</p><p>例如，汉字使用utf-8编码格式，占用3个字节，中文标点符号使用GBK编码格式占用2个字节。</p><h1 id="Python-input-函数：获取用户输入的字符串"><a href="#Python-input-函数：获取用户输入的字符串" class="headerlink" title="Python input()函数：获取用户输入的字符串"></a>Python input()函数：获取用户输入的字符串</h1><p>input()是Python的内置函数，其作用是输出一段信息然后请求用户输入，并且将获取的值传入接收的对象。</p><p>input()函数将会把用户输入的任何字符都作为字符串读入。</p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = input(&quot;Please input something:&quot;)</span><br><span class="line">print(type(a))</span><br></pre></td></tr></table></figure><p>运行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please input something &gt; 19</span><br><span class="line">&lt;class &apos;str&apos;&gt;</span><br></pre></td></tr></table></figure><p><strong>注意: Python2.x中，要求input()函数读入的内容必须是符合Python语法表达式的。</strong></p><p>例如: 输入字符串时，必须带双引号，否则将会报错。</p><h1 id="Python-print-函数的高级用法"><a href="#Python-print-函数的高级用法" class="headerlink" title="Python print()函数的高级用法"></a>Python print()函数的高级用法</h1><blockquote><p>输出多个参数</p></blockquote><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = &quot;EvanMeek&quot;</span><br><span class="line">age = 18</span><br><span class="line">print(&quot;我叫:&quot;, name, &quot;age&quot;, 18)</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我叫: EvanMeek age 18</span><br></pre></td></tr></table></figure><blockquote><p>指定输出多个参数时的分隔符(默认的分割符为空格)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = &quot;EvanMeek&quot;</span><br><span class="line">age = 18</span><br><span class="line">print(&quot;我叫:&quot;, name, &quot;age&quot;, 18)</span><br><span class="line">print(&quot;我叫:&quot;, name, &quot;age&quot;, 18, sep=&apos;|&apos;)</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我叫: EvanMeek age 18</span><br><span class="line">我叫:|EvanMeek|age|18</span><br></pre></td></tr></table></figure><blockquote><p>指定结束符(默认结束符为换行符\n)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(10,&apos;\t&apos;,end=&quot;&quot;)</span><br><span class="line">print(11,&apos;\t&apos;,end=&quot;&quot;)</span><br><span class="line">print(12,&apos;\t&apos;,end=&quot;&quot;)</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 11 12</span><br></pre></td></tr></table></figure><blockquote><p>指定输出目标(默认输出为标准输出)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f = open(&quot;test.txt&quot;, &quot;w&quot;)</span><br><span class="line"></span><br><span class="line">print(&apos;Just Test&apos;, file = f)</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>结果: 将 ‘Just Test’ 写入到 tes.txt文件内</p><h1 id="Python格式化字符串-格式化输出"><a href="#Python格式化字符串-格式化输出" class="headerlink" title="Python格式化字符串(格式化输出)"></a>Python格式化字符串(格式化输出)</h1><p>Python中的格式化字符串可以对各种类型的数据进行格式化输出。</p><p>例子:</p><p><strong>格式化输出整型数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">number = 100</span><br><span class="line">print(&quot;Number is:%s&quot; % number)</span><br></pre></td></tr></table></figure><p>格式化分为三个部分，分别是被包括在双引号内的占位符(<code>%s</code>)、以及中间部分的 格式化分隔符(<code>%</code>)与对应占位符的变量或表达式(<code>number</code>)</p><p><code>%s</code>被称为占位符,又可以说是转换说明符(Conversion Specifier)</p><table><thead><tr><th>转换说明符</th><th>说明</th></tr></thead><tbody><tr><td>%d,%i</td><td>转换为带符号的十进制形式的整数</td></tr><tr><td>%o</td><td>转换为带符号的八进制形式的整数</td></tr><tr><td>%x,%X</td><td>转换为带符号的十六进制形式额整数</td></tr><tr><td>%e</td><td>转换为科学计数法标识的浮点数(e小写)</td></tr><tr><td>%E</td><td>转换为科学计数法标识的浮点数(E大写)</td></tr><tr><td>%f,%F</td><td>转换为十进制形式的浮点数</td></tr><tr><td>%g</td><td>智能选择使用%f或%e格式</td></tr><tr><td>%G</td><td>智能选择使用%F或%E格式</td></tr><tr><td>%c</td><td>格式化字符及其ASCII码</td></tr><tr><td>%r</td><td>使用repr()将变量或表达式转换成字符串</td></tr><tr><td>%s</td><td>使用str()将变量或表达式转换为字符串</td></tr></tbody></table><p>Python允许aaaaqaz123在占位符前添加一个标志用来指定对齐：</p><ul><li><p><code>-</code>(减号) :指定左对齐</p></li><li><p><code>+</code>(加号) : 表示数值总要带着符号.</p></li><li><p><code>0</code>,表示不补充空格，而是补充0。</p></li></ul><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;%06d&quot; % num2)</span><br><span class="line"></span><br><span class="line">print(&quot;%+06d&quot; % num2)</span><br><span class="line"></span><br><span class="line">print(&quot;%-6d&quot; % num2)</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">000030</span><br><span class="line">+00030</span><br><span class="line">30</span><br></pre></td></tr></table></figure><p>精度值：用于指定小数点后的数字位数，如果是字符串时指定转换后字符串的最大字符数</p><h1 id="Python转义字符及用法"><a href="#Python转义字符及用法" class="headerlink" title="Python转义字符及用法"></a>Python转义字符及用法</h1><p>转义字符是指在指定字符前添加反斜杠<code>\</code>，对特殊的字符进行转义。</p><p>表格请点击此链接查看👉<a href="http://c.biancheng.net/view/2176.html" target="_blank" rel="noopener">💿Python常用/支持的转义字符</a></p><h1 id="Python类型转换，Python数据类型转换函数大全"><a href="#Python类型转换，Python数据类型转换函数大全" class="headerlink" title="Python类型转换，Python数据类型转换函数大全"></a>Python类型转换，Python数据类型转换函数大全</h1><p>Python身为弱类型编程语言，不需要为变量声明数据类型，但在某些场景下，仍然需要进行类型转换，而Python内置了很多常用数据类型的转换函数，请看下表。</p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>int(x)</td><td>将x转换成整数类型</td></tr><tr><td>float(x)</td><td>将x转换成浮点数类型</td></tr><tr><td>complex(real,[,imag])</td><td>创建一个复数</td></tr><tr><td>str(x)</td><td>将x转换成字符串</td></tr><tr><td>repr(x)</td><td>将x转换成表达式字符串</td></tr><tr><td>eval(str)</td><td>计算在字符串中的有效Python表达式，并返回一个对象</td></tr><tr><td>chr(x)</td><td>将整数x转换成一个字符</td></tr><tr><td>ord(x)</td><td>将字符x转化成它对应的整数值</td></tr><tr><td>hex(x)</td><td>将一个整数x转换成一个十六进制的字符串</td></tr><tr><td>oct(x)</td><td>将一个整数x转换成一个八进制的字符串</td></tr></tbody></table><p>使用类型转换函数时，被转换的数据必须是有意义的，例如，在使用int()函数时无法将一个费阿拉伯数字的字符串进行转换。</p><h1 id="Python算术运算符及用法详解"><a href="#Python算术运算符及用法详解" class="headerlink" title="Python算术运算符及用法详解"></a>Python算术运算符及用法详解</h1><p>算术运算符用于处理四则运算的符号，在数字的处理中应用得最多。</p><p><img src="/2019/08/31/Python-03-Python变量类型和运算符/Python常用算术运算符.png" alt="Python常用算术运算符"></p><blockquote><p>加法运算符</p></blockquote><p>算术运算例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = 10</span><br><span class="line">b = 20</span><br><span class="line">print(&quot;%d&quot; % (a+b))</span><br></pre></td></tr></table></figure><p>输出:<code>30</code></p><p>字符串拼接例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello = &quot;Hello&quot;</span><br><span class="line">world = &quot;World&quot;</span><br><span class="line">print(&quot;%s&quot; % hello+world)</span><br></pre></td></tr></table></figure><p>输出:<code>HelloWorld</code></p><blockquote><ul><li>减法运算符</li></ul></blockquote><p>减法算术例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">a = 10</span><br><span class="line">b = 5</span><br><span class="line">print(&quot;%d&quot; % (10-5))</span><br></pre></td></tr></table></figure><p>输出:<code>5</code></p><p>求负算术例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = 10</span><br><span class="line">a = -a</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p>输出: <code>-10</code></p><blockquote><p>*乘法运算符</p></blockquote><p>乘法算术例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a =10.5</span><br><span class="line">print(a*a)</span><br></pre></td></tr></table></figure><p>输出:<code>110.25</code></p><p>字符串连接例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str=&quot;test &quot;</span><br><span class="line">print(str*3)</span><br></pre></td></tr></table></figure><p>输出:<code>test test test</code></p><blockquote><p>/和//除法运算符</p></blockquote><p>普通除法算术例子(除不尽产生小数):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = 10</span><br><span class="line">b = 3</span><br><span class="line">print(a/b)</span><br></pre></td></tr></table></figure><p>输出:<code>3.3333333333333335</code></p><p>整除除法算术例子(除不尽舍去小数):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = 10</span><br><span class="line">b = 3</span><br><span class="line">print(a//b)</span><br></pre></td></tr></table></figure><p>输出:<code>3</code></p><p><strong>注意:Python中不可使用0作为除数，否则会引发<code>ZeroDivisionError</code>错误</strong></p><p><strong>注意:Python2.x中没有整除运算符</strong></p><p>Python2.x的的求整除的规则是:</p><ul><li><p>当两个操作数都是整数时，<code>/</code>作为整除运算符</p></li><li><p>当两个操作数其中一个是浮点数时，<code>/</code>作为非整除运算符</p></li></ul><blockquote><p>%求余运算符</p></blockquote><ul><li><p>Python不需要求余的两个操作数是整数</p></li><li><p>Python不允许求余运算的第二个操作数为0</p></li></ul><p>求余运算例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;10 % 3 = &quot;,(10%3))</span><br><span class="line">print(&quot;10.5 % 3.5 = &quot;,(10.5%3.5))</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10 % 3 =  1</span><br><span class="line">10.5 % 3.5 =  0.0</span><br></pre></td></tr></table></figure><p>注意:</p><ul><li>若求余运算第二个操作符为负数，那么结果也一定是负数。</li></ul><blockquote><p>**乘方运算符</p></blockquote><p>乘方+开方运算例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;5 的 2 次方：&apos;, 5 ** 2) # 25</span><br><span class="line">print(&apos;4 的 3 次方：&apos;, 4 ** 3) # 64</span><br><span class="line">print(&apos;4 的开平方：&apos;, 4 ** 0.5) # 2.0</span><br><span class="line">print(&apos;27 的开 3 次方：&apos;,27 **(1 / 3 )) # 3.0</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5 的 2 次方： 25</span><br><span class="line">4 的 3 次方： 64</span><br><span class="line">4 的开平方： 2.0</span><br><span class="line">27 的开 3 次方： 3.0</span><br></pre></td></tr></table></figure><h1 id="Python赋值运算符（入门必读）"><a href="#Python赋值运算符（入门必读）" class="headerlink" title="Python赋值运算符（入门必读）"></a>Python赋值运算符（入门必读）</h1><p>赋值运算符常用于将运算符右侧的值赋值给左侧的容器。</p><blockquote><p>基本赋值运算符</p></blockquote><p>将赋值运算符右侧的表达式赋值给左侧的容器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = 10</span><br><span class="line">b = a</span><br><span class="line">c = a+b</span><br><span class="line">print(a,b,c)</span><br></pre></td></tr></table></figure><p>输出:<code>10 10 20</code></p><blockquote><p>扩展后的赋值运算符</p></blockquote><p><code>=</code>赋值运算符与其他运算符结合后，将成为功能更强大的赋值运算符。</p><p><img src="/2019/08/31/Python-03-Python变量类型和运算符/Python常用赋值运算符.png" alt="Python常用赋值运算符"></p><h1 id="Python位运算符详解"><a href="#Python位运算符详解" class="headerlink" title="Python位运算符详解"></a>Python位运算符详解</h1><p><code>初学者可暂时跳过本章</code></p><p>位运算符通常使用场景是：图形、图像处理、创建设备驱动等底层开发。</p><p>Python位运算符的操作对象为整数类型，它会把数字看做相应的二进制来进行计算。</p><p><img src="/2019/08/31/Python-03-Python变量类型和运算符/Python位运算符.png" alt="python位运算符"></p><blockquote><p>&amp;按位与运算符</p></blockquote><p>有两个操作数</p><p>运算符法则：按位将2个操作数对应的二进制进行一一对应，对应时，只有对应数位都为1时，则结果为0，否则为1。</p><p>例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = 10</span><br><span class="line">b = 5</span><br><span class="line">print(bin(a), bin(b), a &amp; b)</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0b1010 0b101 0</span><br></pre></td></tr></table></figure><blockquote><p>|按位或 运算符</p></blockquote><p><code>|</code>是其运算符，具有两个操作数。</p><p>运算符法则：按位将2个操作数对应的二进制进行一一对应，对应时，只有对应数位都为0时，则结果才为0，否则为1。</p><blockquote><p>^按位异或运算符</p></blockquote><p><code>^</code>是其运算符，具有两个操作数。</p><p>运算符法则：按位将两个操作数对应的二进制进行一一对应，对应时，若对应数位都为0或1，则结果为0，否则为1</p><blockquote><p>~按位取反运算符</p></blockquote><p><code>~</code>是其运算符，具有1个操作数</p><p>运算符法则：将其操作数的二进制进行取反，也就是：原本为0的取反为1，原本为1的取反为0.</p><p>其他：原码、反码、补码是什么</p><ul><li><p>原码: 将某数值转换为二进制数，若此数值为正数或0则代表可以是无符号的，那么最高位则不需要一个符号位，若为负数则需要一个符号位。</p></li><li><p>反码: 对原码按位取反，但符号位不变。</p></li><li><p>补码: 负数的补码是其反码+1，正数或0的补码与原码相同。</p></li></ul><blockquote><p>&lt;&lt;左移运算符</p></blockquote><p><code>&lt;&lt;</code>是其运算符，具有两个操作数</p><p>将操作数按补码形式进行整体向左移动。移动后，溢出的丢弃，空出的以0填补。</p><blockquote><p>>> 右移运算符</p></blockquote><p><code>&gt;&gt;</code>是其运算符，具有两个擦作数</p><p>将操作数按补码形式进行整体向右移动。移动后，溢出的丢弃，空出的以符号位填补。。</p><h1 id="Python比较运算符-关系运算符"><a href="#Python比较运算符-关系运算符" class="headerlink" title="Python比较运算符(关系运算符)"></a>Python比较运算符(关系运算符)</h1><p>比较运算符又称为关系运算符，其作用是对各种表达式，容器结果进行大小、真假等比较。如果比较结果为真，则返回True(真)否则返回False(假)。</p><p><img src="/2019/08/31/Python-03-Python变量类型和运算符/Python比较运算符.png" alt="Python比较运算符表"></p><blockquote><p>比较运算符 == 和 is区别</p></blockquote><p>== 比较的是值</p><p>is 比较的所引用对象的地址</p><h1 id="Python逻辑运算符及其用法"><a href="#Python逻辑运算符及其用法" class="headerlink" title="Python逻辑运算符及其用法"></a>Python逻辑运算符及其用法</h1><p>逻辑运算符也是对真假（布尔类型）进行运算符，其返回值也为bool。</p><p><img src="/2019/08/31/Python-03-Python变量类型和运算符/Python逻辑运算符及功能.png" alt="Python比较运算符表"></p><h1 id="Python三目运算符-三元运算符-用法详解"><a href="#Python三目运算符-三元运算符-用法详解" class="headerlink" title="Python三目运算符(三元运算符)用法详解"></a>Python三目运算符(三元运算符)用法详解</h1><p>Python利用if来实现三目运算符的功能。</p><p>语法格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">True_statements if expression else False_statements</span><br></pre></td></tr></table></figure><p>运算法则: 先对<code>expression</code>(表达式)求值，如果为True则执行<code>True_statements</code>否则执行<code>False_statements</code></p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = 10</span><br><span class="line">b = 20</span><br><span class="line">print(&quot;a&gt;b&quot;) if a &gt; b else print(&quot;a&lt;b&quot;)</span><br></pre></td></tr></table></figure><p>结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a&lt;b</span><br></pre></td></tr></table></figure></p><p>Python允许在三目运算符的<code>False_statements</code>或<code>True_statements</code>放置多条语句。</p><p>两种放置方式:</p><ul><li><p>以英文逗号隔开，将每条语句执行结果，组成元组。</p></li><li><p>以英文分号隔开，只返回一条语句的结果。 </p></li></ul><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = 20</span><br><span class="line">b = 20</span><br><span class="line"></span><br><span class="line">print(&quot;a&gt;b&quot;) if a &gt; b else (print(&quot;a&lt;b&quot;) if a &lt; b else print(&quot;a=b&quot;))</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = b</span><br></pre></td></tr></table></figure><h1 id="Python运算符优先级"><a href="#Python运算符优先级" class="headerlink" title="Python运算符优先级"></a>Python运算符优先级</h1><p>不同的运算符有一个优先级，在用于在表达式中进行区别执行顺序。</p><p><img src="/2019/08/31/Python-03-Python变量类型和运算符/Python运算符优先级.png" alt="Python比较运算符表"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python系列第三章笔记，查看Python系列所有文章，请点击&lt;a href=&quot;https://evanmeek.github.io/Python/&quot;&gt;💿&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://evanmeek.github.io/categories/Python/"/>
    
    
      <category term="Python系列" scheme="https://evanmeek.github.io/tags/Python%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>[Python-02]Python初探</title>
    <link href="https://evanmeek.github.io/2019/08/29/Python-02-Python%E5%88%9D%E6%8E%A2/"/>
    <id>https://evanmeek.github.io/2019/08/29/Python-02-Python初探/</id>
    <published>2019-08-29T03:52:56.000Z</published>
    <updated>2019-08-31T08:34:32.820Z</updated>
    
    <content type="html"><![CDATA[<p>Python系列第二章笔记，查看Python系列所有文章，请点击<a href="https://evanmeek.github.io/Python/">💿</a></p><a id="more"></a><h1 id="Mac安装Python环境"><a href="#Mac安装Python环境" class="headerlink" title="Mac安装Python环境"></a>Mac安装Python环境</h1><p>由于我目前的设备只有一台Mac Book，所以我就只记录Mac安装Python的过程。</p><p>最新的Mac OS X以及集成了Python 2，打开终端(Terminal)输入:<code>python</code>检查是否已安装</p><p><img src="/2019/08/29/Python-02-Python初探/python2运行.png" alt="Python2运行"></p><p>安装Python3可以在这个页面进行下载:<a href="https://www.python.org/downloads/" target="_blank" rel="noopener">💿Python下载页面</a></p><h1 id="python不是内部或外部命令的解决方法"><a href="#python不是内部或外部命令的解决方法" class="headerlink" title="python不是内部或外部命令的解决方法"></a>python不是内部或外部命令的解决方法</h1><p>由于这个问题只有Windows才会出现，所以遇到问题的话，去看下原文吧<a href="http://c.biancheng.net/view/4171.html" target="_blank" rel="noopener">💿点我看原文解决方案</a></p><h1 id="第一个Python程序"><a href="#第一个Python程序" class="headerlink" title="第一个Python程序"></a>第一个Python程序</h1><p>打开终端，输入<code>python3</code>命令，进入交互式解释器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;hello,world!&quot;)</span><br></pre></td></tr></table></figure><p>即可输出包括在双引号之间的字符</p><p>注意点:</p><ul><li><p>小括号与双引号必须在英文半角状态下输入</p></li><li><p>print必须全部为小写</p></li></ul><blockquote><p>文本编辑器编写并执行Python程序</p></blockquote><p>可以使用Vim编辑器编写Python源代码，然后终端中执行</p><p>注意点:</p><ul><li>不要使用Word或Windows的记事本程序编写Python源码，因为这两款软件会为源代码添加隐藏符号，而这些符号不被Python所解释，程序将会报错。</li></ul><h1 id="Python交互式解释器及用法"><a href="#Python交互式解释器及用法" class="headerlink" title="Python交互式解释器及用法"></a>Python交互式解释器及用法</h1><p>交互式解释器是为了让开发者快速学习、则是Python的功能。</p><p>在终端内执行<code>python</code>命令即可打开</p><p><img src="/2019/08/29/Python-02-Python初探/python3运行.png" alt="python3运行"></p><p>其中<code>&gt;&gt;&gt;</code>提示符，我们写的命令都是能被python解释器所执行的Python命令，如果输入的内容没有定义，那么解释器将会报错。</p><h1 id="IDE-集成开发环境-是什么"><a href="#IDE-集成开发环境-是什么" class="headerlink" title="IDE(集成开发环境)是什么"></a>IDE(集成开发环境)是什么</h1><p><code>IDE(Intergreated Development Environment)</code>,用来辅助开发者开发的应用软件。</p><p>集成开发环境是一些列开发工具的组合套装，例如我们编写Python程序，不仅需要解释器，而且还需要一些辅助工具，例如:语言编辑器、自动构建工具、除错器。</p><h1 id="Python-IDE有哪些，哪款适合初学者？"><a href="#Python-IDE有哪些，哪款适合初学者？" class="headerlink" title="Python IDE有哪些，哪款适合初学者？"></a>Python IDE有哪些，哪款适合初学者？</h1><p>首先说明，合适自己的才是最好的。</p><blockquote><p>PyCharm</p></blockquote><p>由JetBrains公司开发的Python开发工具</p><p>优点:</p><ul><li><p>跨平台</p></li><li><p>支持语法高粱、项目代码管理、智能提示、自动完成、调试、单元测试、版本控制等</p></li><li><p>支持Django Web开发框架</p></li><li><p>社区版本免费</p></li></ul><p>缺点:</p><ul><li><p>软件较大，比较重</p></li><li><p>专业版，收费</p></li></ul><blockquote><p>Microsoft Visual Studio</p></blockquote><p>由微软开发用于进行C#和.NET等应用的开发工具，简称VS。</p><p>要让VS支持Python，需要安装<code>PTVS</code>插件。</p><p>优点:</p><ul><li><p>PTVS插件开源</p></li><li><p>支持编辑、浏览、智能感知、混合Python/C++调试、Django</p></li></ul><p>缺点:</p><ul><li><p>不跨平台，只支持Windows</p></li><li><p>软件较大，比较重</p></li><li><p>非学生收费</p></li></ul><h1 id="Python-IDLE使用方法详解"><a href="#Python-IDLE使用方法详解" class="headerlink" title="Python IDLE使用方法详解"></a>Python IDLE使用方法详解</h1><p>由于本人不使用IDLE作为我的Python开发工具，所以这里就不提了。</p><p>想了解的，看原文<a href="http://c.biancheng.net/view/4221.html" target="_blank" rel="noopener">💿点击查看原文</a></p><h1 id="Python注释-多行注释和单行注释"><a href="#Python注释-多行注释和单行注释" class="headerlink" title="Python注释(多行注释和单行注释)"></a>Python注释(多行注释和单行注释)</h1><p>注释是写给人看的，是用来用自然语言解释代码给开发者看的。</p><p>注释不被解释器所执行。</p><p>Python允许在任何地方差人注释和字符串，除了在标志符和字符串之间。</p><p>Python中有三种注释分别是:</p><blockquote><p>单行注释</p></blockquote><p>语法格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 注释内容</span><br></pre></td></tr></table></figure></p><p>单行注释所在位置可以是代码的上一行，可以是当前行的末尾。</p><blockquote><p>Python多行注释</p></blockquote><p>语法格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">注释内容</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>多行注释使用三个成对的<code>单引号</code>或三个成对的<code>双引号</code>作为多行注释块</p><p>通常用法: 为Python文件、模块、类或者函数等添加版权、功能描述等信息。</p><p>注意事项: 若多行注释作为语句的一部分(在语句中)将不会被认为是多行注释，而是Python字符串的标志。</p><blockquote><p>Python中文编码声明注释</p></blockquote><p>在Python2.x中，不支持在源码中直接写中文。所以如果需要加入中文，必须在行首加上以下注释:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># coding=utf-8</span><br></pre></td></tr></table></figure><p>Python3.x不需要</p><h1 id="Python缩进规则-包含快捷键"><a href="#Python缩进规则-包含快捷键" class="headerlink" title="Python缩进规则(包含快捷键)"></a>Python缩进规则(包含快捷键)</h1><p>Python采用代码缩进和冒号来区分代码块之间的层次</p><p>在Python中，类定义、函数定义、流程控制语句、异常处理语句等，行位的冒号代表代码块的开始，而同一个代码块内部代码的缩紧格式必须相同（不然Python不能知道当前代码块何时结束)，否则会出现SyntaxError</p><h1 id="Python编码规范"><a href="#Python编码规范" class="headerlink" title="Python编码规范"></a>Python编码规范</h1><p>这里所提到的规范都是PEP8所定义的。</p><p>需要严格遵守的代码编写规范:</p><ul><li>每个import语句只导入一个模块</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 推荐</span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line"># 避免</span><br><span class="line">import os sys</span><br></pre></td></tr></table></figure><ul><li>不在行尾添加分号，一行只放一条语句</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 避免</span><br><span class="line">height = float(input(&quot;input height:&quot;)); weight=float(input(&quot;input weight&quot;));</span><br></pre></td></tr></table></figure><ul><li>单行不超过80个字符，如果超过可以使用小括号将多行内容隐式的连接。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 推荐</span><br><span class="line">text=(&quot;aaaaaaaaaaaaaaaaaaaaaaaa&quot;</span><br><span class="line">&quot;bbbbbbbbb&quot;)</span><br></pre></td></tr></table></figure><ul><li><p>适当使用空行，增加代码可读性</p></li><li><p>适当使用空格分隔运算符之间，函数之间，以及逗号两侧。</p></li></ul><p><a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="noopener">💿PEP 8官方介绍</a></p><h1 id="Python标识符命名规范"><a href="#Python标识符命名规范" class="headerlink" title="Python标识符命名规范"></a>Python标识符命名规范</h1><p>Python标识符规范:</p><ul><li><p>由字母、下划线、数字组成，但首字符不能为数字。</p></li><li><p>不能与Python内置的关键字相同，例如我们前面提到的import就是Python关键字。</p></li><li><p>Python中，标识符的命名区分字母大小写。</p></li><li><p>Python的标识符前后具有下划线代表由特殊意义。</p></li></ul><p>推荐命名规范(不遵守此规范程序不会无法运行，但这基本是行业标准):</p><ul><li><p>标识模块名时，尽量短小，由下划线分割标识符单词。</p></li><li><p>标识包名时，尽量短小，由英文句号作为分割。</p></li><li><p>标识类名时，单词首字母大写。</p></li><li><p>函数名、类属性，方法名，使用小写，多个单词之间使用下划线</p></li></ul><h1 id="编码规范的重要性"><a href="#编码规范的重要性" class="headerlink" title="编码规范的重要性"></a>编码规范的重要性</h1><p>编码的规范是为了提高开发效率。</p><p>我们编码时需要遵守准则: 阅读者 &gt; 编程者 &gt; 机器</p><h1 id="Python关键字-保留字"><a href="#Python关键字-保留字" class="headerlink" title="Python关键字(保留字)"></a>Python关键字(保留字)</h1><p>Python关键字是Python内置的单词，其被赋予特殊的意义。</p><p>所有的关键字表如下:</p><table><thead><tr><th>关键字表</th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>and</td><td>as</td><td>assert</td><td>break</td><td>class</td><td>continue</td></tr><tr><td>def</td><td>del</td><td>elif</td><td>else</td><td>except</td><td>finally</td></tr><tr><td>for</td><td>from</td><td>False</td><td>globl</td><td>if</td><td>import</td></tr><tr><td>in</td><td>is</td><td>lambda</td><td>nonlocal</td><td>not</td><td>None</td></tr><tr><td>or</td><td>pass</td><td>raise</td><td>return</td><td>try</td><td>True</td></tr><tr><td>while</td><td>with</td><td>yield</td></tr></tbody></table><h1 id="Python内置函数"><a href="#Python内置函数" class="headerlink" title="Python内置函数"></a>Python内置函数</h1><p>Python具有内置函数，可由开发者直接调用。</p><p>有关内置函数的用法和解释可由访问[💿Python内置函数]进行查看.</p><table><thead><tr><th>xxx</th><th>xx</th></tr></thead><tbody><tr><td>dasd</td><td>asdsd</td></tr></tbody></table><table><thead><tr><th>xxx</th><th>xxxxxxxxx</th></tr></thead><tbody><tr><td>asldjaskjd</td><td>asdsadsa</td></tr><tr><td>asdsad</td><td>asdsd</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python系列第二章笔记，查看Python系列所有文章，请点击&lt;a href=&quot;https://evanmeek.github.io/Python/&quot;&gt;💿&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://evanmeek.github.io/categories/Python/"/>
    
    
      <category term="Python系列" scheme="https://evanmeek.github.io/tags/Python%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>[Python-01]Python教程基础</title>
    <link href="https://evanmeek.github.io/2019/08/29/Python-01-Python%E6%95%99%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <id>https://evanmeek.github.io/2019/08/29/Python-01-Python教程基础/</id>
    <published>2019-08-28T16:25:46.000Z</published>
    <updated>2019-08-29T17:50:26.176Z</updated>
    
    <content type="html"><![CDATA[<p>Python系列第一章笔记，查看Python系列所有文章,请点击 <a href="https://evanmeek.github.io/Python/">💿</a><br><a id="more"></a></p><h1 id="编程语言是什么"><a href="#编程语言是什么" class="headerlink" title="编程语言是什么"></a>编程语言是什么</h1><p>编程语言中的每个结构，都有固定的使用格式（称之为<code>语法</code>)以及精确的含义（称之为<code>语义</code>）。</p><p>编程语言也分等级，例如C、C++、Java、Ruby等可以称为高级语言，而计算机<code>硬件</code>只能理解一种非常低级的编程语言，<code>机器语言</code>。</p><h1 id="解释型语言和编译型语言（两者区别）"><a href="#解释型语言和编译型语言（两者区别）" class="headerlink" title="解释型语言和编译型语言（两者区别）"></a>解释型语言和编译型语言（两者区别）</h1><blockquote><p>编译型语言</p></blockquote><p>编译型语言是指使用专门的编译器，对特定的操作系统（平台）将源代码一次性“翻译”为可被该操作系统（平台）硬件所执行的机器语言。</p><p>优点：</p><ul><li>编译好后的可执行文件，可以在没有编译器的机器上独立运行。</li><li>程序执行速度快</li></ul><p>缺点：</p><ul><li>跨平台不友好(如果是不同的平台，需要将源代码在特定的平台重新编译，甚至需要修改代码)</li></ul><blockquote><p>解释型语言</p></blockquote><p>解释型语言由解释器完成将源代码转换成机器语言，在任何平台上必须安装解释器才可以运行，而不同的平台只需要安装解释器，代码不需要修改也可以被解释。</p><p>优点：</p><ul><li>跨平台友好</li></ul><p>缺点：</p><ul><li>执行速度慢</li></ul><h1 id="Python是什么，Python简介"><a href="#Python是什么，Python简介" class="headerlink" title="Python是什么，Python简介"></a>Python是什么，Python简介</h1><blockquote><p>Python历史</p></blockquote><p>1989年，荷兰人<code>Guido van Rossum</code> 创造了Python.</p><p><code>Python</code>最初基于<code>ABC</code>教学语言.</p><blockquote><p>Python简介</p></blockquote><p><code>Python</code>可以和其他语言，如C、C++、Java的模块（方法/函数）轻松的结合在一起，因此<code>Python</code>又被称为“胶水”语言。</p><blockquote><p>Python的设计哲学</p></blockquote><p>优雅、明确、简单。</p><p>有些人说：“人生苦短，我用Python”</p><h1 id="Python的特点（优点和缺点）"><a href="#Python的特点（优点和缺点）" class="headerlink" title="Python的特点（优点和缺点）"></a>Python的特点（优点和缺点）</h1><blockquote><p>简单易学</p></blockquote><p>Python虽然语法格式要求严格，但是语法却很简洁。</p><blockquote><p>开源</p></blockquote><p>Python是开源的，使用Python编写的程序可以做商业用途也不用付费，并且可以让第三方开发者为Python开发提供优秀的功能。</p><blockquote><p>高级语言</p></blockquote><p>在使用Python编写程序时，开发者无需考虑底层细节问题，而专注于编写程序。</p><blockquote><p>解释型语言</p></blockquote><p>可移植性优秀</p><blockquote><p>面向对象</p></blockquote><p>Python既支持面向过程编程，也支持面向对象编程。</p><blockquote><p>强大的功能</p></blockquote><p>Python可以从简单的字符串处理到复杂的3D图形编程，这些借助Python的扩展模块可以轻松完成。</p><blockquote><p>可扩展性</p></blockquote><p>Python具有脚本语言中最丰富和强大的类库，不管是I/O、GUI、网络编程、数据库编程等绝大部应用场景，都可以使用Python内置的类库完成。</p><p>Python可以使用C或C++编写的代码，这样可以一定程度上的弥补执行速度慢的缺点。</p><blockquote><p>缺点</p></blockquote><p>速度慢，相比Java、C、C++编写的程序，运行效率都要慢。<br>源代码加密困难，由于是解释型语言，不像编译型语言那样会被编译成各种目标程序，所以加密困难。</p><h1 id="学Python，不需要有编程基础"><a href="#学Python，不需要有编程基础" class="headerlink" title="学Python，不需要有编程基础"></a>学Python，不需要有编程基础</h1><p>Python语法简明易懂，不像C++或C语言等语法复杂，并且在学习Python中也不需要太过于专注底层的细节，很多事情解释器都已经帮忙做好了。所以对于零基础的初学者来说，Python非常合适。</p><h1 id="Python能干什么，Python的应用领域"><a href="#Python能干什么，Python的应用领域" class="headerlink" title="Python能干什么，Python的应用领域"></a>Python能干什么，Python的应用领域</h1><blockquote><p>Web应用开发</p></blockquote><p>Python可以通过一些模块，使Python具备HTTP服务器与Python的Web程序之间的通信。</p><p>全球最大的搜索引擎<code>Google</code>，在其搜索系统中就大量的使用Python。</p><p><code>豆瓣</code>也是由Python编写的。</p><blockquote><p>操作系统管理、自动化运维开发</p></blockquote><p>大部分操作系统中，Python都作为标准的系统组件，例如大多数Linux发行版，BSD系、Mac OS X都集成了Python。</p><p>并且相对于Shell脚本来说，无论是可读性、性能、代码重用度以及扩展性方面都要优秀很多。</p><blockquote><p>游戏开发</p></blockquote><p>虽说Python的运行效率不算快，但很多游戏可以用C++编写高性能模块，而用Pyton编写游戏的逻辑。</p><p>例如，<code>文明</code>这款游戏就是使用Python实现的。</p><blockquote><p>编写服务器软件</p></blockquote><p>由于Python对各种网络协议的支持完善，所以经常被用于编写服务器软件以及网络爬虫。</p><blockquote><p>科学计算</p></blockquote><p>Python内置了很多工具，可以让科研人员编写科学计算程序。</p><h1 id="怎样学习Python，才能成为Python高手？"><a href="#怎样学习Python，才能成为Python高手？" class="headerlink" title="怎样学习Python，才能成为Python高手？"></a>怎样学习Python，才能成为Python高手？</h1><blockquote><p>编程语言都是相通的</p></blockquote><p>如果你具备一定的编程基础，接触一门新的编程语言时会发现，不同的编程语言其实是相通的，大多数不同的地方在于语法规则。</p><blockquote><p>Python对初学者友好</p></blockquote><ul><li><p>多实践、积累代码量</p><p>任何编程语言知识都是大量的，如果不在学习编程时就开始练习，那么可能当你学完素有的语法后，却把前面的知识忘得一干二净。</p><p>所以，学习编程，需要多写代码，没有途径可走。</p></li><li><p>时刻注意代码规范</p><p>在我们学习时，一定要养成良好的编程习惯，例如适当的编写注释，定义变量名称时不要随意使用无意义的字符。</p></li><li><p>开发经验必不可少</p></li></ul><p>当你熟练的掌握一门编程语言的语法时，你还需要大中型产品的开发经验，它会让你学得更多，简而言之站得更高，看得更远。</p><p><img src="/2019/08/29/Python-01-Python教程基础/Python知识体系框架.png" alt="Python知识体系图"></p><h1 id="Python-2-x和Python-3-x，初学者应该如何选择？"><a href="#Python-2-x和Python-3-x，初学者应该如何选择？" class="headerlink" title="Python 2.x和Python 3.x，初学者应该如何选择？"></a>Python 2.x和Python 3.x，初学者应该如何选择？</h1><p>推荐选择Python 3.x，因为Python将在2020不再更新Python 2.x，并且Python 3.x比Python 2.x 具有更多的特性与功能。</p><p>这里只是推荐，详细看Python3和Python2的区别可以看这本:<a href="http://c.biancheng.net/view/4147.html" target="_blank" rel="noopener">📖《Python3和Python2的区别》</a></p><h1 id="Python版本区别，Python3和Python2区别详解"><a href="#Python版本区别，Python3和Python2区别详解" class="headerlink" title="Python版本区别，Python3和Python2区别详解"></a>Python版本区别，Python3和Python2区别详解</h1><p>学习完基础再来…暂时未编写😅</p><p>不过可以知道的是，Python3相比与Python2在<code>语句输出、编码、运算和异常等</code>方面做出了调整。</p><h1 id="Python2to3-自动将Python2-x代码转换成Python3-x代码"><a href="#Python2to3-自动将Python2-x代码转换成Python3-x代码" class="headerlink" title="Python2to3 自动将Python2.x代码转换成Python3.x代码"></a>Python2to3 自动将Python2.x代码转换成Python3.x代码</h1><p>学习完基础再来…暂时未编写😅</p><p>学完完基础再来…暂时未编写</p><h1 id="Python-PEP-及时追踪Python最新变化"><a href="#Python-PEP-及时追踪Python最新变化" class="headerlink" title="Python PEP 及时追踪Python最新变化"></a>Python PEP 及时追踪Python最新变化</h1><p>为了追踪Python的更新动态，我们需要借助Python PEP 文档</p><blockquote><p>Python PEP文档</p></blockquote><p>Python语法修改方案是由<code>邮件列表</code>的形式进行讨论，但Python的PEP文档发布了，新的变化才会生效。</p><p><code>PEP(Python Enhancement Proposal)</code>，中译为<code>Python改进方案</code>。它主要由三个用途</p><ul><li><p>通知: 汇总Python核心开发者重要信息</p></li><li><p>标准化: 提供代码风格，文档或者其他指导意见</p></li><li><p>设计: 对提交的新功能进行说明</p></li></ul><p>如果想要查看提交的<code>PEP</code>历史，可以点击这里:<a href="https://www.python.org/dev/peps/" target="_blank" rel="noopener">PEP0文档</a></p><h1 id="Python底层是用什么语言实现的"><a href="#Python底层是用什么语言实现的" class="headerlink" title="Python底层是用什么语言实现的"></a>Python底层是用什么语言实现的</h1><p>大多数讨论的Python，所指的是CPython，它是用C语言编写的。</p><p>不仅有用C语言编写的Python也有用其他语法编写的Python。</p><p>不同语言实现Python的的原因，大部分是为了解决某些实际问题而创建的，例如：</p><ul><li><p>在嵌入式系统中运行Python代码</p></li><li><p>在运行框架(Java/.NET)或其他语言做代码集成。</p></li><li><p>在Web浏览器中运行Python代码</p></li></ul><p>以上所述使用CPython需要花费开发者大量精力也很难实现，所以才有了各种实现方式的Python.</p><blockquote><p>Stackless Python</p></blockquote><p><code>Stackless Python</code>自称为Python增强版，它没有依赖C语言的调用栈。</p><p>其新添加的功能最重要的是:解释器管理的微线程</p><p>支持版本是2.7.9和3.3.5，Stackless Python的所有额外功能都是内置stackiess模块内的框架。</p><blockquote><p>JPython</p></blockquote><p>由Java实现的Python。它将代码编译为Java字节码，开发者可以在Pyton模块中无缝使用Java类</p><p>JPython与CPython的主要区别:</p><ul><li><p>真正的Java垃圾回收机制</p></li><li><p>没有<code>全局解释器锁(GlobalInterpreter Lock,GIL)</code>，在多线程应用中可以充分利用多个内核</p></li></ul><p>支持版本: 2.7</p><p>缺点: 缺少对C/Python扩展API的支持，预计JPython3.x支持C/Python扩展API</p><blockquote><p>IronPython</p></blockquote><p>IronPython将Python引入至.NET框架中。</p><p>支持版本: 2.7.5</p><p>缺点: 类似JPython</p><p>相比于CPython的优点:</p><ul><li><p>没有全局解释器锁</p></li><li><p>用.NET语言家族编写的代码可以轻松集成到IronPython中，反之亦然。</p></li><li><p>通过<code>Silverlight</code>，在所有主流Web浏览器中都可运行。</p></li></ul><blockquote><p>PyPy</p></blockquote><p>社区内呼声最高的Python实现，它是由Python重写的Python。</p><p>支持版本: 2.7完全兼容,PyPy3与3.25完全兼容</p><p>PyPy与CPython实现的主要区别:</p><ul><li><p>使用垃圾回收</p></li><li><p>集成跟踪JIT编译器，可以提高性能</p></li><li><p>借鉴Stackless Python在应用层的无栈特性。</p></li></ul><p>缺点: 对C/Python扩展API不完善，但为CPyExt子系统C扩展提供了某种程度的支持。</p><h1 id="了解Jupyter-Notebook，你已然超越了90-的Python程序员"><a href="#了解Jupyter-Notebook，你已然超越了90-的Python程序员" class="headerlink" title="了解Jupyter Notebook，你已然超越了90%的Python程序员"></a>了解Jupyter Notebook，你已然超越了90%的Python程序员</h1><p>简单介绍下，Jupyter Notebook就是个整合了代码、计算输出、解释文档、多媒体资源的多功能科学运行平台。</p><p>去看原文吧，这个知道有这个东西，以后再去学习。</p><p><a href="http://c.biancheng.net/view/5279.html" target="_blank" rel="noopener">💿原文传送门</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python系列第一章笔记，查看Python系列所有文章,请点击 &lt;a href=&quot;https://evanmeek.github.io/Python/&quot;&gt;💿&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://evanmeek.github.io/categories/Python/"/>
    
    
      <category term="Python系列" scheme="https://evanmeek.github.io/tags/Python%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Mac下安装Rust</title>
    <link href="https://evanmeek.github.io/2019/08/20/Mac%E4%B8%8B%E5%AE%89%E8%A3%85Rust/"/>
    <id>https://evanmeek.github.io/2019/08/20/Mac下安装Rust/</id>
    <published>2019-08-19T18:30:40.000Z</published>
    <updated>2019-08-29T17:50:26.180Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章记录了我是如何在Mac下安装rust的过程.</p><a id="more"></a><p>首先在你Shell的配置文件内加入下面两行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static</span><br><span class="line">export RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup</span><br></pre></td></tr></table></figure><p>然后打开终端，输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://sh.rustup.rs -sSf | sh</span><br></pre></td></tr></table></figure><p>中间稍微等待一下，选择安装的方式即可。</p><p>安装好后记得执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source $HOME/.cargo/env</span><br></pre></td></tr></table></figure><p>最后再编辑$HOME/.cargo/config文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[registry]</span><br><span class="line">index = &quot;https://mirrors.ustc.edu.cn/crates.io-index/&quot;</span><br><span class="line">[source.crates-io]</span><br><span class="line">registry = &quot;https://github.com/rust-lang/crates.io-index&quot;</span><br><span class="line">replace-with = &apos;ustc&apos;</span><br><span class="line">[source.ustc]</span><br><span class="line">registry = &quot;https://mirrors.ustc.edu.cn/crates.io-index/&quot;</span><br></pre></td></tr></table></figure><p>就大功告成啦，赶快写一个HelloWorld吧!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章记录了我是如何在Mac下安装rust的过程.&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://evanmeek.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Rust" scheme="https://evanmeek.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Mac下超好用的风扇控制与温度监控软件————TG Pro</title>
    <link href="https://evanmeek.github.io/2019/08/20/Mac%E4%B8%8B%E8%B6%85%E5%A5%BD%E7%94%A8%E7%9A%84%E9%A3%8E%E6%89%87%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%B8%A9%E5%BA%A6%E7%9B%91%E6%8E%A7%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E2%80%94%E2%80%94TG-Pro/"/>
    <id>https://evanmeek.github.io/2019/08/20/Mac下超好用的风扇控制与温度监控软件————TG-Pro/</id>
    <published>2019-08-19T17:56:37.000Z</published>
    <updated>2019-08-29T17:50:26.170Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用两天MacBookPro真实感受</title>
    <link href="https://evanmeek.github.io/2019/08/17/%E4%BD%BF%E7%94%A8%E4%B8%A4%E5%A4%A9MacBookPro%E7%9C%9F%E5%AE%9E%E6%84%9F%E5%8F%97/"/>
    <id>https://evanmeek.github.io/2019/08/17/使用两天MacBookPro真实感受/</id>
    <published>2019-08-17T08:59:10.000Z</published>
    <updated>2019-08-29T17:50:26.153Z</updated>
    
    <content type="html"><![CDATA[<p>经过漫长的等待，我的MacBook Pro终于是到货了，经过我的两天调教，我已经逐渐习惯了。<br><a id="more"></a></p><p>&emsp;前天一大早，我接到了电话，不用想，肯定就是我得mbp到货了。可能是我看过太多测评视频的缘故，当我亲手开箱时，却没有被mbp给惊艳到，不过机身确实非常薄，应该是我接触过的电脑最薄的台15寸笔记本了。mbp支持单手开合，这一点我非常满意，草草的设置完第一次启动系统后，我迫不及待的安装我所需的软件，由于早前我看过一些关于Mac OS X的文章，我马上就去配置了<code>Homebrew</code>，但我发现，貌似配置国内源有点困难，没有我在<code>Manjaro</code>下那么方便，快捷。</p><p>&emsp;经过我的一番折腾，<code>Homebrew</code>总算是安装好了，我便开始配置开发环境，首先选择了传说中功能非常强大的<code>iterm2</code>，功能强大到我不能快速上手，必须花费时间去研究研究它才能顺手使用。在我折腾Mac时，十分讨厌这个键盘布局，现在亦是如此，把fn键放在键盘的边缘处，我每次想要按<code>control</code>时总是误触，以及touchbar的escape键，简直按起来一点反馈没有，所以我就通过<code>karabiner</code>这款软件修改了个我习惯的键位布局。</p><p>&emsp;不得不说mbp的这个屏幕，简直是太棒了，我原先用的是dell的4k屏幕，但在我用mbp时，甚至会觉得比4k屏好，可能是色彩非常准确的缘故吧。可能因为屏幕素质太过于优秀的缘故，耗电并不如网上说的那样，从早到晚不用充电，经过实测，这款标配的mbp 2019款在<code>chrome</code>十几个网页+<code>Emacs</code>+<code>NeoVim</code>+<code>微信</code>+<code>腾讯QQ</code>+<code>Telegram</code>+<code>蓝牙耳机</code>+<code>Wifi开启</code>+<code>网易云</code>+<code>屏幕亮度80%</code>+<code>键盘背光最亮</code>的情况下，3个半小时耗电50%，你可能觉得我在吹它～，但它确实就是这么厉害。</p><p>&emsp;超大的触摸板，简直太好用，配合上Mac OS X的触摸板手势，对窗口的管理完全掌握在你的手指间。再说说机器发热的情况，在我上面所提到的使用环境下，几乎感觉不到mbp在发热，但是在打开一些大型应用，例如ps,pr,ae这些软件时，Mac OSX就像是提高了机器性能一般，风扇开启了高转速，机器也随之发热了，但得得益于mbp的外壳，可以在边缘垫上一元硬币辅助散热，并且效果还不错，虽说在开启大型应用mbp会发热严重，但也只是部分区域会感受到热，在手腕，手拖处几乎感觉不到，打字时由于蝶式键盘的缘故，只要是每个手指精确的放在键帽上，只能感觉到微微发热，但是在键帽之间的缝中可以明显感受到烫手。</p><p>&emsp;最后吹一下mbp，它确实时非常好用，就是价格稍高，对于普通家庭来说，进两万元的支出也不是一个小数目了，希望有生之年能看到Apple能做物美价廉，感动人心的好产品(笑</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经过漫长的等待，我的MacBook Pro终于是到货了，经过我的两天调教，我已经逐渐习惯了。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="英文文章" scheme="https://evanmeek.github.io/categories/%E8%8B%B1%E6%96%87%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="个人感想" scheme="https://evanmeek.github.io/tags/%E4%B8%AA%E4%BA%BA%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Happiness from the heart</title>
    <link href="https://evanmeek.github.io/2019/08/11/Happiness-from-the-heart/"/>
    <id>https://evanmeek.github.io/2019/08/11/Happiness-from-the-heart/</id>
    <published>2019-08-11T08:55:35.000Z</published>
    <updated>2019-08-29T17:50:26.169Z</updated>
    
    <content type="html"><![CDATA[<p>15分钟前，我观看了一集TED演讲，我从中了解了什么才是真正的快乐。这篇文章就讲述了我的感悟与亲身体验。</p><p>Fifteen minutes ago, I watched a TED talk, from which I learned what real happiness is.  This article and related my feeling and experience of happiness from the heart.</p><a id="more"></a><h1 id="English"><a href="#English" class="headerlink" title="English"></a>English</h1><p>Next, I will ask a few questions, which are very simple, because you must have the answer in your heart.  So the first question is: Are you happy today? I think you already have the answer, then the next question is: why are you happy or unhappy today? The point is why you are happy, or why you are not happy.  For example, you may not be happy today because you are arranged to work with colleagues you don’t like.  Of course, I think you should have no colleagues you don’t like.  In this example, the reason why you are unhappy &gt; is to work with colleagues you don’t like, but what I want to say is: you must stop being unhappy because of colleagues or because of something or some external factors.  This is what I want to say.  You may understand this: don’t be unhappy because of external factors.  But in fact, what I want to express is: happiness or happiness is from the heart, not &gt; from external factors. even if you work with your favorite colleagues, it cannot be the reason why you are happy today. real happiness is from the heart.</p><h1 id="Chinese"><a href="#Chinese" class="headerlink" title="Chinese"></a>Chinese</h1><p>下面，我将会问几个问题，这几个问题十分简单，因为你们心中肯定有答案。那么第一个问题是：你今天开心吗？我想你应该已经有了答案，那么接下来是第二个问题：你今天为什么开心或者为什么不开心？重点在于为什么开心，或者为什么不开心。举个例子，你今天可能会因为被领导安排与不喜欢的同事共事，你不开心。当然，我觉得你应该没有不喜欢的同事。这个例子中，你不开心的原因就是与不喜欢的同事共事，但我想说的是：你必须停止因为同事或者说是因为某个事物又或是某些外部因素让你不开心。这也就是我想说的。你可能会理解成：不要因为外部因素，从而使得不开心。但其实我想表达的是：快乐或开心是由自内心的，而不是由自外部因素的，就算是你跟喜欢的同事共事，那么也不能成为你今天快乐的原由，真正的快乐是发自内心。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;15分钟前，我观看了一集TED演讲，我从中了解了什么才是真正的快乐。这篇文章就讲述了我的感悟与亲身体验。&lt;/p&gt;
&lt;p&gt;Fifteen minutes ago, I watched a TED talk, from which I learned what real happiness is.  This article and related my feeling and experience of happiness from the heart.&lt;/p&gt;
    
    </summary>
    
      <category term="英文文章" scheme="https://evanmeek.github.io/categories/%E8%8B%B1%E6%96%87%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="个人感想" scheme="https://evanmeek.github.io/tags/%E4%B8%AA%E4%BA%BA%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>The process of purchasing MacBook Pro</title>
    <link href="https://evanmeek.github.io/2019/08/02/The-process-of-purchasing-MacBook-Pro/"/>
    <id>https://evanmeek.github.io/2019/08/02/The-process-of-purchasing-MacBook-Pro/</id>
    <published>2019-08-02T10:18:24.000Z</published>
    <updated>2019-08-29T17:50:26.183Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章记录我买MBP的过程.</p><a id="more"></a><p>&emsp;Because I need to use PS and lightweight PR and have the need to prgramming,and the current AlienWareR13 can no longer met my needs.After one day and on night’s selection,I finally chose MacBookPro 15.6 with difficulty.</p><p>&emsp;The configuration diagram is as follows.<img src="/2019/08/02/The-process-of-purchasing-MacBook-Pro/配置图.jpg" alt="配置图"></p><p>&emsp;First of all, 16GB is enogh for me to run a few more virtual machines, and it is also fast in drawing and editing. Although many people on the Internet said that heat dissipation is not good.I found that 2018 version of heat dissipation is not very good when I readlly got to know it. Considering the problem of heat dissipation, I also bought i9 version instead of i9 version. I hope erverthing goes well!</p><p>&emsp;The fllowing is the spitting. When I was preparing to place an order, I was looking for the student discount page for half a day. When I found it, I wanted to know what the student discount conditions were. As a result, I didn’t see the relevant instructions until I went to Baidu to know that I needed the student certificate from full-time universities.</p><p>&emsp;When I learned some rough information from the internet, I placed the order. when placing the order, I had to pay first to verify whether the student id card was qualified. this is really disgusting … as for why, I will mention later.  After I placed the order, I just waited for Apple to send me an email so that I could know what the student discount request was. In the middle of the night, I received a text message from Apple, which said: Let me check the email, and the information about the student discount conditions is in it.  The second disgusting thing that happened to me at this moment was that I didn’t receive e-mail!  However, I did not have the option to apply for resending the mail, which made me very angry and the shopping experience was very poor.  Since the customer service is off duty, I can only ask the next morning.  The customer service personnel helped me successfully send the student id card, and then I waited for the verification to pass.  What made me feel sick for the third time has happened again!  My order was cancelled because my credentials were invalid. However, Apple did not send a single email. Only when I checked the order status could I find that it had been cancelled.  I went to ask the customer service again, and the information the customer service gave me was: the name of the student id card and the name of the consignee did not match, so it was cancelled.  I feel very speechless … can’t parents give their children computers?  !  The consignee must also match the student ID.  Now I sit and wait for the refund. However, the refund time makes me despair even more. It takes me 5 working days at the latest, and I bought it on Friday. Apple employees will have a holiday at the weekend, so I can’t handle it yet. That is to say, I have to wait for a whole week at the latest to receive the refund!  I think it takes so much time to place a new order!  It just makes me feel that the shopping experience is terrible!</p><p>&emsp;I’m just waiting for a refund and then placing another order. I don’t even want to buy Mac Book Pro now. It’s so annoying!</p><p>&emsp;由于我需要使用PS和轻量级的PR并且还有写代码的需求，并且现役的这台AlienWareR13已经不能够满足我的需求了。经过一天一夜的挑选，最终艰难的选择了Mac Book Pro 15.6。</p><p>&emsp;这是我的配置图.</p><p>&emsp;首先，16GB对于我来说是足够的，可以用来跑多几个虚拟机，而且制图时和剪辑时速度也快，虽然网上很多人说散热不行，但当我真实去了解后才发现是2018版的散热不太行，而且考虑到散热的问题，我也没有买i9版本，而是买了9代 i7，希望一切顺利吧！</p><p>&emsp;下面就是吐槽了。在我准备下单时，我一直在找学生优惠的页面，找了半天，当我找到后，我想了解一下学生优惠的条件是什么，结果我应是没有看到相关的说明，直到我去百度才知道需要全日制高校的学生证明。</p><p>&emsp;当我从网络上了解到了一些粗略的信息后，我便下单了，下单时是先付款才能验证学生证是否合格，这一点真的恶心…至于为什么，我后面会提到。我下单后就是等待Apple给我发送邮件，这样我才能知道学生优惠的要求是什么，在半夜时，我收到了Apple的短信，短信内容是:让我检查电子邮件，有关学生优惠的条件信息在里面。这时就让我遇到第二件很恶心的事，就是我并没有收到电子邮件！但是并没有申请重新发送邮件的选项，这就让我很生气了，购物体验极差。由于客服已下班，我只能第二天早晨去询问了。客服人员帮助我成功的发送了学生证的凭证，然后我就等待验证通过。让我感到第三次恶心的事又发生了！我的订单被取消了，因为我的凭证无效，然而Apple连一个邮件也不发，只有我去查看订单状态才能发现已经被取消。我又去询问客服，客服给我的信息是：由于学生证的姓名和收货人的姓名不符合，所以被取消了。我感到十分无语…难道父母送给孩子电脑都不可以吗？！还必须要收货人跟学生证相符。现在我就坐等退款了，然而退款的时间更让我绝望，最晚需要5个工作日，而且我是周五买的，周末时Apple的员工要放假，所以还不能处理，也就是说我最晚需要等待整整一周的时间，才能收到退款！我想重新下单就需要浪费这么多的时间！简直是让我感到，购物体验极差！</p><p>&emsp;吐槽完了，我现在就是等待退款，然后重新下单，我甚至在都不想买Mac Book Pro了，太让人生气了！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章记录我买MBP的过程.&lt;/p&gt;
    
    </summary>
    
      <category term="英文文章" scheme="https://evanmeek.github.io/categories/%E8%8B%B1%E6%96%87%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="购物体验" scheme="https://evanmeek.github.io/tags/%E8%B4%AD%E7%89%A9%E4%BD%93%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>Rust-理解所有权</title>
    <link href="https://evanmeek.github.io/2019/07/30/Rust-%E7%90%86%E8%A7%A3%E6%89%80%E6%9C%89%E6%9D%83/"/>
    <id>https://evanmeek.github.io/2019/07/30/Rust-理解所有权/</id>
    <published>2019-07-29T19:11:46.000Z</published>
    <updated>2019-08-29T17:50:26.171Z</updated>
    
    <content type="html"><![CDATA[<p>根据Rust中文学习了些Rust的知识，所以记录下Rust中很重要的特性之一:所有权<br><a id="more"></a></p><h1 id="认识所有权"><a href="#认识所有权" class="headerlink" title="认识所有权"></a>认识所有权</h1><p>所有权是Rust最独特的功能，使得Rust不需要GC即可保证内存安全.</p><p>本篇文章介绍所有权及其相关功能：借用、slice，以及Rust如何在内存中布局数据</p><h1 id="什么是所有权"><a href="#什么是所有权" class="headerlink" title="什么是所有权"></a>什么是所有权</h1><p>所有权（ownership)是Rust的核心特性之一，其最大的特点是解决了目前大部分编程语言对内存管理方式的缺陷，例如:一些语言通过GC(垃圾回收机制)进行管理内存，在程序运行时不断的寻找无用的内存，但这种方式会使得程序的效率降低。另一种方式则是内存的分配和释放由程序员进行管理，所以经常会出现遗漏或设计缺陷，从而使得程序问题不断。而Rust的所有权特性则恰好解决了以上两个常见的问题。</p><p>在理解所有权之前，让我们先了解一个常用的数据结构:Stack Heap.</p><h2 id="栈-Stack-与-堆-Heap"><a href="#栈-Stack-与-堆-Heap" class="headerlink" title="栈(Stack) 与 堆(Heap)"></a>栈(Stack) 与 堆(Heap)</h2><blockquote><p>程序是由<strong>算法</strong>和<strong>数据</strong>组成的，<code>栈堆</code>这种数据结构则是一种处理数据的算法，而在所有权的概念中，数据是存在栈上还是堆上很大的影响了程序的行为。</p></blockquote><p><code>栈</code>的结构是一种后进先出的方式处理数据的，生活中的羽毛球例子可以清晰的描述这一关系:当我们将羽毛球放入羽毛球桶时，想要拿走时，总是拿走的最后一个放入的羽毛球，我们不能拿走最后一个放入之前的羽毛球。我们把放入羽毛球(增加数据)叫做<strong>入栈</strong>，拿出羽毛球(移出数据)叫做<strong>出栈</strong>。</p><p><strong>‘栈’的优点是，速度快。这主要是因为如果要获取数据则总是从栈顶直接获取，而不需要寻找某个特定的位置需要读取数据。第二个原因是:栈中数据所占内存大小都已固定也可知。</strong></p><p><code>堆</code>的结构是一种随机的方式处理数据的，生活中的例子每天吃饭可以清晰的描述这一关系:一日三餐，我们总是会想要吃什么，世界上有那么多美食，此时我们就需要选择想要的菜品才能进食，并且在要选择菜品时，我们还必须考虑是否有足够的金钱付款，而在我们选择菜品时是根据菜名通过服务员才能让厨房处理，最终上菜。我们把为菜品付款称作在<strong>堆上分配内存</strong>，而菜名称作<strong>指针</strong>，我们需要通过通过指针访问在堆上分配的内存.</p><p><strong><code>堆</code>的优点是，不受限于只能获取最后一个存入的数据，因为数据都是成堆摆布的，如果需要访问需要通过指针</strong>。</p><p><code>堆</code>对数据的操作速度没有<code>栈</code>快，因为<code>堆</code>需要通过指针才能访问数据.</p><p>若数据大部分存在<code>堆</code>上，则有可能出现一些重复数据，为了清除这些无用的数据，确保内存空间不会被耗尽。这些问题正是所有权系统需要处理的。想必读者们也应该知道，所有权的存在就是为了管理堆数据的，当你理解了所有权后，将在编码时不用总考虑栈和堆了。</p><h1 id="所有权规则"><a href="#所有权规则" class="headerlink" title="所有权规则"></a>所有权规则</h1><ul><li><p>Rust中，每一个值都有一个称为__所有者(owner)的变量。</p></li><li><p>值只能有一个所有者。</p></li><li><p>当所有者离开作用域，这个值则会被遗弃。</p></li></ul><h1 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h1><p>让我们看第一个关于所有权的例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 在这里使用s无效，s尚未生命</span><br><span class="line">&#123;</span><br><span class="line">    let s = &quot;hello&quot;; // 从此处起，s 有效</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">// 在这里使用s无效，因为作用域已结束</span><br></pre></td></tr></table></figure><p>这个例子中，当<code>s</code>进入作用域后，直到它离开作用域为止，它一直是有效的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据Rust中文学习了些Rust的知识，所以记录下Rust中很重要的特性之一:所有权&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://evanmeek.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Rust" scheme="https://evanmeek.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Emacs is sexy!</title>
    <link href="https://evanmeek.github.io/2019/07/26/Emacs-is-sexy/"/>
    <id>https://evanmeek.github.io/2019/07/26/Emacs-is-sexy/</id>
    <published>2019-07-26T14:04:20.000Z</published>
    <updated>2019-08-29T17:50:26.159Z</updated>
    
    <content type="html"><![CDATA[<p>Emacs is a highly extensible text editor.It is built on a C core, and provides a fully featured Lisp environment</p><p>There’s a reason why Emacs was featured in Tron Legacy - because it’s sexy!</p><p>You can use Emacs for all of your text processing needs, internet and social network interations, hacking, coding, maaging to-do’s and organizing your daily schedule, playing Tetris, and manay other awesome things. It can even provide you with free psychotherapy and counseling using the built in doctor. A vibrant community of hackers is constantly writing new extensions, thanks to the power of the Emacs Lisp environment.</p><p>GNU Emacs is Free Software, both free as in free beer and free as in free speech. The original Emacs was written by St. iGNUcius himself —- Richard Stallman.</p><p>Not only does it give the user the four essential freedoms, its architecture is built in such a way that you have the power to mold it, change it and make it comply to your computering needs.</p><a id="more"></a><h1 id="Why-use-Emacs"><a href="#Why-use-Emacs" class="headerlink" title="Why use Emacs?"></a>Why use Emacs?</h1><p>Emacs is a very pwoerful text processor, giving you the power to manipulate documents quickly and efficiently. You can easily move through and edit paragraphs, sentences, words, and logical blocks; blaze through text using powerful search tools; and easily edit thousands of lines at once using regular expressions, keyboard macros and more.</p><h1 id="Colorful-text-editor"><a href="#Colorful-text-editor" class="headerlink" title="Colorful text editor"></a>Colorful text editor</h1><p>Emacs can be cutomized in every conceivable way, including its looks. You can strip it down, choose between dozens of easy to intall themes with M-x load-theme, or even create your own and share it with your friends. Here are a couple of nice theme galleries: Emacs Themes, Emacs Theme Gallery.</p><h1 id="Et-tu-Programmer"><a href="#Et-tu-Programmer" class="headerlink" title="Et tu, Programmer?"></a>Et tu, Programmer?</h1><p>There are tools for every programming languaage out there. Lisp, Ruby, Python, PHP, Java, Erlang, JavaScript, C, C++, Prolog, Tcl, AWK, PostScript, Clojure, Scala, Perl, Haskell, Elixir all of there languages and more are supported in Emacs. Beacuse of the powerfull Lisp core. Emacs is easy to extend to add support, debugging, code browsing, version control integration and much more.</p><h1 id="Vim-user"><a href="#Vim-user" class="headerlink" title="Vim user?"></a>Vim user?</h1><p>Let tell about Spacemacs! Spacemacs is a community-driven Emacs distribution that brings together the world of Vim and Emacs into one text eeditor. It also features ergonomics and mnemonickey binding design, and also works great as a starter pack for newcomers.</p><h1 id="More"><a href="#More" class="headerlink" title="More!"></a>More!</h1><p>Org mode helps you to keep notes, maintain TODO lists, plan projects and author documents. You can use your Org documents to create HTML websites like this one or export to LaTeX, Beamer, OpenDocuments and many other formats.</p><p>Tramp allows you to edit remote files without leaving Emacs. You can seamlessly edit files on remote servers via SSH for FTP.edit local files with su/sudo , and much more.</p><p>M-x butterfly unleashes the powers of the butterfly.</p><p>Use the built in IRC client ERC along with BitlBee to connect to your favorite chat services, or use the Jabber package to hop on any XMPP service.</p><p>Out of the box Emacs includes a mail client, web browser, calendar, and games; you can even edit video and images inside Emacs. There are more than 3,000 packages for Emacs, and more are written all the time. You can easilly extend your Emacs with new packages from GNU ELPA, MELPA and Marmelade repositories.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Emacs is a highly extensible text editor.It is built on a C core, and provides a fully featured Lisp environment&lt;/p&gt;
&lt;p&gt;There’s a reason why Emacs was featured in Tron Legacy - because it’s sexy!&lt;/p&gt;
&lt;p&gt;You can use Emacs for all of your text processing needs, internet and social network interations, hacking, coding, maaging to-do’s and organizing your daily schedule, playing Tetris, and manay other awesome things. It can even provide you with free psychotherapy and counseling using the built in doctor. A vibrant community of hackers is constantly writing new extensions, thanks to the power of the Emacs Lisp environment.&lt;/p&gt;
&lt;p&gt;GNU Emacs is Free Software, both free as in free beer and free as in free speech. The original Emacs was written by St. iGNUcius himself —- Richard Stallman.&lt;/p&gt;
&lt;p&gt;Not only does it give the user the four essential freedoms, its architecture is built in such a way that you have the power to mold it, change it and make it comply to your computering needs.&lt;/p&gt;
    
    </summary>
    
      <category term="英文文章" scheme="https://evanmeek.github.io/categories/%E8%8B%B1%E6%96%87%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="转载" scheme="https://evanmeek.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>FuShou-Mountain-Day-Trip</title>
    <link href="https://evanmeek.github.io/2019/07/23/FuShou-Mountain-Day-Trip/"/>
    <id>https://evanmeek.github.io/2019/07/23/FuShou-Mountain-Day-Trip/</id>
    <published>2019-07-23T14:16:13.000Z</published>
    <updated>2019-08-29T17:50:26.159Z</updated>
    
    <content type="html"><![CDATA[<p>Today I gone to the FuShou mountain,So this article is about it.</p><a id="more"></a><p>&emsp;It’s sunny,But I <strong>arrived</strong><code>到达</code> at my <strong>destination</strong><code>目的地</code> at <strong>noon</strong><code>正午</code>.There were manay people.After a long <strong>queue</strong><code>排队</code>,I finally got the <strong>ticket</strong><code>门票</code>.Then I got on the <strong>interval bus</strong><code>区间车</code> again.</p><p>&emsp;It was a <strong>bumpy journey to the foot</strong><code>一路颠簸</code> of Fushou Mountain.The first thing I saw was a <strong>snack area</strong><code>小食区</code> supported by a <strong>pile</strong><code>支撑</code> of read <strong>tents</strong><code>帐篷</code>.Then when  I entered the snack area,the air was filled with <strong>grabbing food</strong><code>手抓饭</code>,<strong>thin-skinned steamed buns</strong><code>薄皮包子</code>,the <strong>aroma</strong><code>香气</code> of <strong>barbecue kebabs</strong><code>烤肉串</code> and the <strong>sweet</strong><code>香甜的</code> <strong>Cavas</strong><code>卡瓦斯</code>,Ice cream <strong>attracted</strong><code>吸引</code> me.I <strong>couldn’t resist</strong><code>无法抵御</code> the <strong>temptation</strong><code>美食</code> of delicious food, so I ate a lot of delicious food in Xinjiang.</p><p>&emsp;After <strong>full stomach</strong><code>饱腹</code>,I began to climb the mountain. The sun was very sunny. Before I reached the <strong>glass trestle</strong><code>玻璃栈道</code>,my skin was red.</p><p>&emsp;Glass planks up to 300M,built of steel and glass.People have a head and look through the glass to see the ground.Although I dare not look down from the highrise, I can’t fell scared on the glass path. Maybe I trust safety of these projects.</p><p>&emsp;Happy time is always short,and soon,we will go home by car…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today I gone to the FuShou mountain,So this article is about it.&lt;/p&gt;
    
    </summary>
    
      <category term="英文文章" scheme="https://evanmeek.github.io/categories/%E8%8B%B1%E6%96%87%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="个人感想" scheme="https://evanmeek.github.io/tags/%E4%B8%AA%E4%BA%BA%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>My-Monitor</title>
    <link href="https://evanmeek.github.io/2019/07/20/My-Monitor/"/>
    <id>https://evanmeek.github.io/2019/07/20/My-Monitor/</id>
    <published>2019-07-20T14:10:55.000Z</published>
    <updated>2019-08-29T17:50:26.155Z</updated>
    
    <content type="html"><![CDATA[<p>I had been trying to write an article about the monitor a few days ago, and tooday i finally <strong>realized</strong>.</p><a id="more"></a><p>&emsp;I <strong>met</strong> the monitor in 2015,When we were both <strong>junior three students</strong>.,Because I <strong>dropped out</strong> of junior high school, I had <strong>little contact</strong> with her in the <strong>previous</strong> few years.<strong>Probably</strong> since I went to college.I have <strong>occasional</strong> contact with the monitor <strong>who was about to face</strong> the college <strong>entrance examination</strong> talked to me a lot about my school and her views. I also expressed my point of view, and we <strong>exchanged</strong> our thoughts about life.</p><p>&emsp;More and more, I feel that the monitor is more and more interesting. Many of her views are <strong>similar</strong> to mine.We sometimes talk for a long time and forget the time.But our <strong>relationship</strong> is still a friend.</p><p>&emsp;<strong>Towards the end of my freshman year</strong>,my <strong>relationship</strong> with the monitor changed <strong>dramatically</strong>,Which is why I wrote an article about the monitor.On a very normal day,the monitory <strong>suddenly</strong> came to me and said that she wanted to come to my university,because my university is a <strong>higher ranking</strong> university in Guangdong.Kind of me,<strong>carefully</strong> answered some questions for her, and said that I really want to talk with the monitor of a university,I talk with the monitor more and more.We talk a lot to each other,whether it’s about life,learning or even the future.</p><p>&emsp;Gradually,I fell in love with the monitor.From the first time I sent a photo to her,to the first time I sent a video to her,I knew that I had <strong>fallen</strong> in love with her.</p><p>&emsp;I like the monitor’s voice,her attitude when talking,her eyes,some of her little jokes,some of her small shortcomins,like all of her.Now that I have <strong>identified</strong> everything. I will say to her <strong>personally</strong> when I return to Guangzhou,”I love you,my monitor.”</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I had been trying to write an article about the monitor a few days ago, and tooday i finally &lt;strong&gt;realized&lt;/strong&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="英文文章" scheme="https://evanmeek.github.io/categories/%E8%8B%B1%E6%96%87%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="个人感想" scheme="https://evanmeek.github.io/tags/%E4%B8%AA%E4%BA%BA%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Serimu Lake Day Trip</title>
    <link href="https://evanmeek.github.io/2019/07/20/Serimu-Lake-Day-Trip/"/>
    <id>https://evanmeek.github.io/2019/07/20/Serimu-Lake-Day-Trip/</id>
    <published>2019-07-19T18:04:31.000Z</published>
    <updated>2019-08-29T17:50:26.178Z</updated>
    
    <content type="html"><![CDATA[<p>几天前，我去了新疆的赛里木湖，所以便有了这篇文章。</p><p>A few days ago,I went to Serimu Lake in Xinjiang,So I had this article.</p><a id="more"></a><h1 id="English"><a href="#English" class="headerlink" title="English"></a>English</h1><p>&emsp; Early, I was woken up by a phone call,not the monitor’s phone(monitor will not get up so early),I was <strong>confused</strong> to <strong>pick up</strong> the phone to answer,the phone came from my father’s <strong>voice</strong>.After the phone call,I <strong>immediately</strong> get out of bed and wash.Let me get up at 7 a.m in the summer <strong>vaction</strong>, in addition to the monitor’s phone,that may be what let me <strong>attention</strong> the new.</p><p>&emsp;<strong>In a hurry</strong>,I <strong>arrived</strong> at Grandma’s house.I asked my father,”What are you going to do today? Why so early? My father answered,”Today your uncle is going to take you to Serimu Lake to play,so let you come and your uncle will pick us up later.”After my father said that.I was so happy that when i returned to XinJiang.I hardly ever went out to play.Every day I went out to eat meat.</p><h1 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h1><p>&emsp;早早的，我被一通电话闹醒，不是班长的电话，班长不会那么早起，我迷迷糊糊地拿起手机接听，电话那头传来我爸的声音。通完电话，我立刻下床，洗漱，能让我暑假早晨7点就起床的，除了班长的电话，那可能就是什么好消息了吧。</p><p>&emsp;匆匆忙忙地，我到了奶奶家。我问爸:”今天要去干什么啊,怎么那么早？”,我爸回答:”今天你大伯要带你去赛里木湖玩，所以让你来，等下你大伯就来接我们。”，我爸说完，我心里开心得不行，回到新疆，就没怎么出去玩过，每天都是出去吃肉..</p><p>&emsp;不知过了多久，我大伯终于来了，我们便开启了我们的旅程。我们一路人从伊宁市64团出发，要行驶将近70km才能到达赛里木湖。途中我看到很多曾经只能在</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;几天前，我去了新疆的赛里木湖，所以便有了这篇文章。&lt;/p&gt;
&lt;p&gt;A few days ago,I went to Serimu Lake in Xinjiang,So I had this article.&lt;/p&gt;
    
    </summary>
    
      <category term="英文文章" scheme="https://evanmeek.github.io/categories/%E8%8B%B1%E6%96%87%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="个人感想" scheme="https://evanmeek.github.io/tags/%E4%B8%AA%E4%BA%BA%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Do you know Linux?</title>
    <link href="https://evanmeek.github.io/2019/07/17/Do-you-know-Linux/"/>
    <id>https://evanmeek.github.io/2019/07/17/Do-you-know-Linux/</id>
    <published>2019-07-16T16:22:22.000Z</published>
    <updated>2019-08-29T17:50:26.160Z</updated>
    
    <content type="html"><![CDATA[<p>I have been using Linux for about a year and a half.This article let’s talk about Linux.</p><p>&emsp;Linux is an operating system kernel,In addition to some experts,most Linux users are uing Linux dirtributions.The Linux dirtributions is <strong>preintegrated</strong> with the Linux operating system and <strong>various</strong> application software for users.</p><p>&emsp;The Linux kernel was first released by Linus Trovars on October 5,1999.Although the Linux kernel is develpoed,it does not have the tools included in an operating system,but there is a GNU tool that can be used as a system tool for Linux,so Linux is also called GNU/Linux.Currently,Linux can be used on large computers,supercomputers,mobile phones,<strong>tables</strong>,routers,<strong>televisions</strong>,<strong>game consoleds</strong> and computers,Such as,the Android operating system is based on the Linux kernel.</p><p>&emsp;You maybe ask,can Linux be used as an operating system for  everyday use? I will answer you with <strong>certainty</strong>,Linux Can do it.This article was broin in Arch Linux,I can do <strong>entertainment</strong> and work on Linux.</p><p>&emsp;I love Linux,forever.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have been using Linux for about a year and a half.This article let’s talk about Linux.&lt;/p&gt;
&lt;p&gt;&amp;emsp;Linux is an operating system kernel
      
    
    </summary>
    
      <category term="英文文章" scheme="https://evanmeek.github.io/categories/%E8%8B%B1%E6%96%87%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="个人感想" scheme="https://evanmeek.github.io/tags/%E4%B8%AA%E4%BA%BA%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>What is Vim?</title>
    <link href="https://evanmeek.github.io/2019/07/14/What-is-Vim/"/>
    <id>https://evanmeek.github.io/2019/07/14/What-is-Vim/</id>
    <published>2019-07-14T12:08:54.000Z</published>
    <updated>2019-08-29T17:50:26.164Z</updated>
    
    <content type="html"><![CDATA[<p>The editor I use every day is VIM.This article introduces the hirstory of the VIM.<br><a id="more"></a></p><p><img src="/2019/07/14/What-is-Vim/VIM.png" alt="VIM"></p><p>&emsp;Bram Miller <strong>purchased</strong> hisr Amiga computer in the late 1980s,At this time,there is no editor vi on his computer. So he started with an open source vi <strong>repilica</strong> version of Stevie，developed version 1.0 of Vim.<strong>The initial goal</strong> was to completely copy the function of vi.</p><p>&emsp;After that,Vim has added countless new features. As the first milestone.version 3.0 of 1944 joined the split window mode,It can edit multiple files <strong>simultanesouly</strong> in the same terminal.</p><p>&emsp;At 1996 released Vim 4.0 in 1996 using the version of the GUI.1998 Vim 5.0 version added syntax highlighting.2001 Vim 6.0 version added Code floding,Plugin,<strong>Multi-anguage support</strong> ,Vertical segmentation window etc.The Vim 7.0 release was released in May 2006 added <strong>Spell check</strong>,<strong>Context-sensitice completion</strong>,<strong>Tab editing</strong> etc.</p><p>&emsp;The latest version of Vim is now Vim8</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The editor I use every day is VIM.This article introduces the hirstory of the VIM.&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="英文文章" scheme="https://evanmeek.github.io/categories/%E8%8B%B1%E6%96%87%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="VIM" scheme="https://evanmeek.github.io/tags/VIM/"/>
    
  </entry>
  
  <entry>
    <title>平铺式桌面-从入门到入坟</title>
    <link href="https://evanmeek.github.io/2019/07/12/%E5%B9%B3%E9%93%BA%E5%BC%8F%E6%A1%8C%E9%9D%A2-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/"/>
    <id>https://evanmeek.github.io/2019/07/12/平铺式桌面-从入门到入坟/</id>
    <published>2019-07-12T14:22:03.000Z</published>
    <updated>2019-08-29T17:50:26.158Z</updated>
    
    <content type="html"><![CDATA[<p>本文章详细地介绍了我目前的桌面.通过此文章，你可以做到让i3成为你的一把利刃。</p><a id="more"></a><h1 id="暂时未完成"><a href="#暂时未完成" class="headerlink" title="暂时未完成"></a>暂时未完成</h1><p>首先上图，我的i3桌面.</p><p><img src="/2019/07/12/平铺式桌面-从入门到入坟/桌面预览.png" alt="桌面预览"></p><h1 id="0x0-i3"><a href="#0x0-i3" class="headerlink" title="0x0 i3"></a>0x0 i3</h1><h2 id="一、安装i3"><a href="#一、安装i3" class="headerlink" title="一、安装i3"></a>一、安装i3</h2><p>安装i3很简单，我们直接输入下面这条命令即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; sudo pacman -S i3 compton polybar</span><br></pre></td></tr></table></figure><p>此时你可能会看到<code>i3-gaps</code>和<code>i3-wm</code>，选择哪个都可以，推荐<code>i3-gpas</code>，但如果你想拥有一个没有配置过的i3，那么你就直接安装<code>i3-wm</code>即可</p><h2 id="二、配置i3"><a href="#二、配置i3" class="headerlink" title="二、配置i3"></a>二、配置i3</h2><p>配置i3通过编辑<code>~/.config/i3/config</code>这个文件进行配置。</p><p>我这里已经有配置好的i3，你们可以直接使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># i3 config file (v4)</span><br><span class="line">#</span><br><span class="line"># Please see https://i3wm.org/docs/userguide.html for a complete reference!</span><br><span class="line">#</span><br><span class="line"># This config file uses keycodes (bindsym) and was written for the QWERTY</span><br><span class="line"># layout.</span><br><span class="line">#</span><br><span class="line"># To get a config file with the same key positions, but for your current</span><br><span class="line"># layout, use the i3-config-wizard</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Font for window titles. Will also be used by the bar unless a different font</span><br><span class="line"># is used in the bar &#123;&#125; block below.</span><br><span class="line">font pango:monospace 8</span><br><span class="line"></span><br><span class="line"># This font is widely installed, provides lots of unicode glyphs, right-to-left</span><br><span class="line"># text rendering and scalability on retina/hidpi displays (thanks to pango).</span><br><span class="line">#font pango:DejaVu Sans Mono 8</span><br><span class="line"></span><br><span class="line"># Before i3 v4.8, we used to recommend this one as the default:</span><br><span class="line"># font -misc-fixed-medium-r-normal--13-120-75-75-C-70-iso10646-1</span><br><span class="line"># The font above is very space-efficient, that is, it looks good, sharp and</span><br><span class="line"># clear in small sizes. However, its unicode glyph coverage is limited, the old</span><br><span class="line"># X core fonts rendering does not support right-to-left and this being a bitmap</span><br><span class="line"># font, it doesn&apos;t scale on retina/hidpi displays.</span><br><span class="line"></span><br><span class="line"># use these keys for focus, movement, and resize directions when reaching for</span><br><span class="line"># the arrows is not convenient</span><br><span class="line">set $up l</span><br><span class="line">set $down k</span><br><span class="line">set $left j</span><br><span class="line">set $right semicolon</span><br><span class="line"></span><br><span class="line"># use Mouse+Mod1 to drag floating windows to their wanted position</span><br><span class="line">floating_modifier Mod1</span><br><span class="line"></span><br><span class="line"># start a terminal</span><br><span class="line">bindsym Mod1+Return exec i3-sensible-terminal</span><br><span class="line"></span><br><span class="line"># kill focused window</span><br><span class="line">bindsym Mod1+Shift+q kill</span><br><span class="line"></span><br><span class="line"># start dmenu (a program launcher)</span><br><span class="line">bindsym Mod1+d exec dmenu_run</span><br><span class="line"># There also is the (new) i3-dmenu-desktop which only displays applications</span><br><span class="line"># shipping a .desktop file. It is a wrapper around dmenu, so you need that</span><br><span class="line"># installed.</span><br><span class="line"># bindsym Mod1+d exec --no-startup-id i3-dmenu-desktop</span><br><span class="line"></span><br><span class="line"># change focus</span><br><span class="line">bindsym Mod1+$left focus left</span><br><span class="line">bindsym Mod1+$down focus down</span><br><span class="line">bindsym Mod1+$up focus up</span><br><span class="line">bindsym Mod1+$right focus right</span><br><span class="line"></span><br><span class="line"># alternatively, you can use the cursor keys:</span><br><span class="line">bindsym Mod1+Left focus left</span><br><span class="line">bindsym Mod1+Down focus down</span><br><span class="line">bindsym Mod1+Up focus up</span><br><span class="line">bindsym Mod1+Right focus right</span><br><span class="line"></span><br><span class="line"># move focused window</span><br><span class="line">bindsym Mod1+Shift+$left move left</span><br><span class="line">bindsym Mod1+Shift+$down move down</span><br><span class="line">bindsym Mod1+Shift+$up move up</span><br><span class="line">bindsym Mod1+Shift+$right move right</span><br><span class="line"></span><br><span class="line"># alternatively, you can use the cursor keys:</span><br><span class="line">bindsym Mod1+Shift+Left move left</span><br><span class="line">bindsym Mod1+Shift+Down move down</span><br><span class="line">bindsym Mod1+Shift+Up move up</span><br><span class="line">bindsym Mod1+Shift+Right move right</span><br><span class="line"></span><br><span class="line"># split in horizontal orientation</span><br><span class="line">bindsym Mod1+h split h</span><br><span class="line"></span><br><span class="line"># split in vertical orientation</span><br><span class="line">bindsym Mod1+v split v</span><br><span class="line"></span><br><span class="line"># enter fullscreen mode for the focused container</span><br><span class="line">bindsym Mod1+f fullscreen toggle</span><br><span class="line"></span><br><span class="line"># change container layout (stacked, tabbed, toggle split)</span><br><span class="line">bindsym Mod1+s layout stacking</span><br><span class="line">bindsym Mod1+w layout tabbed</span><br><span class="line">bindsym Mod1+e layout toggle split</span><br><span class="line"></span><br><span class="line"># toggle tiling / floating</span><br><span class="line">bindsym Mod1+Shift+space floating toggle</span><br><span class="line"></span><br><span class="line"># change focus between tiling / floating windows</span><br><span class="line">bindsym Mod1+space focus mode_toggle</span><br><span class="line"></span><br><span class="line"># focus the parent container</span><br><span class="line">bindsym Mod1+a focus parent</span><br><span class="line"></span><br><span class="line"># focus the child container</span><br><span class="line">#bindsym Mod1+d focus child</span><br><span class="line"></span><br><span class="line"># move the currently focused window to the scratchpad</span><br><span class="line">bindsym Mod1+Shift+minus move scratchpad</span><br><span class="line"></span><br><span class="line"># Show the next scratchpad window or hide the focused scratchpad window.</span><br><span class="line"># If there are multiple scratchpad windows, this command cycles through them.</span><br><span class="line">bindsym Mod1+minus scratchpad show</span><br><span class="line"></span><br><span class="line"># Define names for default workspaces for which we configure key bindings later on.</span><br><span class="line"># We use variables to avoid repeating the names in multiple places.</span><br><span class="line">set $ws1 &quot;1&quot;</span><br><span class="line">set $ws2 &quot;2&quot;</span><br><span class="line">set $ws3 &quot;3&quot;</span><br><span class="line">set $ws4 &quot;4&quot;</span><br><span class="line">set $ws5 &quot;5&quot;</span><br><span class="line">set $ws6 &quot;6&quot;</span><br><span class="line">set $ws7 &quot;7&quot;</span><br><span class="line">set $ws8 &quot;8&quot;</span><br><span class="line">set $ws9 &quot;9&quot;</span><br><span class="line">set $ws10 &quot;10&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># switch to workspace</span><br><span class="line">bindsym Mod1+1 workspace $ws1</span><br><span class="line">bindsym Mod1+2 workspace $ws2</span><br><span class="line">bindsym Mod1+3 workspace $ws3</span><br><span class="line">bindsym Mod1+4 workspace $ws4</span><br><span class="line">bindsym Mod1+5 workspace $ws5</span><br><span class="line">bindsym Mod1+6 workspace $ws6</span><br><span class="line">bindsym Mod1+7 workspace $ws7</span><br><span class="line">bindsym Mod1+8 workspace $ws8</span><br><span class="line">bindsym Mod1+9 workspace $ws9</span><br><span class="line">bindsym Mod1+0 workspace $ws10</span><br><span class="line"></span><br><span class="line"># move focused container to workspace</span><br><span class="line">bindsym Mod1+Shift+1 move container to workspace $ws1</span><br><span class="line">bindsym Mod1+Shift+2 move container to workspace $ws2</span><br><span class="line">bindsym Mod1+Shift+3 move container to workspace $ws3</span><br><span class="line">bindsym Mod1+Shift+4 move container to workspace $ws4</span><br><span class="line">bindsym Mod1+Shift+5 move container to workspace $ws5</span><br><span class="line">bindsym Mod1+Shift+6 move container to workspace $ws6</span><br><span class="line">bindsym Mod1+Shift+7 move container to workspace $ws7</span><br><span class="line">bindsym Mod1+Shift+8 move container to workspace $ws8</span><br><span class="line">bindsym Mod1+Shift+9 move container to workspace $ws9</span><br><span class="line">bindsym Mod1+Shift+0 move container to workspace $ws10</span><br><span class="line"></span><br><span class="line"># reload the configuration file</span><br><span class="line">bindsym Mod1+Shift+c reload</span><br><span class="line"># restart i3 inplace (preserves your layout/session, can be used to upgrade i3)</span><br><span class="line">bindsym Mod1+Shift+r restart</span><br><span class="line"># exit i3 (logs you out of your X session)</span><br><span class="line">bindsym Mod1+Shift+e exec &quot;i3-nagbar -t warning -m &apos;You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.&apos; -B &apos;Yes, exit i3&apos; &apos;i3-msg exit&apos;&quot;</span><br><span class="line"></span><br><span class="line"># resize window (you can also use the mouse for that)</span><br><span class="line">mode &quot;resize&quot; &#123;</span><br><span class="line">        # These bindings trigger as soon as you enter the resize mode</span><br><span class="line"></span><br><span class="line">        # Pressing left will shrink the window’s width.</span><br><span class="line">        # Pressing right will grow the window’s width.</span><br><span class="line">        # Pressing up will shrink the window’s height.</span><br><span class="line">        # Pressing down will grow the window’s height.</span><br><span class="line">        bindsym $left       resize shrink width 10 px or 10 ppt</span><br><span class="line">        bindsym $down       resize grow height 10 px or 10 ppt</span><br><span class="line">        bindsym $up         resize shrink height 10 px or 10 ppt</span><br><span class="line">        bindsym $right      resize grow width 10 px or 10 ppt</span><br><span class="line"></span><br><span class="line">        # same bindings, but for the arrow keys</span><br><span class="line">        bindsym Left        resize shrink width 10 px or 10 ppt</span><br><span class="line">        bindsym Down        resize grow height 10 px or 10 ppt</span><br><span class="line">        bindsym Up          resize shrink height 10 px or 10 ppt</span><br><span class="line">        bindsym Right       resize grow width 10 px or 10 ppt</span><br><span class="line"></span><br><span class="line">        # back to normal: Enter or Escape or Mod1+r</span><br><span class="line">        bindsym Return mode &quot;default&quot;</span><br><span class="line">        bindsym Escape mode &quot;default&quot;</span><br><span class="line">        bindsym Mod1+r mode &quot;default&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bindsym Mod1+r mode &quot;resize&quot;</span><br><span class="line"></span><br><span class="line"># Start i3bar to display a workspace bar (plus the system information i3status</span><br><span class="line"># finds out, if available)</span><br><span class="line">bar &#123;</span><br><span class="line">        status_command i3status</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#######################################################################</span><br><span class="line"># automatically start i3-config-wizard to offer the user to create a</span><br><span class="line"># keysym-based config which used their favorite modifier (alt or windows)</span><br><span class="line">#</span><br><span class="line"># i3-config-wizard will not launch if there already is a config file</span><br><span class="line"># in ~/.i3/config.</span><br><span class="line">#</span><br><span class="line"># Please remove the following exec line:</span><br><span class="line">#######################################################################</span><br><span class="line">exec i3-config-wizard</span><br></pre></td></tr></table></figure><p>将上面的内容粘贴到i3的配置文件内即可</p><h2 id="四、美化i3-polybar"><a href="#四、美化i3-polybar" class="headerlink" title="四、美化i3-polybar"></a>四、美化i3-polybar</h2><p><code>polybar</code>是一个快速并且易用的状态显示栏</p><p>就如同你们看到的桌面预览图一般，上面的状态栏就是通过<code>polybar</code>实现的</p><p>我的polybar已经配置完成了，可以方便的显示工作区的数字，以及窗口的标题，以及CPU,RAM,CPU温度,时间,系统托盘等功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">;==========================================================</span><br><span class="line">;</span><br><span class="line">;</span><br><span class="line">;   ██████╗  ██████╗ ██╗  ██╗   ██╗██████╗  █████╗ ██████╗</span><br><span class="line">;   ██╔══██╗██╔═══██╗██║  ╚██╗ ██╔╝██╔══██╗██╔══██╗██╔══██╗</span><br><span class="line">;   ██████╔╝██║   ██║██║   ╚████╔╝ ██████╔╝███████║██████╔╝</span><br><span class="line">;   ██╔═══╝ ██║   ██║██║    ╚██╔╝  ██╔══██╗██╔══██║██╔══██╗</span><br><span class="line">;   ██║     ╚██████╔╝███████╗██║   ██████╔╝██║  ██║██║  ██║</span><br><span class="line">;   ╚═╝      ╚═════╝ ╚══════╝╚═╝   ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝</span><br><span class="line">;</span><br><span class="line">;</span><br><span class="line">;   To learn more about how to configure Polybar</span><br><span class="line">;   go to https://github.com/polybar/polybar</span><br><span class="line">;</span><br><span class="line">;   The README contains a lot of information</span><br><span class="line">;</span><br><span class="line">;==========================================================</span><br><span class="line"></span><br><span class="line">[colors]</span><br><span class="line">background = #cc222222</span><br><span class="line">background-alt = #444</span><br><span class="line">;foreground = $&#123;xrdb:color7:#222&#125;</span><br><span class="line">foreground = #dfdfdf</span><br><span class="line">foreground-alt = #555</span><br><span class="line">primary = #ffb52a</span><br><span class="line">secondary = #e60053</span><br><span class="line">alert = #bd2c40</span><br><span class="line"></span><br><span class="line">[bar/example]</span><br><span class="line">;monitor = $&#123;env:MONITOR:HDMI1&#125;</span><br><span class="line">monitor = $&#123;env:MONITOR:eDP1&#125;</span><br><span class="line">width = 100%</span><br><span class="line">height = 30</span><br><span class="line">;offset-x = 1%</span><br><span class="line">;offset-y = 1%</span><br><span class="line">radius = 6.0</span><br><span class="line">fixed-center = true</span><br><span class="line"></span><br><span class="line">background = $&#123;colors.background&#125;</span><br><span class="line">foreground = $&#123;colors.foreground&#125;</span><br><span class="line"></span><br><span class="line">line-size = 3</span><br><span class="line">line-color = #f00</span><br><span class="line"></span><br><span class="line">border-top-size = 0</span><br><span class="line">border-left-size = 0</span><br><span class="line">border-right-size = 0</span><br><span class="line">border-color = #00000000</span><br><span class="line"></span><br><span class="line">padding-left = 0</span><br><span class="line">padding-right = 2</span><br><span class="line"></span><br><span class="line">module-margin-left = 1</span><br><span class="line">module-margin-right = 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">font-0 = ttf-liberation-sans:fixed:pixelsize=12;1</span><br><span class="line">font-1 = source han sans cn:pixelsize=12:antialias=false;1</span><br><span class="line">font-2 = &quot;Font Awesome 5 Free:style=Solid:pixelsize=12;1&quot;</span><br><span class="line">font-3 = &quot;Font Awesome 5 Brands:style=Regular:pixelsize=12;1&quot;</span><br><span class="line">font-4 = &quot;material icons:pixelsize=16;3&quot;</span><br><span class="line"></span><br><span class="line">modules-left = i3</span><br><span class="line">modules-center = xwindow</span><br><span class="line">;modules-center = </span><br><span class="line">modules-right = cpu memory temperature battery date </span><br><span class="line"></span><br><span class="line">tray-position = right</span><br><span class="line">tray-padding = 2</span><br><span class="line">tray-background = $&#123;colors.background&#125;</span><br><span class="line"></span><br><span class="line">cursor-click = pointer</span><br><span class="line">cursor-scroll = ns-resize</span><br><span class="line"></span><br><span class="line">[module/xwindow]</span><br><span class="line">type = internal/xwindow</span><br><span class="line">label = %title%</span><br><span class="line">width = 50</span><br><span class="line">label-maxlen = 45</span><br><span class="line"></span><br><span class="line">[module/xkeyboard]</span><br><span class="line">type = internal/xkeyboard</span><br><span class="line">blacklist-0 = num lock</span><br><span class="line"></span><br><span class="line">format-prefix = &quot;&quot;</span><br><span class="line">format-prefix-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line">format-prefix-underline = $&#123;colors.secondary&#125;</span><br><span class="line"></span><br><span class="line">label-layout = %layout%</span><br><span class="line">label-layout-underline = $&#123;colors.secondary&#125;</span><br><span class="line"></span><br><span class="line">label-indicator-padding = 2</span><br><span class="line">label-indicator-margin = 1</span><br><span class="line">label-indicator-background = $&#123;colors.secondary&#125;</span><br><span class="line">label-indicator-underline = $&#123;colors.secondary&#125;</span><br><span class="line"></span><br><span class="line">[module/filesystem]</span><br><span class="line">type = internal/fs</span><br><span class="line">interval = 25</span><br><span class="line"></span><br><span class="line">mount-0 = /</span><br><span class="line"></span><br><span class="line">label-mounted = %&#123;F#0a81f5&#125;%mountpoint%%&#123;F-&#125;: %percentage_used%%</span><br><span class="line">label-unmounted = %mountpoint% not mounted</span><br><span class="line">label-unmounted-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line"></span><br><span class="line">[module/bspwm]</span><br><span class="line">type = internal/bspwm</span><br><span class="line"></span><br><span class="line">label-focused = %index%</span><br><span class="line">label-focused-background = $&#123;colors.background-alt&#125;</span><br><span class="line">label-focused-underline= $&#123;colors.primary&#125;</span><br><span class="line">label-focused-padding = 2</span><br><span class="line"></span><br><span class="line">label-occupied = %index%</span><br><span class="line">label-occupied-padding = 2</span><br><span class="line"></span><br><span class="line">label-urgent = %index%!</span><br><span class="line">label-urgent-background = $&#123;colors.alert&#125;</span><br><span class="line">label-urgent-padding = 2</span><br><span class="line"></span><br><span class="line">label-empty = %index%</span><br><span class="line">label-empty-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line">label-empty-padding = 2</span><br><span class="line"></span><br><span class="line">[module/i3]</span><br><span class="line">type = internal/i3</span><br><span class="line">format = &lt;label-state&gt; &lt;label-mode&gt;</span><br><span class="line">index-sort = true</span><br><span class="line">wrapping-scroll = false</span><br><span class="line"></span><br><span class="line">label-focused = %name%</span><br><span class="line">label-unfocused = %name%</span><br><span class="line">label-visible = %name%</span><br><span class="line">label-urgent = %name%</span><br><span class="line"></span><br><span class="line">label-mode-padding = 2</span><br><span class="line">label-mode-foreground = #000</span><br><span class="line">label-mode-background = $&#123;colors.primary&#125;</span><br><span class="line"></span><br><span class="line">label-focused-background = $&#123;module/bspwm.label-focused-background&#125;</span><br><span class="line">label-focused-underline = $&#123;module/bspwm.label-focused-underline&#125;</span><br><span class="line">label-focused-padding = $&#123;module/bspwm.label-focused-padding&#125;</span><br><span class="line"></span><br><span class="line">label-unfocused-padding = $&#123;module/bspwm.label-occupied-padding&#125;</span><br><span class="line"></span><br><span class="line">label-visible-background = $&#123;self.label-focused-background&#125;</span><br><span class="line">label-visible-underline = $&#123;self.label-focused-underline&#125;</span><br><span class="line">label-visible-padding = $&#123;self.label-focused-padding&#125;</span><br><span class="line"></span><br><span class="line">label-urgent-background = $&#123;module/bspwm.label-urgent-background&#125;</span><br><span class="line">label-urgent-padding = $&#123;module/bspwm.label-urgent-padding&#125; |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[module/xbacklight]</span><br><span class="line">type = internal/xbacklight</span><br><span class="line"></span><br><span class="line">format = &lt;label&gt; &lt;bar&gt;</span><br><span class="line">label = BL</span><br><span class="line"></span><br><span class="line">bar-width = 10</span><br><span class="line">bar-indicator = |</span><br><span class="line">bar-indicator-foreground = #ff</span><br><span class="line">bar-indicator-font = 2</span><br><span class="line">bar-fill = ─</span><br><span class="line">bar-fill-font = 2</span><br><span class="line">bar-fill-foreground = #9f78e1</span><br><span class="line">bar-empty = ─</span><br><span class="line">bar-empty-font = 2</span><br><span class="line">bar-empty-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line"></span><br><span class="line">[module/backlight-acpi]</span><br><span class="line">inherit = module/xbacklight</span><br><span class="line">type = internal/backlight</span><br><span class="line">card = intel_backlight</span><br><span class="line"></span><br><span class="line">[module/cpu]</span><br><span class="line">type = internal/cpu</span><br><span class="line">interval = 2</span><br><span class="line">format-prefix = &quot; &quot;</span><br><span class="line">;format-prefix-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line">;format-underline = #f90000</span><br><span class="line">label = %percentage:2%%</span><br><span class="line"></span><br><span class="line">[module/memory]</span><br><span class="line">type = internal/memory</span><br><span class="line">interval = 2</span><br><span class="line">format-prefix = &quot;  &quot;</span><br><span class="line">;format-prefix-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line">;format-underline = #4bffdc</span><br><span class="line">label = %percentage_used%%</span><br><span class="line"></span><br><span class="line">[module/wlan]</span><br><span class="line">type = internal/network</span><br><span class="line">interface = wlp3s0</span><br><span class="line">interval = 3.0</span><br><span class="line"></span><br><span class="line">format-connected = &lt;ramp-signal&gt;</span><br><span class="line">;format-connected-underline = #9f78e1</span><br><span class="line">label-connected = &quot;%essid%&quot;</span><br><span class="line"></span><br><span class="line">format-disconnected = </span><br><span class="line">;format-disconnected = &lt;label-disconnected&gt;</span><br><span class="line">;format-disconnected-underline = $&#123;self.format-connected-underline&#125;</span><br><span class="line">label-disconnected = %ifname% disconnected</span><br><span class="line">label-disconnected-foreground = #999999</span><br><span class="line"></span><br><span class="line">ramp-signal-0 = </span><br><span class="line">ramp-signal-1 = </span><br><span class="line">ramp-signal-2 = </span><br><span class="line">ramp-signal-3 = </span><br><span class="line">ramp-signal-4 = </span><br><span class="line">animation-packetloss-0 = ⚠</span><br><span class="line">animation-packetloss-0-foreground = #ffa64c</span><br><span class="line">;ramp-signal-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line"></span><br><span class="line">[module/eth]</span><br><span class="line">type = internal/network</span><br><span class="line">interface = enp0s31f6</span><br><span class="line">interval = 3.0</span><br><span class="line"></span><br><span class="line">format-connected-underline = #55aa55</span><br><span class="line">format-connected-prefix = &quot;📶&quot;</span><br><span class="line">format-connected-prefix-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line">label-connected = %local_ip%</span><br><span class="line"></span><br><span class="line">format-disconnected =</span><br><span class="line">;format-disconnected = &lt;label-disconnected&gt;</span><br><span class="line">;format-disconnected-underline = $&#123;self.format-connected-underline&#125;</span><br><span class="line">;label-disconnected = %ifname% disconnected</span><br><span class="line">;label-disconnected-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line"></span><br><span class="line">[module/date]</span><br><span class="line">type = internal/date</span><br><span class="line">interval = 5</span><br><span class="line"></span><br><span class="line">date = &quot; %Y-%m-%d&quot;</span><br><span class="line">;date-alt = &quot; %Y-%m-%d&quot;</span><br><span class="line"></span><br><span class="line">time = %H:%M</span><br><span class="line">;time-alt = %H:%M:%S</span><br><span class="line"></span><br><span class="line">format-prefix = </span><br><span class="line">;format-prefix-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line">;format-underline = #0a6cf5</span><br><span class="line"></span><br><span class="line">label = %date% %time%</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[module/alsa]</span><br><span class="line">type = internal/volume</span><br><span class="line"></span><br><span class="line">format-volume = &lt;label-volume&gt; &lt;bar-volume&gt;</span><br><span class="line">label-volume = </span><br><span class="line">label-volume-foreground = $&#123;root.foreground&#125;</span><br><span class="line"></span><br><span class="line">format-muted-prefix = &quot; &quot;</span><br><span class="line">format-muted-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line">label-muted = </span><br><span class="line"></span><br><span class="line">bar-volume-width = 5</span><br><span class="line">bar-volume-foreground-0 = #55aa55</span><br><span class="line">bar-volume-foreground-1 = #55aa55</span><br><span class="line">bar-volume-foreground-2 = #55aa55</span><br><span class="line">bar-volume-foreground-3 = #55aa55</span><br><span class="line">bar-volume-foreground-4 = #55aa55</span><br><span class="line">bar-volume-foreground-5 = #f5a70a</span><br><span class="line">bar-volume-foreground-6 = #ff5555</span><br><span class="line">bar-volume-gradient = false</span><br><span class="line">bar-volume-indicator = |</span><br><span class="line">bar-volume-indicator-font = 2</span><br><span class="line">bar-volume-fill = ─</span><br><span class="line">bar-volume-fill-font = 2</span><br><span class="line">bar-volume-empty = ─</span><br><span class="line">bar-volume-empty-font = 2</span><br><span class="line">bar-volume-empty-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line"></span><br><span class="line">[module/battery]</span><br><span class="line">type = internal/battery</span><br><span class="line">battery = BAT0</span><br><span class="line">adapter = ADP1</span><br><span class="line">full-at = 98</span><br><span class="line"></span><br><span class="line">format-charging = &lt;animation-charging&gt; &lt;label-charging&gt;</span><br><span class="line">format-charging-underline = #ffb52a</span><br><span class="line"></span><br><span class="line">format-discharging = &lt;ramp-capacity&gt; &lt;label-discharging&gt;</span><br><span class="line">;format-discharging-underline = $&#123;self.format-charging-underline&#125;</span><br><span class="line"></span><br><span class="line">format-full-prefix = &quot; &quot;</span><br><span class="line">;format-full-prefix-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line">format-full-underline = $&#123;self.format-charging-underline&#125;</span><br><span class="line"></span><br><span class="line">ramp-capacity-0 = </span><br><span class="line">ramp-capacity-1 = </span><br><span class="line">ramp-capacity-2 = </span><br><span class="line">ramp-capacity-3 = </span><br><span class="line">;ramp-capacity-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line"></span><br><span class="line">animation-charging-0 = </span><br><span class="line">animation-charging-1 = </span><br><span class="line">animation-charging-2 = </span><br><span class="line">animation-charging-3 = </span><br><span class="line">;animation-charging-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line">animation-charging-framerate = 750</span><br><span class="line"></span><br><span class="line">[module/temperature]</span><br><span class="line">type = internal/temperature</span><br><span class="line">thermal-zone = 0</span><br><span class="line">warn-temperature = 60</span><br><span class="line"></span><br><span class="line">format = &lt;ramp&gt; &lt;label&gt;</span><br><span class="line">;format-underline = #f50a4d</span><br><span class="line">format-warn = &lt;ramp&gt; &lt;label-warn&gt;</span><br><span class="line">;format-warn-underline = $&#123;self.format-underline&#125;</span><br><span class="line"></span><br><span class="line">label = %temperature%</span><br><span class="line">label-warn = %temperature%</span><br><span class="line">label-warn-foreground = $&#123;colors.secondary&#125;</span><br><span class="line"></span><br><span class="line">ramp-0 = </span><br><span class="line">ramp-1 = </span><br><span class="line">ramp-2 = </span><br><span class="line">;ramp-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line"></span><br><span class="line">[module/powermenu]</span><br><span class="line">type = custom/menu</span><br><span class="line">expand-right = true</span><br><span class="line"></span><br><span class="line">format-spacing = 1</span><br><span class="line"></span><br><span class="line">label-open = </span><br><span class="line">label-open-foreground = $&#123;colors.secondary&#125;</span><br><span class="line">label-close =  cancel</span><br><span class="line">label-close-foreground = $&#123;colors.secondary&#125;</span><br><span class="line">label-separator = |</span><br><span class="line">label-separator-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line"></span><br><span class="line">menu-0-0 = reboot</span><br><span class="line">menu-0-0-exec = reboot</span><br><span class="line">menu-0-1 = power off</span><br><span class="line">menu-0-1-exec = poweroff</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[settings]</span><br><span class="line">screenchange-reload = true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[global/wm]</span><br><span class="line">margin-top = 5</span><br><span class="line">margin-bottom = 5</span><br></pre></td></tr></table></figure><p>上面这段配置文件是polybar的配置文件，我们还需要一个启动polybar的脚本</p><blockquote><p>launch.sh</p></blockquote><p>这里的<code>launch.sh</code>可以改名，但是不必须得放在<code>~/.config/polybar</code>目录下，改名后需要修改<code>i3</code>配置文件的第<code>33</code>行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env bash</span><br><span class="line"></span><br><span class="line"># Terminate already running bar instances</span><br><span class="line">killall -q polybar</span><br><span class="line"></span><br><span class="line"># Wait until the processes have been shut down</span><br><span class="line">while pgrep -u $UID -x polybar &gt;/dev/null; do sleep 1; done</span><br><span class="line"></span><br><span class="line"># Launch bar1 and bar2</span><br><span class="line">polybar example &amp;</span><br></pre></td></tr></table></figure><h2 id="三、使用i3"><a href="#三、使用i3" class="headerlink" title="三、使用i3"></a>三、使用i3</h2><p>这一小节，我主要介绍我的配置文件所做的事。</p><p>下面的说明并不是将我的配置文件全部进行解读，有些我觉得你们能看懂的我就没写。</p><p><strong>set $mod Mod1</strong>  设置i3的super为<code>Alt</code>键</p><p><strong>new_window pixel 1</strong> 设置新窗口的窗口边缘的像素</p><p><strong>new_float normal</strong> 设置浮动窗口，值为默认</p><p><strong>hide_edge_borders</strong> 设置窗口边框隐藏</p><table><thead><tr><th>按键</th><th>说明</th></tr></thead><tbody><tr><td>$mod+u</td><td>设置边框存在</td></tr><tr><td>$mod+y</td><td>设置边框像素为1</td></tr><tr><td>$mod+n</td><td>设置边框隐藏</td></tr><tr><td>$mod+Return(回车键)</td><td>打开alacritty终端</td></tr><tr><td>$mod+Shift+Return</td><td>通过alacritty打开ranger</td></tr><tr><td>$mod+Control+g</td><td>打开Chrome</td></tr><tr><td>$mod+Controll+f</td><td>打开Firefox</td></tr><tr><td>$mod+Shift+q</td><td>杀死聚焦窗口</td></tr><tr><td>$mod+d</td><td>打开rofi</td></tr><tr><td>$mod+h+j+k+l</td><td>将聚焦在窗口之间切换</td></tr><tr><td>$mdo+上下左右</td><td>同上，只不过用的是方向键</td></tr><tr><td>$mod+Shift+h+j+k+l</td><td>将聚焦窗口改变排列位置</td></tr><tr><td>$mod+Shift+上下左右</td><td>同上，只不过用的是方向键</td></tr><tr><td>$mod+b</td><td>切换至上一个工作区</td></tr><tr><td>$mod+Shift+b</td><td>将上一个工作区的容器，移动至当前工作区内</td></tr><tr><td>$mod+q</td><td>切换平铺方式</td></tr><tr><td>$mod+f</td><td>将聚焦窗口全屏</td></tr><tr><td>$mod+s</td><td>容器窗口排列方式为堆叠式</td></tr><tr><td>$mod+w</td><td>容器窗口排列方式为标签式</td></tr><tr><td>$mod+e</td><td>容器窗口排列方式为平铺式</td></tr><tr><td>$mod+Shift+space(空格键)</td><td>切换容器窗口为平铺还是浮动</td></tr><tr><td>$mod+space</td><td>在浮动或平铺窗口之间进行聚焦的切换</td></tr><tr><td>$mod+Ctrl+左或右</td><td>切换工作区，前或后</td></tr><tr><td>$mod+1-8</td><td>切换工作区</td></tr><tr><td>$mod+Ctrl+1-8</td><td>将当前容器的窗口移动至某个工作区</td></tr><tr><td>$mod+Shift+1-8</td><td>将当前容器移动至某个工作区</td></tr><tr><td>$mod+Shift+r</td><td>重启i3</td></tr><tr><td>$mod+Shift+c</td><td>重载i3配置文件</td></tr><tr><td>$mod+0</td><td>进入系统模式</td></tr><tr><td>l</td><td>系统模式:锁屏</td></tr><tr><td>s</td><td>系统模式:挂出</td></tr><tr><td>u</td><td>系统模式:切换用户</td></tr><tr><td>e</td><td>系统模式:登出</td></tr><tr><td>h</td><td>系统模式:休眠</td></tr><tr><td>r</td><td>系统模式:重启</td></tr><tr><td>Shift+s</td><td>系统模式:关机</td></tr><tr><td>$mod+r</td><td>进入窗口大小设置模式</td></tr><tr><td>h j k l</td><td>设置窗口上下左右的大小</td></tr><tr><td>上下左右</td><td>同上</td></tr><tr><td>Return</td><td>退出窗口大小设置模式</td></tr><tr><td>触摸板开关</td><td>触摸板开关</td></tr></tbody></table><h1 id="0x2-rofi"><a href="#0x2-rofi" class="headerlink" title="0x2 rofi"></a>0x2 rofi</h1><h2 id="一、安装rofi"><a href="#一、安装rofi" class="headerlink" title="一、安装rofi"></a>一、安装rofi</h2><blockquote><p>sudo pacman -S rofi</p></blockquote><h2 id="二、配置rofi"><a href="#二、配置rofi" class="headerlink" title="二、配置rofi"></a>二、配置rofi</h2><h2 id="三、使用rofi"><a href="#三、使用rofi" class="headerlink" title="三、使用rofi"></a>三、使用rofi</h2><h1 id="0x1-ranger"><a href="#0x1-ranger" class="headerlink" title="0x1 ranger"></a>0x1 ranger</h1><h2 id="一、安装ranger"><a href="#一、安装ranger" class="headerlink" title="一、安装ranger"></a>一、安装ranger</h2><h2 id="二、配置ranger"><a href="#二、配置ranger" class="headerlink" title="二、配置ranger"></a>二、配置ranger</h2><h2 id="三、使用ranger"><a href="#三、使用ranger" class="headerlink" title="三、使用ranger"></a>三、使用ranger</h2><h1 id="0x2-alacritty"><a href="#0x2-alacritty" class="headerlink" title="0x2 alacritty"></a>0x2 alacritty</h1><h2 id="一、安装alacritty"><a href="#一、安装alacritty" class="headerlink" title="一、安装alacritty"></a>一、安装alacritty</h2><h2 id="二、配置alacritty"><a href="#二、配置alacritty" class="headerlink" title="二、配置alacritty"></a>二、配置alacritty</h2><h2 id="三、使用alacritty"><a href="#三、使用alacritty" class="headerlink" title="三、使用alacritty"></a>三、使用alacritty</h2><h1 id="0x3-vim"><a href="#0x3-vim" class="headerlink" title="0x3 vim"></a>0x3 vim</h1><h2 id="一、配置vim"><a href="#一、配置vim" class="headerlink" title="一、配置vim"></a>一、配置vim</h2><h1 id="0x4-zsh"><a href="#0x4-zsh" class="headerlink" title="0x4 zsh"></a>0x4 zsh</h1><h2 id="一、安装zsh"><a href="#一、安装zsh" class="headerlink" title="一、安装zsh"></a>一、安装zsh</h2><h2 id="二、配置zsh"><a href="#二、配置zsh" class="headerlink" title="二、配置zsh"></a>二、配置zsh</h2><h1 id="0x5-ssr-proxychains"><a href="#0x5-ssr-proxychains" class="headerlink" title="0x5 ssr+proxychains"></a>0x5 ssr+proxychains</h1><h2 id="一、安装ssr"><a href="#一、安装ssr" class="headerlink" title="一、安装ssr"></a>一、安装ssr</h2><h2 id="二、配置ssr"><a href="#二、配置ssr" class="headerlink" title="二、配置ssr"></a>二、配置ssr</h2><h2 id="三、安装proxychains"><a href="#三、安装proxychains" class="headerlink" title="三、安装proxychains"></a>三、安装proxychains</h2><h2 id="四、配置proxychains"><a href="#四、配置proxychains" class="headerlink" title="四、配置proxychains"></a>四、配置proxychains</h2><h2 id="五、使用ssr-proxychains实现全应用走代理"><a href="#五、使用ssr-proxychains实现全应用走代理" class="headerlink" title="五、使用ssr+proxychains实现全应用走代理"></a>五、使用ssr+proxychains实现全应用走代理</h2><h1 id="0x6-fcitx"><a href="#0x6-fcitx" class="headerlink" title="0x6 fcitx"></a>0x6 fcitx</h1><h2 id="一、安装fcitx"><a href="#一、安装fcitx" class="headerlink" title="一、安装fcitx"></a>一、安装fcitx</h2><h2 id="二、配置fcitx"><a href="#二、配置fcitx" class="headerlink" title="二、配置fcitx"></a>二、配置fcitx</h2><h2 id="三、启动fcitx"><a href="#三、启动fcitx" class="headerlink" title="三、启动fcitx"></a>三、启动fcitx</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文章详细地介绍了我目前的桌面.通过此文章，你可以做到让i3成为你的一把利刃。&lt;/p&gt;
    
    </summary>
    
      <category term="折腾日志" scheme="https://evanmeek.github.io/categories/%E6%8A%98%E8%85%BE%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Linux" scheme="https://evanmeek.github.io/tags/Linux/"/>
    
      <category term="i3" scheme="https://evanmeek.github.io/tags/i3/"/>
    
  </entry>
  
  <entry>
    <title>Boring Article</title>
    <link href="https://evanmeek.github.io/2019/07/12/Boring-Article/"/>
    <id>https://evanmeek.github.io/2019/07/12/Boring-Article/</id>
    <published>2019-07-12T09:16:36.000Z</published>
    <updated>2019-08-29T17:50:26.175Z</updated>
    
    <content type="html"><![CDATA[<p>Since I returned to Xinjiang,I have to eat and sleep everyday.I was so <strong>bored</strong>,then I had this article.</p><a id="more"></a><p>&emsp;Befor I came to Xinjiang,I hope I can take many beatuiful pictures,eat my favorite food and do what I want to do.But now the only way to take pictures just can with mobile phone,Cameras can not be used.Every day.I eat with my parents.butI can not eat what I want.Finally,I care too much about me .I thought that home is to be free and easy to call home.I always manage my family,which is called cage!</p><p>&emsp;In fact.this article is a <strong>dissemination of negative energy</strong>.If you are unhappy,I am sorry.My father just came back,he said that his business is finished.the <strong>rest of the time</strong> can enjoy.I hope the next summer life will be <strong>enriched</strong>!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Since I returned to Xinjiang,I have to eat and sleep everyday.I was so &lt;strong&gt;bored&lt;/strong&gt;,then I had this article.&lt;/p&gt;
    
    </summary>
    
      <category term="英文文章" scheme="https://evanmeek.github.io/categories/%E8%8B%B1%E6%96%87%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="个人感想" scheme="https://evanmeek.github.io/tags/%E4%B8%AA%E4%BA%BA%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>MyCuteSister-1</title>
    <link href="https://evanmeek.github.io/2019/07/10/MyCuteSister-1/"/>
    <id>https://evanmeek.github.io/2019/07/10/MyCuteSister-1/</id>
    <published>2019-07-09T16:10:29.000Z</published>
    <updated>2019-08-29T17:50:26.163Z</updated>
    
    <content type="html"><![CDATA[<p>The article is the next article of “MyCuteSister”.</p><a id="more"></a><p>&emsp;Next article we talk about my sister something not bad and she’s appearance,this article let’s we talk about she’s school work.</p><p>&emsp;My sister is seven years old,she <strong>attended Maria Kindergarten</strong> in GuangZhou.When she was a kindergraten student,she was excellent.She often become monitor of class.</p><p>&emsp;She <strong>can also</strong> draw.Since she attended kindergraten,almost every week draw a works,<strong>So for</strong> about two hundred draw works stayed we home.</p><p>&emsp;She <strong>can also</strong> dance.She use weekend time learn dance,Since she can’t <strong>back bend</strong>,<strong>thwart split</strong> to be dance a complete dance.And She often join Kindergraten activites,<strong>Our whole famliy is proud for her</strong>.</p><p>&emsp;By the way,She can also play the piano,<strong>Whennever I am bored</strong>.I watch the video of her playing the piano,Which make me feel better immediately.</p><p>&emsp;She will become a <strong>Primary Student</strong>,Because she went up THE AFFILIATED SCHOOL OF GUANGDONG UNIVERSITY OF FOREIGN STUDIES,Bug she need stay at school,I think I will very miss her.</p><p>&esp;This is my sister,And I LOVE HER.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The article is the next article of “MyCuteSister”.&lt;/p&gt;
    
    </summary>
    
      <category term="英文文章" scheme="https://evanmeek.github.io/categories/%E8%8B%B1%E6%96%87%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="个人感想" scheme="https://evanmeek.github.io/tags/%E4%B8%AA%E4%BA%BA%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>MyCuteSister-0</title>
    <link href="https://evanmeek.github.io/2019/07/09/MyCuteSister-0/"/>
    <id>https://evanmeek.github.io/2019/07/09/MyCuteSister-0/</id>
    <published>2019-07-08T16:55:53.000Z</published>
    <updated>2019-08-29T17:50:26.154Z</updated>
    
    <content type="html"><![CDATA[<p>Last article is so bad,so this article i want is not bad.</p><a id="more"></a><p>&emsp;I have a young sister,she is so cute and pretty.Now I will introduce her.Ok let’s do it.</p><p>She have a black long hair,and clear and shinning eyes.When she lie on soft reading books，I always think she so beatuiful and cute.At this point,I will ask her,what book are reading? then she always say cartoon book,At this point,I say,Why you read cartoon book? She say,because i like it.</p><p>Let’s talk about she’s not good,also many children’s problems.It picky eaters,such as,she <strong>dislike eggplant</strong>，I tell her do not picky eaters,she say ok.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Last article is so bad,so this article i want is not bad.&lt;/p&gt;
    
    </summary>
    
      <category term="英文文章" scheme="https://evanmeek.github.io/categories/%E8%8B%B1%E6%96%87%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="个人感想" scheme="https://evanmeek.github.io/tags/%E4%B8%AA%E4%BA%BA%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
</feed>
