<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mac下安装Rust</title>
      <link href="/2019/08/20/Mac%E4%B8%8B%E5%AE%89%E8%A3%85Rust/"/>
      <url>/2019/08/20/Mac%E4%B8%8B%E5%AE%89%E8%A3%85Rust/</url>
      
        <content type="html"><![CDATA[<p>本篇文章记录了我是如何在Mac下安装rust的过程.</p><a id="more"></a><p>首先在你Shell的配置文件内加入下面两行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static</span><br><span class="line">export RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup</span><br></pre></td></tr></table></figure><p>然后打开终端，输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://sh.rustup.rs -sSf | sh</span><br></pre></td></tr></table></figure><p>中间稍微等待一下，选择安装的方式即可。</p><p>安装好后记得执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source $HOME/.cargo/env</span><br></pre></td></tr></table></figure><p>最后再编辑$HOME/.cargo/config文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[registry]</span><br><span class="line">index = &quot;https://mirrors.ustc.edu.cn/crates.io-index/&quot;</span><br><span class="line">[source.crates-io]</span><br><span class="line">registry = &quot;https://github.com/rust-lang/crates.io-index&quot;</span><br><span class="line">replace-with = &apos;ustc&apos;</span><br><span class="line">[source.ustc]</span><br><span class="line">registry = &quot;https://mirrors.ustc.edu.cn/crates.io-index/&quot;</span><br></pre></td></tr></table></figure><p>就大功告成啦，赶快写一个HelloWorld吧!</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac下超好用的风扇控制与温度监控软件————TG Pro</title>
      <link href="/2019/08/20/Mac%E4%B8%8B%E8%B6%85%E5%A5%BD%E7%94%A8%E7%9A%84%E9%A3%8E%E6%89%87%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%B8%A9%E5%BA%A6%E7%9B%91%E6%8E%A7%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E2%80%94%E2%80%94TG-Pro/"/>
      <url>/2019/08/20/Mac%E4%B8%8B%E8%B6%85%E5%A5%BD%E7%94%A8%E7%9A%84%E9%A3%8E%E6%89%87%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%B8%A9%E5%BA%A6%E7%9B%91%E6%8E%A7%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E2%80%94%E2%80%94TG-Pro/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用两天MacBookPro真实感受</title>
      <link href="/2019/08/17/%E4%BD%BF%E7%94%A8%E4%B8%A4%E5%A4%A9MacBookPro%E7%9C%9F%E5%AE%9E%E6%84%9F%E5%8F%97/"/>
      <url>/2019/08/17/%E4%BD%BF%E7%94%A8%E4%B8%A4%E5%A4%A9MacBookPro%E7%9C%9F%E5%AE%9E%E6%84%9F%E5%8F%97/</url>
      
        <content type="html"><![CDATA[<p>经过漫长的等待，我的MacBook Pro终于是到货了，经过我的两天调教，我已经逐渐习惯了。<br><a id="more"></a></p><p>&emsp;前天一大早，我接到了电话，不用想，肯定就是我得mbp到货了。可能是我看过太多测评视频的缘故，当我亲手开箱时，却没有被mbp给惊艳到，不过机身确实非常薄，应该是我接触过的电脑最薄的台15寸笔记本了。mbp支持单手开合，这一点我非常满意，草草的设置完第一次启动系统后，我迫不及待的安装我所需的软件，由于早前我看过一些关于Mac OS X的文章，我马上就去配置了<code>Homebrew</code>，但我发现，貌似配置国内源有点困难，没有我在<code>Manjaro</code>下那么方便，快捷。</p><p>&emsp;经过我的一番折腾，<code>Homebrew</code>总算是安装好了，我便开始配置开发环境，首先选择了传说中功能非常强大的<code>iterm2</code>，功能强大到我不能快速上手，必须花费时间去研究研究它才能顺手使用。在我折腾Mac时，十分讨厌这个键盘布局，现在亦是如此，把fn键放在键盘的边缘处，我每次想要按<code>control</code>时总是误触，以及touchbar的escape键，简直按起来一点反馈没有，所以我就通过<code>karabiner</code>这款软件修改了个我习惯的键位布局。</p><p>&emsp;不得不说mbp的这个屏幕，简直是太棒了，我原先用的是dell的4k屏幕，但在我用mbp时，甚至会觉得比4k屏好，可能是色彩非常准确的缘故吧。可能因为屏幕素质太过于优秀的缘故，耗电并不如网上说的那样，从早到晚不用充电，经过实测，这款标配的mbp 2019款在<code>chrome</code>十几个网页+<code>Emacs</code>+<code>NeoVim</code>+<code>微信</code>+<code>腾讯QQ</code>+<code>Telegram</code>+<code>蓝牙耳机</code>+<code>Wifi开启</code>+<code>网易云</code>+<code>屏幕亮度80%</code>+<code>键盘背光最亮</code>的情况下，3个半小时耗电50%，你可能觉得我在吹它～，但它确实就是这么厉害。</p><p>&emsp;超大的触摸板，简直太好用，配合上Mac OS X的触摸板手势，对窗口的管理完全掌握在你的手指间。再说说机器发热的情况，在我上面所提到的使用环境下，几乎感觉不到mbp在发热，但是在打开一些大型应用，例如ps,pr,ae这些软件时，Mac OSX就像是提高了机器性能一般，风扇开启了高转速，机器也随之发热了，但得得益于mbp的外壳，可以在边缘垫上一元硬币辅助散热，并且效果还不错，虽说在开启大型应用mbp会发热严重，但也只是部分区域会感受到热，在手腕，手拖处几乎感觉不到，打字时由于蝶式键盘的缘故，只要是每个手指精确的放在键帽上，只能感觉到微微发热，但是在键帽之间的缝中可以明显感受到烫手。</p><p>&emsp;最后吹一下mbp，它确实时非常好用，就是价格稍高，对于普通家庭来说，进两万元的支出也不是一个小数目了，希望有生之年能看到Apple能做物美价廉，感动人心的好产品(笑</p>]]></content>
      
      
      <categories>
          
          <category> 英文文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人感想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Happiness from the heart</title>
      <link href="/2019/08/11/Happiness-from-the-heart/"/>
      <url>/2019/08/11/Happiness-from-the-heart/</url>
      
        <content type="html"><![CDATA[<p>15分钟前，我观看了一集TED演讲，我从中了解了什么才是真正的快乐。这篇文章就讲述了我的感悟与亲身体验。</p><p>Fifteen minutes ago, I watched a TED talk, from which I learned what real happiness is.  This article and related my feeling and experience of happiness from the heart.</p><a id="more"></a><h1 id="English"><a href="#English" class="headerlink" title="English"></a>English</h1><p>Next, I will ask a few questions, which are very simple, because you must have the answer in your heart.  So the first question is: Are you happy today? I think you already have the answer, then the next question is: why are you happy or unhappy today? The point is why you are happy, or why you are not happy.  For example, you may not be happy today because you are arranged to work with colleagues you don’t like.  Of course, I think you should have no colleagues you don’t like.  In this example, the reason why you are unhappy &gt; is to work with colleagues you don’t like, but what I want to say is: you must stop being unhappy because of colleagues or because of something or some external factors.  This is what I want to say.  You may understand this: don’t be unhappy because of external factors.  But in fact, what I want to express is: happiness or happiness is from the heart, not &gt; from external factors. even if you work with your favorite colleagues, it cannot be the reason why you are happy today. real happiness is from the heart.</p><h1 id="Chinese"><a href="#Chinese" class="headerlink" title="Chinese"></a>Chinese</h1><p>下面，我将会问几个问题，这几个问题十分简单，因为你们心中肯定有答案。那么第一个问题是：你今天开心吗？我想你应该已经有了答案，那么接下来是第二个问题：你今天为什么开心或者为什么不开心？重点在于为什么开心，或者为什么不开心。举个例子，你今天可能会因为被领导安排与不喜欢的同事共事，你不开心。当然，我觉得你应该没有不喜欢的同事。这个例子中，你不开心的原因就是与不喜欢的同事共事，但我想说的是：你必须停止因为同事或者说是因为某个事物又或是某些外部因素让你不开心。这也就是我想说的。你可能会理解成：不要因为外部因素，从而使得不开心。但其实我想表达的是：快乐或开心是由自内心的，而不是由自外部因素的，就算是你跟喜欢的同事共事，那么也不能成为你今天快乐的原由，真正的快乐是发自内心。</p>]]></content>
      
      
      <categories>
          
          <category> 英文文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人感想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The process of purchasing MacBook Pro</title>
      <link href="/2019/08/02/The-process-of-purchasing-MacBook-Pro/"/>
      <url>/2019/08/02/The-process-of-purchasing-MacBook-Pro/</url>
      
        <content type="html"><![CDATA[<p>这篇文章记录我买MBP的过程.</p><a id="more"></a><p>&emsp;Because I need to use PS and lightweight PR and have the need to prgramming,and the current AlienWareR13 can no longer met my needs.After one day and on night’s selection,I finally chose MacBookPro 15.6 with difficulty.</p><p>&emsp;The configuration diagram is as follows.<img src="/2019/08/02/The-process-of-purchasing-MacBook-Pro/配置图.jpg" alt="配置图"></p><p>&emsp;First of all, 16GB is enogh for me to run a few more virtual machines, and it is also fast in drawing and editing. Although many people on the Internet said that heat dissipation is not good.I found that 2018 version of heat dissipation is not very good when I readlly got to know it. Considering the problem of heat dissipation, I also bought i9 version instead of i9 version. I hope erverthing goes well!</p><p>&emsp;The fllowing is the spitting. When I was preparing to place an order, I was looking for the student discount page for half a day. When I found it, I wanted to know what the student discount conditions were. As a result, I didn’t see the relevant instructions until I went to Baidu to know that I needed the student certificate from full-time universities.</p><p>&emsp;When I learned some rough information from the internet, I placed the order. when placing the order, I had to pay first to verify whether the student id card was qualified. this is really disgusting … as for why, I will mention later.  After I placed the order, I just waited for Apple to send me an email so that I could know what the student discount request was. In the middle of the night, I received a text message from Apple, which said: Let me check the email, and the information about the student discount conditions is in it.  The second disgusting thing that happened to me at this moment was that I didn’t receive e-mail!  However, I did not have the option to apply for resending the mail, which made me very angry and the shopping experience was very poor.  Since the customer service is off duty, I can only ask the next morning.  The customer service personnel helped me successfully send the student id card, and then I waited for the verification to pass.  What made me feel sick for the third time has happened again!  My order was cancelled because my credentials were invalid. However, Apple did not send a single email. Only when I checked the order status could I find that it had been cancelled.  I went to ask the customer service again, and the information the customer service gave me was: the name of the student id card and the name of the consignee did not match, so it was cancelled.  I feel very speechless … can’t parents give their children computers?  !  The consignee must also match the student ID.  Now I sit and wait for the refund. However, the refund time makes me despair even more. It takes me 5 working days at the latest, and I bought it on Friday. Apple employees will have a holiday at the weekend, so I can’t handle it yet. That is to say, I have to wait for a whole week at the latest to receive the refund!  I think it takes so much time to place a new order!  It just makes me feel that the shopping experience is terrible!</p><p>&emsp;I’m just waiting for a refund and then placing another order. I don’t even want to buy Mac Book Pro now. It’s so annoying!</p><p>&emsp;由于我需要使用PS和轻量级的PR并且还有写代码的需求，并且现役的这台AlienWareR13已经不能够满足我的需求了。经过一天一夜的挑选，最终艰难的选择了Mac Book Pro 15.6。</p><p>&emsp;这是我的配置图.</p><p>&emsp;首先，16GB对于我来说是足够的，可以用来跑多几个虚拟机，而且制图时和剪辑时速度也快，虽然网上很多人说散热不行，但当我真实去了解后才发现是2018版的散热不太行，而且考虑到散热的问题，我也没有买i9版本，而是买了9代 i7，希望一切顺利吧！</p><p>&emsp;下面就是吐槽了。在我准备下单时，我一直在找学生优惠的页面，找了半天，当我找到后，我想了解一下学生优惠的条件是什么，结果我应是没有看到相关的说明，直到我去百度才知道需要全日制高校的学生证明。</p><p>&emsp;当我从网络上了解到了一些粗略的信息后，我便下单了，下单时是先付款才能验证学生证是否合格，这一点真的恶心…至于为什么，我后面会提到。我下单后就是等待Apple给我发送邮件，这样我才能知道学生优惠的要求是什么，在半夜时，我收到了Apple的短信，短信内容是:让我检查电子邮件，有关学生优惠的条件信息在里面。这时就让我遇到第二件很恶心的事，就是我并没有收到电子邮件！但是并没有申请重新发送邮件的选项，这就让我很生气了，购物体验极差。由于客服已下班，我只能第二天早晨去询问了。客服人员帮助我成功的发送了学生证的凭证，然后我就等待验证通过。让我感到第三次恶心的事又发生了！我的订单被取消了，因为我的凭证无效，然而Apple连一个邮件也不发，只有我去查看订单状态才能发现已经被取消。我又去询问客服，客服给我的信息是：由于学生证的姓名和收货人的姓名不符合，所以被取消了。我感到十分无语…难道父母送给孩子电脑都不可以吗？！还必须要收货人跟学生证相符。现在我就坐等退款了，然而退款的时间更让我绝望，最晚需要5个工作日，而且我是周五买的，周末时Apple的员工要放假，所以还不能处理，也就是说我最晚需要等待整整一周的时间，才能收到退款！我想重新下单就需要浪费这么多的时间！简直是让我感到，购物体验极差！</p><p>&emsp;吐槽完了，我现在就是等待退款，然后重新下单，我甚至在都不想买Mac Book Pro了，太让人生气了！</p>]]></content>
      
      
      <categories>
          
          <category> 英文文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 购物体验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust-理解所有权</title>
      <link href="/2019/07/30/Rust-%E7%90%86%E8%A7%A3%E6%89%80%E6%9C%89%E6%9D%83/"/>
      <url>/2019/07/30/Rust-%E7%90%86%E8%A7%A3%E6%89%80%E6%9C%89%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<p>根据Rust中文学习了些Rust的知识，所以记录下Rust中很重要的特性之一:所有权<br><a id="more"></a></p><h1 id="认识所有权"><a href="#认识所有权" class="headerlink" title="认识所有权"></a>认识所有权</h1><p>所有权是Rust最独特的功能，使得Rust不需要GC即可保证内存安全.</p><p>本篇文章介绍所有权及其相关功能：借用、slice，以及Rust如何在内存中布局数据</p><h1 id="什么是所有权"><a href="#什么是所有权" class="headerlink" title="什么是所有权"></a>什么是所有权</h1><p>所有权（ownership)是Rust的核心特性之一，其最大的特点是解决了目前大部分编程语言对内存管理方式的缺陷，例如:一些语言通过GC(垃圾回收机制)进行管理内存，在程序运行时不断的寻找无用的内存，但这种方式会使得程序的效率降低。另一种方式则是内存的分配和释放由程序员进行管理，所以经常会出现遗漏或设计缺陷，从而使得程序问题不断。而Rust的所有权特性则恰好解决了以上两个常见的问题。</p><p>在理解所有权之前，让我们先了解一个常用的数据结构:Stack Heap.</p><h2 id="栈-Stack-与-堆-Heap"><a href="#栈-Stack-与-堆-Heap" class="headerlink" title="栈(Stack) 与 堆(Heap)"></a>栈(Stack) 与 堆(Heap)</h2><blockquote><p>程序是由<strong>算法</strong>和<strong>数据</strong>组成的，<code>栈堆</code>这种数据结构则是一种处理数据的算法，而在所有权的概念中，数据是存在栈上还是堆上很大的影响了程序的行为。</p></blockquote><p><code>栈</code>的结构是一种后进先出的方式处理数据的，生活中的羽毛球例子可以清晰的描述这一关系:当我们将羽毛球放入羽毛球桶时，想要拿走时，总是拿走的最后一个放入的羽毛球，我们不能拿走最后一个放入之前的羽毛球。我们把放入羽毛球(增加数据)叫做<strong>入栈</strong>，拿出羽毛球(移出数据)叫做<strong>出栈</strong>。</p><p><strong>‘栈’的优点是，速度快。这主要是因为如果要获取数据则总是从栈顶直接获取，而不需要寻找某个特定的位置需要读取数据。第二个原因是:栈中数据所占内存大小都已固定也可知。</strong></p><p><code>堆</code>的结构是一种随机的方式处理数据的，生活中的例子每天吃饭可以清晰的描述这一关系:一日三餐，我们总是会想要吃什么，世界上有那么多美食，此时我们就需要选择想要的菜品才能进食，并且在要选择菜品时，我们还必须考虑是否有足够的金钱付款，而在我们选择菜品时是根据菜名通过服务员才能让厨房处理，最终上菜。我们把为菜品付款称作在<strong>堆上分配内存</strong>，而菜名称作<strong>指针</strong>，我们需要通过通过指针访问在堆上分配的内存.</p><p><strong><code>堆</code>的优点是，不受限于只能获取最后一个存入的数据，因为数据都是成堆摆布的，如果需要访问需要通过指针</strong>。</p><p><code>堆</code>对数据的操作速度没有<code>栈</code>快，因为<code>堆</code>需要通过指针才能访问数据.</p><p>若数据大部分存在<code>堆</code>上，则有可能出现一些重复数据，为了清除这些无用的数据，确保内存空间不会被耗尽。这些问题正是所有权系统需要处理的。想必读者们也应该知道，所有权的存在就是为了管理堆数据的，当你理解了所有权后，将在编码时不用总考虑栈和堆了。</p><h1 id="所有权规则"><a href="#所有权规则" class="headerlink" title="所有权规则"></a>所有权规则</h1><ul><li><p>Rust中，每一个值都有一个称为__所有者(owner)的变量。</p></li><li><p>值只能有一个所有者。</p></li><li><p>当所有者离开作用域，这个值则会被遗弃。</p></li></ul><h1 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h1><p>让我们看第一个关于所有权的例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 在这里使用s无效，s尚未生命</span><br><span class="line">&#123;</span><br><span class="line">    let s = &quot;hello&quot;; // 从此处起，s 有效</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">// 在这里使用s无效，因为作用域已结束</span><br></pre></td></tr></table></figure><p>这个例子中，当<code>s</code>进入作用域后，直到它离开作用域为止，它一直是有效的。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emacs is sexy!</title>
      <link href="/2019/07/26/Emacs-is-sexy/"/>
      <url>/2019/07/26/Emacs-is-sexy/</url>
      
        <content type="html"><![CDATA[<p>Emacs is a highly extensible text editor.It is built on a C core, and provides a fully featured Lisp environment</p><p>There’s a reason why Emacs was featured in Tron Legacy - because it’s sexy!</p><p>You can use Emacs for all of your text processing needs, internet and social network interations, hacking, coding, maaging to-do’s and organizing your daily schedule, playing Tetris, and manay other awesome things. It can even provide you with free psychotherapy and counseling using the built in doctor. A vibrant community of hackers is constantly writing new extensions, thanks to the power of the Emacs Lisp environment.</p><p>GNU Emacs is Free Software, both free as in free beer and free as in free speech. The original Emacs was written by St. iGNUcius himself —- Richard Stallman.</p><p>Not only does it give the user the four essential freedoms, its architecture is built in such a way that you have the power to mold it, change it and make it comply to your computering needs.</p><a id="more"></a><h1 id="Why-use-Emacs"><a href="#Why-use-Emacs" class="headerlink" title="Why use Emacs?"></a>Why use Emacs?</h1><p>Emacs is a very pwoerful text processor, giving you the power to manipulate documents quickly and efficiently. You can easily move through and edit paragraphs, sentences, words, and logical blocks; blaze through text using powerful search tools; and easily edit thousands of lines at once using regular expressions, keyboard macros and more.</p><h1 id="Colorful-text-editor"><a href="#Colorful-text-editor" class="headerlink" title="Colorful text editor"></a>Colorful text editor</h1><p>Emacs can be cutomized in every conceivable way, including its looks. You can strip it down, choose between dozens of easy to intall themes with M-x load-theme, or even create your own and share it with your friends. Here are a couple of nice theme galleries: Emacs Themes, Emacs Theme Gallery.</p><h1 id="Et-tu-Programmer"><a href="#Et-tu-Programmer" class="headerlink" title="Et tu, Programmer?"></a>Et tu, Programmer?</h1><p>There are tools for every programming languaage out there. Lisp, Ruby, Python, PHP, Java, Erlang, JavaScript, C, C++, Prolog, Tcl, AWK, PostScript, Clojure, Scala, Perl, Haskell, Elixir all of there languages and more are supported in Emacs. Beacuse of the powerfull Lisp core. Emacs is easy to extend to add support, debugging, code browsing, version control integration and much more.</p><h1 id="Vim-user"><a href="#Vim-user" class="headerlink" title="Vim user?"></a>Vim user?</h1><p>Let tell about Spacemacs! Spacemacs is a community-driven Emacs distribution that brings together the world of Vim and Emacs into one text eeditor. It also features ergonomics and mnemonickey binding design, and also works great as a starter pack for newcomers.</p><h1 id="More"><a href="#More" class="headerlink" title="More!"></a>More!</h1><p>Org mode helps you to keep notes, maintain TODO lists, plan projects and author documents. You can use your Org documents to create HTML websites like this one or export to LaTeX, Beamer, OpenDocuments and many other formats.</p><p>Tramp allows you to edit remote files without leaving Emacs. You can seamlessly edit files on remote servers via SSH for FTP.edit local files with su/sudo , and much more.</p><p>M-x butterfly unleashes the powers of the butterfly.</p><p>Use the built in IRC client ERC along with BitlBee to connect to your favorite chat services, or use the Jabber package to hop on any XMPP service.</p><p>Out of the box Emacs includes a mail client, web browser, calendar, and games; you can even edit video and images inside Emacs. There are more than 3,000 packages for Emacs, and more are written all the time. You can easilly extend your Emacs with new packages from GNU ELPA, MELPA and Marmelade repositories.</p>]]></content>
      
      
      <categories>
          
          <category> 英文文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FuShou-Mountain-Day-Trip</title>
      <link href="/2019/07/23/FuShou-Mountain-Day-Trip/"/>
      <url>/2019/07/23/FuShou-Mountain-Day-Trip/</url>
      
        <content type="html"><![CDATA[<p>Today I gone to the FuShou mountain,So this article is about it.</p><a id="more"></a><p>&emsp;It’s sunny,But I <strong>arrived</strong><code>到达</code> at my <strong>destination</strong><code>目的地</code> at <strong>noon</strong><code>正午</code>.There were manay people.After a long <strong>queue</strong><code>排队</code>,I finally got the <strong>ticket</strong><code>门票</code>.Then I got on the <strong>interval bus</strong><code>区间车</code> again.</p><p>&emsp;It was a <strong>bumpy journey to the foot</strong><code>一路颠簸</code> of Fushou Mountain.The first thing I saw was a <strong>snack area</strong><code>小食区</code> supported by a <strong>pile</strong><code>支撑</code> of read <strong>tents</strong><code>帐篷</code>.Then when  I entered the snack area,the air was filled with <strong>grabbing food</strong><code>手抓饭</code>,<strong>thin-skinned steamed buns</strong><code>薄皮包子</code>,the <strong>aroma</strong><code>香气</code> of <strong>barbecue kebabs</strong><code>烤肉串</code> and the <strong>sweet</strong><code>香甜的</code> <strong>Cavas</strong><code>卡瓦斯</code>,Ice cream <strong>attracted</strong><code>吸引</code> me.I <strong>couldn’t resist</strong><code>无法抵御</code> the <strong>temptation</strong><code>美食</code> of delicious food, so I ate a lot of delicious food in Xinjiang.</p><p>&emsp;After <strong>full stomach</strong><code>饱腹</code>,I began to climb the mountain. The sun was very sunny. Before I reached the <strong>glass trestle</strong><code>玻璃栈道</code>,my skin was red.</p><p>&emsp;Glass planks up to 300M,built of steel and glass.People have a head and look through the glass to see the ground.Although I dare not look down from the highrise, I can’t fell scared on the glass path. Maybe I trust safety of these projects.</p><p>&emsp;Happy time is always short,and soon,we will go home by car…</p>]]></content>
      
      
      <categories>
          
          <category> 英文文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人感想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My-Monitor</title>
      <link href="/2019/07/20/My-Monitor/"/>
      <url>/2019/07/20/My-Monitor/</url>
      
        <content type="html"><![CDATA[<p>I had been trying to write an article about the monitor a few days ago, and tooday i finally <strong>realized</strong>.</p><a id="more"></a><p>&emsp;I <strong>met</strong> the monitor in 2015,When we were both <strong>junior three students</strong>.,Because I <strong>dropped out</strong> of junior high school, I had <strong>little contact</strong> with her in the <strong>previous</strong> few years.<strong>Probably</strong> since I went to college.I have <strong>occasional</strong> contact with the monitor <strong>who was about to face</strong> the college <strong>entrance examination</strong> talked to me a lot about my school and her views. I also expressed my point of view, and we <strong>exchanged</strong> our thoughts about life.</p><p>&emsp;More and more, I feel that the monitor is more and more interesting. Many of her views are <strong>similar</strong> to mine.We sometimes talk for a long time and forget the time.But our <strong>relationship</strong> is still a friend.</p><p>&emsp;<strong>Towards the end of my freshman year</strong>,my <strong>relationship</strong> with the monitor changed <strong>dramatically</strong>,Which is why I wrote an article about the monitor.On a very normal day,the monitory <strong>suddenly</strong> came to me and said that she wanted to come to my university,because my university is a <strong>higher ranking</strong> university in Guangdong.Kind of me,<strong>carefully</strong> answered some questions for her, and said that I really want to talk with the monitor of a university,I talk with the monitor more and more.We talk a lot to each other,whether it’s about life,learning or even the future.</p><p>&emsp;Gradually,I fell in love with the monitor.From the first time I sent a photo to her,to the first time I sent a video to her,I knew that I had <strong>fallen</strong> in love with her.</p><p>&emsp;I like the monitor’s voice,her attitude when talking,her eyes,some of her little jokes,some of her small shortcomins,like all of her.Now that I have <strong>identified</strong> everything. I will say to her <strong>personally</strong> when I return to Guangzhou,”I love you,my monitor.”</p>]]></content>
      
      
      <categories>
          
          <category> 英文文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人感想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Serimu Lake Day Trip</title>
      <link href="/2019/07/20/Serimu-Lake-Day-Trip/"/>
      <url>/2019/07/20/Serimu-Lake-Day-Trip/</url>
      
        <content type="html"><![CDATA[<p>几天前，我去了新疆的赛里木湖，所以便有了这篇文章。</p><p>A few days ago,I went to Serimu Lake in Xinjiang,So I had this article.</p><a id="more"></a><h1 id="English"><a href="#English" class="headerlink" title="English"></a>English</h1><p>&emsp; Early, I was woken up by a phone call,not the monitor’s phone(monitor will not get up so early),I was <strong>confused</strong> to <strong>pick up</strong> the phone to answer,the phone came from my father’s <strong>voice</strong>.After the phone call,I <strong>immediately</strong> get out of bed and wash.Let me get up at 7 a.m in the summer <strong>vaction</strong>, in addition to the monitor’s phone,that may be what let me <strong>attention</strong> the new.</p><p>&emsp;<strong>In a hurry</strong>,I <strong>arrived</strong> at Grandma’s house.I asked my father,”What are you going to do today? Why so early? My father answered,”Today your uncle is going to take you to Serimu Lake to play,so let you come and your uncle will pick us up later.”After my father said that.I was so happy that when i returned to XinJiang.I hardly ever went out to play.Every day I went out to eat meat.</p><h1 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h1><p>&emsp;早早的，我被一通电话闹醒，不是班长的电话，班长不会那么早起，我迷迷糊糊地拿起手机接听，电话那头传来我爸的声音。通完电话，我立刻下床，洗漱，能让我暑假早晨7点就起床的，除了班长的电话，那可能就是什么好消息了吧。</p><p>&emsp;匆匆忙忙地，我到了奶奶家。我问爸:”今天要去干什么啊,怎么那么早？”,我爸回答:”今天你大伯要带你去赛里木湖玩，所以让你来，等下你大伯就来接我们。”，我爸说完，我心里开心得不行，回到新疆，就没怎么出去玩过，每天都是出去吃肉..</p><p>&emsp;不知过了多久，我大伯终于来了，我们便开启了我们的旅程。我们一路人从伊宁市64团出发，要行驶将近70km才能到达赛里木湖。途中我看到很多曾经只能在</p>]]></content>
      
      
      <categories>
          
          <category> 英文文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人感想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Do you know Linux?</title>
      <link href="/2019/07/17/Do-you-know-Linux/"/>
      <url>/2019/07/17/Do-you-know-Linux/</url>
      
        <content type="html"><![CDATA[<p>I have been using Linux for about a year and a half.This article let’s talk about Linux.</p><p>&emsp;Linux is an operating system kernel,In addition to some experts,most Linux users are uing Linux dirtributions.The Linux dirtributions is <strong>preintegrated</strong> with the Linux operating system and <strong>various</strong> application software for users.</p><p>&emsp;The Linux kernel was first released by Linus Trovars on October 5,1999.Although the Linux kernel is develpoed,it does not have the tools included in an operating system,but there is a GNU tool that can be used as a system tool for Linux,so Linux is also called GNU/Linux.Currently,Linux can be used on large computers,supercomputers,mobile phones,<strong>tables</strong>,routers,<strong>televisions</strong>,<strong>game consoleds</strong> and computers,Such as,the Android operating system is based on the Linux kernel.</p><p>&emsp;You maybe ask,can Linux be used as an operating system for  everyday use? I will answer you with <strong>certainty</strong>,Linux Can do it.This article was broin in Arch Linux,I can do <strong>entertainment</strong> and work on Linux.</p><p>&emsp;I love Linux,forever.</p>]]></content>
      
      
      <categories>
          
          <category> 英文文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人感想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What is Vim?</title>
      <link href="/2019/07/14/What-is-Vim/"/>
      <url>/2019/07/14/What-is-Vim/</url>
      
        <content type="html"><![CDATA[<p>The editor I use every day is VIM.This article introduces the hirstory of the VIM.<br><a id="more"></a></p><p><img src="/2019/07/14/What-is-Vim/VIM.png" alt="VIM"></p><p>&emsp;Bram Miller <strong>purchased</strong> hisr Amiga computer in the late 1980s,At this time,there is no editor vi on his computer. So he started with an open source vi <strong>repilica</strong> version of Stevie，developed version 1.0 of Vim.<strong>The initial goal</strong> was to completely copy the function of vi.</p><p>&emsp;After that,Vim has added countless new features. As the first milestone.version 3.0 of 1944 joined the split window mode,It can edit multiple files <strong>simultanesouly</strong> in the same terminal.</p><p>&emsp;At 1996 released Vim 4.0 in 1996 using the version of the GUI.1998 Vim 5.0 version added syntax highlighting.2001 Vim 6.0 version added Code floding,Plugin,<strong>Multi-anguage support</strong> ,Vertical segmentation window etc.The Vim 7.0 release was released in May 2006 added <strong>Spell check</strong>,<strong>Context-sensitice completion</strong>,<strong>Tab editing</strong> etc.</p><p>&emsp;The latest version of Vim is now Vim8</p>]]></content>
      
      
      <categories>
          
          <category> 英文文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VIM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>平铺式桌面-从入门到入坟</title>
      <link href="/2019/07/12/%E5%B9%B3%E9%93%BA%E5%BC%8F%E6%A1%8C%E9%9D%A2-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/"/>
      <url>/2019/07/12/%E5%B9%B3%E9%93%BA%E5%BC%8F%E6%A1%8C%E9%9D%A2-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/</url>
      
        <content type="html"><![CDATA[<p>本文章详细地介绍了我目前的桌面.通过此文章，你可以做到让i3成为你的一把利刃。</p><a id="more"></a><h1 id="暂时未完成"><a href="#暂时未完成" class="headerlink" title="暂时未完成"></a>暂时未完成</h1><p>首先上图，我的i3桌面.</p><p><img src="/2019/07/12/平铺式桌面-从入门到入坟/桌面预览.png" alt="桌面预览"></p><h1 id="0x0-i3"><a href="#0x0-i3" class="headerlink" title="0x0 i3"></a>0x0 i3</h1><h2 id="一、安装i3"><a href="#一、安装i3" class="headerlink" title="一、安装i3"></a>一、安装i3</h2><p>安装i3很简单，我们直接输入下面这条命令即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; sudo pacman -S i3 compton polybar</span><br></pre></td></tr></table></figure><p>此时你可能会看到<code>i3-gaps</code>和<code>i3-wm</code>，选择哪个都可以，推荐<code>i3-gpas</code>，但如果你想拥有一个没有配置过的i3，那么你就直接安装<code>i3-wm</code>即可</p><h2 id="二、配置i3"><a href="#二、配置i3" class="headerlink" title="二、配置i3"></a>二、配置i3</h2><p>配置i3通过编辑<code>~/.config/i3/config</code>这个文件进行配置。</p><p>我这里已经有配置好的i3，你们可以直接使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># i3 config file (v4)</span><br><span class="line">#</span><br><span class="line"># Please see https://i3wm.org/docs/userguide.html for a complete reference!</span><br><span class="line">#</span><br><span class="line"># This config file uses keycodes (bindsym) and was written for the QWERTY</span><br><span class="line"># layout.</span><br><span class="line">#</span><br><span class="line"># To get a config file with the same key positions, but for your current</span><br><span class="line"># layout, use the i3-config-wizard</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Font for window titles. Will also be used by the bar unless a different font</span><br><span class="line"># is used in the bar &#123;&#125; block below.</span><br><span class="line">font pango:monospace 8</span><br><span class="line"></span><br><span class="line"># This font is widely installed, provides lots of unicode glyphs, right-to-left</span><br><span class="line"># text rendering and scalability on retina/hidpi displays (thanks to pango).</span><br><span class="line">#font pango:DejaVu Sans Mono 8</span><br><span class="line"></span><br><span class="line"># Before i3 v4.8, we used to recommend this one as the default:</span><br><span class="line"># font -misc-fixed-medium-r-normal--13-120-75-75-C-70-iso10646-1</span><br><span class="line"># The font above is very space-efficient, that is, it looks good, sharp and</span><br><span class="line"># clear in small sizes. However, its unicode glyph coverage is limited, the old</span><br><span class="line"># X core fonts rendering does not support right-to-left and this being a bitmap</span><br><span class="line"># font, it doesn&apos;t scale on retina/hidpi displays.</span><br><span class="line"></span><br><span class="line"># use these keys for focus, movement, and resize directions when reaching for</span><br><span class="line"># the arrows is not convenient</span><br><span class="line">set $up l</span><br><span class="line">set $down k</span><br><span class="line">set $left j</span><br><span class="line">set $right semicolon</span><br><span class="line"></span><br><span class="line"># use Mouse+Mod1 to drag floating windows to their wanted position</span><br><span class="line">floating_modifier Mod1</span><br><span class="line"></span><br><span class="line"># start a terminal</span><br><span class="line">bindsym Mod1+Return exec i3-sensible-terminal</span><br><span class="line"></span><br><span class="line"># kill focused window</span><br><span class="line">bindsym Mod1+Shift+q kill</span><br><span class="line"></span><br><span class="line"># start dmenu (a program launcher)</span><br><span class="line">bindsym Mod1+d exec dmenu_run</span><br><span class="line"># There also is the (new) i3-dmenu-desktop which only displays applications</span><br><span class="line"># shipping a .desktop file. It is a wrapper around dmenu, so you need that</span><br><span class="line"># installed.</span><br><span class="line"># bindsym Mod1+d exec --no-startup-id i3-dmenu-desktop</span><br><span class="line"></span><br><span class="line"># change focus</span><br><span class="line">bindsym Mod1+$left focus left</span><br><span class="line">bindsym Mod1+$down focus down</span><br><span class="line">bindsym Mod1+$up focus up</span><br><span class="line">bindsym Mod1+$right focus right</span><br><span class="line"></span><br><span class="line"># alternatively, you can use the cursor keys:</span><br><span class="line">bindsym Mod1+Left focus left</span><br><span class="line">bindsym Mod1+Down focus down</span><br><span class="line">bindsym Mod1+Up focus up</span><br><span class="line">bindsym Mod1+Right focus right</span><br><span class="line"></span><br><span class="line"># move focused window</span><br><span class="line">bindsym Mod1+Shift+$left move left</span><br><span class="line">bindsym Mod1+Shift+$down move down</span><br><span class="line">bindsym Mod1+Shift+$up move up</span><br><span class="line">bindsym Mod1+Shift+$right move right</span><br><span class="line"></span><br><span class="line"># alternatively, you can use the cursor keys:</span><br><span class="line">bindsym Mod1+Shift+Left move left</span><br><span class="line">bindsym Mod1+Shift+Down move down</span><br><span class="line">bindsym Mod1+Shift+Up move up</span><br><span class="line">bindsym Mod1+Shift+Right move right</span><br><span class="line"></span><br><span class="line"># split in horizontal orientation</span><br><span class="line">bindsym Mod1+h split h</span><br><span class="line"></span><br><span class="line"># split in vertical orientation</span><br><span class="line">bindsym Mod1+v split v</span><br><span class="line"></span><br><span class="line"># enter fullscreen mode for the focused container</span><br><span class="line">bindsym Mod1+f fullscreen toggle</span><br><span class="line"></span><br><span class="line"># change container layout (stacked, tabbed, toggle split)</span><br><span class="line">bindsym Mod1+s layout stacking</span><br><span class="line">bindsym Mod1+w layout tabbed</span><br><span class="line">bindsym Mod1+e layout toggle split</span><br><span class="line"></span><br><span class="line"># toggle tiling / floating</span><br><span class="line">bindsym Mod1+Shift+space floating toggle</span><br><span class="line"></span><br><span class="line"># change focus between tiling / floating windows</span><br><span class="line">bindsym Mod1+space focus mode_toggle</span><br><span class="line"></span><br><span class="line"># focus the parent container</span><br><span class="line">bindsym Mod1+a focus parent</span><br><span class="line"></span><br><span class="line"># focus the child container</span><br><span class="line">#bindsym Mod1+d focus child</span><br><span class="line"></span><br><span class="line"># move the currently focused window to the scratchpad</span><br><span class="line">bindsym Mod1+Shift+minus move scratchpad</span><br><span class="line"></span><br><span class="line"># Show the next scratchpad window or hide the focused scratchpad window.</span><br><span class="line"># If there are multiple scratchpad windows, this command cycles through them.</span><br><span class="line">bindsym Mod1+minus scratchpad show</span><br><span class="line"></span><br><span class="line"># Define names for default workspaces for which we configure key bindings later on.</span><br><span class="line"># We use variables to avoid repeating the names in multiple places.</span><br><span class="line">set $ws1 &quot;1&quot;</span><br><span class="line">set $ws2 &quot;2&quot;</span><br><span class="line">set $ws3 &quot;3&quot;</span><br><span class="line">set $ws4 &quot;4&quot;</span><br><span class="line">set $ws5 &quot;5&quot;</span><br><span class="line">set $ws6 &quot;6&quot;</span><br><span class="line">set $ws7 &quot;7&quot;</span><br><span class="line">set $ws8 &quot;8&quot;</span><br><span class="line">set $ws9 &quot;9&quot;</span><br><span class="line">set $ws10 &quot;10&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># switch to workspace</span><br><span class="line">bindsym Mod1+1 workspace $ws1</span><br><span class="line">bindsym Mod1+2 workspace $ws2</span><br><span class="line">bindsym Mod1+3 workspace $ws3</span><br><span class="line">bindsym Mod1+4 workspace $ws4</span><br><span class="line">bindsym Mod1+5 workspace $ws5</span><br><span class="line">bindsym Mod1+6 workspace $ws6</span><br><span class="line">bindsym Mod1+7 workspace $ws7</span><br><span class="line">bindsym Mod1+8 workspace $ws8</span><br><span class="line">bindsym Mod1+9 workspace $ws9</span><br><span class="line">bindsym Mod1+0 workspace $ws10</span><br><span class="line"></span><br><span class="line"># move focused container to workspace</span><br><span class="line">bindsym Mod1+Shift+1 move container to workspace $ws1</span><br><span class="line">bindsym Mod1+Shift+2 move container to workspace $ws2</span><br><span class="line">bindsym Mod1+Shift+3 move container to workspace $ws3</span><br><span class="line">bindsym Mod1+Shift+4 move container to workspace $ws4</span><br><span class="line">bindsym Mod1+Shift+5 move container to workspace $ws5</span><br><span class="line">bindsym Mod1+Shift+6 move container to workspace $ws6</span><br><span class="line">bindsym Mod1+Shift+7 move container to workspace $ws7</span><br><span class="line">bindsym Mod1+Shift+8 move container to workspace $ws8</span><br><span class="line">bindsym Mod1+Shift+9 move container to workspace $ws9</span><br><span class="line">bindsym Mod1+Shift+0 move container to workspace $ws10</span><br><span class="line"></span><br><span class="line"># reload the configuration file</span><br><span class="line">bindsym Mod1+Shift+c reload</span><br><span class="line"># restart i3 inplace (preserves your layout/session, can be used to upgrade i3)</span><br><span class="line">bindsym Mod1+Shift+r restart</span><br><span class="line"># exit i3 (logs you out of your X session)</span><br><span class="line">bindsym Mod1+Shift+e exec &quot;i3-nagbar -t warning -m &apos;You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.&apos; -B &apos;Yes, exit i3&apos; &apos;i3-msg exit&apos;&quot;</span><br><span class="line"></span><br><span class="line"># resize window (you can also use the mouse for that)</span><br><span class="line">mode &quot;resize&quot; &#123;</span><br><span class="line">        # These bindings trigger as soon as you enter the resize mode</span><br><span class="line"></span><br><span class="line">        # Pressing left will shrink the window’s width.</span><br><span class="line">        # Pressing right will grow the window’s width.</span><br><span class="line">        # Pressing up will shrink the window’s height.</span><br><span class="line">        # Pressing down will grow the window’s height.</span><br><span class="line">        bindsym $left       resize shrink width 10 px or 10 ppt</span><br><span class="line">        bindsym $down       resize grow height 10 px or 10 ppt</span><br><span class="line">        bindsym $up         resize shrink height 10 px or 10 ppt</span><br><span class="line">        bindsym $right      resize grow width 10 px or 10 ppt</span><br><span class="line"></span><br><span class="line">        # same bindings, but for the arrow keys</span><br><span class="line">        bindsym Left        resize shrink width 10 px or 10 ppt</span><br><span class="line">        bindsym Down        resize grow height 10 px or 10 ppt</span><br><span class="line">        bindsym Up          resize shrink height 10 px or 10 ppt</span><br><span class="line">        bindsym Right       resize grow width 10 px or 10 ppt</span><br><span class="line"></span><br><span class="line">        # back to normal: Enter or Escape or Mod1+r</span><br><span class="line">        bindsym Return mode &quot;default&quot;</span><br><span class="line">        bindsym Escape mode &quot;default&quot;</span><br><span class="line">        bindsym Mod1+r mode &quot;default&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bindsym Mod1+r mode &quot;resize&quot;</span><br><span class="line"></span><br><span class="line"># Start i3bar to display a workspace bar (plus the system information i3status</span><br><span class="line"># finds out, if available)</span><br><span class="line">bar &#123;</span><br><span class="line">        status_command i3status</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#######################################################################</span><br><span class="line"># automatically start i3-config-wizard to offer the user to create a</span><br><span class="line"># keysym-based config which used their favorite modifier (alt or windows)</span><br><span class="line">#</span><br><span class="line"># i3-config-wizard will not launch if there already is a config file</span><br><span class="line"># in ~/.i3/config.</span><br><span class="line">#</span><br><span class="line"># Please remove the following exec line:</span><br><span class="line">#######################################################################</span><br><span class="line">exec i3-config-wizard</span><br></pre></td></tr></table></figure><p>将上面的内容粘贴到i3的配置文件内即可</p><h2 id="四、美化i3-polybar"><a href="#四、美化i3-polybar" class="headerlink" title="四、美化i3-polybar"></a>四、美化i3-polybar</h2><p><code>polybar</code>是一个快速并且易用的状态显示栏</p><p>就如同你们看到的桌面预览图一般，上面的状态栏就是通过<code>polybar</code>实现的</p><p>我的polybar已经配置完成了，可以方便的显示工作区的数字，以及窗口的标题，以及CPU,RAM,CPU温度,时间,系统托盘等功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">;==========================================================</span><br><span class="line">;</span><br><span class="line">;</span><br><span class="line">;   ██████╗  ██████╗ ██╗  ██╗   ██╗██████╗  █████╗ ██████╗</span><br><span class="line">;   ██╔══██╗██╔═══██╗██║  ╚██╗ ██╔╝██╔══██╗██╔══██╗██╔══██╗</span><br><span class="line">;   ██████╔╝██║   ██║██║   ╚████╔╝ ██████╔╝███████║██████╔╝</span><br><span class="line">;   ██╔═══╝ ██║   ██║██║    ╚██╔╝  ██╔══██╗██╔══██║██╔══██╗</span><br><span class="line">;   ██║     ╚██████╔╝███████╗██║   ██████╔╝██║  ██║██║  ██║</span><br><span class="line">;   ╚═╝      ╚═════╝ ╚══════╝╚═╝   ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝</span><br><span class="line">;</span><br><span class="line">;</span><br><span class="line">;   To learn more about how to configure Polybar</span><br><span class="line">;   go to https://github.com/polybar/polybar</span><br><span class="line">;</span><br><span class="line">;   The README contains a lot of information</span><br><span class="line">;</span><br><span class="line">;==========================================================</span><br><span class="line"></span><br><span class="line">[colors]</span><br><span class="line">background = #cc222222</span><br><span class="line">background-alt = #444</span><br><span class="line">;foreground = $&#123;xrdb:color7:#222&#125;</span><br><span class="line">foreground = #dfdfdf</span><br><span class="line">foreground-alt = #555</span><br><span class="line">primary = #ffb52a</span><br><span class="line">secondary = #e60053</span><br><span class="line">alert = #bd2c40</span><br><span class="line"></span><br><span class="line">[bar/example]</span><br><span class="line">;monitor = $&#123;env:MONITOR:HDMI1&#125;</span><br><span class="line">monitor = $&#123;env:MONITOR:eDP1&#125;</span><br><span class="line">width = 100%</span><br><span class="line">height = 30</span><br><span class="line">;offset-x = 1%</span><br><span class="line">;offset-y = 1%</span><br><span class="line">radius = 6.0</span><br><span class="line">fixed-center = true</span><br><span class="line"></span><br><span class="line">background = $&#123;colors.background&#125;</span><br><span class="line">foreground = $&#123;colors.foreground&#125;</span><br><span class="line"></span><br><span class="line">line-size = 3</span><br><span class="line">line-color = #f00</span><br><span class="line"></span><br><span class="line">border-top-size = 0</span><br><span class="line">border-left-size = 0</span><br><span class="line">border-right-size = 0</span><br><span class="line">border-color = #00000000</span><br><span class="line"></span><br><span class="line">padding-left = 0</span><br><span class="line">padding-right = 2</span><br><span class="line"></span><br><span class="line">module-margin-left = 1</span><br><span class="line">module-margin-right = 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">font-0 = ttf-liberation-sans:fixed:pixelsize=12;1</span><br><span class="line">font-1 = source han sans cn:pixelsize=12:antialias=false;1</span><br><span class="line">font-2 = &quot;Font Awesome 5 Free:style=Solid:pixelsize=12;1&quot;</span><br><span class="line">font-3 = &quot;Font Awesome 5 Brands:style=Regular:pixelsize=12;1&quot;</span><br><span class="line">font-4 = &quot;material icons:pixelsize=16;3&quot;</span><br><span class="line"></span><br><span class="line">modules-left = i3</span><br><span class="line">modules-center = xwindow</span><br><span class="line">;modules-center = </span><br><span class="line">modules-right = cpu memory temperature battery date </span><br><span class="line"></span><br><span class="line">tray-position = right</span><br><span class="line">tray-padding = 2</span><br><span class="line">tray-background = $&#123;colors.background&#125;</span><br><span class="line"></span><br><span class="line">cursor-click = pointer</span><br><span class="line">cursor-scroll = ns-resize</span><br><span class="line"></span><br><span class="line">[module/xwindow]</span><br><span class="line">type = internal/xwindow</span><br><span class="line">label = %title%</span><br><span class="line">width = 50</span><br><span class="line">label-maxlen = 45</span><br><span class="line"></span><br><span class="line">[module/xkeyboard]</span><br><span class="line">type = internal/xkeyboard</span><br><span class="line">blacklist-0 = num lock</span><br><span class="line"></span><br><span class="line">format-prefix = &quot;&quot;</span><br><span class="line">format-prefix-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line">format-prefix-underline = $&#123;colors.secondary&#125;</span><br><span class="line"></span><br><span class="line">label-layout = %layout%</span><br><span class="line">label-layout-underline = $&#123;colors.secondary&#125;</span><br><span class="line"></span><br><span class="line">label-indicator-padding = 2</span><br><span class="line">label-indicator-margin = 1</span><br><span class="line">label-indicator-background = $&#123;colors.secondary&#125;</span><br><span class="line">label-indicator-underline = $&#123;colors.secondary&#125;</span><br><span class="line"></span><br><span class="line">[module/filesystem]</span><br><span class="line">type = internal/fs</span><br><span class="line">interval = 25</span><br><span class="line"></span><br><span class="line">mount-0 = /</span><br><span class="line"></span><br><span class="line">label-mounted = %&#123;F#0a81f5&#125;%mountpoint%%&#123;F-&#125;: %percentage_used%%</span><br><span class="line">label-unmounted = %mountpoint% not mounted</span><br><span class="line">label-unmounted-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line"></span><br><span class="line">[module/bspwm]</span><br><span class="line">type = internal/bspwm</span><br><span class="line"></span><br><span class="line">label-focused = %index%</span><br><span class="line">label-focused-background = $&#123;colors.background-alt&#125;</span><br><span class="line">label-focused-underline= $&#123;colors.primary&#125;</span><br><span class="line">label-focused-padding = 2</span><br><span class="line"></span><br><span class="line">label-occupied = %index%</span><br><span class="line">label-occupied-padding = 2</span><br><span class="line"></span><br><span class="line">label-urgent = %index%!</span><br><span class="line">label-urgent-background = $&#123;colors.alert&#125;</span><br><span class="line">label-urgent-padding = 2</span><br><span class="line"></span><br><span class="line">label-empty = %index%</span><br><span class="line">label-empty-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line">label-empty-padding = 2</span><br><span class="line"></span><br><span class="line">[module/i3]</span><br><span class="line">type = internal/i3</span><br><span class="line">format = &lt;label-state&gt; &lt;label-mode&gt;</span><br><span class="line">index-sort = true</span><br><span class="line">wrapping-scroll = false</span><br><span class="line"></span><br><span class="line">label-focused = %name%</span><br><span class="line">label-unfocused = %name%</span><br><span class="line">label-visible = %name%</span><br><span class="line">label-urgent = %name%</span><br><span class="line"></span><br><span class="line">label-mode-padding = 2</span><br><span class="line">label-mode-foreground = #000</span><br><span class="line">label-mode-background = $&#123;colors.primary&#125;</span><br><span class="line"></span><br><span class="line">label-focused-background = $&#123;module/bspwm.label-focused-background&#125;</span><br><span class="line">label-focused-underline = $&#123;module/bspwm.label-focused-underline&#125;</span><br><span class="line">label-focused-padding = $&#123;module/bspwm.label-focused-padding&#125;</span><br><span class="line"></span><br><span class="line">label-unfocused-padding = $&#123;module/bspwm.label-occupied-padding&#125;</span><br><span class="line"></span><br><span class="line">label-visible-background = $&#123;self.label-focused-background&#125;</span><br><span class="line">label-visible-underline = $&#123;self.label-focused-underline&#125;</span><br><span class="line">label-visible-padding = $&#123;self.label-focused-padding&#125;</span><br><span class="line"></span><br><span class="line">label-urgent-background = $&#123;module/bspwm.label-urgent-background&#125;</span><br><span class="line">label-urgent-padding = $&#123;module/bspwm.label-urgent-padding&#125; |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[module/xbacklight]</span><br><span class="line">type = internal/xbacklight</span><br><span class="line"></span><br><span class="line">format = &lt;label&gt; &lt;bar&gt;</span><br><span class="line">label = BL</span><br><span class="line"></span><br><span class="line">bar-width = 10</span><br><span class="line">bar-indicator = |</span><br><span class="line">bar-indicator-foreground = #ff</span><br><span class="line">bar-indicator-font = 2</span><br><span class="line">bar-fill = ─</span><br><span class="line">bar-fill-font = 2</span><br><span class="line">bar-fill-foreground = #9f78e1</span><br><span class="line">bar-empty = ─</span><br><span class="line">bar-empty-font = 2</span><br><span class="line">bar-empty-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line"></span><br><span class="line">[module/backlight-acpi]</span><br><span class="line">inherit = module/xbacklight</span><br><span class="line">type = internal/backlight</span><br><span class="line">card = intel_backlight</span><br><span class="line"></span><br><span class="line">[module/cpu]</span><br><span class="line">type = internal/cpu</span><br><span class="line">interval = 2</span><br><span class="line">format-prefix = &quot; &quot;</span><br><span class="line">;format-prefix-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line">;format-underline = #f90000</span><br><span class="line">label = %percentage:2%%</span><br><span class="line"></span><br><span class="line">[module/memory]</span><br><span class="line">type = internal/memory</span><br><span class="line">interval = 2</span><br><span class="line">format-prefix = &quot;  &quot;</span><br><span class="line">;format-prefix-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line">;format-underline = #4bffdc</span><br><span class="line">label = %percentage_used%%</span><br><span class="line"></span><br><span class="line">[module/wlan]</span><br><span class="line">type = internal/network</span><br><span class="line">interface = wlp3s0</span><br><span class="line">interval = 3.0</span><br><span class="line"></span><br><span class="line">format-connected = &lt;ramp-signal&gt;</span><br><span class="line">;format-connected-underline = #9f78e1</span><br><span class="line">label-connected = &quot;%essid%&quot;</span><br><span class="line"></span><br><span class="line">format-disconnected = </span><br><span class="line">;format-disconnected = &lt;label-disconnected&gt;</span><br><span class="line">;format-disconnected-underline = $&#123;self.format-connected-underline&#125;</span><br><span class="line">label-disconnected = %ifname% disconnected</span><br><span class="line">label-disconnected-foreground = #999999</span><br><span class="line"></span><br><span class="line">ramp-signal-0 = </span><br><span class="line">ramp-signal-1 = </span><br><span class="line">ramp-signal-2 = </span><br><span class="line">ramp-signal-3 = </span><br><span class="line">ramp-signal-4 = </span><br><span class="line">animation-packetloss-0 = ⚠</span><br><span class="line">animation-packetloss-0-foreground = #ffa64c</span><br><span class="line">;ramp-signal-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line"></span><br><span class="line">[module/eth]</span><br><span class="line">type = internal/network</span><br><span class="line">interface = enp0s31f6</span><br><span class="line">interval = 3.0</span><br><span class="line"></span><br><span class="line">format-connected-underline = #55aa55</span><br><span class="line">format-connected-prefix = &quot;📶&quot;</span><br><span class="line">format-connected-prefix-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line">label-connected = %local_ip%</span><br><span class="line"></span><br><span class="line">format-disconnected =</span><br><span class="line">;format-disconnected = &lt;label-disconnected&gt;</span><br><span class="line">;format-disconnected-underline = $&#123;self.format-connected-underline&#125;</span><br><span class="line">;label-disconnected = %ifname% disconnected</span><br><span class="line">;label-disconnected-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line"></span><br><span class="line">[module/date]</span><br><span class="line">type = internal/date</span><br><span class="line">interval = 5</span><br><span class="line"></span><br><span class="line">date = &quot; %Y-%m-%d&quot;</span><br><span class="line">;date-alt = &quot; %Y-%m-%d&quot;</span><br><span class="line"></span><br><span class="line">time = %H:%M</span><br><span class="line">;time-alt = %H:%M:%S</span><br><span class="line"></span><br><span class="line">format-prefix = </span><br><span class="line">;format-prefix-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line">;format-underline = #0a6cf5</span><br><span class="line"></span><br><span class="line">label = %date% %time%</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[module/alsa]</span><br><span class="line">type = internal/volume</span><br><span class="line"></span><br><span class="line">format-volume = &lt;label-volume&gt; &lt;bar-volume&gt;</span><br><span class="line">label-volume = </span><br><span class="line">label-volume-foreground = $&#123;root.foreground&#125;</span><br><span class="line"></span><br><span class="line">format-muted-prefix = &quot; &quot;</span><br><span class="line">format-muted-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line">label-muted = </span><br><span class="line"></span><br><span class="line">bar-volume-width = 5</span><br><span class="line">bar-volume-foreground-0 = #55aa55</span><br><span class="line">bar-volume-foreground-1 = #55aa55</span><br><span class="line">bar-volume-foreground-2 = #55aa55</span><br><span class="line">bar-volume-foreground-3 = #55aa55</span><br><span class="line">bar-volume-foreground-4 = #55aa55</span><br><span class="line">bar-volume-foreground-5 = #f5a70a</span><br><span class="line">bar-volume-foreground-6 = #ff5555</span><br><span class="line">bar-volume-gradient = false</span><br><span class="line">bar-volume-indicator = |</span><br><span class="line">bar-volume-indicator-font = 2</span><br><span class="line">bar-volume-fill = ─</span><br><span class="line">bar-volume-fill-font = 2</span><br><span class="line">bar-volume-empty = ─</span><br><span class="line">bar-volume-empty-font = 2</span><br><span class="line">bar-volume-empty-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line"></span><br><span class="line">[module/battery]</span><br><span class="line">type = internal/battery</span><br><span class="line">battery = BAT0</span><br><span class="line">adapter = ADP1</span><br><span class="line">full-at = 98</span><br><span class="line"></span><br><span class="line">format-charging = &lt;animation-charging&gt; &lt;label-charging&gt;</span><br><span class="line">format-charging-underline = #ffb52a</span><br><span class="line"></span><br><span class="line">format-discharging = &lt;ramp-capacity&gt; &lt;label-discharging&gt;</span><br><span class="line">;format-discharging-underline = $&#123;self.format-charging-underline&#125;</span><br><span class="line"></span><br><span class="line">format-full-prefix = &quot; &quot;</span><br><span class="line">;format-full-prefix-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line">format-full-underline = $&#123;self.format-charging-underline&#125;</span><br><span class="line"></span><br><span class="line">ramp-capacity-0 = </span><br><span class="line">ramp-capacity-1 = </span><br><span class="line">ramp-capacity-2 = </span><br><span class="line">ramp-capacity-3 = </span><br><span class="line">;ramp-capacity-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line"></span><br><span class="line">animation-charging-0 = </span><br><span class="line">animation-charging-1 = </span><br><span class="line">animation-charging-2 = </span><br><span class="line">animation-charging-3 = </span><br><span class="line">;animation-charging-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line">animation-charging-framerate = 750</span><br><span class="line"></span><br><span class="line">[module/temperature]</span><br><span class="line">type = internal/temperature</span><br><span class="line">thermal-zone = 0</span><br><span class="line">warn-temperature = 60</span><br><span class="line"></span><br><span class="line">format = &lt;ramp&gt; &lt;label&gt;</span><br><span class="line">;format-underline = #f50a4d</span><br><span class="line">format-warn = &lt;ramp&gt; &lt;label-warn&gt;</span><br><span class="line">;format-warn-underline = $&#123;self.format-underline&#125;</span><br><span class="line"></span><br><span class="line">label = %temperature%</span><br><span class="line">label-warn = %temperature%</span><br><span class="line">label-warn-foreground = $&#123;colors.secondary&#125;</span><br><span class="line"></span><br><span class="line">ramp-0 = </span><br><span class="line">ramp-1 = </span><br><span class="line">ramp-2 = </span><br><span class="line">;ramp-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line"></span><br><span class="line">[module/powermenu]</span><br><span class="line">type = custom/menu</span><br><span class="line">expand-right = true</span><br><span class="line"></span><br><span class="line">format-spacing = 1</span><br><span class="line"></span><br><span class="line">label-open = </span><br><span class="line">label-open-foreground = $&#123;colors.secondary&#125;</span><br><span class="line">label-close =  cancel</span><br><span class="line">label-close-foreground = $&#123;colors.secondary&#125;</span><br><span class="line">label-separator = |</span><br><span class="line">label-separator-foreground = $&#123;colors.foreground-alt&#125;</span><br><span class="line"></span><br><span class="line">menu-0-0 = reboot</span><br><span class="line">menu-0-0-exec = reboot</span><br><span class="line">menu-0-1 = power off</span><br><span class="line">menu-0-1-exec = poweroff</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[settings]</span><br><span class="line">screenchange-reload = true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[global/wm]</span><br><span class="line">margin-top = 5</span><br><span class="line">margin-bottom = 5</span><br></pre></td></tr></table></figure><p>上面这段配置文件是polybar的配置文件，我们还需要一个启动polybar的脚本</p><blockquote><p>launch.sh</p></blockquote><p>这里的<code>launch.sh</code>可以改名，但是不必须得放在<code>~/.config/polybar</code>目录下，改名后需要修改<code>i3</code>配置文件的第<code>33</code>行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env bash</span><br><span class="line"></span><br><span class="line"># Terminate already running bar instances</span><br><span class="line">killall -q polybar</span><br><span class="line"></span><br><span class="line"># Wait until the processes have been shut down</span><br><span class="line">while pgrep -u $UID -x polybar &gt;/dev/null; do sleep 1; done</span><br><span class="line"></span><br><span class="line"># Launch bar1 and bar2</span><br><span class="line">polybar example &amp;</span><br></pre></td></tr></table></figure><h2 id="三、使用i3"><a href="#三、使用i3" class="headerlink" title="三、使用i3"></a>三、使用i3</h2><p>这一小节，我主要介绍我的配置文件所做的事。</p><p>下面的说明并不是将我的配置文件全部进行解读，有些我觉得你们能看懂的我就没写。</p><p><strong>set $mod Mod1</strong>  设置i3的super为<code>Alt</code>键</p><p><strong>new_window pixel 1</strong> 设置新窗口的窗口边缘的像素</p><p><strong>new_float normal</strong> 设置浮动窗口，值为默认</p><p><strong>hide_edge_borders</strong> 设置窗口边框隐藏</p><table><thead><tr><th>按键</th><th>说明</th></tr></thead><tbody><tr><td>$mod+u</td><td>设置边框存在</td></tr><tr><td>$mod+y</td><td>设置边框像素为1</td></tr><tr><td>$mod+n</td><td>设置边框隐藏</td></tr><tr><td>$mod+Return(回车键)</td><td>打开alacritty终端</td></tr><tr><td>$mod+Shift+Return</td><td>通过alacritty打开ranger</td></tr><tr><td>$mod+Control+g</td><td>打开Chrome</td></tr><tr><td>$mod+Controll+f</td><td>打开Firefox</td></tr><tr><td>$mod+Shift+q</td><td>杀死聚焦窗口</td></tr><tr><td>$mod+d</td><td>打开rofi</td></tr><tr><td>$mod+h+j+k+l</td><td>将聚焦在窗口之间切换</td></tr><tr><td>$mdo+上下左右</td><td>同上，只不过用的是方向键</td></tr><tr><td>$mod+Shift+h+j+k+l</td><td>将聚焦窗口改变排列位置</td></tr><tr><td>$mod+Shift+上下左右</td><td>同上，只不过用的是方向键</td></tr><tr><td>$mod+b</td><td>切换至上一个工作区</td></tr><tr><td>$mod+Shift+b</td><td>将上一个工作区的容器，移动至当前工作区内</td></tr><tr><td>$mod+q</td><td>切换平铺方式</td></tr><tr><td>$mod+f</td><td>将聚焦窗口全屏</td></tr><tr><td>$mod+s</td><td>容器窗口排列方式为堆叠式</td></tr><tr><td>$mod+w</td><td>容器窗口排列方式为标签式</td></tr><tr><td>$mod+e</td><td>容器窗口排列方式为平铺式</td></tr><tr><td>$mod+Shift+space(空格键)</td><td>切换容器窗口为平铺还是浮动</td></tr><tr><td>$mod+space</td><td>在浮动或平铺窗口之间进行聚焦的切换</td></tr><tr><td>$mod+Ctrl+左或右</td><td>切换工作区，前或后</td></tr><tr><td>$mod+1-8</td><td>切换工作区</td></tr><tr><td>$mod+Ctrl+1-8</td><td>将当前容器的窗口移动至某个工作区</td></tr><tr><td>$mod+Shift+1-8</td><td>将当前容器移动至某个工作区</td></tr><tr><td>$mod+Shift+r</td><td>重启i3</td></tr><tr><td>$mod+Shift+c</td><td>重载i3配置文件</td></tr><tr><td>$mod+0</td><td>进入系统模式</td></tr><tr><td>l</td><td>系统模式:锁屏</td></tr><tr><td>s</td><td>系统模式:挂出</td></tr><tr><td>u</td><td>系统模式:切换用户</td></tr><tr><td>e</td><td>系统模式:登出</td></tr><tr><td>h</td><td>系统模式:休眠</td></tr><tr><td>r</td><td>系统模式:重启</td></tr><tr><td>Shift+s</td><td>系统模式:关机</td></tr><tr><td>$mod+r</td><td>进入窗口大小设置模式</td></tr><tr><td>h j k l</td><td>设置窗口上下左右的大小</td></tr><tr><td>上下左右</td><td>同上</td></tr><tr><td>Return</td><td>退出窗口大小设置模式</td></tr><tr><td>触摸板开关</td><td>触摸板开关</td></tr></tbody></table><h1 id="0x2-rofi"><a href="#0x2-rofi" class="headerlink" title="0x2 rofi"></a>0x2 rofi</h1><h2 id="一、安装rofi"><a href="#一、安装rofi" class="headerlink" title="一、安装rofi"></a>一、安装rofi</h2><blockquote><p>sudo pacman -S rofi</p></blockquote><h2 id="二、配置rofi"><a href="#二、配置rofi" class="headerlink" title="二、配置rofi"></a>二、配置rofi</h2><h2 id="三、使用rofi"><a href="#三、使用rofi" class="headerlink" title="三、使用rofi"></a>三、使用rofi</h2><h1 id="0x1-ranger"><a href="#0x1-ranger" class="headerlink" title="0x1 ranger"></a>0x1 ranger</h1><h2 id="一、安装ranger"><a href="#一、安装ranger" class="headerlink" title="一、安装ranger"></a>一、安装ranger</h2><h2 id="二、配置ranger"><a href="#二、配置ranger" class="headerlink" title="二、配置ranger"></a>二、配置ranger</h2><h2 id="三、使用ranger"><a href="#三、使用ranger" class="headerlink" title="三、使用ranger"></a>三、使用ranger</h2><h1 id="0x2-alacritty"><a href="#0x2-alacritty" class="headerlink" title="0x2 alacritty"></a>0x2 alacritty</h1><h2 id="一、安装alacritty"><a href="#一、安装alacritty" class="headerlink" title="一、安装alacritty"></a>一、安装alacritty</h2><h2 id="二、配置alacritty"><a href="#二、配置alacritty" class="headerlink" title="二、配置alacritty"></a>二、配置alacritty</h2><h2 id="三、使用alacritty"><a href="#三、使用alacritty" class="headerlink" title="三、使用alacritty"></a>三、使用alacritty</h2><h1 id="0x3-vim"><a href="#0x3-vim" class="headerlink" title="0x3 vim"></a>0x3 vim</h1><h2 id="一、配置vim"><a href="#一、配置vim" class="headerlink" title="一、配置vim"></a>一、配置vim</h2><h1 id="0x4-zsh"><a href="#0x4-zsh" class="headerlink" title="0x4 zsh"></a>0x4 zsh</h1><h2 id="一、安装zsh"><a href="#一、安装zsh" class="headerlink" title="一、安装zsh"></a>一、安装zsh</h2><h2 id="二、配置zsh"><a href="#二、配置zsh" class="headerlink" title="二、配置zsh"></a>二、配置zsh</h2><h1 id="0x5-ssr-proxychains"><a href="#0x5-ssr-proxychains" class="headerlink" title="0x5 ssr+proxychains"></a>0x5 ssr+proxychains</h1><h2 id="一、安装ssr"><a href="#一、安装ssr" class="headerlink" title="一、安装ssr"></a>一、安装ssr</h2><h2 id="二、配置ssr"><a href="#二、配置ssr" class="headerlink" title="二、配置ssr"></a>二、配置ssr</h2><h2 id="三、安装proxychains"><a href="#三、安装proxychains" class="headerlink" title="三、安装proxychains"></a>三、安装proxychains</h2><h2 id="四、配置proxychains"><a href="#四、配置proxychains" class="headerlink" title="四、配置proxychains"></a>四、配置proxychains</h2><h2 id="五、使用ssr-proxychains实现全应用走代理"><a href="#五、使用ssr-proxychains实现全应用走代理" class="headerlink" title="五、使用ssr+proxychains实现全应用走代理"></a>五、使用ssr+proxychains实现全应用走代理</h2><h1 id="0x6-fcitx"><a href="#0x6-fcitx" class="headerlink" title="0x6 fcitx"></a>0x6 fcitx</h1><h2 id="一、安装fcitx"><a href="#一、安装fcitx" class="headerlink" title="一、安装fcitx"></a>一、安装fcitx</h2><h2 id="二、配置fcitx"><a href="#二、配置fcitx" class="headerlink" title="二、配置fcitx"></a>二、配置fcitx</h2><h2 id="三、启动fcitx"><a href="#三、启动fcitx" class="headerlink" title="三、启动fcitx"></a>三、启动fcitx</h2>]]></content>
      
      
      <categories>
          
          <category> 折腾日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> i3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Boring Article</title>
      <link href="/2019/07/12/Boring-Article/"/>
      <url>/2019/07/12/Boring-Article/</url>
      
        <content type="html"><![CDATA[<p>Since I returned to Xinjiang,I have to eat and sleep everyday.I was so <strong>bored</strong>,then I had this article.</p><a id="more"></a><p>&emsp;Befor I came to Xinjiang,I hope I can take many beatuiful pictures,eat my favorite food and do what I want to do.But now the only way to take pictures just can with mobile phone,Cameras can not be used.Every day.I eat with my parents.butI can not eat what I want.Finally,I care too much about me .I thought that home is to be free and easy to call home.I always manage my family,which is called cage!</p><p>&emsp;In fact.this article is a <strong>dissemination of negative energy</strong>.If you are unhappy,I am sorry.My father just came back,he said that his business is finished.the <strong>rest of the time</strong> can enjoy.I hope the next summer life will be <strong>enriched</strong>!</p>]]></content>
      
      
      <categories>
          
          <category> 英文文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人感想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyCuteSister-1</title>
      <link href="/2019/07/10/MyCuteSister-1/"/>
      <url>/2019/07/10/MyCuteSister-1/</url>
      
        <content type="html"><![CDATA[<p>The article is the next article of “MyCuteSister”.</p><a id="more"></a><p>&emsp;Next article we talk about my sister something not bad and she’s appearance,this article let’s we talk about she’s school work.</p><p>&emsp;My sister is seven years old,she <strong>attended Maria Kindergarten</strong> in GuangZhou.When she was a kindergraten student,she was excellent.She often become monitor of class.</p><p>&emsp;She <strong>can also</strong> draw.Since she attended kindergraten,almost every week draw a works,<strong>So for</strong> about two hundred draw works stayed we home.</p><p>&emsp;She <strong>can also</strong> dance.She use weekend time learn dance,Since she can’t <strong>back bend</strong>,<strong>thwart split</strong> to be dance a complete dance.And She often join Kindergraten activites,<strong>Our whole famliy is proud for her</strong>.</p><p>&emsp;By the way,She can also play the piano,<strong>Whennever I am bored</strong>.I watch the video of her playing the piano,Which make me feel better immediately.</p><p>&emsp;She will become a <strong>Primary Student</strong>,Because she went up THE AFFILIATED SCHOOL OF GUANGDONG UNIVERSITY OF FOREIGN STUDIES,Bug she need stay at school,I think I will very miss her.</p><p>&esp;This is my sister,And I LOVE HER.</p>]]></content>
      
      
      <categories>
          
          <category> 英文文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人感想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyCuteSister-0</title>
      <link href="/2019/07/09/MyCuteSister-0/"/>
      <url>/2019/07/09/MyCuteSister-0/</url>
      
        <content type="html"><![CDATA[<p>Last article is so bad,so this article i want is not bad.</p><a id="more"></a><p>&emsp;I have a young sister,she is so cute and pretty.Now I will introduce her.Ok let’s do it.</p><p>She have a black long hair,and clear and shinning eyes.When she lie on soft reading books，I always think she so beatuiful and cute.At this point,I will ask her,what book are reading? then she always say cartoon book,At this point,I say,Why you read cartoon book? She say,because i like it.</p><p>Let’s talk about she’s not good,also many children’s problems.It picky eaters,such as,she <strong>dislike eggplant</strong>，I tell her do not picky eaters,she say ok.</p>]]></content>
      
      
      <categories>
          
          <category> 英文文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人感想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyCollegeLife</title>
      <link href="/2019/07/05/MyCollegeLife/"/>
      <url>/2019/07/05/MyCollegeLife/</url>
      
        <content type="html"><![CDATA[<p>&emsp;About three years ago,I left my school where I stayed for seven years.I lose so many friends,<strong>day and night accompany friend</strong>.Of course,<strong>including you</strong>.</p><p>&emsp;Three years after,I become a <strong>college</strong> student，Maybe you guessed this <strong>article</strong> is about my college life.About at 2019-9-1 start my college lift.I think I have very <strong>excited</strong> at that time.</p><p>&emsp;Before school start，I <strong>participate in</strong> <strong>Military training</strong>.Remember that time ,about one hundred peoples <strong>trained</strong> in a groups together,Instructor look we are tired,then he will say:”Everyboby listen! Drop Down!”，<strong>In the twinkling of an eye</strong> one hundred peoples on the ground <strong>lie</strong>.This time nobody care isn’t dirty，just look the sky，think，THE SKY SO BEATUIFUL.</p><p>&emsp;<strong>The fight of time</strong>，military training will done.This time Not only have one hundred peoples,enough seven to ten hundred peoples.We sing school song together and with in millitary training time know’s friend add WeChat Friend，Of course，me too.</p><p>&emsp;Speak the true talk.When our instructor go back to army，My eyes are wet，wet is not to say I love crying,It’s because he teach for me so many <strong>knowledge</strong>.</p><p>&emsp;At the last，I <strong>sincerely</strong> thank my instructor，Peace!</p>]]></content>
      
      
      <categories>
          
          <category> 英文文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人感想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fraudster Shop-坑爹商店</title>
      <link href="/2019/07/05/Fraudster-Shop-%E5%9D%91%E7%88%B9%E5%95%86%E5%BA%97/"/>
      <url>/2019/07/05/Fraudster-Shop-%E5%9D%91%E7%88%B9%E5%95%86%E5%BA%97/</url>
      
        <content type="html"><![CDATA[<p>  昨晚我尝试安装了i3，Manjaro的配置，然而我一直没有配置完成，我就想重装个Manjaro-i3反正文件都在Github上，不过我的U盘不知从何时起就不见了，所以我需要买个U盘。<br><a id="more"></a></p><hr><h1 id="Chinese"><a href="#Chinese" class="headerlink" title="Chinese"></a>Chinese</h1><p>&emsp;自从昨晚系统被我玩到暂时无法使用后，我这个内心就无法平静，一直想着一定要把i3配置好，不然过两天去乌鲁木齐连Github都上不去就惨了。</p><p>&emsp;昨晚正好宿舍又没多少电了，所以空调没开就睡觉了。睡得比较早，醒得也比较早，半夜3点就醒来了，没错，就是被热醒的。时间流逝得挺快，一晃眼就到白天了，东西收拾完毕，床位打理完成后我便回家了，回家时我就想，早上下订单，京东同城的话下午应该就能到，不过就是贵了点运费，大概算下来USB3.0 16GB的U盘才45左右，不过我又想了想，选择回家买，不需要等待快递。</p><p>&emsp;我在街头转了又转，转了又转，就是没有发现一个电脑店，正当我有些失落的时候，街角的一间手机店引起了我的注意，我自信的，揣着钱包就进去了。“老板，你这里有没有USB3.0的U盘啊?” 我说，老板想都没想说了句,”有啊!”，说着便拿出一小沓U盘，我看了看说道:”老板，这些都不是USB3.0，你拿其他的给我看一下吧!”，我此时心里想，不用骗我了，拿一些2.0的来哄骗我是3.0的吧。老板无奈的说，”你一个小时后再来吧，我这里3.0的U盘卖完了。”，虽然老板说是卖完了，但我大概能知道他根本没有进过USB3.0的货，一直靠着用3.0的价格贩卖2.0的U盘。</p><p>&emsp;后来我又找了很多家手机店和电脑店，他们居然都没有USB3.0，并且他们卖的都是USB2.0，更让我吃惊的是，他们全部统一地将USB2.0的U盘卖70-80RMB左右。其中我尝试跟他们讲价，就算是2.0U盘我暂时买个4G的USB2.0还可以装我的i3，我出价30，这是我的最高价了…然后卖家给我说不能卖，最低55，掉价这么快，80直接掉到55，最终没谈成，因为我已经很不想买USB2.0了，更不可能花那么多钱买一个过时的产物。</p><p>&emsp;说了这么多，其实就是想让大家以后不要再去实体店买这种电子产品了，当然可能有一些实体店还是正常的价格的，但据我的真实体验，实体店普遍就是要坑小白的，并且就算你指明要USB3.0他还是会拿给你USB2.0看，尝试诱骗你。</p><p>&emsp;京东晚上7点下的单，第二天9点就可以取件了，真香。强烈推荐一线城市想买这种小物件直接京东买吧，甚至还有同城送，上午买下午就到，不过要多付点运费。</p>]]></content>
      
      
      <categories>
          
          <category> 英文文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超酷-字符文件管理-ranger</title>
      <link href="/2019/07/03/%E8%B6%85%E9%85%B7-%E5%AD%97%E7%AC%A6%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86-ranger/"/>
      <url>/2019/07/03/%E8%B6%85%E9%85%B7-%E5%AD%97%E7%AC%A6%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86-ranger/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><img src="/2019/07/03/超酷-字符文件管理-ranger/ranger-pre.png" alt="ranger"></p><h1 id="0x0-什么是ranger"><a href="#0x0-什么是ranger" class="headerlink" title="0x0 什么是ranger?"></a>0x0 什么是ranger?</h1><p><code>ranger</code>是一个基于文本的文件管理器，由Python编写。</p><h1 id="0x1-为什么要选择ranger"><a href="#0x1-为什么要选择ranger" class="headerlink" title="0x1 为什么要选择ranger?"></a>0x1 为什么要选择ranger?</h1><p><code>ranger</code>具有以下特性:</p><ul><li><p>vi风格的快捷键</p></li><li><p>书签</p></li><li><p>选择</p></li><li><p>标签</p></li><li><p>选项</p></li><li><p>命令历史</p></li><li><p>创建符号链接</p></li><li><p>任务视图</p></li><li><p>自定义命令</p></li><li><p>自定义快捷键按</p></li></ul><h1 id="0x2-使用ranger"><a href="#0x2-使用ranger" class="headerlink" title="0x2 使用ranger"></a>0x2 使用ranger</h1><p>在终端内输入<code>ranger</code>以启动ranger</p><p>使用<code>h j k l</code>进行目录之间的进出。</p><h1 id="0x3-配置ranger"><a href="#0x3-配置ranger" class="headerlink" title="0x3 配置ranger"></a>0x3 配置ranger</h1><p>配置文件:</p><ul><li><p>rc.conf 基本选项与快捷键设置</p></li><li><p>commands.py 可在ranger下使用<code>:</code>执行的命令</p></li><li><p>rifile.conf 文件关联，控制不同文件用不同程序打开</p></li></ul><p>配色方案:</p><p><code>ranger</code>默认自带四种配色方案:<code>defalut</code> <code>jungle</code> <code>snow</code> <code>zenburn</code></p><p>使用<code>:set colorscheme scheme</code>进行切换。</p><p>自定义配色方案文件放在<code>~/.config/ranger/colorschemes</code></p><h1 id="0x4-我的ranger配置"><a href="#0x4-我的ranger配置" class="headerlink" title="0x4 我的ranger配置"></a>0x4 我的ranger配置</h1><p>以上传至Github</p><p><a href="https://github.com/EvanMeek/Vanilla/tree/master/ranger" target="_blank" rel="noopener">点击访问</a></p><h1 id="0x5-其他"><a href="#0x5-其他" class="headerlink" title="0x5 其他"></a>0x5 其他</h1><p>下载地址:<a href="https://github.com/ranger/ranger/releases" target="_blank" rel="noopener">点击获取</a></p><p>Arch系:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; pacman -S ranger</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 折腾日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最快-GPU加速-Alacritty终端</title>
      <link href="/2019/07/03/%E6%9C%80%E5%BF%AB-GPU%E5%8A%A0%E9%80%9F-Alacritty%E7%BB%88%E7%AB%AF/"/>
      <url>/2019/07/03/%E6%9C%80%E5%BF%AB-GPU%E5%8A%A0%E9%80%9F-Alacritty%E7%BB%88%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><img src="/2019/07/03/最快-GPU加速-Alacritty终端/ponysay.png" alt="ponysay"></p><h1 id="0x0-Alacritty是什么"><a href="#0x0-Alacritty是什么" class="headerlink" title="0x0 Alacritty是什么?"></a>0x0 Alacritty是什么?</h1><p><code>Alacritty</code>是一个终端仿真器。</p><p>在Alacritty 0.3.3+版本，它支持运行在macOS,Linux,BSD和Windows之上，所以它是跨平台的的。</p><h1 id="0x1-为什么选择Alacritty"><a href="#0x1-为什么选择Alacritty" class="headerlink" title="0x1 为什么选择Alacritty?"></a>0x1 为什么选择Alacritty?</h1><p><code>Alacritty</code>是目前性能最强的终端之一.</p><p>它使用GPU进行渲染，可以做到其他启动器无法实现的性能优化。</p><p><code>Alacritty</code>的配置十分简单，虽然其默认的配置就非常合理，官方说其并不需要额外的设置，不过<code>Alacritty</code>仍然提供了很多配置终端的方面。</p><h1 id="0x2-Alacritty的配置"><a href="#0x2-Alacritty的配置" class="headerlink" title="0x2 Alacritty的配置"></a>0x2 Alacritty的配置</h1><p><code>Alacritty</code>的配置文件在:<code>~/.config/alacritty/alacritty.yml</code></p><h2 id="0-字体"><a href="#0-字体" class="headerlink" title="0 字体"></a>0 字体</h2><p>打开<code>alacritty.yml</code>文件，找到<code>Font configuration</code>这行注释，即可修改。</p><p>例如:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Font configuration (changes require restart)</span></span><br><span class="line"><span class="attr">font:</span></span><br><span class="line"><span class="attr">  normal:</span></span><br><span class="line"><span class="attr">    family:</span> <span class="string">Droid</span> <span class="string">Sans</span> <span class="string">Mono</span></span><br><span class="line"><span class="attr">    style:</span> <span class="string">Regular</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  bold:</span></span><br><span class="line"><span class="attr">    family:</span> <span class="string">Droid</span> <span class="string">Sans</span> <span class="string">Mono</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  italic:</span></span><br><span class="line"><span class="attr">    family:</span> <span class="string">Droid</span> <span class="string">Sans</span> <span class="string">Mono</span></span><br></pre></td></tr></table></figure><h2 id="1-配色方案"><a href="#1-配色方案" class="headerlink" title="1 配色方案"></a>1 配色方案</h2><p><code>Alacritty</code>官方提供了超多种的配置方案，<a href="https://github.com/jwilm/alacritty/wiki/Color-schemes" target="_blank" rel="noopener">点击我获取</a></p><p>我们只需要找一个自己喜欢的配色方案将配色代码复制</p><p>然后粘贴到<code>alacritty.yml</code>配置文件内即可.</p><p>例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># Colors (Solarized Dark)</span><br><span class="line">colors:</span><br><span class="line">  # Default colors</span><br><span class="line">  primary:</span><br><span class="line">    background: &apos;0x002b36&apos; # base03</span><br><span class="line">    foreground: &apos;0x839496&apos; # base0</span><br><span class="line"></span><br><span class="line">  # Normal colors</span><br><span class="line">  normal:</span><br><span class="line">    black:   &apos;0x073642&apos; # base02</span><br><span class="line">    red:     &apos;0xdc322f&apos; # red</span><br><span class="line">    green:   &apos;0x859900&apos; # green</span><br><span class="line">    yellow:  &apos;0xb58900&apos; # yellow</span><br><span class="line">    blue:    &apos;0x268bd2&apos; # blue</span><br><span class="line">    magenta: &apos;0xd33682&apos; # magenta</span><br><span class="line">    cyan:    &apos;0x2aa198&apos; # cyan</span><br><span class="line">    white:   &apos;0xeee8d5&apos; # base2</span><br><span class="line"></span><br><span class="line">  # Bright colors</span><br><span class="line">  bright:</span><br><span class="line">    black:   &apos;0x002b36&apos; # base03</span><br><span class="line">    red:     &apos;0xcb4b16&apos; # orange</span><br><span class="line">    green:   &apos;0x586e75&apos; # base01</span><br><span class="line">    yellow:  &apos;0x657b83&apos; # base00</span><br><span class="line">    blue:    &apos;0x839496&apos; # base0</span><br><span class="line">    magenta: &apos;0x6c71c4&apos; # violet</span><br><span class="line">    cyan:    &apos;0x93a1a1&apos; # base1</span><br><span class="line">    white:   &apos;0xfdf6e3&apos; # base3</span><br></pre></td></tr></table></figure></p><h2 id="2-快捷键"><a href="#2-快捷键" class="headerlink" title="2 快捷键"></a>2 快捷键</h2><p>默认的快捷键已经是非常合理了的，如果有特殊需求，我们可以在<code>alacritty.yml</code>内的<code>Key bindings</code>项下进行修改</p><p>并在里面的注释已经将全部语法都写好了，这里举两个例子，我们将原本需要按<code>Paste</code>键和<code>Copy</code>键位改为<code>Ctrl+C</code>和<code>Ctrl+V</code>。</p><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- &#123; key: V,        mods: Control, action: Paste                            &#125;</span><br><span class="line">- &#123; key: C,        mods: Control, action: Copy                             &#125;</span><br></pre></td></tr></table></figure><p><strong>注意不要漏写<code>,</code>号,不然可能会出现如下情况</strong></p><p><img src="/2019/07/03/最快-GPU加速-Alacritty终端/error.png" alt="error"></p><h1 id="0x3-我的Alacritty配置"><a href="#0x3-我的Alacritty配置" class="headerlink" title="0x3 我的Alacritty配置"></a>0x3 我的Alacritty配置</h1><p>已经上传至Github，<a href="https://github.com/EvanMeek/Vanilla/tree/master/alacritty" target="_blank" rel="noopener">点击我获取</a></p><h1 id="0x4-其他"><a href="#0x4-其他" class="headerlink" title="0x4 其他"></a>0x4 其他</h1><p><a href="https://github.com/jwilm/alacritty" target="_blank" rel="noopener">Alacritty-Github页面</a></p><p>Arch系一键安装:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; pacman -S alacritty</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 折腾日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 软件折腾 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-文件过滤及内容编辑处理命令-2</title>
      <link href="/2019/06/30/Linux-%E6%96%87%E4%BB%B6%E8%BF%87%E6%BB%A4%E5%8F%8A%E5%86%85%E5%AE%B9%E7%BC%96%E8%BE%91%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4-2/"/>
      <url>/2019/06/30/Linux-%E6%96%87%E4%BB%B6%E8%BF%87%E6%BB%A4%E5%8F%8A%E5%86%85%E5%AE%B9%E7%BC%96%E8%BE%91%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4-2/</url>
      
        <content type="html"><![CDATA[<h1 id="3-0-做Linux运维的多个好处"><a href="#3-0-做Linux运维的多个好处" class="headerlink" title="3.0 做Linux运维的多个好处"></a>3.0 做Linux运维的多个好处</h1><ol><li><p>做运维可以认识更多人，同时也被更多人认识。</p></li><li><p>做运维可以让自己沟通，交际能力变得比开发人员更强。</p></li><li><p>相比开发岗位，运维的岗位更重要一些。</p></li></ol><h1 id="3-1-cat-合并文件或查看文件内容"><a href="#3-1-cat-合并文件或查看文件内容" class="headerlink" title="3.1 cat 合并文件或查看文件内容"></a>3.1 cat 合并文件或查看文件内容</h1><p><code>concatenate</code></p><p><strong>cat命令5大常用功能</strong></p><table><thead><tr><th>序号</th><th>常用功能</th><th>例子以及说明</th></tr></thead><tbody><tr><td>1</td><td>查看文件内容</td><td>cat file.txt 查看文件内容，最基本的使用</td></tr><tr><td>2</td><td>多个文件合并为一个文件</td><td>cat f1 f2 &gt; newf 将f1和f2的内容合并到newf</td></tr><tr><td>3</td><td>创建编辑新文件</td><td>cat &gt; file 输入后会请求输入，快捷键Ctrl+d/c可退出</td></tr><tr><td>4</td><td>非交互式编辑或追加新内容</td><td>cat &gt;&gt;file&lt;&lt;EOF 输入后会请求输入，在结束时输入EOF即可退出</td></tr><tr><td>5</td><td>清空文件内容</td><td>cat /dev/null &gt; file 清空文件内容</td></tr></tbody></table><p>语法格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat [选项] [文件]</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-n</td><td>为输出的内容加编号，从1开始</td></tr><tr><td>-b</td><td>与-n类似，但它忽略空白行</td></tr><tr><td>-s</td><td>当遇到有多行空白行，则合并为单行空白行</td></tr><tr><td>-v</td><td>除了LFD和TAB之外，使用^和M-引用</td></tr><tr><td>-T</td><td>将Tab字符显示为^I</td></tr><tr><td>-E</td><td>在行尾显示$符号</td></tr><tr><td>-t</td><td>等价与-vT</td></tr><tr><td>-A</td><td>等价于-vE</td></tr></tbody></table><p>例子</p><p><strong>使用cat命令以非交互式的方式编辑文件</strong></p><p>方式1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; cat &gt;file&lt;&lt;EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Just a test.</span><br><span class="line">EOF</span><br><span class="line">&gt; cat file</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Just a test</span><br></pre></td></tr></table></figure><p>解释: EOF为字符标签，用于标记从何开始与从何结束，可替换为任意字符，常用做法是用EOF表示，并且字符标签必须成对出现</p><p>易错点: 结束EOF必须置前，前面不能有任意字符</p><p>方式2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; cat &gt;file&lt;&lt;-EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Just a test.</span><br><span class="line">  EOF</span><br><span class="line">&gt; cat file</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Just a test.</span><br></pre></td></tr></table></figure><p>解释: 在字符标签前加上<code>-</code>可以使得结束标签前可放置制表符，但仅仅只可放制表符</p><p><strong>合并多个文件为单个文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; cat &gt; f1</span><br><span class="line">f1</span><br><span class="line">Ctrl+d</span><br><span class="line">&gt; cat &gt; f2</span><br><span class="line">f2</span><br><span class="line">Ctrl+c</span><br><span class="line">&gt; cat f1 f2</span><br><span class="line">f1</span><br><span class="line">f2</span><br><span class="line">&gt; cat f1 f2 &gt; newfile</span><br><span class="line">&gt; cat newfile</span><br><span class="line">f1</span><br><span class="line">f2</span><br></pre></td></tr></table></figure><h1 id="3-2-tac-反向显示文件内容"><a href="#3-2-tac-反向显示文件内容" class="headerlink" title="3.2 tac 反向显示文件内容"></a>3.2 tac 反向显示文件内容</h1><p>跟<code>cat</code>命令类似，反向输出文件内容</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-b</td><td>在行前添加分隔标志</td></tr><tr><td>-r</td><td>将分隔标志视作正则表达式进行解析</td></tr><tr><td>-s</td><td>使用指定字符作为换行的标志</td></tr></tbody></table><p>例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; cat file1</span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line">&gt; tac file2</span><br><span class="line">world</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><h1 id="3-3-more-分页显示文件内容"><a href="#3-3-more-分页显示文件内容" class="headerlink" title="3.3 more 分页显示文件内容"></a>3.3 more 分页显示文件内容</h1><p><code>more</code>类似于<code>cat</code>命令，区别在于<code>cat</code>命令是将文件内容一次性全部显示在屏幕上，而<code>more</code>则会分页进行显示。</p><p>语法格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more [选项] [文件]</span><br></pre></td></tr></table></figure><p><code>more</code>参数选项说明</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-num</td><td>指定屏幕显示大小为num行</td></tr><tr><td>+num</td><td>从行号num开始显示</td></tr><tr><td>-s</td><td>把连续的多个空行显示在一行</td></tr><tr><td>-p</td><td>不滚屏，而是清除整个自己屏幕，然后显示文件</td></tr><tr><td>-c</td><td>不滚屏，而是从每一屏的顶部开始显示文本，每显示完一行，就清除这一行的剩余部分</td></tr></tbody></table><p><code>more</code>交互式说明</p><table><thead><tr><th>子命令</th><th>说明</th></tr></thead><tbody><tr><td>h/?</td><td>查看帮助</td></tr><tr><td>空格键</td><td>向下滚动一屏</td></tr><tr><td>z</td><td>向下滚动一屏</td></tr><tr><td>Enter</td><td>向下显示一行</td></tr><tr><td>f</td><td>向下滚动一屏</td></tr><tr><td>b</td><td>返回上一屏</td></tr><tr><td>=</td><td>输出当前行的行号</td></tr><tr><td>/查找文本</td><td>查找指定的文本</td></tr><tr><td>:f</td><td>输出文件名和当前行的行号</td></tr><tr><td>v</td><td>调用vi编辑器</td></tr><tr><td>!命令</td><td>调用Shell，并执行命令</td></tr><tr><td>q</td><td>退出more</td></tr></tbody></table><h1 id="3-4-less-分页显示文件内容"><a href="#3-4-less-分页显示文件内容" class="headerlink" title="3.4 less 分页显示文件内容"></a>3.4 less 分页显示文件内容</h1><p><code>less</code>类似<code>more</code>命令，<code>less</code>的功能比<code>more</code>要强大</p><p>语法格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less [选项] [文件]</span><br></pre></td></tr></table></figure><p><code>less</code>命令的参数选项及说明</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-i</td><td>搜索时忽略大小写</td></tr><tr><td>-m</td><td>显示进度百分比</td></tr><tr><td>-N</td><td>显示行号</td></tr><tr><td>-s</td><td>多行空行显示为单行</td></tr><tr><td>-e</td><td>当显示到文件结尾时自动退出，若没有此选项则需要用交互式q退出</td></tr></tbody></table><p><code>less</code>命令的交互式子命令及说明</p><table><thead><tr><th>子命令</th><th>说明</th></tr></thead><tbody><tr><td>b</td><td>向前翻一页</td></tr><tr><td>空格键</td><td>向后翻一页</td></tr><tr><td>u</td><td>向前翻半页</td></tr><tr><td>d</td><td>向后翻半页</td></tr><tr><td>y</td><td>向上滚动一行</td></tr><tr><td>回车键</td><td>向下滚动一行</td></tr><tr><td>方向键-上</td><td>向上滚动一行</td></tr><tr><td>方向键-下</td><td>向下滚动一行</td></tr><tr><td>Page UP</td><td>向上滚动一屏</td></tr><tr><td>Page Down</td><td>向下滚动一屏</td></tr></tbody></table><p>例子:</p><p><strong>显示文件内容时并且显示行号</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; less -N 文件名</span><br></pre></td></tr></table></figure><p><strong>分页显示命令的结果</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; ls -l | less</span><br></pre></td></tr></table></figure><h1 id="3-5-head-显示文件内容头部"><a href="#3-5-head-显示文件内容头部" class="headerlink" title="3.5 head 显示文件内容头部"></a>3.5 head 显示文件内容头部</h1><p><code>head</code>命令用于显示文件内容头部，默认输出行数为10行。</p><p>语法格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head [选项] [文件]</span><br></pre></td></tr></table></figure><p><code>head</code>命令的参数选项及说明</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-n&lt;行数&gt;</td><td>指定显示的行数</td></tr><tr><td>-c&lt;字节&gt;</td><td>指定显示的字节数</td></tr><tr><td>-q</td><td>显示时不包含指定的文件名作为文件头部</td></tr><tr><td>-v</td><td>显示时包含指定的文件的文件名作为文件头部</td></tr></tbody></table><p>例子:</p><p><strong>默认显示文件的前10行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; head /etc/passwd</span><br><span class="line">root:x:0:0::/root:/bin/bash</span><br><span class="line">nobody:x:65534:65534:Nobody:/:/sbin/nologin</span><br><span class="line">dbus:x:81:81:System Message Bus:/:/sbin/nologin</span><br><span class="line">bin:x:1:1::/:/sbin/nologin</span><br><span class="line">daemon:x:2:2::/:/sbin/nologin</span><br><span class="line">mail:x:8:12::/var/spool/mail:/sbin/nologin</span><br><span class="line">ftp:x:14:11::/srv/ftp:/sbin/nologin</span><br><span class="line">http:x:33:33::/srv/http:/sbin/nologin</span><br><span class="line">systemd-journal-remote:x:982:982:systemd Journal Remote:/:/sbin/nologin</span><br><span class="line">systemd-network:x:981:981:systemd Network Management:/:/sbin/nologin</span><br></pre></td></tr></table></figure><p><strong>显示文件的前n行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; head -n 2 /etc/passwd</span><br><span class="line">root:x:0:0::/root:/bin/bash</span><br><span class="line">nobody:x:65534:65534:Nobody:/:/sbin/nologin</span><br></pre></td></tr></table></figure><p><strong>显示文件的前n个字节</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; head -c 4 /etc/passwd</span><br><span class="line">root</span><br></pre></td></tr></table></figure><p><strong>显示多个文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; head -1 /etc/passwd /etc/profile</span><br><span class="line">==&gt; /etc/passwd &lt;==</span><br><span class="line">root:x:0:0::/root:/bin/bash</span><br><span class="line"></span><br><span class="line">==&gt; /etc/profile &lt;==</span><br><span class="line"># /etc/profile</span><br></pre></td></tr></table></figure><h1 id="3-6-tail显示文件内容尾部"><a href="#3-6-tail显示文件内容尾部" class="headerlink" title="3.6 tail显示文件内容尾部"></a>3.6 tail显示文件内容尾部</h1><p><code>tail</code>命令用于显示文件内容尾部，默认输出行数为10行。</p><p>语法格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail [选项] [文件]</span><br></pre></td></tr></table></figure><p><code>tail</code>命令的参数选项及说明</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-c&lt;字节&gt;</td><td>指定显示的字节数</td></tr><tr><td>-n&lt;行数&gt;</td><td>指定显示的行数</td></tr><tr><td>-f</td><td>实时输出文件内容追加的数据</td></tr><tr><td>–retry</td><td>不停的尝试打开文件，直到打开为止</td></tr><tr><td>-F</td><td>等同于-f–retry</td></tr><tr><td>–pid=进程号</td><td>若进程关闭则tail的-f选项则不会继续输出内容</td></tr><tr><td>-s 秒数 N</td><td>监视文件的间隔秒数</td></tr><tr><td>-q</td><td>显示时不包含指定的文件名作为文件头部</td></tr><tr><td>-v</td><td>显示时包含指定的文件的文件名作为文件头部</td></tr></tbody></table><p>例子:</p><p><strong>显示文件最后10行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; tail /etc/passwd</span><br><span class="line">git:x:973:973:git daemon user:/:/usr/bin/git-shell</span><br><span class="line">lightdm:x:620:620:Light Display Manager:/var/lib/lightdm:/sbin/nologin</span><br><span class="line">nm-openconnect:x:972:972:NetworkManager OpenConnect:/:/sbin/nologin</span><br><span class="line">nm-openvpn:x:971:971:NetworkManager OpenVPN:/:/sbin/nologin</span><br><span class="line">ntp:x:87:87:Network Time Protocol:/var/lib/ntp:/bin/false</span><br><span class="line">polkitd:x:102:102:PolicyKit daemon:/:/sbin/nologin</span><br><span class="line">usbmux:x:140:140:usbmux user:/:/sbin/nologin</span><br><span class="line">evanmeek:x:1000:1000:EvanMeek:/home/evanmeek:/usr/bin/zsh</span><br><span class="line">nvidia-persistenced:x:143:143:NVIDIA Persistence Daemon:/:/sbin/nologin</span><br><span class="line">privoxy:x:42:42:Privoxy:/:/sbin/nologin</span><br></pre></td></tr></table></figure><p><strong>显示文件最后5行</strong></p><p><em>第一种写法</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; tail -n 5 /etc/passwd</span><br></pre></td></tr></table></figure><p><em>第二种写法</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; tail -5 /etc/passwd</span><br></pre></td></tr></table></figure><p><strong>指定从第几行开始显示文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; tail -n +10 /etc/passwd</span><br></pre></td></tr></table></figure><p><strong>实时监控文件的变化</strong></p><p>监测<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; tail -f --retry test.txt</span><br><span class="line">testwords</span><br></pre></td></tr></table></figure></p><p>追加内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; echo testwords &gt;&gt; test.txt</span><br></pre></td></tr></table></figure><h1 id="3-7-tailf-跟踪日志文件"><a href="#3-7-tailf-跟踪日志文件" class="headerlink" title="3.7 tailf 跟踪日志文件"></a>3.7 tailf 跟踪日志文件</h1><p><code>tailf</code>命令日常工作中用于跟踪日志文件，它与<code>tail -f</code>命令基本相同，但唯一的区别是若文件内容无增加，则不会重复访问磁盘文件，也不会修改文件访问时间。</p><p>语法格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tailf [选项] [文件]</span><br></pre></td></tr></table></figure><p><code>tailf</code>命令的参数选项及说明</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-n&lt;行数&gt;</td><td>指定显示的行数，默认为文件最后10行</td></tr></tbody></table><p>例子：</p><p><strong>跟踪日志文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; tailf</span><br></pre></td></tr></table></figure><h1 id="3-8-cut-从文本中提取一段文字并输出"><a href="#3-8-cut-从文本中提取一段文字并输出" class="headerlink" title="3.8 cut 从文本中提取一段文字并输出"></a>3.8 cut 从文本中提取一段文字并输出</h1><p><code>cut</code>命令从文件的每一行剪切字节，字符或字段，并将其输出至标准输出。</p><p>语法格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cut [选项] [文件]</span><br></pre></td></tr></table></figure><p><code>cut</code>命令的参数选项及说明</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-b</td><td>以字节为单位进行分割</td></tr><tr><td>-n</td><td>取消分割多字节字符</td></tr><tr><td>-c</td><td>以字符为单位进行分割<code>!</code></td></tr><tr><td>-d</td><td>自定义分隔符，默认以tab为分隔符<code>!</code></td></tr><tr><td>-f</td><td>与选项-d一起使用，指定显示哪个区域</td></tr><tr><td>N</td><td>第N个字节、字符或字段<code>!</code></td></tr><tr><td>N-</td><td>从第N个字节、字符或字段开始直至行尾</td></tr><tr><td>N-M</td><td>从第N到第M个字节、字符或字段</td></tr><tr><td>-M</td><td>从第一到第M个字节、字符或字段</td></tr></tbody></table><p>例子:</p><p><strong>以字节为分隔符</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; cat test.txt</span><br><span class="line">Hello World</span><br><span class="line"># 截取第5个字节，并输出</span><br><span class="line">&gt; cut -b 5 test.txt</span><br><span class="line">o</span><br><span class="line"># 截取第5个字节之前的所有字符(包括第5个)，并输出</span><br><span class="line">&gt; cut -b -5 test.txt</span><br><span class="line">Hello</span><br><span class="line"># 截取第5个字节之后的所有字符，并输出</span><br><span class="line">&gt; cut -b 5- test.txt</span><br><span class="line">o World</span><br><span class="line"># 截取第5个字节和第10个字节，并输出</span><br><span class="line">&gt; cut -b 5,10 test.txt</span><br><span class="line">ol</span><br><span class="line"># 截取第1个字节到第5个字节，并输出</span><br><span class="line">&gt; cut -b 1-5 test.txt</span><br><span class="line">Hello</span><br></pre></td></tr></table></figure><p><strong>以字符为分隔符</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; cat test.txt</span><br><span class="line">Hello World</span><br><span class="line">你好世界</span><br><span class="line"># 截取第1到第6个字符，并输出</span><br><span class="line">&gt; cut -b 1-6 test.txt</span><br><span class="line">Hello</span><br><span class="line">你好</span><br></pre></td></tr></table></figure><p><strong>自定义分隔符</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; cat /etc/passwd | head -n 5</span><br><span class="line">root:x:0:0::/root:/bin/bash</span><br><span class="line">nobody:x:65534:65534:Nobody:/:/sbin/nologin</span><br><span class="line">dbus:x:81:81:System Message Bus:/:/sbin/nologin</span><br><span class="line">bin:x:1:1::/:/sbin/nologin</span><br><span class="line">daemon:x:2:2::/:/sbin/nologin</span><br><span class="line"># 自定义分隔符为`:`，并且之输出文件前5行(:为分隔符，-f 1为指定显示第1个区域</span><br><span class="line">&gt; cut -d : -f 1 /etc/passwd | head -n 5</span><br><span class="line">root</span><br><span class="line">nobody</span><br><span class="line">dbus</span><br><span class="line">bin</span><br><span class="line">daemon</span><br><span class="line"># 指定显示区域为1,6-8</span><br><span class="line">&gt; cut -d : -f 1,6-8 /etc/passwd | head -n +5</span><br></pre></td></tr></table></figure><h1 id="3-9-split-分割文件"><a href="#3-9-split-分割文件" class="headerlink" title="3.9 split 分割文件"></a>3.9 split 分割文件</h1><p><code>split</code>命令可以将文件进行分割，支持根据行数或文件大小进行分割。</p><p>语法格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">split [选项] [输入文件] [输出文件名[前缀]]</span><br></pre></td></tr></table></figure><p><em>输出文件的格式会加上前缀，例如<code>PREFIXaa,PREFIXab</code></em></p><p><code>split</code>命令的参数选项及说明</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-b</td><td>指定分割后文件的最大字节数</td></tr><tr><td>-l</td><td>指定分割后文件的最大行数<code>!</code></td></tr><tr><td>-a</td><td>指定后缀长度，默认为2位字母</td></tr><tr><td>-d</td><td>使用数字后缀</td></tr></tbody></table><p>例子:</p><p><strong>按行分割文件，以及指定后缀形式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># wc 命令可以查看文件的行数</span><br><span class="line">&gt; wc -l /etc/passwd</span><br><span class="line">31 /etc/passwd</span><br><span class="line"># 按行进行分割，每10行分割为一个新文件，文件前缀为split_</span><br><span class="line">&gt; split -l 10 /etc/passwd split_</span><br><span class="line">&gt; wc -l split_*</span><br><span class="line">10 split_aa</span><br><span class="line">10 split_ab</span><br><span class="line">10 split_ac</span><br><span class="line"> 1 split_ad</span><br><span class="line">31 总用量</span><br><span class="line"># 参数-a指定分割文件的前缀长度，这里设置的是1</span><br><span class="line">&gt; split -l 10 -a 1 /etc/passwd split2_</span><br><span class="line">&gt; wc -l split2_*</span><br><span class="line">10 split2_a</span><br><span class="line">10 split2_b</span><br><span class="line">10 split2_c</span><br><span class="line"> 1 split2_d</span><br><span class="line">31 总用量</span><br><span class="line"># 参数-d指定文件使用数字后缀</span><br><span class="line">&gt; split -l 10 -d -a 1 /etc/passwd split_</span><br><span class="line">&gt; wc -l split_*</span><br><span class="line">10 split_0</span><br><span class="line">10 split_1</span><br><span class="line">10 split_2</span><br><span class="line"> 1 split_3</span><br><span class="line">31 总用量&lt;Paste&gt;</span><br></pre></td></tr></table></figure><p><strong>按文件大小分割文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 准备测试文件</span><br><span class="line">&gt; cp /sbin/lvm .</span><br><span class="line">&gt; ls -l</span><br><span class="line">总用量 2.3M</span><br><span class="line">-r-xr-xr-x 1 evanmeek evanmeek 2.3M  7月 22 21:23 lvm</span><br><span class="line"># 按文件字节进行分割，每500K字节分割为一个文件，以数字作为文件后缀</span><br><span class="line">&gt; split -b 500K -d lvm lvm_split_</span><br><span class="line">&gt; ls -l</span><br><span class="line">总用量 4.5M</span><br><span class="line">-r-xr-xr-x 1 evanmeek evanmeek 2.3M  7月 22 21:23 lvm</span><br><span class="line">-rw-r--r-- 1 evanmeek evanmeek 500K  7月 22 21:25 lvm_split_00</span><br><span class="line">-rw-r--r-- 1 evanmeek evanmeek 500K  7月 22 21:25 lvm_split_01</span><br><span class="line">-rw-r--r-- 1 evanmeek evanmeek 500K  7月 22 21:25 lvm_split_02</span><br><span class="line">-rw-r--r-- 1 evanmeek evanmeek 500K  7月 22 21:25 lvm_split_03</span><br><span class="line">-rw-r--r-- 1 evanmeek evanmeek 254K  7月 22 21:25 lvm_split_04</span><br></pre></td></tr></table></figure><h1 id="3-10-paste-合并文件"><a href="#3-10-paste-合并文件" class="headerlink" title="3.10 paste 合并文件"></a>3.10 paste 合并文件</h1><p><code>paste</code>命令能将文件按照行与行进行合并，中间使用tab隔开</p><p>语法格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paste [选项] [文件]</span><br></pre></td></tr></table></figure></p><p><code>paste</code>命令的参数选项及说明</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-d</td><td>指定合并的分隔符，默认是Tab<code>!</code></td></tr><tr><td>-s</td><td>每个文件占用一行</td></tr></tbody></table><p>例子:</p><p><strong>合并文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&gt; more t1 t2</span><br><span class="line">::::::::::::::</span><br><span class="line">t1</span><br><span class="line">::::::::::::::</span><br><span class="line">test1</span><br><span class="line">test1</span><br><span class="line">test1</span><br><span class="line">::::::::::::::</span><br><span class="line">t2</span><br><span class="line">::::::::::::::</span><br><span class="line">test2</span><br><span class="line">test2</span><br><span class="line">test2</span><br><span class="line"># t1与t2合并，将内容写入t3</span><br><span class="line">&gt; paste t1 t2 &gt; t3</span><br><span class="line">&gt; cat t3</span><br><span class="line">test1test2</span><br><span class="line">test1test2</span><br><span class="line">test1test2</span><br><span class="line"># 合并时，自定义分隔符</span><br><span class="line">&gt; paste -d - t1 t2 &gt; t3</span><br><span class="line">&gt; cat t3</span><br><span class="line">test1-test2</span><br><span class="line">test1-test2</span><br><span class="line">test1-test2</span><br></pre></td></tr></table></figure><p><strong>文件内容合并成一行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; paste -s t1 t2 &gt; t3</span><br><span class="line">&gt; cat t3</span><br><span class="line">test1test1test1</span><br><span class="line">test2test2test2</span><br></pre></td></tr></table></figure><h1 id="3-11-sort-文本排序"><a href="#3-11-sort-文本排序" class="headerlink" title="3.11 sort 文本排序"></a>3.11 sort 文本排序</h1><p><code>sort</code>命令将输入的文件内容按照指定的规则进行排序，然后将排序结果输出</p><p>语法格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort [选项] [文件]</span><br></pre></td></tr></table></figure><p><code>sort</code>命令的参数选项及说明</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-b</td><td>忽略每行开头存在的空格字符</td></tr><tr><td>-n</td><td>按照数值的大小进行排序<code>!</code></td></tr><tr><td>-r</td><td>倒序排序<code>!</code></td></tr><tr><td>-u</td><td>去除重复行</td></tr><tr><td>-t</td><td>指定分隔符<code>!</code></td></tr><tr><td>-k</td><td>按照指定区间排序<code>!</code></td></tr></tbody></table><p>例子:</p><p><strong>默认以行为单位进行排序</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ cat test.txt</span><br><span class="line">t1</span><br><span class="line">t2</span><br><span class="line">t3</span><br><span class="line">t4</span><br><span class="line"># sort默认是以ASCII码进行升序排序。</span><br><span class="line">$ sort test.txt</span><br><span class="line">t1</span><br><span class="line">t2</span><br><span class="line">t3</span><br><span class="line">t4</span><br><span class="line"># 按照数值的大小进行排序</span><br><span class="line">$ sort -n test.txt</span><br><span class="line">t1</span><br><span class="line">t2</span><br><span class="line">t3</span><br><span class="line">t4</span><br><span class="line"># 按照数值的大小降序排序</span><br><span class="line">$ sort -nr test.txt</span><br><span class="line">t4</span><br><span class="line">t3</span><br><span class="line">t2</span><br><span class="line">t1</span><br></pre></td></tr></table></figure><p><strong>去除重复行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ cat test.txt</span><br><span class="line">t1 D</span><br><span class="line">t1 D</span><br><span class="line">t1 D</span><br><span class="line">t2 C</span><br><span class="line">t3 B</span><br><span class="line">t4 A</span><br><span class="line"># 去除重复行，并且逆序排序</span><br><span class="line">$ sort -u test.txt | sort -nr</span><br><span class="line">t4 A</span><br><span class="line">t3 B</span><br><span class="line">t2 C</span><br><span class="line">t1 D</span><br></pre></td></tr></table></figure><p><strong>自定义区间排序</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 指定以空格作为分隔符，并且以第二列进行逆序排序</span><br><span class="line">$ sort -t &quot; &quot; -k2 test.txt</span><br><span class="line">t4 A</span><br><span class="line">t3 B</span><br><span class="line">t2 C</span><br><span class="line">t1 D</span><br><span class="line">t1 D</span><br><span class="line">t1 D</span><br></pre></td></tr></table></figure><p><strong>-t -k的进阶用法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ cat ip.txt</span><br><span class="line">192.197.113.0192.197.113.255256</span><br><span class="line">193.112.0.0193.112.255.25565536</span><br><span class="line">195.78.82.0195.78.83.255512</span><br><span class="line">198.175.100.0198.175.103.2551024</span><br><span class="line">199.212.57.0199.212.57.255256</span><br><span class="line">202.0.100.0202.0.101.255512</span><br><span class="line">202.0.122.0202.0.123.255512</span><br><span class="line">202.0.176.0202.0.179.2551024</span><br><span class="line">202.3.128.0202.3.129.255512</span><br><span class="line">202.3.134.0202.3.134.255256</span><br><span class="line">202.4.128.0202.4.159.2558192</span><br><span class="line">202.4.252.0202.4.255.2551024</span><br><span class="line"># 以第3个字段的第1个字符到第3个字段的第3个字段进行数字排序</span><br><span class="line">$ sort -n -t. -k3.1,3.3 ip.txt</span><br><span class="line">193.112.0.0193.112.255.25565536</span><br><span class="line">199.212.57.0199.212.57.255256</span><br><span class="line">195.78.82.0195.78.83.255512</span><br><span class="line">198.175.100.0198.175.103.2551024</span><br><span class="line">202.0.100.0202.0.101.255512</span><br><span class="line">192.197.113.0192.197.113.255256</span><br><span class="line">202.0.122.0202.0.123.255512</span><br><span class="line">202.3.128.0202.3.129.255512</span><br><span class="line">202.4.128.0202.4.159.2558192</span><br><span class="line">202.3.134.0202.3.134.255256</span><br><span class="line">202.0.176.0202.0.179.2551024</span><br><span class="line">202.4.252.0202.4.255.2551024</span><br></pre></td></tr></table></figure><h1 id="3-12-join-按两个文件的相同字段合并"><a href="#3-12-join-按两个文件的相同字段合并" class="headerlink" title="3.12 join 按两个文件的相同字段合并"></a>3.12 join 按两个文件的相同字段合并</h1><p><code>join</code>命令针对每一对具有相同内容的输入行，整合为一行输出到标准输出，默认情况下是把输入的第一个字段作为连接字段，字段之间用空格隔开。</p><p>语法格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">join [选项] [文件1] [文件2]</span><br></pre></td></tr></table></figure><p><code>join</code>命令的参数选项及说明</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-a文件号</td><td>输出文件中不匹配的行，文件号可选值1或2,代表文件1和文件2</td></tr><tr><td>-i</td><td>比较字段时忽略大小写</td></tr><tr><td>-1 字段</td><td>以第1个文件的指定字段为基础进行合并</td></tr><tr><td>-2 字段</td><td>以第2个文件的指定字段为基础进行合并</td></tr></tbody></table><p>例子:</p><p><strong>合并文本</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ more t1.txt t2.txt</span><br><span class="line">::::::::::::::</span><br><span class="line">t1.txt</span><br><span class="line">::::::::::::::</span><br><span class="line">张三 21岁</span><br><span class="line">李四 23岁</span><br><span class="line">王五 17岁</span><br><span class="line">赵六 15岁</span><br><span class="line"></span><br><span class="line">::::::::::::::</span><br><span class="line">t2.txt</span><br><span class="line">::::::::::::::</span><br><span class="line">张三 男</span><br><span class="line">李四 女</span><br><span class="line">王五 男</span><br><span class="line">赵六 女</span><br><span class="line"># 将t1和t2进行合并</span><br><span class="line">$ join t1.txt t2.txt &gt; t3.txt</span><br><span class="line">$ cat t3.txt</span><br><span class="line">张三 21岁 男</span><br><span class="line">李四 23岁 女</span><br><span class="line">王五 17岁 男</span><br><span class="line">赵六 15岁 女</span><br></pre></td></tr></table></figure><h1 id="3-13-uniq-去除重复行"><a href="#3-13-uniq-去除重复行" class="headerlink" title="3.13 uniq 去除重复行"></a>3.13 uniq 去除重复行</h1><p><code>uniq</code>命令可以输出或忽略文件中的重复行。在工作中，我们常用的场景是使用sort命令对文件排序，然后使用<code>uniq</code>命令去重并计数。</p><p>语法格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uniq [选项] [文件或标准输入]</span><br></pre></td></tr></table></figure><p>选项说明</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-c</td><td>去除重复行，并且计算每行出现的次数</td></tr><tr><td>-d</td><td>只显示重复的行</td></tr><tr><td>-u</td><td>只显示唯一的行</td></tr></tbody></table><p>例子:</p><p><strong>去重测试案例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; cat test.txt</span><br><span class="line">重复重复重复</span><br><span class="line">重复重复重复</span><br><span class="line">重复重复重复</span><br><span class="line">重复重复重复</span><br><span class="line">重复重复重复</span><br><span class="line">&gt; uniq -c test.txt</span><br><span class="line">5 重复重复重复</span><br></pre></td></tr></table></figure><p><strong>结合sort排序后去重</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; cat test.txt</span><br><span class="line">10000</span><br><span class="line">10000</span><br><span class="line">2</span><br><span class="line">10000</span><br><span class="line">10000</span><br><span class="line">2</span><br><span class="line">10000</span><br><span class="line">&gt; uniq -c test.txt</span><br><span class="line">2 10000</span><br><span class="line">1 2</span><br><span class="line">2 10000</span><br><span class="line">1 2</span><br><span class="line">1 10000</span><br><span class="line"># 在这里我们发现，uniq只能去除相邻重复的行，所以我们就使用sort排序后再进行去重复</span><br><span class="line">&gt; sort -n test.txt | uniq -c</span><br><span class="line">2 2</span><br><span class="line">5 10000</span><br></pre></td></tr></table></figure><h1 id="3-14-wc-统计文件的行数、单词数或字节数"><a href="#3-14-wc-统计文件的行数、单词数或字节数" class="headerlink" title="3.14 wc 统计文件的行数、单词数或字节数"></a>3.14 wc 统计文件的行数、单词数或字节数</h1><p><code>wc</code>命令用于统计文件的行数、单词数和字节数。</p><p>语法格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wc [选项] [文件]</span><br></pre></td></tr></table></figure><p>选项说明</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-c</td><td>统计字节数</td></tr><tr><td>-l</td><td>统计行数<code>!</code></td></tr><tr><td>-m</td><td>统计字符数</td></tr><tr><td>-w</td><td>统计单词数</td></tr><tr><td>-L</td><td>输出最长行的长度<code>!</code></td></tr></tbody></table><p>例子:</p><p><strong>查看文件的字节数、字数、行数</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; wc /etc/profile</span><br><span class="line">9      30     189 /etc/profile</span><br><span class="line"></span><br><span class="line"># 依次排列过去是 行数 - 单词数 - 字节数</span><br></pre></td></tr></table></figure></p><h1 id="3-15-iconv-转换文件的编码格式"><a href="#3-15-iconv-转换文件的编码格式" class="headerlink" title="3.15 iconv 转换文件的编码格式"></a>3.15 iconv 转换文件的编码格式</h1><p><code>iconv</code>命令用于转换文件的编码格式.</p><p>语法格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iconv [选项] [原编码] [新编码] [输入文件]</span><br></pre></td></tr></table></figure><p>选项说明</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-f encodingA</td><td>从编码A转换<code>!</code></td></tr><tr><td>-t encodingB</td><td>转换程编码B <code>!</code></td></tr><tr><td>-l</td><td>显示系统支持的编码<code>!</code></td></tr><tr><td>-o</td><td>将输出输入到指定文件<code>!</code></td></tr></tbody></table><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; cat utf-8.txt</span><br><span class="line">你好世界</span><br><span class="line"># 指定utf-8.txt的编码格式为utf-8，将要转换成GB2312</span><br><span class="line">&gt; iconv -f UTF-8 -t GB2312 utf-8.txt &gt; gbk.txt</span><br><span class="line">&gt; cat gbk.txt</span><br><span class="line">无回显</span><br></pre></td></tr></table></figure><h1 id="3-16-dos2unix-将DOS格式文件转换成UNIX格式"><a href="#3-16-dos2unix-将DOS格式文件转换成UNIX格式" class="headerlink" title="3.16 dos2unix 将DOS格式文件转换成UNIX格式"></a>3.16 dos2unix 将DOS格式文件转换成UNIX格式</h1><p>由于dos格式的文件的换行符与unix格式的文件的换行符不同，所以需要转换。</p><p>语法格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dos2unix [文件]</span><br></pre></td></tr></table></figure><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; dos2unix dosfile.txt</span><br></pre></td></tr></table></figure><h1 id="3-17-diff-比较两个文件的不同"><a href="#3-17-diff-比较两个文件的不同" class="headerlink" title="3.17 diff 比较两个文件的不同"></a>3.17 diff 比较两个文件的不同</h1><p><code>diff</code>命令可以逐行比较纯文本文件的内容，并输出文件的差异。</p><p>语法格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diff [选项] [文件1] [文件2]</span><br></pre></td></tr></table></figure><p>选项说明</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-y</td><td>以并列的方式显示文件的异同之处</td></tr><tr><td>-W</td><td>在使用-y参数时，指定显示宽度</td></tr><tr><td>-c</td><td>使用上下文的输出格式</td></tr><tr><td>-u</td><td>使用统一格式输出</td></tr></tbody></table><p>例子:</p><p><strong>比较两个文本文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">evanmeek@EvanMeekdeMBP  ~/TestDir  cat test1.txt</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">evanmeek@EvanMeekdeMBP  ~/TestDir  cat test2.txt</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">evanmeek@EvanMeekdeMBP  ~/TestDir  diff test1.txt test2.txt</span><br><span class="line"># 代表文件2对比文件1删除了第一行到第三行</span><br><span class="line">1,3d0</span><br><span class="line">&lt; 1</span><br><span class="line">&lt; 2</span><br><span class="line">&lt; 3</span><br><span class="line"># 代表文件1的第6行下增加了文件2的第4行和第5行</span><br><span class="line">6a4,6</span><br><span class="line">&gt; 7</span><br><span class="line">&gt; 8</span><br><span class="line">&gt; 9</span><br></pre></td></tr></table></figure><p><strong>并排格式输出</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">✘ evanmeek@EvanMeekdeMBP  ~/TestDir  diff -y test1.txt test2.txt</span><br><span class="line">1                                                             &lt;</span><br><span class="line">2                                                             &lt;</span><br><span class="line">3                                                             &lt;</span><br><span class="line">4                                                               4</span><br><span class="line">5                                                               5</span><br><span class="line">6                                                               6</span><br><span class="line">                                                            &gt; 7</span><br><span class="line">                                                            &gt; 8</span><br><span class="line">                                                            &gt; 9</span><br></pre></td></tr></table></figure><p><strong>并排格式输出时指定宽度</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">✘ evanmeek@EvanMeekdeMBP  ~/TestDir  diff -y -W 30 test1.txt test2.txt</span><br><span class="line">1             &lt;</span><br><span class="line">2             &lt;</span><br><span class="line">3             &lt;</span><br><span class="line">4               4</span><br><span class="line">5               5</span><br><span class="line">6               6</span><br><span class="line">              &gt; 7</span><br><span class="line">              &gt; 8</span><br><span class="line">              &gt; 9</span><br></pre></td></tr></table></figure><p><strong>上下文输出格式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">✘ evanmeek@EvanMeekdeMBP  ~/TestDir  diff -c test1.txt test2.txt</span><br><span class="line">*** test1.txt   2019-08-25 16:39:32.000000000 +0800</span><br><span class="line">--- test2.txt   2019-08-25 16:40:32.000000000 +0800</span><br><span class="line">***************</span><br><span class="line">*** 1,6 ****</span><br><span class="line">- 1</span><br><span class="line">- 2</span><br><span class="line">- 3</span><br><span class="line">  4</span><br><span class="line">  5</span><br><span class="line">  6</span><br><span class="line">--- 1,6 ----</span><br><span class="line">  4</span><br><span class="line">  5</span><br><span class="line">  6</span><br><span class="line">+ 7</span><br><span class="line">+ 8</span><br><span class="line">+ 9</span><br></pre></td></tr></table></figure><p><strong>统一标准输出格式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">✘ evanmeek@EvanMeekdeMBP  ~/TestDir  diff -u test1.txt test2.txt</span><br><span class="line">--- test1.txt   2019-08-25 16:39:32.000000000 +0800</span><br><span class="line">+++ test2.txt   2019-08-25 16:40:32.000000000 +0800</span><br><span class="line">@@ -1,6 +1,6 @@</span><br><span class="line">-1</span><br><span class="line">-2</span><br><span class="line">-3</span><br><span class="line"> 4</span><br><span class="line"> 5</span><br><span class="line"> 6</span><br><span class="line">+7</span><br><span class="line">+8</span><br><span class="line">+9</span><br></pre></td></tr></table></figure><p>hello </p>]]></content>
      
      
      <categories>
          
          <category> Linux系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的VIM配置详解</title>
      <link href="/2019/06/21/%E6%88%91%E7%9A%84VIM%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/06/21/%E6%88%91%E7%9A%84VIM%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>最近看了位B站Up主的视频，决定好好配置下自己的VIM，不再直接使用SpaceVim，别人配置的东西终究是别人的，要自己配置才是最顺手的。<br><a id="more"></a></p><p>我已经把我的配置文件上传到了Github上了，<a href="https://github.com/EvanMeek/Vanilla" target="_blank" rel="noopener">点击访问</a></p><p>基本都有写中文注释，哪里有不懂的，可以问我，<a href="https://evanmeek.github.io/%E5%85%B3%E4%BA%8E%E6%88%91/">点击查看我的联系方式</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&quot; 设置vi与vim兼容</span><br><span class="line">set nocompatible</span><br><span class="line">&quot; 设置使vim识别不同的文件格式</span><br><span class="line">filetype on</span><br><span class="line">filetype indent on</span><br><span class="line">filetype plugin on</span><br><span class="line">filetype plugin indent on</span><br><span class="line">&quot; 设置使vim能用鼠标操作</span><br><span class="line">set mouse=a</span><br><span class="line">&quot; 设置字符编码</span><br><span class="line">set encoding=utf-8</span><br><span class="line">&quot; 使配色更加兼容你的终端</span><br><span class="line">let &amp;t_ut=&apos;&apos;</span><br><span class="line">&quot; 设置缩进距离</span><br><span class="line">set expandtab</span><br><span class="line">set tabstop=2</span><br><span class="line">set shiftwidth=2</span><br><span class="line">set softtabstop=2</span><br><span class="line">&quot; 设置空格的显示</span><br><span class="line">set list</span><br><span class="line">set listchars=tab:▸\ ,trail:▫</span><br><span class="line">set tw=0</span><br><span class="line">set indentexpr=</span><br><span class="line">&quot; 退格键到行首后自动跳转到上行行尾</span><br><span class="line">set backspace=indent,eol,start</span><br><span class="line">&quot; 收起代码</span><br><span class="line">set foldmethod=indent</span><br><span class="line">set foldlevel=99</span><br><span class="line">&quot; 设置终端的光标在不同模式下用不同的样式,实测Konsole可用</span><br><span class="line">let &amp;t_SI = &quot;\&lt;Esc&gt;]50;CursorShape=1\x7&quot;</span><br><span class="line">let &amp;t_SR = &quot;\&lt;Esc&gt;]50;CursorShape=2\x7&quot;</span><br><span class="line">let &amp;t_EI = &quot;\&lt;Esc&gt;]50;CursorShape=0\x7&quot;</span><br><span class="line">&quot; 状态栏等于２？？？</span><br><span class="line">set laststatus=2</span><br><span class="line">&quot; vim执行的外部命令会在当前目录下执行</span><br><span class="line">set autochdir</span><br><span class="line">&quot; 关闭文件又打开光标会自动回到关闭前的位置</span><br><span class="line">au BufReadPost * if line(&quot;&apos;\&quot;&quot;) &gt; 1 &amp;&amp; line(&quot;&apos;\&quot;&quot;) &lt;= line(&quot;$&quot;) | exe &quot;normal! g&apos;\&quot;&quot; | endif</span><br><span class="line">&quot; 设置leader键为空格</span><br><span class="line">let mapleader=&quot; &quot;</span><br><span class="line">&quot; 代码高亮</span><br><span class="line">syntax on</span><br><span class="line"></span><br><span class="line">&quot; 设置行号</span><br><span class="line">set number</span><br><span class="line">&quot; 设置更好的行号</span><br><span class="line">set relativenumber</span><br><span class="line">&quot; 设置光标线</span><br><span class="line">set cursorline</span><br><span class="line">&quot; 自动换行</span><br><span class="line">set wrap</span><br><span class="line">&quot; 显示命令</span><br><span class="line">set showcmd</span><br><span class="line">&quot; tab多选项菜单</span><br><span class="line">set wildmenu</span><br><span class="line">&quot; 设置搜索关键词高亮</span><br><span class="line">set hlsearch</span><br><span class="line">exec &quot;nohlsearch&quot;</span><br><span class="line">&quot; 设置搜索输入时高亮</span><br><span class="line">set incsearch</span><br><span class="line">&quot; 搜索时忽略大小写</span><br><span class="line">set ignorecase </span><br><span class="line">&quot; 只能搜索忽略大小写</span><br><span class="line">set smartcase</span><br><span class="line"></span><br><span class="line">&quot; 搜索跳转结果改为=/-并且使搜索结果在屏幕中间</span><br><span class="line">noremap = nzz</span><br><span class="line">noremap - Nzz</span><br><span class="line"></span><br><span class="line">&quot; 大写JKHL重复五次执行</span><br><span class="line">noremap J 5j</span><br><span class="line">noremap K 5k</span><br><span class="line">noremap H 5h</span><br><span class="line">noremap L 5l</span><br><span class="line">&quot; 设置取消高亮</span><br><span class="line">noremap &lt;LEADER&gt;&lt;CR&gt; :nohlsearch&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot; 设置光标回到行首</span><br><span class="line">noremap &lt;LEADER&gt;a 0</span><br><span class="line"></span><br><span class="line">&quot; 设置光标回到行尾</span><br><span class="line">noremap &lt;LEADER&gt;e $</span><br><span class="line"></span><br><span class="line">&quot; 取消s删除字符的功能</span><br><span class="line">map s &lt;nop&gt;</span><br><span class="line"></span><br><span class="line">&quot; 快速保存</span><br><span class="line">map S :w&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot; 按大写Q直接退出</span><br><span class="line">map Q :q&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot; R快速source vimrc</span><br><span class="line">map R :source ~/.vim/vimrc&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot;分屏操作</span><br><span class="line">&quot;向右分屏</span><br><span class="line">map &lt;LEADER&gt;l :set splitright&lt;CR&gt;:vsplit&lt;CR&gt;</span><br><span class="line">&quot;向左分屏</span><br><span class="line">map &lt;LEADER&gt;h :set nosplitright&lt;CR&gt;:vsplit&lt;CR&gt;</span><br><span class="line">&quot;向上分屏</span><br><span class="line">map &lt;LEADER&gt;k :set nosplitbelow&lt;CR&gt;:split&lt;CR&gt;</span><br><span class="line">&quot;向下分屏</span><br><span class="line">map &lt;LEADER&gt;j :set splitbelow&lt;CR&gt;:split&lt;CR&gt;</span><br><span class="line">&quot;光标移动至左分屏</span><br><span class="line">map sh &lt;C-w&gt;h</span><br><span class="line">&quot;光标移动至右分屏</span><br><span class="line">map sl &lt;C-w&gt;l</span><br><span class="line">&quot;光标移动至下分屏</span><br><span class="line">map sj &lt;C-w&gt;j</span><br><span class="line">&quot;光标移动至上分屏</span><br><span class="line">map sk &lt;C-w&gt;k</span><br><span class="line">&quot;增加纵向分屏大小</span><br><span class="line">map &lt;up&gt; :res +5&lt;CR&gt;</span><br><span class="line">&quot;减少纵向分屏大小</span><br><span class="line">map &lt;down&gt; :res -5&lt;CR&gt;</span><br><span class="line">&quot;减少横向分屏大小</span><br><span class="line">map &lt;left&gt; :vertical resize-5&lt;CR&gt;</span><br><span class="line">&quot;增加横横分屏大小</span><br><span class="line">map &lt;right&gt; :vertical resize+5&lt;CR&gt;</span><br><span class="line">&quot;将分屏设置为横向分屏</span><br><span class="line">map &lt;LEADER&gt;H &lt;C-w&gt;t&lt;C-w&gt;H</span><br><span class="line">&quot;将分屏设置为纵向分屏</span><br><span class="line">map &lt;LEADER&gt;K &lt;C-w&gt;t&lt;C-w&gt;K</span><br><span class="line"></span><br><span class="line">&quot;标签</span><br><span class="line">&quot;打开新标签</span><br><span class="line">map tn :tabe&lt;CR&gt;</span><br><span class="line">&quot; 跳转至上一个标签</span><br><span class="line">map th :-tabnext&lt;CR&gt;</span><br><span class="line">&quot; 跳转至下一个标签</span><br><span class="line">map tl :+tabnext&lt;CR&gt;</span><br><span class="line">  &quot; 关闭当前标签</span><br><span class="line">map td :tabclose&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot;插件安装vim-plug</span><br><span class="line">call plug#begin(&apos;~/.vim/plugged&apos;)</span><br><span class="line">Plug &apos;endel/vim-github-colorscheme&apos;</span><br><span class="line">Plug &apos;morhetz/gruvbox&apos;</span><br><span class="line"></span><br><span class="line">Plug &apos;vim-airline/vim-airline&apos;</span><br><span class="line"></span><br><span class="line">&quot; File navigation</span><br><span class="line">Plug &apos;scrooloose/nerdtree&apos;, &#123; &apos;on&apos;: &apos;NERDTreeToggle&apos; &#125;</span><br><span class="line">Plug &apos;Xuyuanp/nerdtree-git-plugin&apos;</span><br><span class="line"></span><br><span class="line">&quot; Taglist</span><br><span class="line">Plug &apos;majutsushi/tagbar&apos;, &#123; &apos;on&apos;: &apos;TagbarOpenAutoClose&apos; &#125;</span><br><span class="line"></span><br><span class="line">&quot; Error checking</span><br><span class="line">Plug &apos;w0rp/ale&apos;</span><br><span class="line"></span><br><span class="line">&quot; Auto Complete</span><br><span class="line">Plug &apos;Valloric/YouCompleteMe&apos;</span><br><span class="line"></span><br><span class="line">&quot; Undo Tree</span><br><span class="line">Plug &apos;mbbill/undotree/&apos;</span><br><span class="line"></span><br><span class="line">&quot; Other visual enhancement</span><br><span class="line">Plug &apos;nathanaelkane/vim-indent-guides&apos;</span><br><span class="line">Plug &apos;itchyny/vim-cursorword&apos;</span><br><span class="line"></span><br><span class="line">&quot; Git</span><br><span class="line">Plug &apos;rhysd/conflict-marker.vim&apos;</span><br><span class="line">Plug &apos;tpope/vim-fugitive&apos;</span><br><span class="line">Plug &apos;mhinz/vim-signify&apos;</span><br><span class="line">Plug &apos;gisphm/vim-gitignore&apos;, &#123; &apos;for&apos;: [&apos;gitignore&apos;, &apos;vim-plug&apos;] &#125;</span><br><span class="line"></span><br><span class="line">&quot; HTML, CSS, JavaScript, PHP, JSON, etc.</span><br><span class="line">Plug &apos;elzr/vim-json&apos;</span><br><span class="line">Plug &apos;hail2u/vim-css3-syntax&apos;</span><br><span class="line">Plug &apos;spf13/PIV&apos;, &#123; &apos;for&apos; :[&apos;php&apos;, &apos;vim-plug&apos;] &#125;</span><br><span class="line">Plug &apos;gko/vim-coloresque&apos;, &#123; &apos;for&apos;: [&apos;vim-plug&apos;, &apos;php&apos;, &apos;html&apos;, &apos;javascript&apos;, &apos;css&apos;, &apos;less&apos;] &#125;</span><br><span class="line">Plug &apos;pangloss/vim-javascript&apos;, &#123; &apos;for&apos; :[&apos;javascript&apos;, &apos;vim-plug&apos;] &#125;</span><br><span class="line">Plug &apos;mattn/emmet-vim&apos;</span><br><span class="line"></span><br><span class="line">&quot; Python</span><br><span class="line">Plug &apos;vim-scripts/indentpython.vim&apos;</span><br><span class="line"></span><br><span class="line">&quot; Markdown</span><br><span class="line">Plug &apos;iamcco/markdown-preview.nvim&apos;, &#123; &apos;do&apos;: &apos;cd app &amp; yarn install&apos;  &#125;</span><br><span class="line">Plug &apos;dhruvasagar/vim-table-mode&apos;, &#123; &apos;on&apos;: &apos;TableModeToggle&apos; &#125;</span><br><span class="line">Plug &apos;vimwiki/vimwiki&apos;</span><br><span class="line"></span><br><span class="line">&quot; Bookmarks</span><br><span class="line">Plug &apos;kshenoy/vim-signature&apos;</span><br><span class="line"></span><br><span class="line">&quot; Other useful utilities</span><br><span class="line">Plug &apos;terryma/vim-multiple-cursors&apos;</span><br><span class="line">Plug &apos;junegunn/goyo.vim&apos; &quot; distraction free writing mode</span><br><span class="line">Plug &apos;tpope/vim-surround&apos; &quot; type ysks&apos; to wrap the word with &apos;&apos; or type cs&apos;` to change &apos;word&apos; to `word`</span><br><span class="line">Plug &apos;godlygeek/tabular&apos; &quot; type ;Tabularize /= to align the =</span><br><span class="line">Plug &apos;gcmt/wildfire.vim&apos; &quot; in Visual mode, type i&apos; to select all text in &apos;&apos;, or type i) i] i&#125; ip</span><br><span class="line">Plug &apos;scrooloose/nerdcommenter&apos; &quot; in &lt;space&gt;cc to comment a line</span><br><span class="line"></span><br><span class="line">&quot; Dependencies</span><br><span class="line">Plug &apos;MarcWeber/vim-addon-mw-utils&apos;</span><br><span class="line">Plug &apos;kana/vim-textobj-user&apos;</span><br><span class="line">Plug &apos;fadein/vim-FIGlet&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">call plug#end()</span><br><span class="line"></span><br><span class="line">&quot; 设置透明</span><br><span class="line">let g:SnazzyTransparent = 1</span><br><span class="line"></span><br><span class="line">&quot; 设置主题</span><br><span class="line">&quot; 可选项</span><br><span class="line">&quot; github/snazzy/inkstained</span><br><span class="line">let g:grubvbox_termcolors=&apos;256&apos;</span><br><span class="line">let g:grubvbox_contrast_light = &apos;soft&apos;</span><br><span class="line">color gruvbox</span><br><span class="line">set background =light</span><br><span class="line"></span><br><span class="line">&quot; 插件配置</span><br><span class="line"></span><br><span class="line">&quot; ==== NERDTree</span><br><span class="line">map ff :NERDTreeToggle&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot; ==== NERDTree-git</span><br><span class="line"></span><br><span class="line">let g:NERDTreeIndicatorMapCustom = &#123;</span><br><span class="line">    \ &quot;Modified&quot;  : &quot;✹&quot;,</span><br><span class="line">    \ &quot;Staged&quot;    : &quot;✚&quot;,</span><br><span class="line">    \ &quot;Untracked&quot; : &quot;✭&quot;,</span><br><span class="line">    \ &quot;Renamed&quot;   : &quot;➜&quot;,</span><br><span class="line">    \ &quot;Unmerged&quot;  : &quot;═&quot;,</span><br><span class="line">    \ &quot;Deleted&quot;   : &quot;✖&quot;,</span><br><span class="line">    \ &quot;Dirty&quot;     : &quot;✗&quot;,</span><br><span class="line">    \ &quot;Clean&quot;     : &quot;✔︎&quot;,</span><br><span class="line">    \ &quot;Unknown&quot;   : &quot;?&quot;</span><br><span class="line">    \ &#125;</span><br><span class="line"></span><br><span class="line">&quot; ==== You Complete ME</span><br><span class="line">&quot; 跳转至其他的声明</span><br><span class="line">nnoremap gd :YcmCompleter GoToDefinitionElseDeclaration&lt;CR&gt;</span><br><span class="line">&quot; 跳转至文档</span><br><span class="line">nnoremap g/ :YcmCompleter GetDoc&lt;CR&gt;</span><br><span class="line">&quot; 获取类型</span><br><span class="line">nnoremap gt :YcmCompleter GetType&lt;CR&gt;</span><br><span class="line">&quot; 获取参考</span><br><span class="line">nnoremap gr :YcmCompleter GoToReferences&lt;CR&gt;</span><br><span class="line">let g:ycm_autoclose_preview_window_after_completion=0</span><br><span class="line">let g:ycm_autoclose_preview_window_after_insertion=1</span><br><span class="line">let g:ycm_use_clangd = 0</span><br><span class="line">let g:ycm_python_interpreter_path = &quot;/bin/python3&quot;</span><br><span class="line">let g:ycm_python_binary_path = &quot;/bin/python3&quot;</span><br><span class="line"></span><br><span class="line">&quot; ==== ale</span><br><span class="line">let b:ale_linters = [&apos;pylint&apos;]</span><br><span class="line">let b:ale_fixers = [&apos;autopep8&apos;, &apos;yapf&apos;]</span><br><span class="line"></span><br><span class="line">&quot; ==== TagList</span><br><span class="line">map &lt;silent&gt; T :TagbarOpenAutoClose&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot; ==== MarkdownPreview</span><br><span class="line">nmap &lt;LEADER&gt;mp :MarkdownPreview&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot; ==== vim-table-mode</span><br><span class="line"></span><br><span class="line">map &lt;LEADER&gt;tm :TableModeToggle&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot; ==== vim-indent-guide</span><br><span class="line">let g:indent_guides_guide_size = 0</span><br><span class="line">let g:indent_guides_start_level = 2</span><br><span class="line">let g:indent_guides_enable_on_vim_startup = 1</span><br><span class="line">let g:indent_guides_color_change_percent = 0</span><br><span class="line">autocmd WinEnter * silent! unmap &lt;LEADER&gt;ig</span><br><span class="line"></span><br><span class="line">&quot; ====Goyo</span><br><span class="line">map &lt;LEADER&gt;gy :Goyo&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot; ==== vim-signiture</span><br><span class="line">let g:SignatureMap = &#123;</span><br><span class="line">        \ &apos;Leader&apos;             :  &quot;m&quot;,</span><br><span class="line">        \ &apos;PlaceNextMark&apos;      :  &quot;m,&quot;,</span><br><span class="line">        \ &apos;ToggleMarkAtLine&apos;   :  &quot;m.&quot;,</span><br><span class="line">        \ &apos;PurgeMarksAtLine&apos;   :  &quot;dm-&quot;,</span><br><span class="line">        \ &apos;DeleteMark&apos;         :  &quot;dm&quot;,</span><br><span class="line">        \ &apos;PurgeMarks&apos;         :  &quot;dm/&quot;,</span><br><span class="line">        \ &apos;PurgeMarkers&apos;       :  &quot;dm?&quot;,</span><br><span class="line">        \ &apos;GotoNextLineAlpha&apos;  :  &quot;m&lt;LEADER&gt;&quot;,</span><br><span class="line">        \ &apos;GotoPrevLineAlpha&apos;  :  &quot;&quot;,</span><br><span class="line">        \ &apos;GotoNextSpotAlpha&apos;  :  &quot;m&lt;LEADER&gt;&quot;,</span><br><span class="line">        \ &apos;GotoPrevSpotAlpha&apos;  :  &quot;&quot;,</span><br><span class="line">        \ &apos;GotoNextLineByPos&apos;  :  &quot;&quot;,</span><br><span class="line">        \ &apos;GotoPrevLineByPos&apos;  :  &quot;&quot;,</span><br><span class="line">        \ &apos;GotoNextSpotByPos&apos;  :  &quot;mn&quot;,</span><br><span class="line">        \ &apos;GotoPrevSpotByPos&apos;  :  &quot;mp&quot;,</span><br><span class="line">        \ &apos;GotoNextMarker&apos;     :  &quot;&quot;,</span><br><span class="line">        \ &apos;GotoPrevMarker&apos;     :  &quot;&quot;,</span><br><span class="line">        \ &apos;GotoNextMarkerAny&apos;  :  &quot;&quot;,</span><br><span class="line">        \ &apos;GotoPrevMarkerAny&apos;  :  &quot;&quot;,</span><br><span class="line">        \ &apos;ListLocalMarks&apos;     :  &quot;m/&quot;,</span><br><span class="line">        \ &apos;ListLocalMarkers&apos;   :  &quot;m?&quot;</span><br><span class="line">        \ &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot; === Undotree</span><br><span class="line">let g:undotree_DiffAutoOpen = 0</span><br><span class="line">map &lt;LEADER&gt;ut :UndotreeToggle&lt;CR&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VIM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-文件和目录操作命令-find命令</title>
      <link href="/2019/06/21/Linux-%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4-find%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/06/21/Linux-%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4-find%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>本篇文章为Linux系列的第2章 文件和目录操作名 2.13小节的外部展示</p><a id="more"></a><h1 id="2-13-1-命令详解"><a href="#2-13-1-命令详解" class="headerlink" title="2.13.1 命令详解"></a>2.13.1 命令详解</h1><p>find命令参数较多，并且不同的参数所在的子模块不同.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    如何处理符号链接</span><br><span class="line">        |</span><br><span class="line">        |  需要查找的路径</span><br><span class="line">        |     |</span><br><span class="line">        |     |</span><br><span class="line">find -H-L-P path expression</span><br><span class="line">                /    |     \</span><br><span class="line">              /      |       \</span><br><span class="line">            |        |         |</span><br><span class="line">            options tests actions</span><br><span class="line">            参数      |       |</span><br><span class="line">                限定的条件     |</span><br><span class="line">                          执行的动作</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>pathname</td><td>需要查找的路径</td></tr><tr><td>Options模块</td><td></td></tr><tr><td>-depth</td><td>从指定目录下最深层的子目录开始查找</td></tr><tr><td>-maxdepth levels</td><td>查找的最大目录层级数，levels为自然数<code>!</code></td></tr><tr><td>-regextype type</td><td>改变正则表达式的模式，默认为emacs，还有posix-awk/basic/egrep/extended</td></tr><tr><td>Tests模块</td><td></td></tr><tr><td>-mtime [-n\</td><td>n\</td><td>+n]</td><td>按照修改时间进行查找.后面会将，这几种n分别代表的是时间，单位为天<code>!</code></td></tr><tr><td>-atime[-n\</td><td>n\</td><td>+n]</td><td>同上，只不过是按照访问时间进行查找，单位为天</td></tr><tr><td>-ctime</td><td>按照文件的状态改变时间来查找文件，单位为天</td></tr><tr><td>-amin</td><td>按照文件的访问时间查找，单位为分钟</td></tr><tr><td>-cmin</td><td>按照文件的状态改变时间查找，单位为分钟</td></tr><tr><td>-mmin</td><td>按照文件的修改时间来查找文件，单位为分钟</td></tr><tr><td>-group</td><td>按照文件所属的组来查找文件</td></tr><tr><td>-name</td><td>按照文件名查找文件，只支持*,?,[]等特殊通配符<code>!</code></td></tr><tr><td>-newer</td><td>查找更改时间比指定文件新的文件</td></tr><tr><td>-nogroup</td><td>查找没有有效用户组的文件，即文件所属组在/etc/groups中不存在</td></tr><tr><td>-nouser</td><td>查找没有有效属主的文件，即该文件的属主在/etc/passwd中不存在</td></tr><tr><td>-path pattern</td><td>指定路径样式，配合-prune参数排除指定目录</td></tr><tr><td>-perm</td><td>按照文件权限来查找文件</td></tr><tr><td>-regex</td><td>接正则表达式</td></tr><tr><td>-iregex</td><td>不区分大小写接正则表达式</td></tr><tr><td>-size n[cwbkMG]</td><td>查找文件长度为n块的文件，带有cwbkMG时表示文件长度以字节计</td></tr><tr><td>-user</td><td>按照文件属主来查找文件</td></tr><tr><td>-type</td><td>查找某一类型的文件:<code>!</code>，后面会讲</td></tr><tr><td>-Actions模块</td><td></td></tr><tr><td>-delete</td><td>将查找出的文件删除</td></tr><tr><td>-exec</td><td>对匹配文件执行该参数给出的Shell命令<code>!</code></td></tr><tr><td>-ok</td><td>和-exec作用相同，但在执行每个命令之前，都会让用户先确定是否执行</td></tr><tr><td>-prune</td><td>使fint命令不再指定的目录中查找</td></tr><tr><td>-print</td><td>将匹配的文件输出到标准输出(默认可用</td></tr><tr><td>OPERATORS</td><td>find支持逻辑运算符</td></tr><tr><td>!</td><td>取反`!</td></tr><tr><td>-a</td><td>取交集，全拼为and<code>！</code></td></tr><tr><td>-o</td><td>取并集，全拼为or<code>!</code></td></tr></tbody></table><p>-type 查找某一类型的文件:</p><ul><li><p>b(块设备文件)</p></li><li><p>c(字符设备文件)</p></li><li><p>d(目录)</p></li><li><p>p(管道文件)</p></li><li><p>l(符号链接文件)</p></li><li><p>f(普通文件)</p></li><li><p>s(socket文件)</p></li><li><p>D(door)</p></li></ul><h1 id="2-13-2-使用范例"><a href="#2-13-2-使用范例" class="headerlink" title="2.13.2 使用范例"></a>2.13.2 使用范例</h1><p><strong>查找指定时间内访问过的文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; find . -atime -2</span><br><span class="line"></span><br><span class="line">./Linux-文件和目录操作命令-1.md</span><br><span class="line">./Linux-文件和目录操作命令-find命令.md</span><br><span class="line">./我的VIM配置详解.md</span><br><span class="line">./我的VIM配置详解</span><br></pre></td></tr></table></figure><p><strong>查找指定时间内修改过的文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; find . -mtime -5</span><br><span class="line">.</span><br><span class="line">./Linux-Linux命令行简介-0.md</span><br><span class="line">./Linux-文件和目录操作命令-1.md</span><br><span class="line">./C-内存四区之栈区.md</span><br><span class="line">./Linux-文件和目录操作命令-find命令.md</span><br><span class="line">./我的VIM配置详解.md</span><br><span class="line">./Linux-Linux命令行简介-man命令.md</span><br><span class="line">./我的VIM配置详解</span><br></pre></td></tr></table></figure><p>时间关系字符图如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">------------+4  4 -4---------------</span><br><span class="line">8   7   6   5   4   3   2   1   now</span><br></pre></td></tr></table></figure><p><code>-n</code>代表从第四天到现在之内</p><p><code>n</code>代表具体某一天</p><p><code>+n</code>代表某一天之前</p><p><strong>根据文件名查找指定时间的文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; find . -mtime -1 -name &apos;*.md&apos;</span><br><span class="line">./Linux-文件和目录操作命令-find命令.md</span><br></pre></td></tr></table></figure><p><strong>根据文件类型查找目录</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&gt; find . -type d</span><br><span class="line">.</span><br><span class="line">./Linux-Linux命令行简介-0</span><br><span class="line">./终端多窗口神器——Screen</span><br><span class="line">./Qt5</span><br><span class="line">./2008年5月12日14时28分04秒</span><br><span class="line">./如何自学编程</span><br><span class="line">./Learn-Qt5-自定义信号槽</span><br><span class="line">./C-内存四区之代码区与全局区</span><br><span class="line">./Linux</span><br><span class="line">./C-友元</span><br><span class="line">./Learn-Qt5-Qt模块简介</span><br><span class="line">./ManjaroLinux的安装过程</span><br><span class="line">./C-的命名空间与作用域</span><br><span class="line">./Learn-Qt5-信号槽</span><br><span class="line">./我儿子的博客</span><br><span class="line">./C-内存四区之堆区</span><br><span class="line">./fcitx5安装与配置</span><br><span class="line">./hexo-next插入网易云音乐</span><br><span class="line">./Linux-文件和目录操作命令-1</span><br><span class="line">./C-读写文件</span><br><span class="line">./Linux-Linux命令行简介-man命令</span><br><span class="line">./C-指针-基础02</span><br><span class="line">./Learn-Qt5-HelloWorld</span><br><span class="line">./常用算法-1</span><br><span class="line">./C-内存四区之栈区</span><br><span class="line">./我的VIM配置详解</span><br><span class="line">./解决KDE下部分应用不能使用fctix中文输入法的问题</span><br><span class="line">./如何用hexo-github-pages搭建博客</span><br></pre></td></tr></table></figure><p><strong>根据文件类型查找非目录的文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&gt; find . ! -type d</span><br><span class="line">./Linux-Linux命令行简介-0/1.1.2-0</span><br><span class="line">./fcitx5安装与配置.md</span><br><span class="line">./终端多窗口神器——Screen/DefalutCommandKey.png</span><br><span class="line">./终端多窗口神器——Screen/detachedInfo.png</span><br><span class="line">./Linux中的解压与压缩.md</span><br><span class="line">./Linux-Linux命令行简介-0.md</span><br><span class="line">./终端多窗口神器——Screen.md</span><br><span class="line">./C-内存四区之代码区与全局区.md</span><br><span class="line">./C-内存四区之堆区.md</span><br><span class="line">./2008年5月12日14时28分04秒/空降.webp</span><br><span class="line">./2008年5月12日14时28分04秒/操场.webp</span><br><span class="line">./2008年5月12日14时28分04秒/流量图.webp</span><br><span class="line">./hexo-next插入网易云音乐.md</span><br><span class="line">./如何自学编程/群组.png</span><br><span class="line">./Linux-文件和目录操作命令-1.md</span><br><span class="line">./我儿子的博客.md</span><br><span class="line">./解决KDE下部分应用不能使用fctix中文输入法的问题.md</span><br><span class="line">./C-内存四区之代码区与全局区/代码区示意图.png</span><br><span class="line">./C-内存四区之栈区.md</span><br><span class="line">./Learn-Qt5-信号槽.md</span><br><span class="line">./Linux-文件和目录操作命令-find命令.md</span><br><span class="line">./Learn-Qt5-Qt模块简介.md</span><br><span class="line">./C-读写文件.md</span><br><span class="line">./ManjaroLinux的安装过程/编辑文章时截图.png</span><br><span class="line">./ManjaroLinux的安装过程/分区.png</span><br><span class="line">./ManjaroLinux的安装过程/开始安装.png</span><br><span class="line">./ManjaroLinux的安装过程/安装选择界面.png</span><br><span class="line">./ManjaroLinux的安装过程/摘要.png</span><br><span class="line">./ManjaroLinux的安装过程/分区标识.png</span><br><span class="line">./ManjaroLinux的安装过程/桌面.png</span><br><span class="line">./Learn-Qt5-自定义信号槽.md</span><br><span class="line">./我儿子的博客/预览.png</span><br><span class="line">./hexo博客文章插入图片.md</span><br><span class="line">./C-函数探幽.md</span><br><span class="line">./C-内存四区之堆区/test.png</span><br><span class="line">./如何自学编程.md</span><br><span class="line">./深拷贝和浅拷贝的区别.md</span><br><span class="line">./ManjaroLinux的安装过程.md</span><br><span class="line">./fcitx5安装与配置/kcm.png</span><br><span class="line">./fcitx5安装与配置/输入.gif</span><br><span class="line">./hexo-next插入网易云音乐/01.png</span><br><span class="line">./hexo-next插入网易云音乐/插哪.png</span><br><span class="line">./2008年5月12日14时28分04秒.md</span><br><span class="line">./C-读写文件/二进制文件.png</span><br><span class="line">./C-指针-基础02/指针位偏移.png</span><br><span class="line">./Learn-Qt5-HelloWorld.md</span><br><span class="line">./ManjaroLinuxTG讨论群组.md</span><br><span class="line">./Learn-Qt5-HelloWorld/newProject.gif</span><br><span class="line">./我的VIM配置详解.md</span><br><span class="line">./C-友元.md</span><br><span class="line">./如何用hexo-github-pages搭建博客.md</span><br><span class="line">./Linux-Linux命令行简介-man命令.md</span><br><span class="line">./常用算法-1.md</span><br><span class="line">./C-的命名空间与作用域.md</span><br><span class="line">./我的Linux之路.md</span><br><span class="line">./2019年的规划.md</span><br><span class="line">./C-指针-基础01.md</span><br><span class="line">./C-指针-基础02.md</span><br><span class="line">./如何用hexo-github-pages搭建博客/创建仓库.png</span><br><span class="line">./如何用hexo-github-pages搭建博客/deploy.png</span><br><span class="line">./如何用hexo-github-pages搭建博客/逆光.jpg</span><br><span class="line">./如何用hexo-github-pages搭建博客/本地部署.png</span><br><span class="line">./如何用hexo-github-pages搭建博客/hexoinit.png</span><br><span class="line">./如何用hexo-github-pages搭建博客/导入密钥.png</span><br><span class="line">./如何用hexo-github-pages搭建博客/打开设置.png</span><br><span class="line">./如何用hexo-github-pages搭建博客/ssh目录.png</span><br><span class="line">./如何用hexo-github-pages搭建博客/设置SSH.png</span><br></pre></td></tr></table></figure><p><strong>根据文件或目录的权限查找文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&gt; find . -perm 755</span><br><span class="line">.</span><br><span class="line">./Linux-Linux命令行简介-0</span><br><span class="line">./终端多窗口神器——Screen</span><br><span class="line">./Qt5</span><br><span class="line">./2008年5月12日14时28分04秒</span><br><span class="line">./如何自学编程</span><br><span class="line">./Learn-Qt5-自定义信号槽</span><br><span class="line">./C-内存四区之代码区与全局区</span><br><span class="line">./Linux</span><br><span class="line">./C-友元</span><br><span class="line">./Learn-Qt5-Qt模块简介</span><br><span class="line">./ManjaroLinux的安装过程</span><br><span class="line">./C-的命名空间与作用域</span><br><span class="line">./Learn-Qt5-信号槽</span><br><span class="line">./我儿子的博客</span><br><span class="line">./C-内存四区之堆区</span><br><span class="line">./fcitx5安装与配置</span><br><span class="line">./hexo-next插入网易云音乐</span><br><span class="line">./Linux-文件和目录操作命令-1</span><br><span class="line">./C-读写文件</span><br><span class="line">./Linux-Linux命令行简介-man命令</span><br><span class="line">./C-指针-基础02</span><br><span class="line">./Learn-Qt5-HelloWorld</span><br><span class="line">./常用算法-1</span><br><span class="line">./C-内存四区之栈区</span><br><span class="line">./我的VIM配置详解</span><br><span class="line">./解决KDE下部分应用不能使用fctix中文输入法的问题</span><br><span class="line">./如何用hexo-github-pages搭建博客</span><br></pre></td></tr></table></figure><p><strong>根据文件大小查找文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; find . -size +1M</span><br><span class="line">./ManjaroLinux的安装过程/桌面.png</span><br></pre></td></tr></table></figure><p><strong>查找时忽略某个目录</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt; find . -path &quot;*Linux*&quot; -prune -o -type d -print</span><br><span class="line">.</span><br><span class="line">./终端多窗口神器——Screen</span><br><span class="line">./Qt5</span><br><span class="line">./2008年5月12日14时28分04秒</span><br><span class="line">./如何自学编程</span><br><span class="line">./Learn-Qt5-自定义信号槽</span><br><span class="line">./C-内存四区之代码区与全局区</span><br><span class="line">./C-友元</span><br><span class="line">./Learn-Qt5-Qt模块简介</span><br><span class="line">./C-的命名空间与作用域</span><br><span class="line">./Learn-Qt5-信号槽</span><br><span class="line">./我儿子的博客</span><br><span class="line">./C-内存四区之堆区</span><br><span class="line">./fcitx5安装与配置</span><br><span class="line">./hexo-next插入网易云音乐</span><br><span class="line">./C-读写文件</span><br><span class="line">./C-指针-基础02</span><br><span class="line">./Learn-Qt5-HelloWorld</span><br><span class="line">./常用算法-1</span><br><span class="line">./C-内存四区之栈区</span><br><span class="line">./我的VIM配置详解</span><br><span class="line">./解决KDE下部分应用不能使用fctix中文输入法的问题</span><br><span class="line">./如何用hexo-github-pages搭建博客</span><br></pre></td></tr></table></figure><p><strong>查找比某个文件新，但比某个文件旧</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 其中的!不代表取反，代表逻辑运算符非</span><br><span class="line">&gt; find . -newer new.txt ! -newer old.txt</span><br><span class="line">./verynew.txt</span><br></pre></td></tr></table></figure><p><strong>查找文件时使用正则表达式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; ls</span><br><span class="line">txt0.txt  txt1.txt  txt2.txt  txt3.txt  txt4.txt</span><br><span class="line">&gt; find . -regex &quot;.*xt&quot;</span><br><span class="line">./txt0.txt</span><br><span class="line">./txt4.txt</span><br><span class="line">./txt1.txt</span><br><span class="line">./txt2.txt</span><br><span class="line">./txt3.txt</span><br></pre></td></tr></table></figure><p><strong>对查找到的文件执行Shell命令操作</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; ls</span><br><span class="line">txt0.txt  txt1.txt  txt2.txt  txt3.txt  txt4.txt</span><br><span class="line"></span><br><span class="line"># 其中的&#123;&#125;代表查找到的内容，使用-exec必须在后面加上;，并且分好前要使用\，因为需要转义</span><br><span class="line">&gt; find . -regext &quot;.*txt&quot; -exec mv &#123;&#125; &#123;&#125;.demo \;</span><br><span class="line">txt0.txt.demo  txt1.txt.demo  txt2.txt.demo  txt3.txt.demo  txt4.txt.demo</span><br></pre></td></tr></table></figure><p>__对查找到的文件使用Shell命令并且使用安全模式-ok</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; find . -type f -ok rm &#123;&#125; \;</span><br><span class="line">&lt; rm ... ./txt1.txt.demo &gt; ? n</span><br><span class="line">&lt; rm ... ./txt2.txt.demo &gt; ? n</span><br><span class="line">&lt; rm ... ./txt4.txt.demo &gt; ? n</span><br><span class="line">&lt; rm ... ./txt0.txt.demo &gt; ? y</span><br><span class="line">&lt; rm ... ./txt3.txt.demo &gt; ? n</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-文件和目录操作命令-1</title>
      <link href="/2019/06/16/Linux-%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4-1/"/>
      <url>/2019/06/16/Linux-%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4-1/</url>
      
        <content type="html"><![CDATA[<h1 id="2-0-老男孩新手成为技术大牛心法"><a href="#2-0-老男孩新手成为技术大牛心法" class="headerlink" title="2.0 老男孩新手成为技术大牛心法"></a>2.0 老男孩新手成为技术大牛心法</h1><p>执着: 学Linux运维要有屡败屡站、不撞南墙不回头的精神。</p><p>专注: 只做一件事。两耳不闻其他事，一心只读运维书。</p><p>自信: 相信自己一定能行，未来一定可以成为技术大牛，自信是成功的基石。</p><p>心态: 保持空杯，重视基础；基础不牢，地动山摇。</p><h1 id="2-1-pwd命令"><a href="#2-1-pwd命令" class="headerlink" title="2.1 pwd命令"></a>2.1 pwd命令</h1><p>  <code>print working diretory</code></p><p>  <strong>查看当前路径使用<code>pwd</code>命令</strong></p><p>  例子:</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$ pwd</span><br></pre></td></tr></table></figure><p>  输出信息</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/evanmeek</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-L</td><td>显示当前目录的逻辑路径(忽略软链接文件)</td></tr><tr><td>-P</td><td>显示当前目录的物理路径(若有软链接则显示源文件地址)</td></tr></tbody></table><p>  所谓的软链接相当于快捷方式，例如<code>~/test.txt</code>是<code>/test.txt</code>的软链接，那么我们操作<code>~/test.txt</code>等同于操作<code>/test.txt</code>，详细的软链接将会在后面的<code>ln</code>命令讲解。</p><h1 id="2-2-cd-切换目录"><a href="#2-2-cd-切换目录" class="headerlink" title="2.2 cd 切换目录"></a>2.2 cd 切换目录</h1><p>  <code>change directory</code></p><p>  <strong>进入某个目录使用<code>cd</code>命令</strong></p><p>  例子:</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$ pwd</span><br><span class="line">[evanmeek@EvanLinux ~]$ cd /etc/sysctl.d/</span><br><span class="line">[evanmeek@EvanLinux /etc/sysctl.d/]$ pwd</span><br></pre></td></tr></table></figure><p>  输出信息</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/home/evanmeek/</span><br><span class="line">/etc/sysctl.d/</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-P</td><td>进入目录的物理路径</td></tr><tr><td>-L</td><td>进入目录的逻辑路径</td></tr><tr><td>-</td><td>进入上次的目录</td></tr><tr><td>~</td><td>进入系统环境变量的<code>HOME</code>目录路径，即当前登录用户的家目录`</td></tr><tr><td>..</td><td>进入父目录</td></tr></tbody></table><p>  <code>cd</code> 命令如果不带任何选项和路径的话，会进入当前登录用户的家目录.</p><p>  例子:</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$ cd Desktop</span><br><span class="line">[evanmeek@EvanLinux ~/Desktop]$ pwd</span><br><span class="line">[evanmeek@EvanLinux ~]$ cd -</span><br><span class="line">[evanmeek@EvanLinux ~]$ pwd</span><br><span class="line">[evanmeek@EvanLinux ~]$ cd /etc/systemd/</span><br><span class="line">[evanmeek@EvanLinux /etc/systemd/]$ pwd</span><br><span class="line">[evanmeek@EvanLinux /etc/systemd/]$ cd ..</span><br><span class="line">[evanmeek@EvanLinux /etc/]$ pwd</span><br></pre></td></tr></table></figure><p>  输出信息</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~/Desktop/</span><br><span class="line">~</span><br><span class="line">/etc/systemd/</span><br><span class="line">/etc/</span><br></pre></td></tr></table></figure><h1 id="2-3-tree以树形结构显示目录下的内容"><a href="#2-3-tree以树形结构显示目录下的内容" class="headerlink" title="2.3 tree以树形结构显示目录下的内容"></a>2.3 tree以树形结构显示目录下的内容</h1><p>  <strong>树形结构可以很清晰的显示出目录的父子级关系</strong></p><p>  例子:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~/test]$ tree -L 1</span><br></pre></td></tr></table></figure><p>  输出信息</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── dir1</span><br><span class="line">│   ├── dir1_1</span><br><span class="line">│   └── dir2_2</span><br><span class="line">└── dir2</span><br><span class="line">    ├── dir1_1</span><br><span class="line">    └── dir2_2</span><br><span class="line"></span><br><span class="line">6 directories, 0 files</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-a</td><td>显示所有文件包括隐藏文件</td></tr><tr><td>-d</td><td>只显示目录<code>!</code></td></tr><tr><td>-f</td><td>显示每个文件的绝对路径</td></tr><tr><td>-i</td><td>不显示树枝</td></tr><tr><td>-L levelNum</td><td>显示遍历目录的层级，levelNum为层级(数字)</td></tr><tr><td>-F</td><td>显示时根据不同文件类型在文件名结尾处显示不同的符号</td></tr></tbody></table><p>  例子:</p><p>  显示隐藏文件<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#假设此目录下有隐藏文件</span><br><span class="line">[evanmeek@EvanLinux ~/tmp]$ tree -a</span><br></pre></td></tr></table></figure></p><p>  输出信息</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── dir1</span><br><span class="line">│   ├── dir1_1</span><br><span class="line">│   └── dir2_2</span><br><span class="line">├── dir2</span><br><span class="line">│   ├── dir1_1</span><br><span class="line">│   └── dir2_2</span><br><span class="line">├── .file1</span><br><span class="line">└── .file2</span><br><span class="line"></span><br><span class="line">6 directories, 2 files</span><br></pre></td></tr></table></figure><p>  例子:</p><p>  显示1级层文件完整路径，并不显示树枝<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~/tmp]$ tree -L 1 -fi .</span><br></pre></td></tr></table></figure></p><p>  输出信息</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">./dir1</span><br><span class="line">./dir2</span><br></pre></td></tr></table></figure><h1 id="2-4-mkdir创建目录"><a href="#2-4-mkdir创建目录" class="headerlink" title="2.4 mkdir创建目录"></a>2.4 mkdir创建目录</h1><p>  <code>make directory</code></p><p>  <strong>创建目录使用<code>mkdir</code>命令</strong></p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-p</td><td>递归创建目录，若目录已存在不会报错</td></tr><tr><td>-m</td><td>创建时指定目录的权限</td></tr><tr><td>-v</td><td>创建时显示过程信息</td></tr></tbody></table><p>  例子:</p><p>  创建目录时显示信息<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$ mkdir -v testDir</span><br><span class="line">[evanmeek@EvanLinux ~]$ cd testDir</span><br><span class="line">[evanmeek@EvanLinux ~/testDir]$ pwd</span><br></pre></td></tr></table></figure></p><p>  输出信息:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir: 已创建目录 &apos;testDir&apos;</span><br></pre></td></tr></table></figure><p>  递归创建目录并且显示信息</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$ mkdir -pv father/son/test</span><br></pre></td></tr></table></figure><p>  输出信息:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir: 已创建目录 &apos;father&apos;</span><br><span class="line">mkdir: 已创建目录 &apos;father/son&apos;</span><br><span class="line">mkdir: 已创建目录 &apos;father/son/test&apos;</span><br></pre></td></tr></table></figure><p>  创建目录并且指定目录权限</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$ mkdir -m 333 -v testDir</span><br><span class="line">[evanmeek@EvanLinux ~]$ ls -ld testDir</span><br></pre></td></tr></table></figure><p>  输出信息:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir: 已创建目录 &apos;testDir&apos;</span><br><span class="line">d-wx-wx-wx 2 evanmeek evanmeek 4096  6月 17 20:15 testDir</span><br></pre></td></tr></table></figure><p>  利用特殊符号“{}”同时创建多目录及多子目录</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$ mkdir -pv father/&#123;son1/&#123;a1,a2&#125;,son2/&#123;b1,b2&#125;,son3/&#123;c1,c2&#125;&#125;</span><br><span class="line">[evanmeek@EvanLinux ~]$ tree father</span><br></pre></td></tr></table></figure><p>  输出信息:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mkdir: 已创建目录 &apos;father&apos;</span><br><span class="line">mkdir: 已创建目录 &apos;father/son1&apos;</span><br><span class="line">mkdir: 已创建目录 &apos;father/son1/a1&apos;</span><br><span class="line">mkdir: 已创建目录 &apos;father/son1/a2&apos;</span><br><span class="line">mkdir: 已创建目录 &apos;father/son2&apos;</span><br><span class="line">mkdir: 已创建目录 &apos;father/son2/b1&apos;</span><br><span class="line">mkdir: 已创建目录 &apos;father/son2/b2&apos;</span><br><span class="line">mkdir: 已创建目录 &apos;father/son3&apos;</span><br><span class="line">mkdir: 已创建目录 &apos;father/son3/c1&apos;</span><br><span class="line">mkdir: 已创建目录 &apos;father/son3/c2&apos;</span><br><span class="line"></span><br><span class="line">father</span><br><span class="line">├── son1</span><br><span class="line">│   ├── a1</span><br><span class="line">│   └── a2</span><br><span class="line">├── son2</span><br><span class="line">│   ├── b1</span><br><span class="line">│   └── b2</span><br><span class="line">└── son3</span><br><span class="line">    ├── c1</span><br><span class="line">    └── c2</span><br><span class="line"></span><br><span class="line">9 directories, 0 files</span><br></pre></td></tr></table></figure><h1 id="2-5-touch创建空文件或改变文件的时间戳属性"><a href="#2-5-touch创建空文件或改变文件的时间戳属性" class="headerlink" title="2.5 touch创建空文件或改变文件的时间戳属性"></a>2.5 touch创建空文件或改变文件的时间戳属性</h1><p>  <strong>创建新的空文件，改变文件的时间戳属性，需要用到touch</strong></p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-a</td><td>更改指定文件的最新访问时间</td></tr><tr><td>-d STRING</td><td>用字符串的方式指定一个模板作为指定文件的时间属性</td></tr><tr><td>-m</td><td>更改指定文件的最新修改时间</td></tr><tr><td>-r file</td><td>将指定文件的时间属性设置为file的时间属性</td></tr><tr><td>-t STAMP</td><td>使用时间格式设置文件的时间属性</td></tr></tbody></table><p>  例子:</p><p>  创建文件</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$ touch test.txt</span><br></pre></td></tr></table></figure><p>  同时创建多个文件</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$ touch test1.txt test2.txt</span><br></pre></td></tr></table></figure><p>  利用{}批量创建文件</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$ touch t&#123;01..05&#125;.txt</span><br></pre></td></tr></table></figure><p>  利用<code>stat</code>命令查看时间戳</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$ stat t01.txt</span><br></pre></td></tr></table></figure><p>  输出信息</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">File: t01.txt</span><br><span class="line">Size: 0               Blocks: 0          IO Block: 4096   regular empty file</span><br><span class="line">Device: 10305h/66309d   Inode: 18352077    Links: 1</span><br><span class="line">Access: (0644/-rw-r--r--)  Uid: ( 1000/evanmeek)   Gid: ( 1000/evanmeek)</span><br><span class="line">Access: 2019-06-17 21:36:42.380004039 +0800</span><br><span class="line">Modify: 2019-06-17 21:36:42.380004039 +0800</span><br><span class="line">Change: 2019-06-17 21:36:42.380004039 +0800</span><br><span class="line">Birth: 2019-06-17 21:36:42.380004039 +0800</span><br></pre></td></tr></table></figure><p>  <strong>时间戳属性说明:</strong></p><ul><li><p>Access 访问属性</p></li><li><p>Modify 修改属性</p></li><li><p>Birth 状态改变属性</p><p>利用-a选项修改文件最后访问属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$ touch -a t01.txt</span><br><span class="line">[evanmeek@EvanLinux ~]$ stat t01.txt</span><br></pre></td></tr></table></figure><p>输出信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">File: t01.txt</span><br><span class="line">Size: 0               Blocks: 0          IO Block: 4096   regular empty file</span><br><span class="line">Device: 10305h/66309d   Inode: 18352077    Links: 1</span><br><span class="line">Access: (0644/-rw-r--r--)  Uid: ( 1000/evanmeek)   Gid: ( 1000/evanmeek)</span><br><span class="line">Access: 2019-06-17 21:44:27.210736590 +0800</span><br><span class="line">Modify: 2019-06-17 21:36:42.380004039 +0800</span><br><span class="line">Change: 2019-06-17 21:44:27.210736590 +0800</span><br><span class="line">Birth: 2019-06-17 21:36:42.380004039 +0800</span><br></pre></td></tr></table></figure><p>修改文件的修改时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$ touch -d 20010101 t01.txt</span><br><span class="line">[evanmeek@EvanLinux ~]$ stat t01.txt</span><br></pre></td></tr></table></figure><p>输出信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">File: t01.txt</span><br><span class="line">Size: 0               Blocks: 0          IO Block: 4096   regular empty file</span><br><span class="line">Device: 10305h/66309d   Inode: 18352077    Links: 1</span><br><span class="line">Access: (0644/-rw-r--r--)  Uid: ( 1000/evanmeek)   Gid: ( 1000/evanmeek)</span><br><span class="line">Access: 2001-01-01 00:00:00.000000000 +0800</span><br><span class="line">Modify: 2001-01-01 00:00:00.000000000 +0800</span><br><span class="line">Change: 2019-06-17 21:48:26.700992172 +0800</span><br><span class="line">Birth: 2019-06-17 21:36:42.380004039 +0800</span><br></pre></td></tr></table></figure><p>修改指定文件为某文件的时间属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$ stat t02.txt</span><br><span class="line">[evanmeek@EvanLinux ~]$ touch -r t02.txt t01.txt</span><br><span class="line">[evanmeek@EvanLinux ~]$ stat t01.txt</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">File: t01.txt</span><br><span class="line">Size: 0               Blocks: 0          IO Block: 4096   regular empty file</span><br><span class="line">Device: 10305h/66309d   Inode: 18352077    Links: 1</span><br><span class="line">Access: (0644/-rw-r--r--)  Uid: ( 1000/evanmeek)   Gid: ( 1000/evanmeek)</span><br><span class="line">Access: 2019-06-17 21:36:42.380004039 +0800</span><br><span class="line">Modify: 2019-06-17 21:36:42.380004039 +0800</span><br><span class="line">Change: 2019-06-17 21:51:35.907031392 +0800</span><br><span class="line">Birth: 2019-06-17 21:36:42.380004039 +0800</span><br></pre></td></tr></table></figure></li></ul><h1 id="2-6-ls显示目录下的内容及相关属性信息"><a href="#2-6-ls显示目录下的内容及相关属性信息" class="headerlink" title="2.6 ls显示目录下的内容及相关属性信息"></a>2.6 ls显示目录下的内容及相关属性信息</h1><p>  <code>list directory contents</code></p><p>  例子:</p><p>  查看当前目录下的文件信息</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$ ls</span><br></pre></td></tr></table></figure><p>  输出结果</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Applications  Desktop  Downloads  GameDir  index.html  Music  Pictures  temp  WorkDir</span><br></pre></td></tr></table></figure><p>  每个人的目录里面的内容不同，所以可能不一样。</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-l</td><td>使用长格式列出目录下的文件和信息</td></tr><tr><td>-a</td><td>显示目录下的所有文件，包括隐藏文件<code>!</code></td></tr><tr><td>-t</td><td>根据最新的修改时间排序，不加此参数默认是根据文件名排序<code>!</code></td></tr><tr><td>-r</td><td>反向排序</td></tr><tr><td>-F</td><td>在显示的条目后加上特殊符号用以区别文件类型<code>!</code></td></tr><tr><td>-p</td><td>目录后面加上“/”</td></tr><tr><td>-i</td><td>显示inode节点信息</td></tr><tr><td>-d</td><td>遇到目录时，只列出目录本身，并且不跟随符号链接<code>!</code></td></tr><tr><td>-h</td><td>以人类可读的信息显示文件或目录大小</td></tr><tr><td>-A</td><td>列出所有文件，包括隐藏文件夹，但不包括.和..</td></tr><tr><td>-S</td><td>根据文件大小排序</td></tr><tr><td>-R</td><td>递归列出所有子目录</td></tr><tr><td>-x</td><td>逐行列出项目而不是逐栏列出</td></tr><tr><td>-X</td><td>根据扩展名排序</td></tr><tr><td>-c</td><td>根据状态改变时间排序</td></tr><tr><td>-u</td><td>根据最后访问时间排序</td></tr><tr><td>–color={never,always,auto}</td><td>根据文件类型显示不同颜色，never:不显示，always:总是显示，auto:表示自动显示</td></tr><tr><td>–full-time</td><td>以完整的时间格式进行显示</td></tr><tr><td>–time-style={full-iso,long-iso,iso,locale}</td><td>以不同的时间格式输出，long-iso最常用</td></tr><tr><td>–time={atime,ctimeA}</td><td>按不同的时间属性输出,atime:访问时间，ctime:改变权限属性时间，默认:最后修改时间</td></tr></tbody></table><p>  例子:</p><p>  环境准备</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$ mkdir temp</span><br><span class="line">[evanmeek@EvanLinux ~]$ cd temp</span><br><span class="line">[evanmeek@EvanLinux ~]$ mkdir -p father/dir&#123;01..02&#125;</span><br><span class="line">[evanmeek@EvanLinux ~]$ touch father/dir&#123;01..02&#125;/txt&#123;01..02&#125;</span><br><span class="line">[evanmeek@EvanLinux ~]$ touch father/dir&#123;01..02&#125;/.txt&#123;01..02&#125;</span><br><span class="line">[evanmeek@EvanLinux ~]$ tree -a</span><br></pre></td></tr></table></figure><p>  输出结果</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  .</span><br><span class="line">  └── father</span><br><span class="line">      ├── dir01</span><br><span class="line">      │   ├── .txt01</span><br><span class="line">      │   ├── txt01</span><br><span class="line">      │   ├── .txt02</span><br><span class="line">      │   └── txt02</span><br><span class="line">      └── dir02</span><br><span class="line">          ├── .txt01</span><br><span class="line">          ├── txt01</span><br><span class="line">          ├── .txt02</span><br><span class="line">          └── txt02</span><br><span class="line"></span><br><span class="line">3 directories, 8 files</span><br></pre></td></tr></table></figure><p>  递归显示所有文件</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~/WorkDir/MyBlog/]$ ls -Ra</span><br></pre></td></tr></table></figure><p>  输出信息</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.:</span><br><span class="line">.  ..  father</span><br><span class="line"></span><br><span class="line">./father:</span><br><span class="line">.  ..  dir01  dir02</span><br><span class="line"></span><br><span class="line">./father/dir01:</span><br><span class="line">.  ..  .txt01  txt01  .txt02  txt02</span><br><span class="line"></span><br><span class="line">./father/dir02:</span><br><span class="line">.  ..  .txt01  txt01  .txt02  txt02</span><br></pre></td></tr></table></figure><p> <strong>ls命令输出属性解释</strong></p><p>  目录内容如下：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── dir01</span><br><span class="line">├── dir02</span><br><span class="line">├── file01.txt</span><br><span class="line">└── file02.txt</span><br><span class="line"></span><br><span class="line">2 directories, 2 files</span><br></pre></td></tr></table></figure><p>  长格式列出人类可读信息并显示inode信息</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$ ls -lhi</span><br></pre></td></tr></table></figure><p>  输出信息</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">total 8.0K</span><br><span class="line">18219052 drwxr-xr-x 2 evanmeek evanmeek 4.0K  6月 18 19:27 dir01</span><br><span class="line">18219053 drwxr-xr-x 2 evanmeek evanmeek 4.0K  6月 18 19:27 dir02</span><br><span class="line">18219054 -rw-r--r-- 1 evanmeek evanmeek    0  6月 18 19:28 file01.txt</span><br><span class="line">18219055 -rw-r--r-- 1 evanmeek evanmeek    0  6月 18 19:28 file02.txt</span><br></pre></td></tr></table></figure><p>  从第一列依次往后排，分别含义为:</p><ol><li>inode索引节点编号</li><li>文件类型以及属性(第一字符标注类型，后9个代表权限)</li><li>硬链接个数</li><li>文件或目录所属用户</li><li>文件或目录所属的组</li><li>文件或目录的大小</li><li>修改时间</li><li>文件名或目录名</li></ol><h1 id="2-7-cp复制文件或目录"><a href="#2-7-cp复制文件或目录" class="headerlink" title="2.7 cp复制文件或目录"></a>2.7 cp复制文件或目录</h1><p>  <code>copy</code></p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-p</td><td>复制文件时保存源文件的所有者、权限信息及时间属性</td></tr><tr><td>-d</td><td>如果复制的源文件是符号链接，那么仅复制符号链接本身，并且保留符号链接所只想的目标文件或目录</td></tr><tr><td>-r</td><td>递归复制目录，即目录下所有的子目录及文件</td></tr><tr><td>-a</td><td>等同于上面的p、d、r这3个选项功能的总和</td></tr><tr><td>-i</td><td>覆盖已有文件前提示用户确认</td></tr><tr><td>-t</td><td>调换命令格式，默认格式是”cp 源文件 目标文件”，将目标文件和源文件进行位置调换</td></tr></tbody></table><p>  例子:</p><p>  环境准备</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">└── fatherDir</span><br><span class="line">    ├── sonDir1</span><br><span class="line">    │   └── test.txt</span><br><span class="line">    ├── sonDir2</span><br><span class="line">    │   └── test.txt</span><br><span class="line">    └── sonDir3</span><br><span class="line">        └── test.txt</span><br><span class="line"></span><br><span class="line">4 directories, 3 files</span><br></pre></td></tr></table></figure><p>  拷贝<code>fatherDir</code>为<code>father2Dir</code>并保留源文件的所有者，权限信息及时间属性</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~/temp]cp -rp fatherDir father2Dir</span><br></pre></td></tr></table></figure><p>  再次拷贝<code>fatherDir</code>为<code>father2Dir</code>从而覆盖上个例子的<code>father2Dir</code></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~etemp]$ cp -ri fatherDir father2Dir</span><br></pre></td></tr></table></figure><p>  输出信息</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp：是否覆盖&apos;father2Dir/fatherDir/sonDir1/test.txt&apos;？ y</span><br><span class="line">cp：是否覆盖&apos;father2Dir/fatherDir/sonDir2/test.txt&apos;？ y</span><br><span class="line">cp：是否覆盖&apos;father2Dir/fatherDir/sonDir3/test.txt&apos;？ y</span><br></pre></td></tr></table></figure><h1 id="2-8-mv移动或重命名文件"><a href="#2-8-mv移动或重命名文件" class="headerlink" title="2.8 mv移动或重命名文件"></a>2.8 mv移动或重命名文件</h1><p>  <code>move</code><br>  | 选项 | 说明                                                       |<br>  |——|————————————————————|<br>  | -f   | 若目标文件已存在，不询问直接覆盖                           |<br>  | -i   | 若目标文件已存在，询问是否覆盖                             |<br>  | -n   | 不覆盖已存在的文件                                         |<br>  | -t   | 交换目标文件和源文件的参数位置，常用于有多个目标目录的情况 |<br>  | -u   | 源文件比目标文件新，或目标文件不存在时再移动               |</p><p>  例子:</p><p>  环境准备</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">总用量 4</span><br><span class="line">-rw-r--r-- 1 evanmeek evanmeek    0 2019-06-20 19:11:36.807398116 +0800 test0.txt</span><br><span class="line">-rw-r--r-- 1 evanmeek evanmeek    0 2019-06-20 19:11:36.807398116 +0800 test1.txt</span><br><span class="line">-rw-r--r-- 1 evanmeek evanmeek    0 2019-06-20 19:11:36.807398116 +0800 test2.txt</span><br><span class="line">-rw-r--r-- 1 evanmeek evanmeek    0 2019-06-20 19:11:36.807398116 +0800 test3.txt</span><br><span class="line">drwxr-xr-x 2 evanmeek evanmeek 4096 2019-06-20 19:11:55.618528975 +0800 testTxt</span><br></pre></td></tr></table></figure><p>  更换文件名</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanMeek ~]$mv test0.txt test-1.txt</span><br><span class="line">[evanmeek@EvanMeek ~]$ls -l --full-time</span><br></pre></td></tr></table></figure><p>  输出信息</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r-- 1 evanmeek evanmeek    0 2019-06-20 19:11:36.807398116 +0800 test-1.txt</span><br><span class="line">-rw-r--r-- 1 evanmeek evanmeek    0 2019-06-20 19:11:36.807398116 +0800 test1.txt</span><br><span class="line">-rw-r--r-- 1 evanmeek evanmeek    0 2019-06-20 19:11:36.807398116 +0800 test2.txt</span><br><span class="line">-rw-r--r-- 1 evanmeek evanmeek    0 2019-06-20 19:11:36.807398116 +0800 test3.txt</span><br><span class="line">drwxr-xr-x 2 evanmeek evanmeek 4096 2019-06-20 19:11:55.618528975 +0800 testTxt</span><br></pre></td></tr></table></figure><p>  <strong>移动文件</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$ mv test-1.txt testTxt</span><br></pre></td></tr></table></figure><p>  <strong>移动多个文件至一个目录</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$ mv -t testTxt test1.txt test2.txt test3.txt</span><br></pre></td></tr></table></figure><h1 id="2-9-rm删除文件或目录"><a href="#2-9-rm删除文件或目录" class="headerlink" title="2.9 rm删除文件或目录"></a>2.9 rm删除文件或目录</h1><p>  <strong>前排提示:使用rm命令时最好知道自己在干什么!</strong></p><p>  <code>remove</code></p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-f</td><td>强制删除并且忽略不存在文件的提示</td></tr><tr><td>-i</td><td>删除时需要确认</td></tr><tr><td>-I</td><td>删除三个以上文件或者递归删除前需要确认</td></tr><tr><td>-r</td><td>递归删除目录以及其内容<code>!</code></td></tr></tbody></table><p>  例子:</p><p>  <strong>再次提醒，使用此命令时最好知道自己在做什么并且检查是否写错，一旦删除无法恢复(大多数情况下可以恢复，可以通过ext3grep实现)</strong></p><p>  环境准备<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── test2Txt</span><br><span class="line">│   ├── test1.txt</span><br><span class="line">│   ├── test2.txt</span><br><span class="line">│   └── testTxt</span><br><span class="line">│       └── test-1.txt</span><br><span class="line">└── test3.txt</span><br></pre></td></tr></table></figure></p><p>  <strong>删除文件</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$ rm test3.txt</span><br></pre></td></tr></table></figure><p>  <strong>强制删除并且删除时需要确认</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$ rm -fi test2Txt/test2.txt</span><br></pre></td></tr></table></figure><p>  输出信息</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm：是否删除普通空文件 &apos;test2Txt/test2.txt&apos;？</span><br></pre></td></tr></table></figure><p>  <strong>删除目录并且删除时需要确认</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$ rm -ri test2Txt/testTxt</span><br></pre></td></tr></table></figure><p>  <strong>强制删除+递归删除目录</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$ rm -rf test2Txt</span><br></pre></td></tr></table></figure><p>  <strong>最后再提醒一下，如果网上有人叫你输入如下命令，请千万不要输入</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /*</span><br></pre></td></tr></table></figure><p>  <strong>这行命令的意思是:以管理员的权限强制+递归删除根目录下的所有文件,此行命令不在我们学习范围之内.</strong></p><h2 id="删除时的小技巧"><a href="#删除时的小技巧" class="headerlink" title="删除时的小技巧"></a>删除时的小技巧</h2><ul><li><p>使用<code>mv</code>命令代替<code>rm</code>命令，可以将要删除的文件暂时保存在<code>/tmp</code>目录下，需要清理空间时再去删除</p></li><li><p>删除前先备份，并且最好是不同机器备份，Linux可以做到若出现问题随时还原</p></li><li><p>若非要用删除命令清理空间可以选择用<code>find</code>代替<code>rm</code></p></li><li><p>删除时尽量不要使用系统通配符</p></li></ul><h1 id="2-10-rmdir删除空目录"><a href="#2-10-rmdir删除空目录" class="headerlink" title="2.10 rmdir删除空目录"></a>2.10 rmdir删除空目录</h1><p>  <code>remove dirctory</code></p><p>  此命令只能删除空目录</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-p</td><td>递归删除目录，若发现子目录被删除后父目录也为空时，则一并删除。若由于部分原因，部分目录被保留，那么则会显示相应的信息</td></tr><tr><td>-v</td><td>删除时显示执行过程</td></tr></tbody></table><h1 id="2-11-ln硬链接与软链接"><a href="#2-11-ln硬链接与软链接" class="headerlink" title="2.11 ln硬链接与软链接"></a>2.11 ln硬链接与软链接</h1><p>  <code>link</code></p><p>  链接分为两种，分别是硬链接与软链接</p><p>  硬链接(hard link):</p><ul><li><p>不能将硬链接链接到不同文件系统的文件</p></li><li><p>硬链接不能链接目录</p></li><li><p>删除硬链接或者源文件之一并不能完全删除实体</p></li><li><p>删除实体需要删除硬链接以及起对应的源文件</p></li><li><p>硬链接相当与源文件的另外一个入口</p></li><li><p>对于静态文件来说，对应的硬链接连接的个数为0时，则代表被删除</p></li><li><p>硬链接的文件类型是普通文件(字符型)</p></li><li><p>硬链接通过索引节点进行链接</p><p>例子:</p><p>创建硬链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$ ln test.txt testHardFile.txt</span><br></pre></td></tr></table></figure><p>软链接(Symbolic Link):</p></li><li><p>类似于Windows的快捷方式</p></li><li><p>文件内存放的是源文件的路径</p></li><li><p>即使删除源文件，软链接仍然存在，但无法访问源文件</p></li><li><p>源文件被删除后，软链接则失效，失效后将会有白字红底闪烁提示</p></li><li><p>软链接可以用rm命令删除</p><p>例子:</p><p><strong>创建软链接</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$ ln -s test.txt testSyumbolicLink.txt</span><br></pre></td></tr></table></figure></li></ul><h2 id="文件链接案例"><a href="#文件链接案例" class="headerlink" title="文件链接案例"></a>文件链接案例</h2><p>  通过一个案例演示软链接和硬链接的区别。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$ cat testFile</span><br><span class="line">123</span><br><span class="line"># 创建硬链接</span><br><span class="line">[evanmeek@EvanLinux ~]$ ln testFile testFileHardLink</span><br><span class="line"># 创建软链接</span><br><span class="line">[evanmeek@EvanLinux ~]$ ln -s testFile testFileSymbolicLink</span><br><span class="line">[evanmeek@EvanLinux ~]$ cat testFile testHardLink testFileSymbolicLink</span><br><span class="line">123</span><br><span class="line">123</span><br><span class="line">123</span><br><span class="line"># 删除软链接</span><br><span class="line">[evanmeek@EvanLinux ~]$ rm -f testFileSymbolicLink</span><br><span class="line">[evanmeek@EvanLinux ~]$ cat testFile testHardLink</span><br><span class="line">123</span><br><span class="line">123</span><br><span class="line"># 复原</span><br><span class="line">[evanmeek@EvanLinux ~]$ ln -s testFile testFileSymbolicLink</span><br><span class="line"># 删除硬链接</span><br><span class="line">[evanmeek@EvanLinux ~]$ rm -f testFileHardLink</span><br><span class="line">[evanmeek@EvanLinux ~]$ cat testFile testFileHardLink</span><br><span class="line">123</span><br><span class="line">123</span><br><span class="line"># 复原</span><br><span class="line">[evanmeek@EvanLinux ~]$ ln testFile testFileHardLink</span><br><span class="line"># 删除源文件</span><br><span class="line">[evanmeek@EvanLinux ~]$ rm -f testFile</span><br><span class="line">[evanmeek@EvanLinux ~]$ cat testFileHardLink testFileSymbolicLink</span><br><span class="line">123</span><br><span class="line">cat: testFileSymbolicLink: 没有那个文件或目录</span><br></pre></td></tr></table></figure><ul><li><p>硬链接可以没有源文件</p></li><li><p>软链接不行</p></li></ul><h1 id="2-12-readlink-查看符号链接文件的内容"><a href="#2-12-readlink-查看符号链接文件的内容" class="headerlink" title="2.12 readlink 查看符号链接文件的内容"></a>2.12 readlink 查看符号链接文件的内容</h1><p>  此命令可查看链接指向的源文件的地址</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-f</td><td>一直跟随符号链接，直到遇到一个非符号链接的文件，若不存在则不行</td></tr></tbody></table><p>  例子：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$ readlink testFileSymbolicLink</span><br></pre></td></tr></table></figure><h1 id="2-13-find-查找目录下的文件"><a href="#2-13-find-查找目录下的文件" class="headerlink" title="2.13 find 查找目录下的文件"></a>2.13 find 查找目录下的文件</h1><p>  由于本篇篇幅较大，请点击下方超链接进行访问。</p><p>  <a href="/2019/6/21/Linux-文件和目录操作命令-find命令">点击访问</a></p><h1 id="2-14-xargs将标准输入转换成命令行参数"><a href="#2-14-xargs将标准输入转换成命令行参数" class="headerlink" title="2.14 xargs将标准输入转换成命令行参数"></a>2.14 xargs将标准输入转换成命令行参数</h1><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-n</td><td>指定每行命令的最大参数数量，每个参数由空格隔开</td></tr><tr><td>-d</td><td>自定义分割符</td></tr><tr><td>-i</td><td>以{}替代xargs命令之前的结果</td></tr><tr><td>-I</td><td>指定一个符号替代前面的结果，而不是使用默认的{}</td></tr><tr><td>-P</td><td>提示让用户确认是否执行后面的命令，y执行，n不执行</td></tr><tr><td>-0</td><td>用null替代空格作为分割符，配合find命令的-printf0选项的输出使用</td></tr></tbody></table><h2 id="2-14-2使用范例"><a href="#2-14-2使用范例" class="headerlink" title="2.14.2使用范例"></a>2.14.2使用范例</h2><p>  <strong>多行输入变单行</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; cat test.txt</span><br><span class="line">1 2 3 4 </span><br><span class="line">5 6 7</span><br><span class="line">8 9</span><br><span class="line">1 </span><br><span class="line">&gt; xargs &lt; test.txt</span><br><span class="line">1 2 3 4 5 6 7 8 9 1</span><br></pre></td></tr></table></figure><p>  <strong>通过-n指定每行的输出个数</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; xargs -n 2 &lt; test.txt</span><br><span class="line">1 2</span><br><span class="line">3 4</span><br><span class="line">5 6</span><br><span class="line">7 8</span><br><span class="line">9 1</span><br></pre></td></tr></table></figure><p>  <strong>自定义分隔符(使用-d功能)</strong><br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; echo 123I321I809I098</span><br><span class="line">123I321I809I098</span><br><span class="line"></span><br><span class="line">&gt; echo 123I321I809I098|xargs -d I -n 2</span><br><span class="line">123 321</span><br><span class="line">890 098</span><br></pre></td></tr></table></figure></p><p>  <strong>指定一个替换字符串</strong><br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 将查找出来的结果删除</span><br><span class="line"># 先将结果传给&#123;&#125;</span><br><span class="line"># 再会被删除</span><br><span class="line">&gt; find . -name &quot;*.log&quot;|xargs -i rm -rf &#123;&#125;</span><br><span class="line"># 自定义替换字符串</span><br><span class="line">&gt; find . -name &quot;*.log&quot;|xargs -I [] rm -rf []</span><br></pre></td></tr></table></figure></p><h1 id="2-15-rename重命名"><a href="#2-15-rename重命名" class="headerlink" title="2.15 rename重命名"></a>2.15 rename重命名</h1><p>  rename通过替换字符串的方式批量修改文件名</p><p>  语法格式</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename from to file</span><br></pre></td></tr></table></figure><p>  例子:</p><p>  <strong>批量修改文件名</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; ls</span><br><span class="line">test_demo_0  test_demo_1  test_demo_2  test_demo_3  test_demo_4  test_demo_5</span><br><span class="line">&gt; rename &quot;_demo&quot; &quot;&quot; *</span><br><span class="line">&gt; ls</span><br><span class="line">test_0  test_1  test_2  test_3  test_4  test_5</span><br></pre></td></tr></table></figure><p>  <strong>批量修改文件扩展名</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; ls</span><br><span class="line">test0.txt  test1.txt  test2.txt  test3.txt  test4.txt  test5.txt</span><br><span class="line">&gt; rename .txt .demo *</span><br><span class="line">&gt; ls</span><br><span class="line">test0.demo  test1.demo  test2.demo  test3.demo  test4.demo  test5.demo</span><br></pre></td></tr></table></figure><h1 id="2-16-basename显示文件名或目录名"><a href="#2-16-basename显示文件名或目录名" class="headerlink" title="2.16 basename显示文件名或目录名"></a>2.16 basename显示文件名或目录名</h1><p>  basename命令用于显示去除路径和文件后缀的文件名或目录名</p><p>  语法格式</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">basename [&lt;文件或目录&gt;] [后缀]</span><br></pre></td></tr></table></figure><p>  其中的后缀为可选</p><p>  例子:</p><p>  <strong>只显示文件名和后缀，不显示完整路径</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; mkdir -p dir1/dir2/</span><br><span class="line">&gt; touch dir1/dir2/test.txt</span><br><span class="line">&gt; basename dir1/dir2/test.txt</span><br><span class="line">test.txt</span><br></pre></td></tr></table></figure><p>  只显示文件名，不显示完整路径制定不显示某个后缀</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; touch dir1/dir2/test.demo.txt</span><br><span class="line">&gt; basename dir1/dir2/test.demo.txt .txt</span><br><span class="line">test.demo</span><br></pre></td></tr></table></figure><h1 id="2-17-dirname显示文件或目录的路径"><a href="#2-17-dirname显示文件或目录的路径" class="headerlink" title="2.17 dirname显示文件或目录的路径"></a>2.17 dirname显示文件或目录的路径</h1><p>  dirname命令用于只显示文件或目录的路径</p><p>  语法格式</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirname [&lt;文件或目录&gt;]</span><br></pre></td></tr></table></figure><p>  例子:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; dirname dir1/dir2/test.txt</span><br><span class="line">dir1/dir2</span><br></pre></td></tr></table></figure><h1 id="2-18-chattr改变文件的扩展属性"><a href="#2-18-chattr改变文件的扩展属性" class="headerlink" title="2.18 chattr改变文件的扩展属性"></a>2.18 chattr改变文件的扩展属性</h1><p>  charttr命令用户改变文件的扩展属性，相比chmod命令不同的是，chmod只是改变文件的读写执行权限，而更底层的权限属性控制是由charttr来改变的．</p><p>  语法格式</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chattr [选项] [模式] [&lt;文件或目录&gt;]</span><br></pre></td></tr></table></figure><p>  提示:<code>lsattr</code>命令可以查看文件的属性</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-R</td><td>递归更改目录属性</td></tr><tr><td>-V</td><td>显示执行过程</td></tr><tr><td>mode</td><td></td></tr><tr><td>+</td><td>增加参数</td></tr><tr><td>-</td><td>移除参数</td></tr><tr><td>=</td><td>更新为指定参数</td></tr><tr><td>A</td><td>指定文件的最后访问时间不可修改</td></tr><tr><td>a</td><td>指定文件只能添加数据，无法删除数据<code>!</code></td></tr><tr><td>!</td><td>指定文件不能被删除，重命名，写入或新增内容</td></tr></tbody></table><p>  例子：</p><p>  <strong>给文件加锁，使其只能为只读</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; chattr +i test.txt</span><br><span class="line">&gt; lsattr test.txt</span><br><span class="line">----i---------e----- test.txt</span><br><span class="line">&gt; echo a1111 &gt; test.txt</span><br><span class="line">zsh: 不允许的操作: test.txt</span><br><span class="line">&gt; echo b2222 &gt;&gt; test.txt </span><br><span class="line">zsh: 不允许的操作: test.txt</span><br></pre></td></tr></table></figure><p>  <strong>给文件解锁</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; charttr -i test.txt</span><br><span class="line">&gt; lsattr test.txt</span><br><span class="line">--------------e----- test.txt</span><br><span class="line">&gt; eco 111 &gt; test.txt</span><br><span class="line">&gt; cat test.txt</span><br><span class="line">111</span><br></pre></td></tr></table></figure><h1 id="2-19-lsattr查看文件扩展属性"><a href="#2-19-lsattr查看文件扩展属性" class="headerlink" title="2.19 lsattr查看文件扩展属性"></a>2.19 lsattr查看文件扩展属性</h1><p>  lsattr命令用于查看文件扩展属</p><p>  语法格式</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsattr [选项] [&lt;文件或目录&gt;]</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-R</td><td>递归查看目录的扩展属性</td></tr><tr><td>-a</td><td>显示所有文件的扩展属性</td></tr><tr><td>-d</td><td>显示目录的扩展属性</td></tr></tbody></table><p>  例子:</p><p>  <strong>查看文件的扩展属性</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; lsattr test.txt</span><br><span class="line">--------------e----- test.txt</span><br><span class="line">&gt; chattr +i test.txt</span><br><span class="line">&gt; lsattr test.txt</span><br><span class="line">----i---------e----- test.txt</span><br></pre></td></tr></table></figure><p>  <strong>查看目录的扩展属性</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; lsattr -d testDir</span><br><span class="line">--------------e----- testDir</span><br><span class="line">&gt; chattr +i testDir</span><br><span class="line">&gt; lsattr -d testDir</span><br><span class="line">----i---------e----- testDir</span><br></pre></td></tr></table></figure><h1 id="2-20-file显示文件的类型"><a href="#2-20-file显示文件的类型" class="headerlink" title="2.20 file显示文件的类型"></a>2.20 file显示文件的类型</h1><p>  file命令用于显示文件的类型</p><p>  语法格式</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file [选项] [&lt;文件或目录&gt;]</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-b</td><td>输出信息使用精简格式</td></tr></tbody></table><p>  例子:</p><p>  <strong>查看文件类型</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; file test.txt</span><br><span class="line">test.txt: empty</span><br><span class="line">&gt; file *</span><br><span class="line">test.txt:      empty</span><br><span class="line">test.txt.link: symbolic link to test.txt</span><br></pre></td></tr></table></figure><h1 id="2-21-md5sum计算和校验文件的MD5值"><a href="#2-21-md5sum计算和校验文件的MD5值" class="headerlink" title="2.21 md5sum计算和校验文件的MD5值"></a>2.21 md5sum计算和校验文件的MD5值</h1><p>  md5sum命令用于计算和校验文件的MD5值.</p><p>  语法格式</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md5sum [选项] [文件]</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-b</td><td>二进制模式读取文件</td></tr><tr><td>-c</td><td>从指定文件中读取MD5校验值，并进行校验</td></tr><tr><td>-t</td><td>文本模式读取文件，默认</td></tr><tr><td>–quiet</td><td>校验文件时，若通过不输出OK</td></tr><tr><td>–status</td><td>校验文件时，不输出任何信息，但可通过命令的返回值判断</td></tr></tbody></table><p>  例子:</p><p>  <strong>生成一个文件的MD5值</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; md5sum test.txt</span><br><span class="line">d41d8cd98f00b204e9800998ecf8427e  test.txt</span><br></pre></td></tr></table></figure><p>  <strong>校验文件MD5值是否发生改变</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; md5sum test.txt &gt; md5.log</span><br><span class="line">&gt; cat md5.log</span><br><span class="line">d41d8cd98f00b204e9800998ecf8427e  test.txt</span><br><span class="line">&gt; md5sum -c md5.log</span><br><span class="line">test.txt: 成功</span><br><span class="line">&gt; echo &quot;update&quot; &gt;&gt; test.txt</span><br><span class="line">&gt; md5sum -c md5.log</span><br><span class="line">test.txt: 失败</span><br><span class="line">md5sum: 警告：1 个校验和不匹配</span><br><span class="line">&gt; md5sum --status -c md5.log</span><br><span class="line">&gt; echo $?</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h1 id="2-22-chown改变文件或目录的用户和用户组"><a href="#2-22-chown改变文件或目录的用户和用户组" class="headerlink" title="2.22 chown改变文件或目录的用户和用户组"></a>2.22 chown改变文件或目录的用户和用户组</h1><p>  chown命令用于改变文件或目录的用户和用户组</p><p>  语法格式</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown [选项] [用户:用户组] [&lt;文件或目录&gt;]</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-R</td><td>递归更改目录的用户和用户组</td></tr></tbody></table><p>  例子:</p><p>  <strong>更改文件所属的用户属性</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; ls -l test.txt</span><br><span class="line">-rw-r--r-- 1 root root 5  6月 27 00:31 test.txt</span><br><span class="line"># 授予权限的用户必须存在</span><br><span class="line">&gt; chown xxx test.txt</span><br><span class="line">chown: 无效的用户: “xxx”</span><br><span class="line">&gt; chown evanmeek test.txt</span><br><span class="line">&gt; ls -l test.txt</span><br><span class="line">-rw-r--r-- 1 evanmeek root 5  6月 27 00:31 test.txt</span><br></pre></td></tr></table></figure><p>  <strong>更改文件所属用户组的属性</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; ls -l</span><br><span class="line">总用量 4.0K</span><br><span class="line">-rw-r--r-- 1 evanmeek evanmeek 5  6月 27 00:34 test.txt</span><br><span class="line">&gt; chown .root test.txt</span><br><span class="line">&gt; ls -l</span><br><span class="line">总用量 4.0K</span><br><span class="line">-rw-r--r-- 1 evanmeek root 5  6月 27 00:34 test.txt</span><br></pre></td></tr></table></figure><p>  <strong>同时更改文件的用户和用户组属性</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; chown evanmeek:evanmeek test.txt</span><br><span class="line">&gt; ls -l</span><br><span class="line">总用量 4.0K</span><br><span class="line">-rw-r--r-- 1 evanmeek evanmeek 5  6月 27 00:34 test.txt</span><br></pre></td></tr></table></figure><p>  <strong>递归更改目录下所有文件及目录的用户和用户组属性</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; tree</span><br><span class="line">.</span><br><span class="line">├── dir0</span><br><span class="line">│   └── test.txt</span><br><span class="line">├── dir1</span><br><span class="line">│   └── test.txt</span><br><span class="line">└── dir2</span><br><span class="line">    └── test.txt</span><br><span class="line"></span><br><span class="line">3 directories, 3 files</span><br><span class="line">&gt; chown -R root:root .</span><br><span class="line">&gt; ls -l</span><br><span class="line">总用量 12K</span><br><span class="line">drwxr-xr-x 2 root root 4.0K  6月 27 01:14 dir0</span><br><span class="line">drwxr-xr-x 2 root root 4.0K  6月 27 01:14 dir1</span><br><span class="line">drwxr-xr-x 2 root root 4.0K  6月 27 01:14 dir2</span><br></pre></td></tr></table></figure><h1 id="2-23chmod改变文件或目录权限"><a href="#2-23chmod改变文件或目录权限" class="headerlink" title="2.23chmod改变文件或目录权限"></a>2.23chmod改变文件或目录权限</h1><p>  只有文件的属主以及超级用户<code>root</code>才能执行此命令</p><p>  语法格式</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod [选项] [模式] [&lt;文件或目录&gt;]</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-R</td><td>递归指定目录以及子目录的权限</td></tr></tbody></table><p>  权限对应表</p><table><thead><tr><th>权限位</th><th>全称</th><th>含义</th><th>对应数字</th></tr></thead><tbody><tr><td>r</td><td>read</td><td>可读权限</td><td>4</td></tr><tr><td>w</td><td>write</td><td>可写权限</td><td>2</td></tr><tr><td>x</td><td>execute</td><td>可执行权限</td><td>1</td></tr><tr><td>-</td><td></td><td>没有任何权限</td><td>0</td></tr><tr><td>备注</td><td>一些特殊权限位:t,T,s,S,x,X</td><td></td><td></td></tr><tr><td>用户类型</td><td>文件所属用户:u(OwnerUser)</td><td></td><td></td></tr><tr><td>用户类型</td><td>文件所属用户组:g(Group)</td><td></td><td></td></tr><tr><td>用户类型</td><td>其他用户:o(Other)</td><td></td><td></td></tr><tr><td>用户类型</td><td>所有:a(ALL),等效于u,g,o的总和</td><td></td><td></td></tr><tr><td>操作字符</td><td>+:添加/-:减去/=:设置</td><td></td></tr></tbody></table><p>  例子:</p><p>  <strong>权限字母和操作符表达式</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; ls -l</span><br><span class="line">总用量 4</span><br><span class="line">-rw-r--r-- 1 evanmeek evanmeek 4  6月 25 17:43 test.txt</span><br><span class="line"># 给文件所属用户减去可写权限</span><br><span class="line">&gt; chmod u-w test.txt</span><br><span class="line"># 给用户所属用户组减去可读权限</span><br><span class="line">&gt; chmod g-r test.txt</span><br><span class="line">&gt; ls -l</span><br><span class="line">总用量 4.0K</span><br><span class="line">-r-----r-- 1 evanmeek evanmeek 4  6月 25 17:43 test.txt</span><br><span class="line"># 给所有用户以及用户组都设置为可读可写可执行的权限</span><br><span class="line">&gt; chmod a=rwx test.txt</span><br><span class="line">&gt; ls -l</span><br><span class="line">总用量 4.0K</span><br><span class="line">-rwxrwxrwx 1 evanmeek evanmeek 4  6月 25 17:43 test.txt</span><br></pre></td></tr></table></figure><p>  <strong>使用数字更改文件或目录权限</strong></p><p>  先举个例子，有这么一个文件</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rw-rw---- 1 evanmeek evanmeek 4  6月 25 17:43 test.txt</span><br></pre></td></tr></table></figure><p>  权限示意图</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">前三个字符代表文件属主的权限</span><br><span class="line">中间三个字符代表文件属组的权限</span><br><span class="line">后三个字符代表其他用户的权限</span><br><span class="line">-rw-rw---- evanmeek evanmeek test.txt</span><br></pre></td></tr></table></figure><p>  <strong>我们将每三个字符为一组将其权限位对应的数字加起来，代表这个文件的数字权限，例如上面的这个文件它的数字权限就是:660</strong></p><p>  <em>因为(-+r+w)(-+r+w)(-+-+-)等价于(0+4+2)(0+4+2)(0+0+0)=660</em></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 将test.txt文件的所有用户权限设置为可读可写可执行</span><br><span class="line">&gt; chmod 777 test.txt</span><br><span class="line">&gt; ls -l</span><br><span class="line">---------- 1 evanmeek evanmeek 4  6月 25 17:43 test.txt</span><br></pre></td></tr></table></figure><p>  <strong>使用数字递归更改文件或目录的权限</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; tree</span><br><span class="line">.</span><br><span class="line">├── dir0</span><br><span class="line">│   └── file.txt</span><br><span class="line">├── dir1</span><br><span class="line">│   └── file.txt</span><br><span class="line">└── dir2</span><br><span class="line">    └── file.txt</span><br><span class="line">&gt; ls -l</span><br><span class="line">总用量 12K</span><br><span class="line">drwxr-xr-x 2 evanmeek evanmeek 4.0K  6月 28 20:59 dir0</span><br><span class="line">drwxr-xr-x 2 evanmeek evanmeek 4.0K  6月 28 20:59 dir1</span><br><span class="line">drwxr-xr-x 2 evanmeek evanmeek 4.0K  6月 28 20:59 dir2</span><br><span class="line">&gt; chmod -R 777 dir&#123;0..2&#125;</span><br><span class="line">总用量 12K</span><br><span class="line">drwxrwxrwx 2 evanmeek evanmeek 4.0K  6月 28 20:59 dir0</span><br><span class="line">drwxrwxrwx 2 evanmeek evanmeek 4.0K  6月 28 20:59 dir1</span><br><span class="line">drwxrwxrwx 2 evanmeek evanmeek 4.0K  6月 28 20:59 dir2</span><br></pre></td></tr></table></figure><p>  <strong>Linux普通文件的读，写，执行权限说明</strong><br>  | 权限    | 说明                       |<br>  |———|—————————-|<br>  | 可读r   | 表示具有读取文件内容的权限 |<br>  | 可写w   | 表示具有修改文件内容的权限 |<br>  | 可执行x | 表示具有执行文件的权限     |</p><ul><li><p>可写w</p><ol><li>如果文件没有可读权限r，使用vi编辑器，执行vi命令wq!可以强制覆盖，但源文件会内容会被清除．所以我们可以使用echo &gt;&gt;　的方式进行追加.</li><li>删除文件(修改文件)的权限是受父目录的权限控制，和文件本身无关，文件名在父目录的block里</li></ol></li><li><p>可执行x</p><ol><li>要求文件本身是可执行的</li><li>普通用户必须要有r权限才能够执行</li><li>root用户即使没有r权限，只需要有x权限即可执行</li><li>不管root用户位有没有执行权限，只要其他用户位有x执行权限，那么都可被root执行</li></ol><p><strong>Linux目录的，写，执行权限说明</strong><br>| 权限    | 说明                                       |<br>|———|——————————————–|<br>| 可读r   | 表示具有浏览目录下文件以及子目录的权限     |<br>| 可写w   | 表示具有增加，删除或修改目录内文件名的权限 |<br>| 可执行x | 表示具有进入目录的权限                     |</p></li><li><p>可读r</p><ol><li>没有x权限不能进入至目录内</li><li>ls列表可以看到所有文件名，不过会提示无法访问目录下的文件</li><li>如果ls -l列表，则所有的属性会带有文件，也会提示无权限访问目录下的文件，但是可以看到文件名</li></ol></li><li><p>可写w</p><ol><li>增加的不是文件内容，而是创建新文件</li><li>修改的不是文件内容(根据文件本身权限的不同)，只能修改文件名，</li><li>删除也是删除文件，而不是看文件本身的权限，是看目录的权限，如果没有x权限则不能删除</li></ol></li><li>可执行权限x<ol><li>没有可读权限r则不能进入目录</li><li>没有可写权限w则无法创建新文件</li></ol></li></ul><h1 id="2-24-chgrp更改文件用户组"><a href="#2-24-chgrp更改文件用户组" class="headerlink" title="2.24 chgrp更改文件用户组"></a>2.24 chgrp更改文件用户组</h1><p>  此命令被<code>chown</code>取代，用法和参数都和<code>chown</code>命令相同</p><h1 id="2-25-umask显示或设置权限掩码"><a href="#2-25-umask显示或设置权限掩码" class="headerlink" title="2.25 umask显示或设置权限掩码"></a>2.25 umask显示或设置权限掩码</h1><p>  umask是通过八进制的数值来定义用户创建文件或目录的默认权限</p><p>  语法格式</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umask [选项] [模式]</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-p</td><td>输出的权限掩码可直接作为命令来执行</td></tr><tr><td>-S</td><td>以字符的方式输出权限掩码</td></tr></tbody></table><h2 id="2-25-2-通过umask计算文件目录权限"><a href="#2-25-2-通过umask计算文件目录权限" class="headerlink" title="2.25.2 通过umask计算文件目录权限"></a>2.25.2 通过umask计算文件目录权限</h2><p>  <strong>文件权限的计算</strong></p><p>  创建文件默认的最大权限为666，也就是说没有可执行权限x.</p><p>  umask文件权限的计算方式是，将文件的数字权限与umask(系统设置的权限值)相减，如果得到的数字有一位是偶数，那么则为最终结果，如果为奇数，那么需要将奇数位+1变成偶数，得到最终的结果。</p><p>  例子:</p><p>  假如umask值为:022，那么:<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  6 6 6 文件默认的权限</span><br><span class="line">  0 2 2 umask值</span><br><span class="line">- =====</span><br><span class="line">  6 4 4 都为偶数，最终结果为644</span><br></pre></td></tr></table></figure></p><p>  假如umask值为:045，那么:<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    6 6 6 文件默认的权限</span><br><span class="line">    0 4 5 umask值</span><br><span class="line">- =====</span><br><span class="line">    6 2 1 其他用户权限位为奇数，所以+1</span><br><span class="line">    0 0 1</span><br><span class="line">+ =====</span><br><span class="line">    6 2 2 都为偶数，最终结果为622</span><br></pre></td></tr></table></figure></p><p>  <strong>目录权限的计算</strong></p><p>  <em>目录权限的计算没有奇偶之分</em></p><p>  创建目录是默认的最大权限为777(-rwx-rwx-rwx)</p><p>  计算方法和文件权限计算方法相同</p><p>  例子:</p><p>  假如umask值为:022，那么:<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  7 7 7 目录默认最大权限</span><br><span class="line">  0 2 2 umask值</span><br><span class="line">- =====</span><br><span class="line">  7 5 5 得到最终结果</span><br></pre></td></tr></table></figure></p><p>  <strong>查看系统默认的umask值</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 普通用户的默认umask值</span><br><span class="line">evanmeek &gt; umask</span><br><span class="line">022</span><br><span class="line"># 超级用户的默认umask值</span><br><span class="line">root &gt; umask</span><br><span class="line">0022</span><br></pre></td></tr></table></figure><p>  <strong>-S参数的使用</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; umask -S</span><br><span class="line">u=rwx,g=rx,o=rx</span><br></pre></td></tr></table></figure><p>  <strong>-p参数的使用</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; umask -p</span><br><span class="line">umask 0022</span><br></pre></td></tr></table></figure><p>  <strong>临时修改umask值</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 修改umask之前</span><br><span class="line">&gt; umask</span><br><span class="line">&gt; ls -l file1</span><br><span class="line">-rw-r--r-- 1 evanmeek evanmeek 0  6月 30 19:11 file1</span><br><span class="line"># 修改umask之后</span><br><span class="line">&gt; umask 044</span><br><span class="line">&gt; umask</span><br><span class="line">044</span><br><span class="line">&gt; touch file2</span><br><span class="line">&gt; ls -l file1</span><br><span class="line">-rw--w--w- 1 evanmeek evanmeek 0  6月 30 19:12 file2</span><br></pre></td></tr></table></figure><p>  <strong>永久修改umask值</strong></p><p>  <em>若无特殊需求，请不要修改umask值，系统默认的umask值是系统安全的临界点，也是最合适的。</em></p><p>  编辑<code>/etc/profile</code>或者<code>/etc/bashrc</code></p><p>  找到<code>umask</code>项修改即可</p>]]></content>
      
      
      <categories>
          
          <category> Linux系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-Linux命令行简介-man命令</title>
      <link href="/2019/06/15/Linux-Linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%80%E4%BB%8B-man%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/06/15/Linux-Linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%80%E4%BB%8B-man%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>本篇文章为Linux系列的第1章 Linux命令行简介 1.2小节的外部展示。</p><a id="more"></a><h1 id="1-2-1-使用man获取命令帮助信息"><a href="#1-2-1-使用man获取命令帮助信息" class="headerlink" title="1.2.1 使用man获取命令帮助信息"></a>1.2.1 使用man获取命令帮助信息</h1><p>man命令的作用:</p><ul><li><p>查看命令的使用帮助</p></li><li><p>查看软件服务配置文件</p></li><li><p>查看系统调用信息</p></li><li><p>查看C库函数帮助信息</p></li></ul><p>man命令的使用:</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man 参数选项 命令/文件</span><br></pre></td></tr></table></figure><p>man命令可选参数:</p><table><thead><tr><th>参数</th><th>英文说明</th><th>中文说明</th></tr></thead><tbody><tr><td>1</td><td>User Commands</td><td>用户命令相关</td></tr><tr><td>2</td><td>System Calls</td><td>系统调用相关</td></tr><tr><td>3</td><td>C Library Functions</td><td>C的库函数相关</td></tr><tr><td>4</td><td>Devices and Special Files</td><td>设备与特殊文件相关</td></tr><tr><td>5</td><td>File Formats and Conventions</td><td>文件格式和规则</td></tr><tr><td>6</td><td>Games et. Al.</td><td>游戏及其他</td></tr><tr><td>7</td><td>Miscellanea</td><td>宏，包及其他杂项</td></tr><tr><td>8</td><td>System Admin tools and Deamons</td><td>系统管理员命令和进程</td></tr></tbody></table><p>  例子:</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看cp命令的使用帮助</span><br><span class="line">man cp</span><br><span class="line"><span class="meta">#</span> 查看C语言printf函数的使用帮助</span><br><span class="line">man 3 printf</span><br></pre></td></tr></table></figure><p>man命令信息的格式</p><table><thead><tr><th>标签</th><th>说明(<code>!</code>表示重点)</th></tr></thead><tbody><tr><td>NAME</td><td>命令说明及介绍<code>!</code></td></tr><tr><td>SYNOPSIS</td><td>命令的基本使用语法<code>!</code></td></tr><tr><td>DESCRIPTION</td><td>命令的详细描述，有的命令会单独使用标签介绍COMMANDS LINE OPTION或OPTIONS<code>!</code></td></tr><tr><td>OPTIONS</td><td>命令参数选项说明</td></tr><tr><td>COMMANDS</td><td>执行某个软件时可附加的软件的命令</td></tr><tr><td>FILES</td><td>程序涉及的相关文件</td></tr><tr><td>EXAMPLES</td><td>命令的例子<code>!</code></td></tr><tr><td>SEE ALSO</td><td>命令相关信息的说明</td></tr><tr><td>BUGS(REPORTING BUGS)</td><td>命令对应缺陷问题的描述</td></tr><tr><td>COPYRIGHT</td><td>版权信息相关声明</td></tr><tr><td>AUTHOR</td><td>作者介绍</td></tr></tbody></table><p>man命令信息操作键</p><table><thead><tr><th>操作键</th><th>功能说明</th></tr></thead><tbody><tr><td>Page Down</td><td>向下翻页</td></tr><tr><td>Page Up</td><td>向上翻页</td></tr><tr><td>Home</td><td>跳转到第一页</td></tr><tr><td>End</td><td>跳转到最后一页</td></tr><tr><td>/</td><td>向下查找某个字符</td></tr><tr><td>?</td><td>向上查找某个字符</td></tr><tr><td>n,N</td><td>当使用向上查找，那么n则为下一个，N为上一个。当使用向下查找，那么则取反</td></tr><tr><td>q</td><td>结束本次man帮助</td></tr></tbody></table><h1 id="1-2-2-使用–help参数获取命令帮助信息"><a href="#1-2-2-使用–help参数获取命令帮助信息" class="headerlink" title="1.2.2 使用–help参数获取命令帮助信息"></a>1.2.2 使用–help参数获取命令帮助信息</h1><p>  例子:</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$ ls --help</span><br></pre></td></tr></table></figure><p>  输出如下:</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">用法：ls [选项]... [文件]...</span><br><span class="line">列出给定文件（默认为当前目录）的信息。</span><br><span class="line">如果不指定 -cftuvSUX 中任意一个或--sort 选项，则根据字母大小排序。</span><br><span class="line"></span><br><span class="line">必选参数对长短选项同时适用。</span><br><span class="line">-a, --all                     不隐藏任何以. 开始的项目</span><br><span class="line">-A, --almost-all              列出除. 及.. 以外的任何项目</span><br><span class="line">    --author                  与-l 同时使用时列出每个文件的作者</span><br><span class="line">-b, --escape                  以八进制溢出序列表示不可打印的字符</span><br></pre></td></tr></table></figure><h1 id="1-2-3-使用help命令获取命令帮助信息"><a href="#1-2-3-使用help命令获取命令帮助信息" class="headerlink" title="1.2.3 使用help命令获取命令帮助信息"></a>1.2.3 使用help命令获取命令帮助信息</h1><p>  例子:</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$ help cd</span><br></pre></td></tr></table></figure><p>  输出如下:</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cd: cd [-L|[-P [-e]] [-@]] [目录]</span><br><span class="line">  改变 shell 工作目录。</span><br><span class="line">  </span><br><span class="line">  改变当前目录至 DIR 目录。默认的 DIR 目录是 shell 变量 HOME</span><br><span class="line">  的值。</span><br><span class="line">  </span><br><span class="line">  变量 CDPATH 定义了含有 DIR 的目录的搜索路径，其中不同的目录名称由冒号 (:)分隔。</span><br><span class="line">  一个空的目录名称表示当前目录。如果要切换到的 DIR 由斜杠 (/) 开头，则 CDPATH</span><br><span class="line">  不会用上变量。</span><br><span class="line">  </span><br><span class="line">  如果路径找不到，并且 shell 选项 `cdable_vars' 被设定，则参数词被假定为一个</span><br><span class="line">  变量名。如果该变量有值，则它的值被当作 DIR 目录。</span><br></pre></td></tr></table></figure><h1 id="1-2-4-使用info获取帮助信息"><a href="#1-2-4-使用info获取帮助信息" class="headerlink" title="1.2.4 使用info获取帮助信息"></a>1.2.4 使用info获取帮助信息</h1><p>  例子:</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$ info cd</span><br></pre></td></tr></table></figure><p>  即可打开cd的文档信息，操作跟man的使用方式相似。</p><h1 id="1-2-5-从互联网搜索获取命令帮助信息"><a href="#1-2-5-从互联网搜索获取命令帮助信息" class="headerlink" title="1.2.5 从互联网搜索获取命令帮助信息"></a>1.2.5 从互联网搜索获取命令帮助信息</h1><p>  <a href="https://www.google.com" target="_blank" rel="noopener">Google</a><br>  <a href="https://www.bing.com" target="_blank" rel="noopener">Bing</a><br>  <a href="https://www.github.com" target="_blank" rel="noopener">Github</a><br>  <a href="https://stackoverflow.com" target="_blank" rel="noopener">StackOverFlow</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-Linux命令行简介-0</title>
      <link href="/2019/06/15/Linux-Linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%80%E4%BB%8B-0/"/>
      <url>/2019/06/15/Linux-Linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%80%E4%BB%8B-0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-1-Linux命令行概述"><a href="#1-1-Linux命令行概述" class="headerlink" title="1.1 Linux命令行概述"></a>1.1 Linux命令行概述</h1><h2 id="1-1-1-Linux命令行的作用与意义"><a href="#1-1-1-Linux命令行的作用与意义" class="headerlink" title="1.1.1 Linux命令行的作用与意义"></a>1.1.1 Linux命令行的作用与意义</h2><p>  Linux命令行相比图形界面操作的优点:</p><ul><li><p>快速</p></li><li><p>批量</p></li><li><p>自动化</p></li><li><p>智能化管理</p></li></ul><h2 id="1-1-2-Linux命令行介绍"><a href="#1-1-2-Linux命令行介绍" class="headerlink" title="1.1.2 Linux命令行介绍"></a>1.1.2 Linux命令行介绍</h2><p>  大多数互联网企业在使用Linux不会安装图形界面，而是才用文本模式（命令行）的方式进行使用，如图:</p><p>  <img src="/2019/06/15/Linux-Linux命令行简介-0/1.1.2-0" alt="命令行图"></p><h2 id="1-1-3-Linux命令行的开启及退出"><a href="#1-1-3-Linux命令行的开启及退出" class="headerlink" title="1.1.3 Linux命令行的开启及退出"></a>1.1.3 Linux命令行的开启及退出</h2><p>  主机开机时，Linux将会进行初始化等各种操作，最终将进入命令行，想使用必须先登录。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user login:_</span><br><span class="line">password:_</span><br></pre></td></tr></table></figure><p>  等待你输入用户名密码，密码输入时是不会显示的。</p><p>  使用<code>exit</code>,<code>logout</code>或者<code>Ctrl+d</code>快捷键可退出登录，若退出则需要重新登录才会被允许使用Shell命令。</p><h2 id="1-1-4-Linux命令行提示符介绍"><a href="#1-1-4-Linux命令行提示符介绍" class="headerlink" title="1.1.4 Linux命令行提示符介绍"></a>1.1.4 Linux命令行提示符介绍</h2><p>  Linux命令提示符分为两种，分别是:</p><ul><li><code>$</code>普通用户</li><li><p><code>#</code>超级管理员(root)</p><p>例子:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$:_</span><br><span class="line">[root@EvanLinux ~]#:_</span><br></pre></td></tr></table></figure><p>其中@前面的为当前登录的<code>用户名(username)</code>,@后面的为<code>主机名(hostname)</code>，主机名后面的<code>~</code>为路径，代表了<code>home目录</code>，而<code>$</code>或<code>#</code>分别代表了用户的是超级管理员还是普通用户。</p><blockquote><p>超级管理员从此以后本系列都以<code>root</code>代表。</p></blockquote><p>root与普通用户的区别：</p></li><li><p>root</p><blockquote><p>拥有管理整个系统的权限。</p></blockquote></li><li><p>普通用户</p><blockquote><p>权限较少，通常只有查看系统文件的权限，以及管理自身<code>home</code>目录下所有文件的权限。</p></blockquote><p>查看当前登录的用户名:使用<code>whoami</code>查询<br>查看主机名:使用<code>hostname</code>查询</p><p>额外技巧: Linux命令提示符由<code>PS1</code>环境变量控制，通过修改<code>PS1</code>环境变量，可以让提示符发生变化，例子如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek@EvanLinux ~]$ set|grep PS1</span><br><span class="line">PS1='[\u@\h \W]\$'</span><br></pre></td></tr></table></figure></li></ul><p>  <code>PS1</code>有特殊的变量可供选择，我们可以设置全局配置文件<code>/etc/bashrc</code>或/etc/profile`进行按需配置。</p><h2 id="1-1-5-Linux命令行常用快捷键"><a href="#1-1-5-Linux命令行常用快捷键" class="headerlink" title="1.1.5 Linux命令行常用快捷键"></a>1.1.5 Linux命令行常用快捷键</h2><p>  企业工作中，管理Linux通常使用远程连接工具连接到Linux，常见的工具有: <code>SecureCRT</code>和<code>XShell</code>,以下快捷键可在此两款软件中使用。</p><p>  记住常用的快捷键有利于提高效率，常用快捷键由<code>!</code>标注</p><table><thead><tr><th>快捷键</th><th>功能说明(<code>!</code>为常用)</th></tr></thead><tbody><tr><td>最有用的快捷键</td><td></td></tr><tr><td>tab</td><td>命令或路径的补全键，Linux最有用的快捷键<code>!</code></td></tr><tr><td>移动光标快捷键</td><td></td></tr><tr><td>Ctrl+a</td><td>移动光标至行首<code>!</code></td></tr><tr><td>Ctrl+e</td><td>移动光标至行尾<code>!</code></td></tr><tr><td>Ctrl+f</td><td>光标向右移动一个字符(等价与方向键右键)</td></tr><tr><td>Ctrl+b</td><td>光标向左移动一个字符(同上)</td></tr><tr><td>剪切、粘贴、清楚快捷键</td><td></td></tr><tr><td>Ctrl+Insert</td><td>复制命令行内容<code>!</code></td></tr><tr><td>Shift+Insert</td><td>粘贴命令行内容<code>!</code></td></tr><tr><td>Ctrl+k</td><td>剪切(删除)光标处至行尾的字符<code>!</code></td></tr><tr><td>Ctrl+u</td><td>剪切(删除)光标处至行首的字符<code>!</code></td></tr><tr><td>Ctrl+w</td><td>剪切(删除)光标前一个单词<code>!</code></td></tr><tr><td>Ctrl+y</td><td>粘贴上面三个剪切(删除)的字符</td></tr><tr><td>Ctrl+c</td><td>终止终端正在执行的任务或删除整行字符<code>!</code></td></tr><tr><td>Ctrl+h</td><td>删除光标前一个字符(等同于Backspace)<code>!</code></td></tr><tr><td>重复执行命令快捷键</td><td></td></tr><tr><td>Ctrl+d</td><td>退出当前Shell命令行<code>!</code></td></tr><tr><td>Ctrl+r</td><td>搜索命令历史记录<code>!</code></td></tr><tr><td>Ctrl+g</td><td>退出搜索命令历史记录</td></tr><tr><td>控制快捷键</td></tr><tr><td>Ctrl+l</td><td>清屏(等同于clear命令)<code>!</code></td></tr><tr><td>Ctrl+s</td><td>锁定终端，使之无法输入</td></tr><tr><td>Ctrl+q</td><td>解锁锁定终端</td></tr><tr><td>Ctrl+z</td><td>暂停执行终端运行中的任务<code>!</code></td></tr><tr><td>!开头的快捷键命令</td></tr><tr><td>!!</td><td>执行上一条命令</td></tr><tr><td>!pw</td><td>执行最近一次以pw开头的命令<code>!</code></td></tr><tr><td>!pw:p</td><td>打印输出最近以pwd开头的命令，不执行</td></tr><tr><td>!num</td><td>执行历史命令列表的第num(数字)条命令<code>!</code></td></tr><tr><td>!$</td><td>上一条命令的最后一个参数，等同于<code>Esc+.</code></td></tr><tr><td>ESC相关</td></tr><tr><td>Esc+.</td><td>获取上一条命令的最后部分<code>!</code></td></tr><tr><td>Esc+b</td><td>移动到当前单词的开头</td></tr><tr><td>Esc+f</td><td>移动到当前单词的结尾</td></tr></tbody></table><h1 id="1-2-在Linux命令行下查看命令帮助"><a href="#1-2-在Linux命令行下查看命令帮助" class="headerlink" title="1.2 在Linux命令行下查看命令帮助"></a>1.2 在Linux命令行下查看命令帮助</h1><p>  man命令是Linux很重要的一个命令，它可以帮助我们查看命令的使用方法和一些信息。</p><p>  由于篇幅较大，请点击链接单独查看本章附录man命令。</p><p>  <a href="/2019/06/15/Linux-Linux命令行简介-man命令/">点击访问</a></p><h1 id="1-3-Linux关机、重启、注销命令"><a href="#1-3-Linux关机、重启、注销命令" class="headerlink" title="1.3 Linux关机、重启、注销命令"></a>1.3 Linux关机、重启、注销命令</h1><p>  关机或重启命令:<code>shutdown</code></p><table><thead><tr><th>参数选项</th><th>说明</th></tr></thead><tbody><tr><td>-r</td><td>重启机器</td></tr><tr><td>-P</td><td>关闭机器电源(默认)</td></tr><tr><td>-H</td><td>暂停机器，CPU停止工作但不断电</td></tr><tr><td>-h</td><td>等效-P，除非使用了-H</td></tr><tr><td>-k</td><td>只发送关机提示,不做任何操作</td></tr><tr><td>-c</td><td>取消关机</td></tr></tbody></table><p>  例子:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 立即关机</span><br><span class="line">[evanmeek@EvanLinux ~]$ shutdown -h now</span><br><span class="line"># 立即重启 </span><br><span class="line">[evanmeek@EvanLinux ~]$ shutdonw -r now</span><br><span class="line"># 5分钟后关机</span><br><span class="line">[evanmeek@EvanLinux ~]$ shutdown -h +5</span><br><span class="line"># 1分钟后重启</span><br><span class="line">[evanmeek@EvanLinux ~]$ shutdown -r +1</span><br></pre></td></tr></table></figure><p>  重启或关机命令:<code>halt</code>/<code>poweroff</code>/<code>reboot</code></p><p>  <code>halt</code>和<code>poweroff</code>都是<code>reboot</code>的链接而已。</p><p>  <code>reboot</code>和<code>shutdown</code>都是<code>systemctl</code>的链接</p><p><strong>本章完，如果觉得我的笔记整理的好，可以给我个打赏，你的一块钱是对我最大的鼓励!</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fctix5安装与配置</title>
      <link href="/2019/06/14/fcitx5%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/06/14/fcitx5%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>某天下午，我在Telegram群组里受人安利Fcitx5,今晚正好有空，所以就安装了个试试，还挺好的。</p><a id="more"></a><p><img src="/2019/06/14/fcitx5安装与配置/输入.gif" alt="演示"></p><p>所需安装的软件包:</p><ul><li>fcitx5-git 输入法基础框架主程序</li><li>fcitx5-chinese-addons-git 简体中文输入的支持，云拼音</li><li>fcitx5-gtk-git gtk 程序的支持</li><li>fcitx5-qt4-git qt4 的支持</li><li>fcitx5-qt5-git qt5 的支持<br>可能还需要：</li><li>kcm-fcitx5-git 如果你用的是 KDE ，请装这个</li><li>fcitx5-rime-git 繁體中文輸入 RIME 中州韻輸入法引擎</li></ul><p>如果你是KDE桌面环境可以直接使用kcm-fcitx5-git配置输入法:</p><p><img src="/2019/06/14/fcitx5安装与配置/kcm.png" alt="kcm"></p><p>否则将改配置文件<code>~/.config/fcitx5/profile</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[Groups/0]</span><br><span class="line"># Group Name</span><br><span class="line">Name=Default</span><br><span class="line"># Layout</span><br><span class="line">Default Layout=us</span><br><span class="line"># Default Input Method</span><br><span class="line">DefaultIM=pinyin</span><br><span class="line"></span><br><span class="line">[Groups/0/Items/0]</span><br><span class="line"># Name</span><br><span class="line">Name=keyboard-us</span><br><span class="line"># Layout</span><br><span class="line">Layout=</span><br><span class="line"></span><br><span class="line">[Groups/0/Items/1]</span><br><span class="line"># Name</span><br><span class="line">Name=pinyin</span><br><span class="line"># Layout</span><br><span class="line">Layout=</span><br><span class="line"></span><br><span class="line">[GroupOrder]</span><br><span class="line">0=Default</span><br></pre></td></tr></table></figure><p><strong>若没有<code>fcitx5</code>这个目录，则先打开一次fcitx5，再关闭，因为fcitx5关闭时会覆盖此文件。</strong></p><p>由于fcitx5不能自动启动，我们需要添加环境变量</p><p>将如下内容添加到<code>~/.xprofile</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fcitx5 &amp;</span><br></pre></td></tr></table></figure><p>然后再将如下内容添加到~/.pam_environment`，没有则创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GTK_IM_MODULE=fcitx5</span><br><span class="line">XMODIFIERS=@im=fcitx</span><br><span class="line">QT_IM_MODULE=fcitx5</span><br></pre></td></tr></table></figure><p>KDE用户可以直接在<code>系统设置模块-自动启动</code>设置</p><p>默认的皮肤很丑，我们可以使用这个<a href="https://github.com/iovxw/fcitx5-simple-theme" target="_blank" rel="noopener">fcitx5-simple-theme</a></p><p>然后你就可以把fcitx4给删了…</p>]]></content>
      
      
      <categories>
          
          <category> 折腾日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fcitx5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Learn-Qt5-Qt模块简介</title>
      <link href="/2019/06/12/Learn-Qt5-Qt%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B/"/>
      <url>/2019/06/12/Learn-Qt5-Qt%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>Qt5分为两个大的模块，分别是<code>Qt Essentials</code>以及<code>Qt Add-Ons</code>以及一些额外的模块和工具．</p><a id="more"></a><h1 id="Qt-Essentials"><a href="#Qt-Essentials" class="headerlink" title="Qt Essentials"></a>Qt Essentials</h1><p><code>Qt Essentials</code>是Qt的基础，它可以在所有平台上运行，下面列出了Qt Essentials模块的组件．</p><table><thead><tr><th style="text-align:center">模块</th><th style="text-align:center">简述</th></tr></thead><tbody><tr><td style="text-align:center">Qt Core</td><td style="text-align:center">其他非图形类模块所使用的核心,</td></tr><tr><td style="text-align:center">Qt GUI</td><td style="text-align:center">图形界面组件的基类，包括了OpenGL.</td></tr><tr><td style="text-align:center">Qt Multimedia</td><td style="text-align:center">音频，视频，广播和摄像头相关功能.</td></tr><tr><td style="text-align:center">Qt Network</td><td style="text-align:center">提供跨平台的网络能力．</td></tr><tr><td style="text-align:center">Qt Qml</td><td style="text-align:center">提供QML使用的C++API.</td></tr><tr><td style="text-align:center">Qt Quick</td><td style="text-align:center">允许在Qt/C++程序中嵌入 Qt Quick</td></tr><tr><td style="text-align:center">Qt SQL</td><td style="text-align:center">允许使用SQL访问数据库</td></tr><tr><td style="text-align:center">Qt Test</td><td style="text-align:center">提供Qt程序的单元测试能力｜</td></tr><tr><td style="text-align:center">Qt Webkit</td><td style="text-align:center">基于WebKit2的实现以及一套全新的QML API</td></tr></tbody></table><h1 id="Qt-Add-Ons"><a href="#Qt-Add-Ons" class="headerlink" title="Qt Add-Ons"></a>Qt Add-Ons</h1><p><code>Qt Add-Ons</code>是Qt的扩展模块，建立在基础模块之上，在能运行Qt的平台之上可以酌情引人．</p><table><thead><tr><th style="text-align:center">模块</th><th style="text-align:center">简述</th></tr></thead><tbody><tr><td style="text-align:center">Qt 3D</td><td style="text-align:center">提供声明式语法，在Qt程序中可以简单地嵌入3D图像．｜</td></tr><tr><td style="text-align:center">Qt Bluetooth</td><td style="text-align:center">提供用于访问蓝牙无线设备的C++和QML API.</td></tr><tr><td style="text-align:center">Qt Contacts</td><td style="text-align:center">用于访问地址薄或联系人数据库的C++和QML API.</td></tr><tr><td style="text-align:center">Qt D-Bus</td><td style="text-align:center">Unix平台独有的类库，用于使用D-Bus协议进与进程间进行交互</td></tr><tr><td style="text-align:center">Qt Graphical Effects</td><td style="text-align:center">提供一系列用于实现图像特效的类</td></tr><tr><td style="text-align:center">Qt Image Formats</td><td style="text-align:center">支持图片格式的一系列插件</td></tr><tr><td style="text-align:center">Qt JS Backend</td><td style="text-align:center">为V8 JavaScript引擎的移植，仅供QtQML模块内部使用</td></tr><tr><td style="text-align:center">Qt Location</td><td style="text-align:center">方便在Qt应用程序中使用OpenGL，保留于Qt4</td></tr><tr><td style="text-align:center">Qt Organize</td><td style="text-align:center">使用QML和C++API访问组织事件｜</td></tr><tr><td style="text-align:center">Qt Print Support</td><td style="text-align:center">提供对打印功能的支持｜</td></tr><tr><td style="text-align:center">Qt Publish and Subscribe</td><td style="text-align:center">为应用程序提供对项目值的读取，导航，订阅等功能.</td></tr><tr><td style="text-align:center">Qt Quick 1</td><td style="text-align:center">从Qt4移植而来的Qt Declarative模块，用于提供与Qt4兼容</td></tr><tr><td style="text-align:center">Qt Script</td><td style="text-align:center">提供脚本化机制，为了与Qt5兼容</td></tr><tr><td style="text-align:center">Qt Script Tools</td><td style="text-align:center">为了使用Qt Script模块的应用程序提供的额外的组件</td></tr><tr><td style="text-align:center">Qt Sensors</td><td style="text-align:center">提供访问各类传感器的QML和C++接口.</td></tr><tr><td style="text-align:center">Qt Service Framework</td><td style="text-align:center">提供客户端发现其他设备的服务.</td></tr><tr><td style="text-align:center">Qt SVF</td><td style="text-align:center">提供渲染和创建SVG文件的功能．</td></tr><tr><td style="text-align:center">Qt System Info</td><td style="text-align:center">提供一套API，用于发现系统相关的信息.</td></tr><tr><td style="text-align:center">Qt Tools</td><td style="text-align:center">提供了Qt开发的方便工具,例如Qt CLucene,Qt Designer,Qt Help以及Qt UI Tools.</td></tr><tr><td style="text-align:center">Qt Versit</td><td style="text-align:center">提供了对Versit API的支持．</td></tr><tr><td style="text-align:center">Qt Wayland</td><td style="text-align:center">仅用于Linux平台，用户替代QWS</td></tr><tr><td style="text-align:center">Qt WebKit</td><td style="text-align:center">从Qt4 一直来的基于WebKit1和QWidget的API</td></tr><tr><td style="text-align:center">Qt Widgets</td><td style="text-align:center">使用C++扩展的Qt Gui模块，提供了一些界面组建，比如按钮，单选框</td></tr><tr><td style="text-align:center">Qt XML</td><td style="text-align:center">SAX和DOM的C++实现．此模块已凉凉，更换为QXmlStreamReader/Writer</td></tr><tr><td style="text-align:center">Qt XML Patterns</td><td style="text-align:center">提供对XPath,XQuery,XSLT和XML Schema验证的支持．</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> C_++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Learn-Qt5-自定义信号槽</title>
      <link href="/2019/06/11/Learn-Qt5-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BF%A1%E5%8F%B7%E6%A7%BD/"/>
      <url>/2019/06/11/Learn-Qt5-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BF%A1%E5%8F%B7%E6%A7%BD/</url>
      
        <content type="html"><![CDATA[<p>上一篇信号槽的学习，我们分析了QObject::connect()函数，使用connect()可以让我们连接Qt提供的信号，但Qt的信号槽机制还允许我们自定义的信号和槽，使得我们的程序更加的健壮，具有解耦性．</p><p>我们通过一个新闻和订阅者的例子讲解典型的观察者模式．</p><p>有一个报纸类<code>Newspaper</code>，有一个订阅者类<code>Subscriber</code>，<code>Subscriber</code>可订阅<code>Newspaper</code>，订阅后若<code>Newspaper</code>有了新内容，那么<code>Subscriber</code>则会立即得到通知．</p><p>上面这个案例的观察者是<code>Subscriber</code>，被观察者则是<code>Newspaper</code>．在实现代码时，观察者会将自身注册自被观察者的一个容器中．被观察者发生了任何变化时，便会通知这个容器的所有观察者．</p><p>下面，我们将用Qt的信号槽实现上面的的案例．</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//newspaper.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewsPaper</span> :</span> <span class="keyword">public</span> QObject &#123;</span><br><span class="line">  Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  NewsPaper(<span class="keyword">const</span> QString &amp;name) : m_name(name) &#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123; <span class="function">emit <span class="title">newPaper</span><span class="params">(m_name)</span></span>; &#125;</span><br><span class="line">signals:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">newPaper</span><span class="params">(<span class="keyword">const</span> QString &amp;name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  QString m_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//reader.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reader</span> :</span> <span class="keyword">public</span> QObject &#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">receiverNewsPaper</span><span class="params">(<span class="keyword">const</span> QString &amp;name)</span></span>&#123;</span><br><span class="line">        qDebug()&lt;&lt;<span class="string">"Newpaper:"</span>&lt;&lt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QCoreApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;newspaper.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;reader.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">  <span class="function">QCoreApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">  <span class="function">NewsPaper <span class="title">paper</span><span class="params">(<span class="string">"xx与xxx结婚了!"</span>)</span></span>;</span><br><span class="line">  Reader reader;</span><br><span class="line"></span><br><span class="line">  QObject::connect(&amp;paper, &amp;NewsPaper::newPaper, &amp;reader,</span><br><span class="line">                   &amp;Reader::receiverNewsPaper);</span><br><span class="line"></span><br><span class="line">  paper.send();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Newpaper:xx与xxx结婚了!</span><br></pre></td></tr></table></figure><p>我们看到<code>Reader</code>类和<code>Newspaper</code>类都继承了<code>QObject</code> 类，在Qt中，只有继承了<code>QObject</code>类的类才具有信号槽的能力．凡是<code>Object</code>类还是它的派生类或者是间接派生类，都应该在类体的第一行代码写上<code>Q_OBJECT</code>．这是一个宏，它为我们的类提供了信号槽额机制，国际化机制，以及Qt提供的反射能力（非C++ RTTI)．你可能会认为假如你的类不需要使用信号槽则不添加这个宏，那是错误的，因为它不仅仅提供了信号槽的能力，还有很多操作都依赖于这个宏．目前，只需要知道我们要将这个宏加在头文件内．</p><p>再看<code>Newspaper</code>类，它的代码很简单，只不过是加了一个signals关键字，signals所列出的块就是该类的信号．信号就是一个个的函数名，返回值为void，参数是该类需要让外界知道的数据.</p><p><code>Newspaper</code>类的<code>send()</code>函数比较简单，只有一条语句<code>emit newPaper(m_name);</code>. emit是Qt对C++的一个扩展关键字，但实际上也是一个宏．emit的翻译是发出，也就是发出<code>newPaper()</code>信号．如果有接受者关注这个信号，　那么还需要知道是哪条新闻发出的信号，所以我们将实际的新闻名字<code>m_name</code>以参数传递的方式给这个信号，当接收者收到这个信号时，就可通过槽函数获得实际的值，这样也就完成了数据从发出者到接受者的一个转移．</p><p><code>Reader</code>类是接受信号的，所以我们也需要继承<code>QObject</code>，并且添加<code>Q_OBJECT</code>宏．其他的代码则是默认构造函数和一个普通的成员函数．在Qt5中，任何成员函数,static函数,全局函数和Lamabda表达式都可以作为槽函数．槽函数其实也就是普通的成员函数，因此作为成员函数，也会收到public,private等访问控制符的影响．信号也会收到影响，因为如果信号是private的，那么这个信号就不能在类的外面使用，也就没有了意义．</p><p>main函数中，我们首先创建了<code>Newspaper</code>和<code>Reader</code>两个独享，然后使用<code>QObject::connect()</code>函数．这个然后我们调用<code>Newspaper</code>的<code>send()</code>函数．这个函数只有一个语句：发出信号．由于我们将<code>Newspaper</code>的信号和<code>Reader</code>的槽函数进行了连接，当这个信号发出时，那么将会自动调用<code>Reader</code>的槽函数．</p><p>总结自定义信号槽需要注意的事项:</p><ul><li>发送者和接收者都需要的是<code>QObject</code>的子类，若草函数是全局函数，Lambda表达式等其他无需接受者则除外．</li><li>使用signals标记信号函数，信号是一个函数声明，返回void，不需要实现函数代码；</li><li>使用emit发送信号</li><li>使用QObject::connect()函数连接信号和槽.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Qt5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Learn-Qt5-信号槽</title>
      <link href="/2019/06/10/Learn-Qt5-%E4%BF%A1%E5%8F%B7%E6%A7%BD/"/>
      <url>/2019/06/10/Learn-Qt5-%E4%BF%A1%E5%8F%B7%E6%A7%BD/</url>
      
        <content type="html"><![CDATA[<p>信号槽是Qt的一个很重要的特性，掌握信号槽是学好Qt的必要条件之一.</p><a id="more"></a><p>信号槽，我们可以理解为监听模式或者是观察者模式，当Qt的某个事件发生后，那么它就会发出一个信号，例如一个按钮(button)被点击(clicked)，那么它会发出一个信号.</p><p>但是这种信号是毫无目的的，但是如果我们使用连接(connect)函数，那么就可以使用由我们定义的函数(槽slot)来处理这个信号．</p><p>简而言之则是，当某个信号发出，被连接的槽函数则会被回调，这就是观察者模式；当这个信号有来连接的槽函数，那么某个操作则会被触发．</p><p>下面看代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPushButton&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">  <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">  <span class="function">QPushButton <span class="title">button</span><span class="params">(<span class="string">"Quit"</span>)</span></span>;</span><br><span class="line">  QObject::connect(&amp;button, &amp;QPushButton::clicked, &amp;QApplication::quit);</span><br><span class="line">  button.show();</span><br><span class="line">  <span class="keyword">return</span> a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行后，我们将会看到一个显示文本为Quit的Button，当我们点击它则会退出这个应用程序．</p><p>下面我们分析一下QObject::connect这个函数.</p><p>首先它拥有以下几种重载</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">QMetaObject::<span class="function">Connection <span class="title">connect</span><span class="params">(<span class="keyword">const</span> QObject *, <span class="keyword">const</span> <span class="keyword">char</span> *,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">const</span> QObject *, <span class="keyword">const</span> <span class="keyword">char</span> *,</span></span></span><br><span class="line"><span class="function"><span class="params">                                Qt::ConnectionType)</span></span>;</span><br><span class="line"></span><br><span class="line">QMetaObject::<span class="function">Connection <span class="title">connect</span><span class="params">(<span class="keyword">const</span> QObject *, <span class="keyword">const</span> QMetaMethod &amp;,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">const</span> QObject *, <span class="keyword">const</span> QMetaMethod &amp;,</span></span></span><br><span class="line"><span class="function"><span class="params">                                Qt::ConnectionType)</span></span>;</span><br><span class="line"></span><br><span class="line">QMetaObject::<span class="function">Connection <span class="title">connect</span><span class="params">(<span class="keyword">const</span> QObject *, <span class="keyword">const</span> <span class="keyword">char</span> *,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">const</span> <span class="keyword">char</span> *,</span></span></span><br><span class="line"><span class="function"><span class="params">                                Qt::ConnectionType)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">QMetaObject::<span class="function">Connection <span class="title">connect</span><span class="params">(<span class="keyword">const</span> QObject *, PointerToMemberFunction,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">const</span> QObject *, PointerToMemberFunction,</span></span></span><br><span class="line"><span class="function"><span class="params">                                Qt::ConnectionType)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line">QMetaObject::Connection connect(const QObject *, PointerToMemberFunction,Functor);</span><br></pre></td></tr></table></figure><p>每种重载的返回值都是QMetaObject::Connection，这里暂时不讨论，先让我们看看connect函数最常用的用法:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connect(sender,signal,receiver,slot);</span><br></pre></td></tr></table></figure><p>connect一般会接受前四个参数，第一个sender是发出信号的对象，第二个signal是sender发出的信号,第三个是接收信号的对象，第四个是receiver接收信号之后需要调用的参数．</p><p>简而言之，当sender对象发出signal信号由receiver对象接受再调用slot函数．</p><p>根据这个常用的形式，我们可以依次分析connect的重载．</p><ul><li><p>第一种</p><blockquote><p>sender类型为常量QObject指针，signal为常量字符指针，receiver为常量Object指针，slot为常量字符指针，signal和slot都被作为字符串进行处理．</p></blockquote></li><li><p>第二种</p><blockquote><p>sender和receiver仍为常量Object指针，然而signal和slot则为QMetathod引用，由此我们可以对signal和slot进行比较</p></blockquote></li><li><p>第三种</p><blockquote><p>sender仍为const Object<em>，而signal和slot则是const char</em>，这里的reveiver被省略了，它由this指针代替.</p></blockquote></li><li><p>第四种</p><blockquote><p>sender和receiver仍为const Object *，而signal和slot则为PointerToMemberFunction，看其名知其意，PointerToMemberFunction则是一个指向成员函数的指针．</p></blockquote></li><li><p>第五种</p><blockquote><p>注意最后的Functor参数，它可以接收，static函数，全局函数以及Lambda表达式.</p></blockquote></li></ul><p>经过我们的分析，可以看出，connect()函数的参数里，sender和receiver没有什么区别，都是QObject指针，主要只有signal和slot的形式区别．</p><p>信号槽要求信号和槽的参数一致.一致也就是说，参数类型一致．如果不一致，只有槽函数的参数比信号的少的情况才允许，即使是这样，槽函数的参数列表的顺序也必须和信号参数一致．这是因为，你可以使槽函数忽略信号传的参数，但是不能说信号没有这个数据．</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Qt5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年的规划</title>
      <link href="/2019/06/09/2019%E5%B9%B4%E7%9A%84%E8%A7%84%E5%88%92/"/>
      <url>/2019/06/09/2019%E5%B9%B4%E7%9A%84%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>2019年已过半，今晚正好想整理下自己完成的2019年目标，顺便把自己2019年的目标分享在博客。</p><a id="more"></a><h1 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h1><p>《标准C++入门与编程实践》————————————————————已读完<br>《Linux系统管理完全手册》————————————————————在读<br>《Vim实用技巧》——————————————————————————————未读<br>《计算机网络教程》———————————————————————————未读<br>《Qt5编程入门》——————————————————————————————在读</p><h1 id="想学但未学"><a href="#想学但未学" class="headerlink" title="想学但未学"></a>想学但未学</h1><p>Adobe Photoshop<br>Adobe AfterEffects<br>Adobe Primiere</p><h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><p>想多拿起相机拍拍美好的世界，</p><p>想找个女朋友，</p><p>想减肥，</p><p>想写操作系统….</p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Learn-Qt5-HelloWorld</title>
      <link href="/2019/06/08/Learn-Qt5-HelloWorld/"/>
      <url>/2019/06/08/Learn-Qt5-HelloWorld/</url>
      
        <content type="html"><![CDATA[<p>当我学习完C++的基础语法后，开始有了想制作拥有Gui界面的应用程序，所以我便选择了Qt，它具有可跨平台，并且已经有一些优质的中文教程可选．</p><p>那么就让我们从Qt5的HelloWorld开始吧!</p><a id="more"></a><p>第一步先创建一个项目</p><p>可以使用快捷键 <code>Ctrl+N</code> 即可呼出创建项目的菜单</p><p><img src="/2019/06/08/Learn-Qt5-HelloWorld/newProject.gif" alt="新建项目"></p><p>创建完成后可以看到右侧项目栏有了刚刚创建的项目，并且对不同类型的文件进行了区分</p><p>HelloWorld.pro: Qt的工程文件，由qmake处理</p><p>main.cpp: 里面就是main函数</p><p>mainwindows.cpp,mainwindows.h,mainwindows.ui这些就是我们创建项目时指定的名称。</p><p>至此，我们就可以编译并启动一个Qt5应用程序了，点击左下角的第一个绿色按钮则会进行编译运行的操作。</p><hr><p>现在我们需要在窗体上放上一个标签，这里标签的内容就是HelloWorld。</p><p>修改main.cpp文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QLabel&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    <span class="function">QLabel <span class="title">label</span><span class="params">(<span class="string">"HelloWorld"</span>)</span></span>;</span><br><span class="line">    label.show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再编译运行，我们则可看到一个显示”HelloWorld”的窗体程序。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Qt5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++的命名空间与作用域</title>
      <link href="/2019/05/30/C-%E7%9A%84%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
      <url>/2019/05/30/C-%E7%9A%84%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<p>本篇文章将会详细的讲解在使用C++时一些关于作用域的易错点，以及在各模块之间有同名冲突问题要如何利用命名空间解决．</p><a id="more"></a><h1 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a><strong>命名空间</strong></h1><blockquote><p>也称为名字空间，可以解决多模块同名冲突的问题</p></blockquote><h2 id="命名空间的作用"><a href="#命名空间的作用" class="headerlink" title="命名空间的作用"></a><strong>命名空间的作用</strong></h2><p>在日后的开发工作中，总是团队开发，那么可能会因为个人习惯问题，造成对左值命名相同．那么在使用两个不同的库时，可能会有两个相同的对象，那么就会出现命名冲突．</p><p>解决这种冲突的方法就是在定义时加上前缀，在使用时指定命名空间的作用域即可，这就是命名空间．</p><h2 id="定义命名空间"><a href="#定义命名空间" class="headerlink" title="定义命名空间"></a><strong>定义命名空间</strong></h2><p>定义命名空间很简单只需要使用<code>namespace</code>关键字即可</p><p>我们可以定义一个命名空间将自己的类，函数或对象包括起来:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> myspace&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="keyword">int</span> a;</span><br><span class="line">      Test(<span class="keyword">int</span> a):<span class="keyword">this</span>-&gt;a(a)&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">Test <span class="title">t</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> myspace;</span><br><span class="line"></span><br><span class="line">  <span class="function">Test <span class="title">t</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;t.a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与类的成员类似，这些对象，函数，类，被称为名字空间的成员．</p><h2 id="using声明"><a href="#using声明" class="headerlink" title="using声明"></a><strong>using声明</strong></h2><blockquote><p>using namespace <code>命名空间名</code>;</p></blockquote><p>在前面的内容中，已经不知不觉地使用上了名字空间，例如:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"hello"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>using声明语句告诉编译器可以尝试者从std命名空间内查找cout和endl.</p><h2 id="using指令"><a href="#using指令" class="headerlink" title="using指令"></a><strong>using指令</strong></h2><p>倘若我们只需要使用<code>std</code>命名空间中的<code>cout</code>和<code>endl</code>成员，那么可以通过using指令指定待使用的命名空间的成员.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"hello"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>using指明会明确的告诉编译器，将使用到std命名空间中cout和endl，这样就不需要编译器依次查找了，效率会提高一点.</p><h2 id="命名空间的别名"><a href="#命名空间的别名" class="headerlink" title="命名空间的别名"></a><strong>命名空间的别名</strong></h2><p>如果命名空间都有相同的名称了，我们还可以对它设置一个别名，用于区分.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> myStd = <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">myStd::<span class="built_in">cout</span>&lt;&lt;<span class="string">"hello"</span>&lt;&lt;myStd::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>其中<code>myStd</code>作为<code>std</code>命名空间的别名．</p><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a><strong>作用域</strong></h1><blockquote><p>可以简称为<code>域</code>,是指对象的可见性问题</p></blockquote><p>C++目前支持3种作用域:</p><ul><li><p>局部作用域(local scope);</p></li><li><p>名字作用域(namespace scope);</p></li><li><p>类域(calss scope);</p></li></ul><h2 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a><strong>局部作用域</strong></h2><p>在每段语句块都包含一个局部的作用域，在这个语句块中声明的对象仅在当前语句块内部起作用．</p><p>例如，函数体，循环体都是局部作用域:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//error a超过了作用域，访问不到foo()函数内部的a变量</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//error i超过了for的作用域，i是for的局部变量</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p><strong>提示:在Visual C++6.0中上述代码将i输出不会报错，因为它没有遵循该项C++标准，但在VC2003和Dev-C++中都会报错.</strong></p><p>下面再看一个case语句块的作用域</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">choose</span><span class="params">(<span class="number">-1</span>)</span></span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;choose;</span><br><span class="line"><span class="keyword">switch</span>(choose)&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="comment">//error:重定义了str</span></span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若不用<code>{}</code>将代码括起来，那么就会出现重定义的错误，因为在同一个作用域下定义了两个string str变量，正确的代码如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">choose</span><span class="params">(<span class="number">-1</span>)</span></span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;choose;</span><br><span class="line"><span class="keyword">switch</span>(choose)&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//error:重定义了str</span></span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过加上<code>{}</code>使得给每个case块加上了不同的作用域，也就解决了重定义的问题．</p><h2 id="函数的作用域"><a href="#函数的作用域" class="headerlink" title="函数的作用域"></a><strong>函数的作用域</strong></h2><p>函数体和上面提到的作用域一样，在函数体内声明的变量，只能在函数体内访问．</p><p>函数体内部包括花括号内的代码以及函数的形参列表，它们都受函数的作用域限制．</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">  <span class="comment">//正常访问i变量</span></span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//error 未声明i变量</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>当函数之间互相调用也是有单独的作用域的，例如递归代码，注意观察i的值，每次调用自身时i的值都是不同的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    foo(i/<span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="局部变量的存储类型"><a href="#局部变量的存储类型" class="headerlink" title="局部变量的存储类型"></a><strong>局部变量的存储类型</strong></h1><p>你可能听说过:自动存储类型，静态存储类型，但是你听过<code>寄存器存储类型</code>么?</p><p>不同的存储类型，决定了C++编译器存储这些属性的空间和方式.</p><h2 id="自动存储类型"><a href="#自动存储类型" class="headerlink" title="自动存储类型"></a><strong>自动存储类型</strong></h2><p>在默认情况下，我们定义的变量就属于自动存储类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在foo()函数体执行完毕后<code>a</code>变量将会自动释放，我们也可以换种写法:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">auto</span> <span class="keyword">int</span> <span class="title">a</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样做只不过为了显式的说明这个是个自动存储类型的变量</p><p>我们还可以使用类函数观测自动存储类型的销毁时间:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line"></span><br><span class="line">    Test(<span class="keyword">int</span> a);</span><br><span class="line"></span><br><span class="line">    ~Test();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Test::Test(<span class="keyword">int</span> a) : a(a) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"创建["</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="string">"]"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test::~Test() &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"销毁["</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="string">"]"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Test <span class="title">t</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">创建[0x7fff82f501c0]</span><br><span class="line">创建[0x7fff82f501c4]</span><br><span class="line">销毁[0x7fff82f501c4]</span><br><span class="line">销毁[0x7fff82f501c0]</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>以上代码就可观测到自动存储类型变量的自动销毁过程．</p><p><strong>注意，由于自动存储类型变量会自动销毁，所以我们不要保存自动存储类型变量的地址，因为在对象销毁后，它不再具有我们程序赋予它的意义．</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">auto</span> Test <span class="title">t</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">  <span class="keyword">return</span> &amp;t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="寄存器存储类型"><a href="#寄存器存储类型" class="headerlink" title="寄存器存储类型"></a><strong>寄存器存储类型</strong></h2><p>寄存器存储类型继承于C语言，我们在对这种类型的变量进行存储数据时程序将会从寄存器中获取，而非内存，这样可以提高效率，这常常用于被频繁使用的变量．</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽说C++继承了C语言的寄存器存储类型这一特性，但我们对一个变量加上<code>register</code>仅仅只能说是一种期望，因为有些编译器可能不会理会我们，编译器可能更清楚，如何处理这个变量更加高效．</p><h2 id="静态存储类型"><a href="#静态存储类型" class="headerlink" title="静态存储类型"></a><strong>静态存储类型</strong></h2><p>静态存储变量特殊在于:它超出局部作用域的时候，却依然不会被销毁．</p><p>请看下面的代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> _a;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Test(<span class="keyword">int</span> a) : _a(a) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"创建["</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="string">"]"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~Test() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"销毁["</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="string">"]"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//静态变量</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Test <span class="title">t</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"t对象已销毁"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用第一次</span></span><br><span class="line">    foo();</span><br><span class="line">    <span class="comment">//调用第二次</span></span><br><span class="line">    foo();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">创建[0x5645e7afa19c]</span><br><span class="line">t对象已销毁</span><br><span class="line">t对象已销毁</span><br><span class="line">销毁[0x5645e7afa19c]</span><br></pre></td></tr></table></figure><p>可以看到，我们调用了两次foo()函数，也就是创建了两次Test对象，但是最终输出的结果却只是创建了一次和销毁了一次，也就说的那个程序执行完第一次foo()函数后，静态变量<code>t</code>依然存在!</p><p><strong>常见用法</strong></p><p>程序员们偶尔会利用static的特性，让静态变量存储一些历史数据，不需要每次都销毁的数据.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">i</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    i++;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"第"</span> &lt;&lt; i &lt;&lt; <span class="string">"次调用foo()"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        foo();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第1次调用foo()</span><br><span class="line">第2次调用foo()</span><br><span class="line">第3次调用foo()</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>今天就先写到这里，继续学习了.</p><h1 id="命名空间域"><a href="#命名空间域" class="headerlink" title="命名空间域"></a><strong>命名空间域</strong></h1><h2 id="全局域"><a href="#全局域" class="headerlink" title="全局域"></a><strong>全局域</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局作用域下的varA</span></span><br><span class="line"><span class="keyword">int</span> varA=<span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    varA++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> varA=<span class="number">200</span>;</span><br><span class="line">    ::varA++;</span><br><span class="line">    <span class="comment">//输出内部作用域的varA</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;varA&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//输出全局作用域的varA</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;::varA&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    foo1();</span><br><span class="line">    foo2();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">200</span><br><span class="line">102</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>最外层的varA为全局作用域的变量，当内部作用域出现相同的变量名时，那么外层的变量将会被隐藏。</p><p>我们使用域操作符”::”来显式的指定作用域。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用算法-1</title>
      <link href="/2019/05/27/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95-1/"/>
      <url>/2019/05/27/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95-1/</url>
      
        <content type="html"><![CDATA[<p>这篇算法文章，是我3个月前的一个笔记，目前正好要做项目，得用到一些算法，所以就直接贴过来.</p><a id="more"></a><h1 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h1><blockquote><p>本页理解几个常用的算法</p></blockquote><hr><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p><strong>冒泡排序是一种稳定的排序算法</strong></p><blockquote><p>稳定即是，如果相邻的元素相同，不会再去进行调换位置</p></blockquote><p>冒排的运作是(从后往前)。</p><p>我们操作数组来进行演示。</p><p>我们首先定义一个整型数组里面存储几个整型数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//待排序的数列</span></span><br><span class="line"><span class="keyword">int</span>[] nums = &#123;<span class="number">9</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">25</span>&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>基本思路：比较相邻的元素，如果前一个元素比后一个元素大，那么则调换位置。</p></blockquote><p><strong>每排序一轮那么下一轮就将排序元素的个数-1，因为每轮排序都会把当前轮数的最大元素放在最后。</strong></p><p>我们尝试先用大脑来演示排序的过程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//未排序时</span><br><span class="line">9 6 4 3 10 25</span><br><span class="line"></span><br><span class="line">6 9 3 4 10 25 //第一轮 调换了2次</span><br><span class="line">6 3 4 9 10 //第二轮 调换了2次</span><br><span class="line">3 4 6 9 //第三轮 调换了2次</span><br><span class="line">3 4 6 //第四轮 调换了0次</span><br><span class="line">3 4 //第五轮 调换了0次</span><br></pre></td></tr></table></figure></p><p>我们可以看到我们这组数据只需要排序三轮就可以排序成功，<strong>排序轮数是数组长度-1轮</strong>，调换次数是看数组相邻元素的大小关系，这个我们不用知道，<strong>我们只需要记住，排序轮数是数组长度-1就好。</strong></p><p>那么在代码中我们要如何将其进行调换呢？</p><p>有两种方式，通常来说我们可以定义一个临时变量，让相邻元素进行调换位置。</p><blockquote><p>了解了基本思路，我们直接进行代码编写吧！</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="comment">//待排序的数列</span></span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123;<span class="number">9</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">25</span>&#125;;</span><br><span class="line">        <span class="comment">//临时变量，用于调换位置</span></span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="comment">//第一层循环，控制轮数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="comment">//第二层，控制每轮要进行排序的元素数量</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;nums.length-<span class="number">1</span>-i;j++)&#123;</span><br><span class="line">                <span class="comment">//如果当前元素比后一个元素大那么则调换元素值</span></span><br><span class="line">                <span class="keyword">if</span>(nums[j]&gt;nums[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="comment">//我们先把当前元素的后一个元素放入临时变量存储,防止被当前元素覆盖</span></span><br><span class="line">                    temp = nums[j+<span class="number">1</span>];</span><br><span class="line">                    <span class="comment">//把当前元素的值覆盖后一个元素</span></span><br><span class="line">                    nums[j+<span class="number">1</span>] = nums[j];</span><br><span class="line">                    <span class="comment">//再把当前元素存入后一个元素的值(刚刚保存在temp变量里的)</span></span><br><span class="line">                    nums[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历输出</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num:nums)&#123;</span><br><span class="line">            System.out.println(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刚刚说了有两种方式进行调换，是因为我们操作的数据是整型(int)的所以，我们可以使用加减的方式做到调换位置。</p><p><strong>引用上面的代码，把tem变量删除，将调换元素值的代码更换成如下代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*为了方便理解，我们这里就用上面数组下标为0和1的值(9,6)来进行演*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这个if不用加，我只是让你们知道是哪些代码</span></span><br><span class="line"><span class="keyword">if</span>(nums[j]&gt;nums[j+<span class="number">1</span>])&#123;</span><br><span class="line">    <span class="comment">//当前元素的值是与后一个元素值的和</span></span><br><span class="line">    nums[j] = nums[j]+nums[j+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//上一行代码等同于 nums[j] = 9 + 6</span></span><br><span class="line">    <span class="comment">//执行完上一行代码，nums[j] = 15;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行完此行代码nums[j+1] = 9</span></span><br><span class="line">    <span class="comment">//等价于 nums[j+1]= 15 - 6</span></span><br><span class="line">    nums[j+<span class="number">1</span>] = nums[j]-nums[j+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行完此行代码nums[j] = 6</span></span><br><span class="line">    <span class="comment">//等价于 nums[j] = 15 - 9</span></span><br><span class="line">    nums[j] = nums[j] - nums[j+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种调换方式有点绕，不过仔细看看代码的注释那是很容易理解的！</p><p>下一记: <strong>选择排序算法</strong></p><hr><h2 id="选择排序算法"><a href="#选择排序算法" class="headerlink" title="选择排序算法"></a>选择排序算法</h2><blockquote><p>首先，找到数组中最小的那个元素，其次，将它和数组的第一个元素交换位置（如果第一个元素就是最小元素那么它就和自己交换）。再次，在剩下的元素中找到最小的元素，将它与数组的第二个元素交换位置。如此往复，直到将整个数组排序。这种方法叫做选择排序，因为它在不断地选择剩余元素之中的最小值。</p></blockquote><p>上面这个引用是网上随便抄的一个思路。</p><p>这次我们依旧是从小到大排序，选择排序和冒泡排序不同的是每一轮排序，它只调换一次位置，这个具体调换谁，就是选择排序的核心了。</p><p>我们每轮排序时都需要找到最小的元素，然后把它的下标记录下来，进行调换，第二轮排序时就不再比较刚刚记录的最小的元素了，所以依靠这种方式就可以实现排序的操作。</p><p>下面我们直接看代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//需要排序的数组</span></span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123;<span class="number">6</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">25</span>, <span class="number">10</span>&#125;;</span><br><span class="line">        <span class="comment">//记录每轮排序时最小元素的下标</span></span><br><span class="line">        <span class="keyword">int</span> minIndex;</span><br><span class="line">        <span class="comment">//第一层循环控制轮数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            minIndex = i;<span class="comment">//假设当前轮最小元素下标为i</span></span><br><span class="line">            <span class="comment">//内层循环要记录出当前轮最小元素的下标</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">                <span class="comment">//比较两个相邻元素的大小</span></span><br><span class="line">                <span class="keyword">if</span> (nums[minIndex] &gt; nums[j]) &#123;</span><br><span class="line">                    <span class="comment">//由于找到新的最小值，所以记录一下</span></span><br><span class="line">                    minIndex = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果最小值记录的和我们假设的值是一样，说明这一轮最小的元素就是它，所以不需要进行调换位置</span></span><br><span class="line">            <span class="keyword">if</span> (minIndex != i) &#123;</span><br><span class="line">                <span class="comment">//下面代码都是为了让第一个元素和最小元素进行调换位置，因为是从小至大</span></span><br><span class="line">                nums[minIndex] += nums[i];</span><br><span class="line">                nums[i] = nums[minIndex] - nums[i];</span><br><span class="line">                nums[minIndex] -= nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历输出排序后的结果</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            System.out.println(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小结：选择排序是每一轮排序都把最小的元素和没有排序时的元素进行调换位置，然后每进行一轮后，最小元素不会进入排序的操作。</p><p>下一节，二分查找算法</p><hr><h2 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h2><blockquote><p>这是一种查询算法，效率高，但有个要求，必须是一串有序的数列。</p></blockquote><p>二分查找，见名知意，即是将数列分为两半来查找，取一个中间值，也就是说数组长度的中间值，基本思路是:</p><ul><li>定义起始查找位，结束查找位</li><li>求得数组长度中间值都</li><li>如果要查找的值比中间值小，那么肯定就是在二分的左边，也就是说比中间值小的值。</li><li>如果要查找的值比中间值大，那么肯定就是在二分的右边，也就是说说比中间值大的值。</li><li>如果要查找的值等于中间值，那么直接返回中间值的下标即可</li><li>如果都没找到，那么返回-1.</li></ul><p>看了这个概念，我们还得注意几点</p><p>需要一个循环，循环是为了让每次查找时未找到可以将起始位置或结束位置改变，起始位置和结束位置取决与中间值和要查的值的关系，如果中间值大，那么起始位置就应该为0，结束位置就应该为中间值-1，也就是说中间值的左边，如果中间值大则反过来，如果相等，则直接返回，因为已经查找到了。</p><p>好了，我们直接看代码吧！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nums[] = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">78</span>,<span class="number">90</span>,<span class="number">100</span>,<span class="number">300</span>&#125;;</span><br><span class="line">        System.out.println(binarySearch(nums,<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二分查找法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums　要查找的数列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key　要查找的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">        <span class="comment">//起始下标</span></span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//结束下标</span></span><br><span class="line">        <span class="keyword">int</span> end = nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//起始查询的下标不能超过结束下标</span></span><br><span class="line">        <span class="keyword">while</span>(start&lt;=end)&#123;</span><br><span class="line">            <span class="comment">//中间的下标，如果是下标长度是偶数，那么则是去小数点取整数的值</span></span><br><span class="line">            <span class="keyword">int</span> middle = (start+end)/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//如果中间下标的值比要查找的值大</span></span><br><span class="line">            <span class="keyword">if</span>(nums[middle]&gt;key)&#123;</span><br><span class="line">                <span class="comment">//要查找的值那肯定是在二分的左边，所以结束下标就以中分下标长度－１开始查找</span></span><br><span class="line">                end = middle-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[middle]&lt;key)&#123;</span><br><span class="line">                <span class="comment">//二分的右边开始查找</span></span><br><span class="line">                start = middle+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//如果要查找的值就是二分下标的值，那么直接返回即可</span></span><br><span class="line">                <span class="keyword">return</span> middle;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果没有查找到那么则返回-1代表没有查找到</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何自学编程?</title>
      <link href="/2019/05/23/%E5%A6%82%E4%BD%95%E8%87%AA%E5%AD%A6%E7%BC%96%E7%A8%8B/"/>
      <url>/2019/05/23/%E5%A6%82%E4%BD%95%E8%87%AA%E5%AD%A6%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>前几日，我在Telegram上创建了个Linux的讨论群组反响挺好，不过都是各大高校或者已在工作的大佬们入群。</p><p>今天舍友请邀家做客，吃完饭我们在操场上散步，我脱了鞋，走了几圈想到，</p><p>为什么不把我身边的同学们集合起来创建一个讨论群组，回到宿舍我便创建了群组，由于每个人能力有限，不是谁都可以翻墙的，所以我就用微信群作为讨论的地方。</p><a id="more"></a><h1 id="0x0-制定目标"><a href="#0x0-制定目标" class="headerlink" title="0x0 制定目标"></a>0x0 制定目标</h1><p>这个目标最好是十分远大的，并且必须是准确的。</p><p>例如你说你要赚很多钱，但是你并不知道你要怎样做才能赚很多钱，你可以想，你要赚很多钱，通过卖保险…然后开始学习销售方面的才能。</p><p>制定目标是最重要的，你可以花几天的时间去想这件事，因为，一旦下定目标，你就需要全力以赴奔向它。</p><h1 id="0x1-选择方向"><a href="#0x1-选择方向" class="headerlink" title="0x1 选择方向"></a>0x1 选择方向</h1><p>你可能需要面对的是该学什么，我是推荐前期选一门比较热门的编程语言开始学习，在学习过程中多了解软件开发这个世界，你自然会有很多选择。</p><p>当然，我这里是推荐学习C++，虽然它曾经被我的偶像<code>Linus Torvalds</code>臭骂一顿，但由于要考试，再加上这门语言的语法非常灵活，极具智慧的初学者可以有很多种<code>hack</code>玩法。</p><h1 id="0x2-学习过程"><a href="#0x2-学习过程" class="headerlink" title="0x2 学习过程"></a>0x2 学习过程</h1><p>在你选定你要学习的目标后，你必须有一个正确的学习心态和学习方法，我这里只提我自己的学习心态和学习方法。</p><h2 id="0x21学习心态"><a href="#0x21学习心态" class="headerlink" title="0x21学习心态"></a>0x21学习心态</h2><p>我对编程是随和的，我可以从中获得快乐，快乐至上才是最重要的，你需要尝试用代码来使你快乐，可以把一些你感兴趣事物与代码结合，我相信你会爱上编程的。</p><h2 id="0x22学习方法"><a href="#0x22学习方法" class="headerlink" title="0x22学习方法"></a>0x22学习方法</h2><p><code>不要问，去调试，去反编译</code></p><p>这句话虽说有些偏执，但确实很有效，很多时候答案不是靠别人，而是要靠你自己研究出来的，一套好教材提供的学习线路基本都是环环相扣，甚至可以跳节选学，倘若你是一步一步学习的，那么你遇到的问题肯定可以从你所学的知识获得解答。</p><p><code>多写代码，多讨论，尝试新想法</code></p><p>多写代码是必须的，你可能会说，我很菜，我都不知道写什么代码，我怎么办。我推荐你抄代码，抄别人的代码，看别人是怎么写的，你就抄下来，尝试理解。倘若抄得很吃力，我建议你换个选择，倘若在抄代码过程中，能大概理解其运作方式，你可以与群组的人们进行讨论，这样既可以自己学习也可以让别人学习。</p><p>多讨论，上面很多次提到讨论，事实上，讨论就是十分重要的，你可以在讨论时获取到大量知识，若你感兴趣完全可以研究别人所提到的技术，再回头进行讨论，技术提升就是这么来的。</p><p>尝试新想法，往往一个程序，可以有很多种写法，你可以尝试着思考如何用更简短或者更易懂的方式重写一遍，使得程序更健壮和执行速度更快。</p><h1 id="0x3-充分利用互联网"><a href="#0x3-充分利用互联网" class="headerlink" title="0x3 充分利用互联网"></a>0x3 充分利用互联网</h1><p>虽说我国的互联网事实上是局域网，但是也不影响我们小白进行学习，网上的优质教程有特别多，而且大多是免费的。</p><p>不仅仅是从互联网上获取教程，互联网上可以说是什么都有，你想要的一切只有你找不到的，没有不存在的，有兴趣的可以百度搜索一下<code>原子弹制作从入门到精通</code>。这边推荐一个更好的利用搜索引擎的文章<a href="https://www.zhihu.com/question/23622803" target="_blank" rel="noopener">点击访问</a></p><h1 id="0x4-读书"><a href="#0x4-读书" class="headerlink" title="0x4 读书"></a>0x4 读书</h1><p>在学习的过程中，我们可能会遇到很多坑，在很多书籍中讲的很明白、透彻，所以阅读技术类书籍是能大大提高我们水平的，但有个缺点，不是谁都能读完一本书。</p><p>推荐书籍以后会写。</p><h1 id="0x5-推荐学习"><a href="#0x5-推荐学习" class="headerlink" title="0x5 推荐学习"></a>0x5 推荐学习</h1><p><a href="https://www.bilibili.com/video/av41559729" target="_blank" rel="noopener">C++视频教程</a></p><p><a href="http://bestcbooks.com/recommended-cpp-books/" target="_blank" rel="noopener">C++书籍</a></p><p><a href="https://www.bilibili.com/video/av24736323" target="_blank" rel="noopener">Git视频教程</a></p><h1 id="0x6-其他"><a href="#0x6-其他" class="headerlink" title="0x6 其他"></a>0x6 其他</h1><p>如果你是Windows系统，那么推荐<a href="https://visualstudio.microsoft.com/zh-hans/?rr=https%3A%2F%2Fwww.microsoft.com%2Fzh-hk%2F" target="_blank" rel="noopener">Visual Studio</a>作为你的编程工具。</p><p>如果你是Linux系统，那么推荐<a href="https://www.jetbrains.com/clion/download/download-thanks.html" target="_blank" rel="noopener">CLion</a>作为你的编程工具。</p><p>如果你是OS X系统，抱歉没用过苹果系统，应该是Xcode。</p><p>推荐学习资源:<a href="https://www.codedream.xin/archives/learning-material-list" target="_blank" rel="noopener">点击访问</a></p><h1 id="0x7-讨论群组"><a href="#0x7-讨论群组" class="headerlink" title="0x7 讨论群组"></a>0x7 讨论群组</h1><p><img src="/2019/05/23/如何自学编程/群组.png" alt="群组"></p>]]></content>
      
      
      <categories>
          
          <category> 个人感想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人感想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++读写文件</title>
      <link href="/2019/05/22/C-%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6/"/>
      <url>/2019/05/22/C-%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>一些简单的读写文件的操作。</p><a id="more"></a><p><strong>本篇文章使用C++<code>fstream</code>头文件提供的库函数进行读写操作</strong></p><blockquote><p>请引入#include \&lt;fstream>进行下面的操作。</p></blockquote><h1 id="写入"><a href="#写入" class="headerlink" title="写入"></a><strong>写入</strong></h1><p>写入文件步骤如下:</p><ol><li><p>实例化ofstream对象，或者fstream对象.</p><blockquote><p>ofstream ofs;</p></blockquote></li><li><p>打开文件流</p><blockquote><p>ofs.open(const std::string &amp;<strong>s,ios_base::open</strong>mode=ios_base::out);</p></blockquote></li><li><p>写入文件</p><blockquote><p>ofs&lt;&lt;;</p></blockquote></li><li><p>关闭文件流</p><blockquote><p>ofs.close();</p></blockquote></li></ol><p><strong>注意打开文件流函数的参数分别为<code>路径</code>和<code>打开方式</code>.</strong></p><p>常用的打开方式如下:</p><table><thead><tr><th style="text-align:center">模式标识</th><th style="text-align:center">适用对象</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">ios::int</td><td style="text-align:center">ifstream,fstream</td><td style="text-align:center">打开输入,默认用于<code>ifstream</code>和<code>fstream</code></td></tr><tr><td style="text-align:center">ios::out</td><td style="text-align:center">ofstream,fstream</td><td style="text-align:center">打开输出，默认用于<code>ofstream</code>和<code>fstream</code></td></tr><tr><td style="text-align:center">ios::trunc</td><td style="text-align:center">ofstream</td><td style="text-align:center">打开输入，默认用户<code>ofstream</code></td></tr><tr><td style="text-align:center">ios::ate</td><td style="text-align:center">ifstream</td><td style="text-align:center">打开并且在打开后将文件指针指向文件末尾，若文件不存在，则出错</td></tr><tr><td style="text-align:center">ios::app</td><td style="text-align:center">ostream,fstream</td><td style="text-align:center">打开输出，并且将数据输出至文件末尾，相当与追加</td></tr><tr><td style="text-align:center">iso::binary</td><td style="text-align:center">ifstream,ofstream,fstream</td><td style="text-align:center">以二进制的方式打开文件，进行输入或输出</td></tr></tbody></table><p>以上所有的打开方式可以通过或<code>|</code>运算符进行联合使用，例如:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以二进制的方式打开输出</span></span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(path,ios::out|ios::binary)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>不管是读取操作还是写入操作，只要涉及打开文件函数的调用，我们都需要在使用完之后对文件进行一个关闭的操作</strong></p><p>好的，下面可以看例子了，我们将写入一些数据到一个文件内。</p><h2 id="以文本写入"><a href="#以文本写入" class="headerlink" title="以文本写入"></a><strong>以文本写入</strong></h2><blockquote><p>下面将读取两种不同类型的文件以作为案例进行讲解。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 写入文件</span></span><br><span class="line"><span class="comment"> * @param path 文件路径</span></span><br><span class="line"><span class="comment"> * @param context 内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeFile</span><span class="params">(<span class="built_in">string</span> path,<span class="built_in">string</span> context)</span></span>&#123;</span><br><span class="line">    <span class="comment">//实例化写入对象</span></span><br><span class="line">    ofstream ofs;</span><br><span class="line">    <span class="comment">//打开输出</span></span><br><span class="line">    ofs.open(path,ios::out);</span><br><span class="line">    <span class="comment">//向文件写入数据</span></span><br><span class="line">    ofs&lt;&lt;context&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//关闭输出</span></span><br><span class="line">    ofs.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//调用</span></span><br><span class="line">    writeFile(<span class="string">"./test.txt"</span>,<span class="string">"测试"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就将<code>测试</code>这个段文本信息，写入到当前目录下<code>test.txt</code>文件内了.</p><h2 id="以二进制文件写入"><a href="#以二进制文件写入" class="headerlink" title="以二进制文件写入"></a><strong>以二进制文件写入</strong></h2><p>以二进制文件方式写入，C++提供了<code>write()</code>库函数,它的函数原型是:</p><blockquote><p><code>write(const _CharT* __s, streamsize __n);</code></p></blockquote><p>其要求地一个参数为字符型指针，第二个参数为最大写入字符数大小。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student(<span class="keyword">char</span> name[<span class="number">64</span>], <span class="keyword">int</span> age) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(name); ++i)</span><br><span class="line">            <span class="keyword">this</span>-&gt;name[i] = name[i];</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;`</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 写入二进制文件</span></span><br><span class="line"><span class="comment"> * @param path </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeFileByBinary</span><span class="params">(<span class="built_in">string</span> path)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建输出流对象，并且指定路径和文件打开方式</span></span><br><span class="line">    <span class="function">ofstream <span class="title">ofs</span><span class="params">(path, ios::out | ios::binary)</span></span>;</span><br><span class="line">    Student *student = <span class="keyword">new</span> Student(<span class="string">"张三"</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写入文件</span></span><br><span class="line">    ofs.write((<span class="keyword">const</span> <span class="keyword">char</span> *) student, <span class="keyword">sizeof</span>(Student));</span><br><span class="line"></span><br><span class="line">    ofs.close();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> (student);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    writeFileByBinary(<span class="string">"student.bin"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们将类成员属性的值以二进制的方式写入进一个文件内。</p><p>最终文件内的内容人类是看不大懂的。</p><p><img src="/2019/05/22/C-读写文件/二进制文件.png" alt="二进制写"></p><p><strong>注意:以二进制方式写入文件,那么需要以二进制的方式读取文件，不然读出的数据将是乱码.</strong></p><h1 id="读取"><a href="#读取" class="headerlink" title="读取"></a><strong>读取</strong></h1><blockquote><p>下面将读取两种不同类型的文件以作为案例进行讲解。</p></blockquote><h2 id="以文本文件读取"><a href="#以文本文件读取" class="headerlink" title="以文本文件读取"></a><strong>以文本文件读取</strong></h2><p>读取有很多种方式，下面将会演示三种，分别是:</p><ul><li><p>逐行读取</p></li><li><p>逐词读取</p></li><li><p>逐字符读取</p></li></ul><hr><h3 id="逐字符读取-不推荐"><a href="#逐字符读取-不推荐" class="headerlink" title="逐字符读取(不推荐)"></a><strong>逐字符读取(不推荐)</strong></h3><p><strong>逐字符读取：通过输入流读取单个字符，再将读取到的字符存入容器中。因为是单个字符读取，所以效率较低。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 逐字符读取</span></span><br><span class="line"><span class="comment"> * @param path 路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readFile04</span><span class="params">(<span class="built_in">string</span> path)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//实例化读取操作对象</span></span><br><span class="line">    ifstream ifs;</span><br><span class="line">    <span class="comment">//打开文件</span></span><br><span class="line">    ifs.open(path, ios::in);</span><br><span class="line">    <span class="comment">//数据存储变量</span></span><br><span class="line">    <span class="keyword">char</span> cbuffer;</span><br><span class="line">    <span class="comment">//逐字符读取，并且将读取的内容复制给c,不再进行读的条件是当读取的字符为EOF，代表文件的结尾.</span></span><br><span class="line">    <span class="keyword">while</span> ((cbuffer = ifs.get()) != EOF) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; cbuffer &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ifs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>EOF</code>代表文件的末尾，它是一个宏，逐字符读取的条件为，若遇到文件末尾，也就代表读取完成。</p><h3 id="逐行读取-有两种方式，但都是逐行读取"><a href="#逐行读取-有两种方式，但都是逐行读取" class="headerlink" title="逐行读取(有两种方式，但都是逐行读取)"></a><strong>逐行读取(有两种方式，但都是逐行读取)</strong></h3><p>第一种：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 逐行读取</span></span><br><span class="line"><span class="comment"> * @param path 路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readFile02</span><span class="params">(<span class="built_in">string</span> path)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//实例化</span></span><br><span class="line">    fstream fs;</span><br><span class="line">    <span class="comment">//打开文件</span></span><br><span class="line">    fs.open(path, ios::in);</span><br><span class="line">    <span class="comment">//用字符数组进行缓存</span></span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">//逐行进行读取，getline(存储读取到的字符的字符数组,最大读取字符数)</span></span><br><span class="line">    <span class="keyword">while</span> (fs.getline(buffer, <span class="keyword">sizeof</span>(buffer))) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; buffer &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    fs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>字符数组</code>作为数据存储容器，用<code>fstream</code>对象的<code>getline()</code>函数调用，第一个参数为:存储读取到的数据的容器，第二个参数为最大读取数量，这里使用<code>sizeof()</code>是为了不出现数据过大，从而使得字符数组不够大，引发数组越界。</p><p>第二种:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 逐行读取</span></span><br><span class="line"><span class="comment"> * @param path 路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readFile03</span><span class="params">(<span class="built_in">string</span> path)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//实例化读取操作对象</span></span><br><span class="line">    ifstream ifs;</span><br><span class="line">    <span class="comment">//打开文件</span></span><br><span class="line">    ifs.open(path, ios::in);</span><br><span class="line">    <span class="comment">//数据存储容器</span></span><br><span class="line">    <span class="built_in">string</span> buffer;</span><br><span class="line">    <span class="comment">//使用全局函数getline(输入流，可存储的容器)进行逐行读取</span></span><br><span class="line">    <span class="keyword">while</span> (getline(ifs, buffer)) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; buffer &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ifs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与第一种方法相似，只不过是将数据存储容器更换为了string类型，但是使用的是全局函数<code>getline(输入对象,数据存储容器)</code>,它的第一个参数为：输入对象，也就是我们的读取对象，getline会把数据读入至制定的输入流内，再通过输入流存储至容器。</p><h3 id="逐词读取-以空格区分"><a href="#逐词读取-以空格区分" class="headerlink" title="逐词读取(以空格区分)"></a><strong>逐词读取(以空格区分)</strong></h3><p>逐词读取，将会已空格进行区分每个词汇，再读取。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 逐词读取文件</span></span><br><span class="line"><span class="comment"> * @param path 文件路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readFile01</span><span class="params">(<span class="built_in">string</span> path)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//实例化读取文件对象</span></span><br><span class="line">    ifstream ifs;</span><br><span class="line">    <span class="comment">//打开文件</span></span><br><span class="line">    ifs.open(path, ios::in);</span><br><span class="line">    <span class="comment">//判断文件是否能打开</span></span><br><span class="line">    <span class="keyword">if</span> (!ifs.is_open()) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"文件打开失败!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//字符数组缓存</span></span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">//将读取的数据放入缓存区</span></span><br><span class="line">    <span class="keyword">while</span> (ifs &gt;&gt; buffer)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; buffer &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ifs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里多了一个判断文件是否能打开的操作，这样可以防止，路径出错使得程序出错。</p><p>这种逐词读取的方式是<code>读取对象</code>通过<code>右移运算符</code>把读取的数据存入容器之中，但是是以空格区分每个词汇。</p><h2 id="以二进制的方式读取"><a href="#以二进制的方式读取" class="headerlink" title="以二进制的方式读取"></a><strong>以二进制的方式读取</strong></h2><p>前面我们使用了二进制的方式写入文件，那么被写入的文件就会变成二进制文件，这种文件需要使用二进制读取才能将内容正确的读取，下面看一个简单的例子。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 以二进制的方式读取文件</span></span><br><span class="line"><span class="comment"> * @param path 路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readFileByBinary</span><span class="params">(<span class="built_in">string</span> path)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建输入流对象，并且指定路径和文件打开方式</span></span><br><span class="line">    <span class="function">ifstream <span class="title">ifs</span><span class="params">(path, ios::in | ios::binary)</span></span>;</span><br><span class="line">    <span class="keyword">char</span> * c = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">64</span>];</span><br><span class="line">    ifs.read(c, <span class="keyword">sizeof</span>(c));</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;c&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    readFileByBinary(<span class="string">"Student.smi"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">张三</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>这里我们将<code>Student.smi</code>这个文件用二进制的方式读取，那么就能正确的将文件内容获取，但如果我们以二进制的方式读取一个文本文件，将会出现一些我们不想要的结果。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h1><p>读取文件创建<code>ifstream</code>对象,写入文件创建<code>ofstream</code>对象，<code>fstream</code>对象既可以读又可以写。</p><p>操作文件得先<code>打开文件</code></p><p>操作文件完毕得<code>关闭文件</code></p><p>二进制文件读取需要读取二进制格式的文件</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我儿子的博客</title>
      <link href="/2019/05/21/%E6%88%91%E5%84%BF%E5%AD%90%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/05/21/%E6%88%91%E5%84%BF%E5%AD%90%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>自从教会大学同学搭建博客后，他也开始写博客了，内容挺好玩的，推荐去看看。</p><a id="more"></a><p>随便截取一个片段，这哥们咋那么傻的可爱。</p><p><img src="/2019/05/21/我儿子的博客/预览.png" alt="预览"></p><p>想去看的话，点击下面的链接吧，他是个新手，所以基本不用指望去他那里能学到啥。</p><p><code>PS:痔疮，你看到了别打我</code></p><h1 id="EvanShady的博客"><a href="#EvanShady的博客" class="headerlink" title="EvanShady的博客"></a><a href="https://evanshady.github.io/" target="_blank" rel="noopener">EvanShady的博客</a></h1>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 欢乐时光 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决KDE下部分应用不能使用fcitx中文输入法的问题</title>
      <link href="/2019/05/19/%E8%A7%A3%E5%86%B3KDE%E4%B8%8B%E9%83%A8%E5%88%86%E5%BA%94%E7%94%A8%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8fctix%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2019/05/19/%E8%A7%A3%E5%86%B3KDE%E4%B8%8B%E9%83%A8%E5%88%86%E5%BA%94%E7%94%A8%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8fctix%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>我有两台设备，都是KDE5-Plasma桌面，但是其中一台可以完美使用中文输入法，另外一台则不可以，为了解决这个问题，便有这篇文章。</p><a id="more"></a><p><strong><strong>***</strong></strong> 本教程使用fcitx输入法框架。<strong><strong><strong>**</strong></strong></strong></p><h1 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h1><p>首先安装一些必要的软件:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo pacman -S fcitx fcitx-im fcitx-configtool fcitx-googlepinyin</span><br></pre></td></tr></table></figure><h1 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h1><p>安装完成后编辑:<strong>/etc/environment</strong>文件，加上如下内容:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export GTK_IM_MODULE=fcitx</span><br><span class="line">export QT_IM_MODULE=fcitx</span><br><span class="line">export XMODIFIERS=@im=fcitx</span><br></pre></td></tr></table></figure><h1 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h1><p>注销当前会话，配置输入法为googlepinyin即可使用。</p><blockquote><p><a href="https://code-insight.xyz/manjaro%E6%96%B0%E6%89%8B%E5%BF%AB%E9%80%9F%E8%A3%85%E9%85%8D%E6%8C%87%E5%8D%97/" target="_blank" rel="noopener">本文参考</a></p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> KDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++友元</title>
      <link href="/2019/05/17/C-%E5%8F%8B%E5%85%83/"/>
      <url>/2019/05/17/C-%E5%8F%8B%E5%85%83/</url>
      
        <content type="html"><![CDATA[<p>相比Java的继承，C++的友元在某些场景下更加方便，再加上我是没用过友元的，所以就深入研究了下友元，所以有了这篇文章。</p><a id="more"></a><h1 id="什么是友元？"><a href="#什么是友元？" class="headerlink" title="什么是友元？"></a>什么是友元？</h1><p>友元可以访问类中私有的成员。</p><p>它的使用场景又如下几种:</p><ul><li><p>全局函数作友元</p></li><li><p>类作友元</p></li><li><p>成员函数做友元</p></li></ul><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>下面将通过几个案例，分别演示不同场景下，友元的使用方式。</p><hr><h2 id="全局函数作友元"><a href="#全局函数作友元" class="headerlink" title="全局函数作友元"></a>全局函数作友元</h2><p>本小节通过使用一个全局函数访问类的私有成员，分别有两种情况，一种为无友元，另一种则使用了友元。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先声明Person类，防止下面报错</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>;</span></span><br><span class="line"><span class="comment">//声明showPrivateVar函数，防止报错.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showPrivateVar</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义Person类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//私有属性，money,showPrivateVar函数访问的就是这个</span></span><br><span class="line">    <span class="keyword">double</span> money;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//声明构造函数</span></span><br><span class="line">    Person();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类外定义构造函数</span></span><br><span class="line">Person::Person()&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;money = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 访问私有成员</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showPrivateVar</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//实例化Person类对象</span></span><br><span class="line">    Person p;</span><br><span class="line">    <span class="comment">//访问Person对象的私有成员</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"尝试访问Person类的私有属性:"</span>&lt;&lt;p.money&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//调用访问私有成员函数</span></span><br><span class="line">    showPrivateVar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然，这个程序是跑不起来的，因为全局函数showPrivateVar访问了类Person的私有成员，这是没有使用友元的情况下，但是如果我们把友元加上，那么再跑一遍试试。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line">    <span class="comment">//使showPrivateVar函数作为Person类的友元</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">showPrivateVar</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//私有属性，money,showPrivateVar函数访问的就是这个</span></span><br><span class="line">    <span class="keyword">double</span> money;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//声明构造函数</span></span><br><span class="line">    Person();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">尝试访问Person类的私有属性:10</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>我们只是在定义类时加了一行代码，使得showPrivateVar函数作为类的友元，我们就可以在使用showPrivateVar函数时访问Person类的私有成员.</p><p><strong>那么，得出结论：将全局函数作为某类的友元，那么其则可访问类的私有成员。</strong></p><hr><h2 id="类作类的友元"><a href="#类作类的友元" class="headerlink" title="类作类的友元"></a>类作类的友元</h2><p>这个例子，我们将演示，一个类作作为另一个类的友元，并且访问类中私有的成员.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明类，防止报错</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Build</span>;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Build类的好朋友类，可以访问它的私有属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FriendForBuild</span>&#123;</span></span><br><span class="line">    Build * b;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//声明构造函数</span></span><br><span class="line">    FriendForBuild();</span><br><span class="line">    <span class="comment">//声明visit函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义Build类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Build</span>&#123;</span></span><br><span class="line">    <span class="keyword">friend</span> FriendForBuild;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//私有房间</span></span><br><span class="line">    <span class="built_in">string</span> privateRoom;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//公共房间</span></span><br><span class="line">    <span class="built_in">string</span> publicRoom;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Build()&#123;</span><br><span class="line">       <span class="keyword">this</span>-&gt;privateRoom = <span class="string">"私人卧室"</span>;</span><br><span class="line">       <span class="keyword">this</span>-&gt;publicRoom = <span class="string">"公共客厅"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">FriendForBuild::FriendForBuild() &#123;</span><br><span class="line">    b = <span class="keyword">new</span> Build();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 访问Build类对象的所有成员，包括私有成员</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> FriendForBuild::visit()&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"我正在访问Build类对象的publicRoom成员:"</span>&lt;&lt;b-&gt;publicRoom&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"我正在访问Build类对象的privateRoom成员:"</span>&lt;&lt;b-&gt;privateRoom&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FriendForBuild friendForBuild;</span><br><span class="line">    friendForBuild.visit();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我正在访问Build类对象的publicRoom成员:公共客厅</span><br><span class="line">我正在访问Build类对象的privateRoom成员:私人卧室</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p><strong>可以看到，我们若需要在类中访问另外一个类的私有成员，只需要把当前类作为其他类的友元，这样就可以使得当前类不受私有访问权限的限制。</strong></p><hr><h2 id="成员函数做友元"><a href="#成员函数做友元" class="headerlink" title="成员函数做友元"></a>成员函数做友元</h2><p>上面我们引入了类作类的友元，但他有个缺陷：我们可以通过友元类的所有成员访问类的私有成员了，这样就没一一个太大的限制，那么我们下面只需要将成员函数作为友元就可以避免这种问题。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明类，防止报错</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Build</span>;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Build类的好朋友类，可以访问它的私有属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FriendForBuild</span>&#123;</span></span><br><span class="line">    Build * b;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//声明构造函数</span></span><br><span class="line">    FriendForBuild();</span><br><span class="line">    <span class="comment">//声明visit函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义Build类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Build</span>&#123;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">void</span> FriendForBuild::visit();</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//私有房间</span></span><br><span class="line">    <span class="built_in">string</span> privateRoom;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//公共房间</span></span><br><span class="line">    <span class="built_in">string</span> publicRoom;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Build()&#123;</span><br><span class="line">       <span class="keyword">this</span>-&gt;privateRoom = <span class="string">"私人卧室"</span>;</span><br><span class="line">       <span class="keyword">this</span>-&gt;publicRoom = <span class="string">"公共客厅"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">FriendForBuild::FriendForBuild() &#123;</span><br><span class="line">    b = <span class="keyword">new</span> Build();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 访问Build类对象的所有成员，包括私有成员</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> FriendForBuild::visit()&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"我正在访问Build类对象的publicRoom成员:"</span>&lt;&lt;b-&gt;publicRoom&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"我正在访问Build类对象的privateRoom成员:"</span>&lt;&lt;b-&gt;privateRoom&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FriendForBuild friendForBuild;</span><br><span class="line">    friendForBuild.visit();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>友元可以说成时一个类的朋友，这个朋友可以访问类的所有属性，不管是私有的还是公有的，不同的场景下可以使用不同的方法使用友元。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ManjaroLinuxTG讨论群组</title>
      <link href="/2019/05/16/ManjaroLinuxTG%E8%AE%A8%E8%AE%BA%E7%BE%A4%E7%BB%84/"/>
      <url>/2019/05/16/ManjaroLinuxTG%E8%AE%A8%E8%AE%BA%E7%BE%A4%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>创建了个ManjaroLinux的Telegram讨论群组，欢迎加入讨论。</p><h1 id="点击加入"><a href="#点击加入" class="headerlink" title="点击加入"></a><a href="https://t.me/manjarozhihu" target="_blank" rel="noopener">点击加入</a></h1>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Telegram </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的Linux之路</title>
      <link href="/2019/05/15/%E6%88%91%E7%9A%84Linux%E4%B9%8B%E8%B7%AF/"/>
      <url>/2019/05/15/%E6%88%91%E7%9A%84Linux%E4%B9%8B%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p>这篇是我2019-5-12发表在Deepin论坛的文章，感觉可以记录下，让更多人了解我的Linux之路和我对Linux桌面的一些看法.</p><a id="more"></a><p>先说说一些题外话</p><p>我是在2018年的某月(具体哪天忘了)知道了Ubuntu这个系统，也是我第一个听说过的Linux系统，然后我就不知道怎么了，就尝试去安装了，安装之前计算机对我来说就只是台”游戏机“。</p><p>第一次安装很神奇，居然成功了，但有个问题。笔电盖上屏幕后打开，会出现无法恢复的问题，而且无法解决，我当时根本Linux下的显卡驱动是什么，然后我还是继续用着..因为我没有钱买百度云会员重新下载win10镜像(穷学生)… 并且在我使用ubuntu的时候，我还一长段时间不能使用无线网络，那是因为我在笔记本有个按键，可以快速关闭无线网卡，但是按下这个快捷键Ubuntu没有给任何提示，只有无线网络无法使用。。。</p><p>我便忍了，中间一直认为是我没有装驱动，因为我在找前面提到的笔电盖屏不恢复的解决方案时，增加了”驱动” 这个关键词的经验(最终还是没搞好)，我就以为还是驱动问题，网上大量的搜索相关解决方案，然后我就学会了apt包管理器的基本使用方法…还了解了vim nano 这些编辑器，但无线网络这个问题还是没解决…后来是怎么解决的呢?           某一天下午，我在图书馆，用电脑在看编程的视频教程，然后不小心按了我上面所提到的开关无线网卡的按键，然后我就可以使用Wifi了….</p><p>好了，这是我使用Ubuntu的一些小事迹，下面要讲Deepin了，毕竟是我使用时长最长的Linux发行版。</p><p>身为一个Linux新手，在使用Linux之后，会到处找资料，当然也会看到各种 “xxx可能是最好的Linux发行版”，各种论坛上也会讨论不同的发行版的区别，此时还没到Deepin，我发现了 Linux Mint，当时很多人叫它绿薄荷，我便安装了，说实话，我觉得Linux Mint很丑，但是很多人说它是目前Linux受欢迎度排行最高的发行版，而且又是基于Ubuntu的，安装也很方便，我便安装了Linux Mint，关于Linux Mint的回忆，我记不太清了，主要是我用的时间太短，安装好了后，去找Mint的QQ群，都寥寥无几，我便开始了我的下一段Linux旅程。</p><p>终于到Deepin了，具体是怎么知道Deepin的我已经忘记了！，可能是因为从Mint到Deepin的过渡太轻松了吧，使我没有什么深(zao)刻(gao)的记(ti)忆(yan)，我只记得，安装Deepin太简单，只需要选择语言，简单分下区，直接点击安装，稍微等待下就可用了。在Deepin下使用的太欢快了，每天都熬夜折腾自己的系统，当时看到Deepin的招聘要求是：对Linux有充满信仰的狂热，不敲代码睡不着。 我当时的情况就是这样的，并且我还一度想着以后一定要进深度公司做程序员(后来发现自己是个菜逼)。</p><p>自从我使用了Deepin，我便天天给身边的朋友安利Deepin，不过他们好像都不怎么看得起Deepin，但在我心中Deepin就是那种闪耀般的存在。后来，我老爸的老旧笔记本跑win7有点吃不消了，他主要是写文档和看视频，我又给他的电脑安装了Deepin 15.6，目前(2019-5-12)也还在使用，很赞!</p><p>下面要吹下Deepin了，国内常用软件兼容的非常好!这个要大大的赞，并且Deepin自带的软件都非常易用+实用，如果你不使用QQ或者微信那没什么… 毛玻璃效果非常漂亮，社区还是挺活跃的。</p><p>说下Deepin的缺点(个人体验): 耗电，不太可客制化(可能是我太菜)，软件旧(个人体验）</p><p>我从Deepin15.6一直用到15.9.3中间出现了很多问题（但都是小问题），随着个人技术的增长和论坛的帮助基本都是能解决，但还是有两点无法解决的，在我个人笔记本上:会偶尔卡死，真死的那种。无法睡眠。</p><p>我一直期待着15.10能将我上面提到的两个问题解决，但是并没有解决，而且标题栏变得更大了，我忍不了了，我的笔记本是13.3寸的。标题栏真的又肥又大，实在影响美观，再加上我的那些问题又无法得到解决，我就尝试了一下一直被大家所提到的Arch Linux，不过我不是直接使用的Arch Linux，我是使用的它的衍生版:Manjaro Linux，首先是它安装方便，其次是各大论坛呼声挺高的，我便直接跳过了Arch直接使用Manjaro，之前在虚拟机装了遍Arch，跑的dde。</p><p>下面便是Manjaro篇了，我选择的是KDE桌面，因为当时社区里上很多人说KDE非常可定制化，我使用了Manjaro Linux了，使用体验非常好!可以说是Very Good了!</p><p>解决了上面提到的所有问题，并且电脑还省电多了…并且在KDE下感觉比DDE丝滑一点点，不知道是不是错觉，并且电脑发热量也比DDE要低，关键是Pacman和Aur实在是太好用了，虽然debian系的软件是最多的，但是安装不一定比Pacman要方便，我在Manjaro官方软件源下找不到的软件，Aur里有，而且基本很少出现依赖问题，除了卸载的时候，会提示依赖问题，但是安装时不会。</p><p>但也不是说Manjaro就没问题了，比如QQ就不怎么样，虽然是使用的Deepin打包的，但我的还是有些问题，使用体验上没有Deepin好，微信等软件倒是没问题。</p><p>总的来说，如果你是新手或者说不愿意折腾操作系统，但又想使用Linux系统，Deepin是你最好的选择(个人看法)，如果你折腾或了解更多的Linux知识，推荐Arch系的发行版。</p>]]></content>
      
      
      <categories>
          
          <category> 个人感想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深拷贝和浅拷贝的区别</title>
      <link href="/2019/05/14/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/05/14/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>虽然网上大家们都说浅拷贝和深拷贝本不是C++原本的概念，根本都是胡乱撤出来的概念，但我感觉还是有必要写这一篇文章，并且以此作为标题。</p><a id="more"></a><h1 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h1><p>我们都知道,C++在实例化一个类对象时，会自动调用它的拷贝构造函数。</p><p><strong>那么浅拷贝就是在你没有创建自定义拷贝构造函数时执行的默认的拷贝构造函数。</strong></p><p>那什么是拷贝构造函数呢?</p><p><strong>拷贝构造函数是将对象的所有属性的值进行拷贝，并且赋值给要拷贝的对象</strong></p><p>下面看个例子:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认构造函数</span></span><br><span class="line">    Human() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Human默认构造函数调用."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造函数</span></span><br><span class="line">    Human(<span class="built_in">string</span> f_name, <span class="keyword">int</span> f_age) &#123;</span><br><span class="line">        name = f_name;</span><br><span class="line">        age = f_age;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Human有参构造函数调用."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//析构函数</span></span><br><span class="line">    ~Human() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Human析构函数调用."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Human <span class="title">h1</span><span class="params">(<span class="string">"李四"</span>, <span class="number">18</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; h1.name &lt;&lt; <span class="string">"的年龄为:"</span> &lt;&lt; h1.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//浅拷贝，编译器会自动将h1对象属性的值拷贝给h2</span></span><br><span class="line">    <span class="function">Human <span class="title">h2</span><span class="params">(h1)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; h2.name &lt;&lt; <span class="string">"的年龄为:"</span> &lt;&lt; h2.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Human有参构造函数调用.</span><br><span class="line">李四的年龄为:18</span><br><span class="line">李四的年龄为:18</span><br><span class="line">Human析构函数调用.</span><br><span class="line">Human析构函数调用.</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>根据上面的代码，我们可以看出h1对象所有属性的值都拷贝给了h2对象，但是我们并没有写相关的代码，<strong>这是编译器帮我们实现的，也就是默认的拷贝构造函数，我们就称为浅拷贝。</strong></p><p>浅拷贝的具体代码实现是怎样的呢？请看下面的代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认的拷贝构造函数</span></span><br><span class="line">Human(<span class="keyword">const</span> Human &amp; h)&#123;</span><br><span class="line">    name = h.name;</span><br><span class="line">    age = h.age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可与看出，它只是简单的将对象属性的值，进行拷贝。</p><p>大家思考一下，如果对象属性都是普通类型的变量，那么，这个浅拷贝是可以完美的完成这个任务的，但是如果对象属性含有引用变量或指针变量的话，那么这个浅拷贝，是否能正确的执行呢？</p><p>答案是否定的，下面看下深拷贝。</p><h1 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h1><p>什么是深拷贝?</p><p><strong>深拷贝就是由程序员自定义的拷贝构造函数，并且能够处理浅拷贝所遇到的问题，也就是能够处理当浅拷贝遇到引用变量和指针变量时，无法完美处理的场景.</strong></p><p>下面的代码将体现，浅拷贝在遇到对象属性存在引用和指针变量时可能会出现的错误:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> *age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认构造函数</span></span><br><span class="line">    Human() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Human默认构造函数调用."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造函数</span></span><br><span class="line">    Human(<span class="built_in">string</span> f_name, <span class="keyword">int</span> f_age) &#123;</span><br><span class="line">        name = f_name;</span><br><span class="line">        <span class="comment">//动态分配内存空间，将age的数据存入堆区</span></span><br><span class="line">        age = <span class="keyword">new</span> <span class="keyword">int</span>(f_age);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Human有参构造函数调用."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//析构函数</span></span><br><span class="line">    ~Human() &#123;</span><br><span class="line">        <span class="comment">//如果age指针变量是空，则释放</span></span><br><span class="line">        <span class="keyword">if</span>(age !=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">delete</span> age;</span><br><span class="line">            <span class="comment">//防止指针变量成为野指针</span></span><br><span class="line">            age = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Human析构函数调用."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Human <span class="title">h1</span><span class="params">(<span class="string">"李四"</span>, <span class="number">18</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; h1.name &lt;&lt; <span class="string">"的年龄为:"</span> &lt;&lt;*h1.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//浅拷贝，编译器会自动将h1对象属性的值拷贝给h2</span></span><br><span class="line">    <span class="function">Human <span class="title">h2</span><span class="params">(h1)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; h2.name &lt;&lt; <span class="string">"的年龄为:"</span> &lt;&lt;*h2.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">free(): double free detected in tcache 2</span><br><span class="line">Human有参构造函数调用.</span><br><span class="line">李四的年龄为:18</span><br><span class="line">李四的年龄为:18</span><br><span class="line">Human析构函数调用.</span><br><span class="line"></span><br><span class="line">Process finished with exit code 134 (interrupted by signal 6: SIGABRT)</span><br></pre></td></tr></table></figure><p>通过输出结果，我们发现，程序发生了错误。</p><p>因为由于类中有一个指针变量，所以我们编写有参构造函数时，需要将数据以堆的形式存储，并且在编译器调用析构函数时将其释放。</p><p>上面提到过，如果程序员没有自定义拷贝构造函数，那么编译器将会自动加上，也就是说，我们要进行拷贝时，程序将会以浅拷贝的方式进行拷贝。</p><p>由于是浅拷贝，那么h1对象就会将指针变量age所指向的地址赋值给h2对象的指针变量age，那么它们俩所指向的内存单元是同一个。</p><p>然而在h1对象所要执行的操作完成后，就会调用它的析构函数，里面是会释放掉age指针变量，那么也就是说，在h1对象的生命周期内，age指针变量所指向的内存单元的数据已经被释放了，但是当执行到h2的对象的生命周期时，我们再进行释放时，程序自然就会报错。</p><p>既然问题找到了，我们就需要进行修改，将这个问题解决。</p><p>下面通过深拷贝的方式，让这个bug被修复:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> *age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认构造函数</span></span><br><span class="line">    Human() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Human默认构造函数调用."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造函数</span></span><br><span class="line">    Human(<span class="built_in">string</span> f_name, <span class="keyword">int</span> f_age) &#123;</span><br><span class="line">        name = f_name;</span><br><span class="line">        <span class="comment">//动态分配内存空间，将age的数据存入堆区</span></span><br><span class="line">        age = <span class="keyword">new</span> <span class="keyword">int</span>(f_age);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Human有参构造函数调用."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拷贝构造函数</span></span><br><span class="line">    Human(<span class="keyword">const</span> Human &amp; h)&#123;</span><br><span class="line">        name = h.name;</span><br><span class="line">        <span class="comment">//新开辟内存空间到堆区，存放age所指向的数据。</span></span><br><span class="line">        age = <span class="keyword">new</span> <span class="keyword">int</span>(*h.age);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Human拷贝构造函数调用."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//析构函数</span></span><br><span class="line">    ~Human() &#123;</span><br><span class="line">        <span class="comment">//如果age指针变量是空，则释放</span></span><br><span class="line">        <span class="keyword">if</span>(age !=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">delete</span> age;</span><br><span class="line">            <span class="comment">//防止指针变量成为野指针</span></span><br><span class="line">            age = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Human析构函数调用."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Human <span class="title">h1</span><span class="params">(<span class="string">"李四"</span>, <span class="number">18</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; h1.name &lt;&lt; <span class="string">"的年龄为:"</span> &lt;&lt;*h1.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//浅拷贝，编译器会自动将h1对象属性的值拷贝给h2</span></span><br><span class="line">    <span class="function">Human <span class="title">h2</span><span class="params">(h1)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; h2.name &lt;&lt; <span class="string">"的年龄为:"</span> &lt;&lt;*h2.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Human有参构造函数调用.</span><br><span class="line">李四的年龄为:18</span><br><span class="line">Human拷贝构造函数调用.</span><br><span class="line">李四的年龄为:18</span><br><span class="line">Human析构函数调用.</span><br><span class="line">Human析构函数调用.</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>程序没有报错，说明我们的bug成功解决了。</p><p>上面的代码，我们只是自定义了一个拷贝构造函数，也就是深拷贝。</p><p>深拷贝的具体实现，就是在拷贝数据时，将数据拷贝到一个新的内存空间，并且这个内存空间是在堆区，这样也就避免了浅拷贝时的问题。</p><p>为什么能避免？</p><p>原因是：如果通过浅拷贝进行拷贝数据的话，遇到指针或引用变量时，编译器只是将要拷贝的指针变量所指向的内存空间的地址进行拷贝，那么两个对象的指针变量所指向的地址仍然是相同的地址，所以当生命周期走向末尾，调用析构函数，释放内存空间后，再有对已释放的内存空间进行释放内存空间的操作就会引发异常。然而通过深拷贝的方式进行拷贝时，会开辟一个新的内存空间，这样每次释放空间时，则不会造成二次释放同一个空间的异常。</p><h1 id="两者该如何选择"><a href="#两者该如何选择" class="headerlink" title="两者该如何选择?"></a>两者该如何选择?</h1><p><strong>说得绝对点：</strong></p><p>若类含有指针变量时，为了防止出现两个指针指向同一个内存空间，从而引发二次释放同一空间的问题，则需要在拷贝时对相应的指针变量开辟新的空间。</p><p>这时需要使用深拷贝。</p><p><strong>说的不那么绝对:</strong></p><p>若类只有一个实例化对象，那么使用浅拷贝也没什么关系，因为无法造成二次释放同一内存空间的问题。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 经典案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2008年5月12日14时28分04秒</title>
      <link href="/2019/05/12/2008%E5%B9%B45%E6%9C%8812%E6%97%A514%E6%97%B628%E5%88%8604%E7%A7%92/"/>
      <url>/2019/05/12/2008%E5%B9%B45%E6%9C%8812%E6%97%A514%E6%97%B628%E5%88%8604%E7%A7%92/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/05/12/2008年5月12日14时28分04秒/空降.webp" alt="空降"></p><p>  图为汶川大地震时某部队空降救灾  </p><a id="more"></a><h1 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h1><p>5·12汶川地震，发生于2008年5月12日（星期一）14时28分04秒，根据地震局的数据，此次地震的面波震级 里氏震级达8.0Ms、矩震级达8.3Mw，地震烈度达到11度。</p><p>此次地震的地震波已确认共环绕了地球6圈。地震波及大半个中国及亚洲多个国家和地区，北至辽宁，东至上海，南至香港、澳门、泰国、越南，西至巴基斯坦均有震感。</p><p>伤亡人数：69227人遇难，374643人受伤，17923人失踪。</p><p>以上是一些冷冰冰的数字，在这些数字背后是无数悲痛的家庭，在遭遇国家大灾大难的时候，一切都显得那么渺小。</p><h1 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h1><p>每年的这个时刻，我都不由自主的想起这个事情。</p><p>2008年的时候正读大二，大学在宝鸡市距离汶川大概10小时的车程，震感非常剧烈，那是我人生中第一次明显的感觉到地震的威力。</p><p>那天像往常一样，午休完来到教室，照例坐到了教室的最后一排，等待老师来上课，</p><p>突然感觉到桌子在猛烈的摇晃，而桌子是固定在地板上的，前面的女同学也转过头来诧异的看着我，以为我在后面搞什么鬼。</p><p>这时候，抬头看到教室的吊灯在疯狂的摆动，突然有人意识到地震了！对大家喊到：快跑，地震了！</p><p>跑到楼道的时候已经满是人，毕竟是大学生，虽然紧张，下楼也很有秩序。有的人跑到教室下面的广场就绷不住了大哭。</p><p>宿舍楼那边，有人穿着睡衣就跑到了楼下，有人拿着伞从二楼跳下，还有的估计是裸睡，披个床单就下来了。没有嘲笑，只有震惊和后怕。</p><p>因为不知道震源在哪里，所有人的第一反应是给家里打电话，基站一下子就崩溃了。平均每拨出100多个电话，能有一个打通。</p><p>大部分同学都联系到了家里，有那么几个却没有。晚些时候，消息传了过来，震源在汶川。</p><p>晚上路过学校操场的时候，听到一个女孩大声的哭声，心中一片凄凉。四川籍同学们围成了一个大圈，点着蜡烛，在祈祷。</p><p>学校开始不定期停课，余震不断，我们从宿舍搬到了大操场，幸亏那段时间没有下雨。</p><p>天天过上了打牌闲逛的生活，一周后学校通知放假两周，大家纷纷回家。再次回到学校，所有的空地都搭建了军用帐篷。</p><p><img src="/2019/05/12/2008年5月12日14时28分04秒/操场.webp" alt="操场"></p><h1 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h1><p>2008年5月19日全国默哀日，老师站在讲台上，14时28分全体起立，低头默哀三分钟。</p><p>我站在靠马路旁的窗子，当防空警报响起的时候，所有的车辆都自觉的靠边停车，汽车嘀声长鸣。</p><p>两种声音交织低沉而婉转，像是为逝去的人在哭泣，举国悲痛。</p><p><img src="/2019/05/12/2008年5月12日14时28分04秒/流量图.webp" alt="流量"></p><p>这是一张2008年的老图，当时，还没有从中国撤出的谷歌在自己官方博客“谷歌黑板报”上贴出了这张图，记录的是汶川地震一周后，5月19日的流量曲线。</p><p>这暴跌几乎到0的几分钟，是全国为汶川地震默哀的三分钟。</p><p>谷歌当时的博文说道：</p><p>“当我们依照惯例整理和分析谷歌搜索引擎的流量数据时，一条从未见过的曲线出现在我们面前。当意识到发生了什么事情时，我们的眼睛湿润了。”</p><p>几乎降到0的那个节点说明了当时的一切，这个几乎不可能出现的数据记录着中国为汶川地震默哀的三分钟。</p><p>全世界的中华儿女在这三分钟连在了一起。</p><h1 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h1><p>在这之前我觉得中国人浑身上下充满了劣根性，自私，无爱，中国人就是一盘散沙。地震之后我才发现，中国人一下就团结起来了，那个时候也没有所谓的官员和百姓，没有奸商和地痞。</p><p>大家那时候就只有一个身份，就叫中国人。</p><p>那次灾难让我明白，中国人的团结，是刻在DNA里面的，不是挂在嘴上的，和平时候大家该干嘛干嘛，一旦到了国家危急的时候，就仿佛血液里的基因被激活，大家都知道自己该做什么。</p><p>   况且古往今来，历史诚不欺我。   </p><blockquote><p>知乎 ———— 小小白告</p></blockquote><p>汶川地震第三天早上，一个师兄没按时到校，班主任以为是睡过头了，也没有特意去找，结果一直到第四节课也没来。</p><p>打电话问家长，家长说孩子早早就去上学了，这下两边都慌了，上窜下跳的找孩子。</p><p>最后我们耿直可爱的师兄在济南火车站被拦截，身上背着家里全部现金，药品和压缩食品，要做火车去成都再去汶川救灾。</p><p>  多年过去，讲起这个故事，仍旧热泪盈眶。  </p><blockquote><p>知乎 ———— 匿名用户</p></blockquote><p>昨晚在宿舍，室友是个四川妹子正在看腾讯视频上《新青川十年之后遇见你》。</p><p>她给我看她们初中的学校。</p><p>我问她当年你的同学是不是好多都不在了。她沉默了一会说当年宿舍一共八个人，只有她一个人活下来了。</p><p>我听了这句话瞬间眼睛红了，那年她初二，今年她研二。</p><p>   活着，本身就意味着一切。   </p><blockquote><p>知乎 ———— 匿名用户</p></blockquote><p>推荐25分钟纪录片:《为了生命》。</p><hr><p>本篇文章转载于：<a href="https://mp.weixin.qq.com/s/CFNQAx1Ksnxkl29FLnqDnA##" target="_blank" rel="noopener">阅读原文</a><br>作者：纯洁的微笑(一个有故事的程序员)</p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 社会事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++内存四区之代码区与全局区</title>
      <link href="/2019/05/11/C-%E5%86%85%E5%AD%98%E5%9B%9B%E5%8C%BA%E4%B9%8B%E4%BB%A3%E7%A0%81%E5%8C%BA%E4%B8%8E%E5%85%A8%E5%B1%80%E5%8C%BA/"/>
      <url>/2019/05/11/C-%E5%86%85%E5%AD%98%E5%9B%9B%E5%8C%BA%E4%B9%8B%E4%BB%A3%E7%A0%81%E5%8C%BA%E4%B8%8E%E5%85%A8%E5%B1%80%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<p>其实这一篇应该是作为”C++内存四区”的第一篇的。</p><a id="more"></a><h1 id="0x00-内存分区模型"><a href="#0x00-内存分区模型" class="headerlink" title="0x00 内存分区模型"></a>0x00 内存分区模型</h1><p>C++程序在执行时，内存大方向的可划分为 <strong><strong><strong><strong>*</strong></strong></strong></strong>四个区域**</p><ul><li><p>代码区: 存放代码的二进制代码，由操作系统进行管理。</p></li><li><p>全局区: 存放全局变量和静态变量以及常量。</p></li><li><p>栈区: 由编译器自动分配释放，存放函数的参数值，局部变量等。</p></li><li><p>堆区: 由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收。</p></li></ul><h2 id="内存四区的意义"><a href="#内存四区的意义" class="headerlink" title="内存四区的意义:"></a>内存四区的意义:</h2><p>不同区域存放的数据，代表着不同的生命周期，不同的生命周期使我们可以更灵活的编程。</p><h1 id="0x01-程序运行前"><a href="#0x01-程序运行前" class="headerlink" title="0x01 程序运行前"></a>0x01 程序运行前</h1><p>在程序编译后，生成的可执行程序，当我们未执行此程序前，分为两个区域</p><p>代码区:</p><p>   存放CPU执行的机器指令</p><p>   共享的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可。</p><p>   只读的，为了防止程序意外修改代码的指令，所以有了只读。</p><p><img src="/2019/05/11/C-内存四区之代码区与全局区/代码区示意图.png" alt="代码区示意图"></p><p>如上图所示，代码区主要分为两个部分，共享区是存放常备执行的代码，例如程序员所指定的内联函数，或编译器所生成的代码，这些数据在程序跑起来会一直保存在内存中,</p><p>而只读部分是为了防止外部对程序内部的数据进行非法访问，举个栗子，你的程序设定买一个苹果需要1金币，但是某开发人员，通过某手段将此内存中的数据修改为-99999金币，那么就会造成数据非法修改。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++内存四区之堆区</title>
      <link href="/2019/05/10/C-%E5%86%85%E5%AD%98%E5%9B%9B%E5%8C%BA%E4%B9%8B%E5%A0%86%E5%8C%BA/"/>
      <url>/2019/05/10/C-%E5%86%85%E5%AD%98%E5%9B%9B%E5%8C%BA%E4%B9%8B%E5%A0%86%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是堆区"><a href="#什么是堆区" class="headerlink" title="什么是堆区"></a>什么是堆区</h1><p>由程序员分配释放的内存单元，若程序员不释放，则在程序关闭时由操作系统回收．</p><h1 id="如何将数据放在堆区"><a href="#如何将数据放在堆区" class="headerlink" title="如何将数据放在堆区"></a>如何将数据放在堆区</h1><p>在C++中由<strong>new</strong>关键字在堆区中开辟内存。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建局部指针变量，但是数据是存放在堆区的。</span></span><br><span class="line">    <span class="keyword">int</span> *a_p= <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a_p;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *p = func();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*p&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><p>看到上述代码的<strong>创建局部指针变量，但数据存放在栈区</strong>是什么意思呢?</p><p>其实在a_p这个指针变量，仍然是一个局部变量，只不过它在由new在堆区开辟的内存中存放的，请看下图。</p><p><img src="/2019/05/10/C-内存四区之堆区/test.png" alt="堆区"></p><p>也就是说*a_p只不过是指向的堆区中的数据，但是这个指针变量还是存放在栈区的。函数的最终返回值时堆区的10的地址。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++内存四区之栈区</title>
      <link href="/2019/05/10/C-%E5%86%85%E5%AD%98%E5%9B%9B%E5%8C%BA%E4%B9%8B%E6%A0%88%E5%8C%BA/"/>
      <url>/2019/05/10/C-%E5%86%85%E5%AD%98%E5%9B%9B%E5%8C%BA%E4%B9%8B%E6%A0%88%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是栈区"><a href="#什么是栈区" class="headerlink" title="什么是栈区"></a>什么是栈区</h1><p>栈区是由编译器自动分配释放的内存区块，它可以用来存放局部变量，例如函数的参数值等..</p><h1 id="操作栈区的注意事项"><a href="#操作栈区的注意事项" class="headerlink" title="操作栈区的注意事项"></a>操作栈区的注意事项</h1><p>在函数的返回值类型为指针或引用时，不要返回栈区内的数据， 例如返回一个局部变量的地址．</p><p>因为所有局部的数据都是存放在栈区的，而栈区的内存是由编译器自动释放的，若在编译器已把某内存单元释放后，再对那个内存单元进行操作，则会报错．</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//局部变量．存放在栈区,此变量将会在函数体执行完后自动释放．</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尝试返回局部变量的地址</span></span><br><span class="line">    <span class="keyword">return</span> &amp;a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//接受func的返回值</span></span><br><span class="line">    <span class="keyword">int</span> *p = func();</span><br><span class="line">    <span class="comment">//输出p</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*p&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Process finished with exit code 139 (interrupted by signal 11: SIGSEGV)</span><br></pre></td></tr></table></figure><p>上述代码中:func()函数的返回值类型为指针，并且它的返回值为函数体内部定义的变量a的地址，当这个函数被执行完，内部变量的内存空间将会被自动释放，所以在main函数内输出已经被释放的内存单元就会发生内存溢出的问题．</p><h1 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h1><p>可能有些编译器在第一次输出时可以正常输出，但如果是第二次输出则会报错,因为有些编译器会保留局部变量的值．</p><hr>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>终端多窗口神器——Screen</title>
      <link href="/2019/05/09/%E7%BB%88%E7%AB%AF%E5%A4%9A%E7%AA%97%E5%8F%A3%E7%A5%9E%E5%99%A8%E2%80%94%E2%80%94Screen/"/>
      <url>/2019/05/09/%E7%BB%88%E7%AB%AF%E5%A4%9A%E7%AA%97%E5%8F%A3%E7%A5%9E%E5%99%A8%E2%80%94%E2%80%94Screen/</url>
      
        <content type="html"><![CDATA[<p>曾几何时，在你使用ssh登录到服务器时要做某个需要点时间的操作时感到烦恼。</p><p>曾几何时，在你想要在终端进行多窗口控制时，感到十分麻烦。</p><p>有了Screen,你就可以获得更好的使用终端多窗口的体验。</p><a id="more"></a><p>我想你肯定遇到以下几种情况:</p><ul><li><p>ftp传输</p></li><li><p>系统备份</p></li><li><p>长时间运行任务</p></li></ul><p>好的，以上的这几种情况在你关掉窗口或断开链接时，任务将会被杀死，一切都没了…只能重新来过。</p><h1 id="凶手-SIGHUP-信号"><a href="#凶手-SIGHUP-信号" class="headerlink" title="凶手 SIGHUP 信号"></a>凶手 SIGHUP 信号</h1><blockquote><p>以下资料来自维基百科 </p><blockquote><p>SIGHUP又称为Unix信号，它是Unix、类Unix以及其他POSIX兼容的操作系统种进程间通讯的一种有限制的方式。它是一种异步的通知机制，用来提醒进程一个事件已经发生。当一个信号发送给一个进程，操作系统中断了进程正常的控制流程，此时，任何非原子操作都将被终端。如果进程定义了信号的处理函数，那么它将被执行，否则就执行默认的处理函数。</p></blockquote></blockquote><p>简单来说呢，这个SIGHUP信号就是Unix信号，它可以通过控制终端以一些特殊的按键发送某些特定的信号，这些信号有特定的功能，不过都是用来处理进程的。</p><h2 id="发送信号"><a href="#发送信号" class="headerlink" title="发送信号"></a>发送信号</h2><p>在一个已运行程序的终端可键入以下组合键从而实现发送某些信号。</p><ul><li><p>Ctrl-C发送INT信号(SIGINT); 缺省情况下，会导致进程终止。</p></li><li><p>Ctrl-Z发送TSTP信号(SIGTSTP); 缺省情况下，会导致进程挂起。</p></li><li><p>Ctrl-\发送QUIT信号(SIGQUIT); 缺省情况下，会导致进程终止并且将内存中的信息存储到硬盘。</p></li></ul><h2 id="前因后果"><a href="#前因后果" class="headerlink" title="前因后果"></a>前因后果</h2><p>相信大家每次要终止当前正在运行的进程都是键入组合键Ctrl-C，也就是说触发了一个SIGHUP信号————SIGINT，也就导致了进程终止。</p><p><strong>更多有关SIGHUP信号的资料，我会在后面的文章进行更新。</strong></p><hr><h1 id="开始使用Screen"><a href="#开始使用Screen" class="headerlink" title="开始使用Screen"></a>开始使用Screen</h1><p>先简单说说什么是Screen:</p><p>Screen是一个可以在多个进程之间多路复用一个物理终端的窗口管理器。(吃不吃惊，居然是个窗口管理器)。</p><p>Screen就像tty一样，可以创建多个会话，然而会话还可以创建多个screen窗口，并且每个screen都跟真实SSH/Telnet连接窗口一样。</p><p><strong>1.创建一个screen窗口</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[evanmeek@Evan-PC]#</span> screen</span><br></pre></td></tr></table></figure><p>这样就创建了一个可执行shell程序的窗口，若在该窗口种键入exit则退出该窗口，又倘若该窗口是当前会话的唯一窗口，screen则会退出该会话，否则screen将会自动切换到前一个窗口。</p><p><strong>2.创建窗口+执行命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[evanmeek@Evan-PC]#</span> screen vim</span><br></pre></td></tr></table></figure><p>screen会先创建一个窗口，并且执行vim命令，若你退出vim，则该窗口也会退出。</p><p><strong>3.一个窗口中再有一个窗口中再有一个窗口中…</strong></p><p>你可以打开一个窗口后再输入命令打开一个窗口，也可以通过组合键C-a c(CTRL+a再按c)，screen会和段话所描述的功能一样。</p><p><strong>4.screen的暂时断开(detach)和重新链接(attach)</strong></p><p>比如在screen窗口下用vim编辑C++源文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[evanmeek@Evan-PC]#</span> screen vim test.cpp</span><br></pre></td></tr></table></figure><p>但写到一半，你发现要修改点东西，但是又不想退出vim编辑器，那么直接键入C-a d，Screen会提示你已挂起(detached).</p><p><img src="/2019/05/09/终端多窗口神器——Screen/detachedInfo.png" alt="挂起提示"></p><p>当你做完其他事你就可以找回该会话，进行重新连接:</p><p>找到会话</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[evanmeek@Evan-PC]#</span> screen -ls</span><br><span class="line">There are screens on:</span><br><span class="line">        17944.pts-4.EvanLinux   (Detached)</span><br><span class="line">        14290.server    (Detached)</span><br><span class="line">2 Sockets in /run/screens/S-evanmeek.</span><br></pre></td></tr></table></figure><p>重新连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[evanmeek＠Evan-PC]# screen- r 17944</span><br></pre></td></tr></table></figure><p>这样就可以恢复pts这个会话的窗口了．</p><hr><h1 id="配置你的Screen"><a href="#配置你的Screen" class="headerlink" title="配置你的Screen"></a>配置你的Screen</h1><p>前面的几个组合键操作，可以 ，我们总是通过C-a来做开始触发的命令.screen中这个叫做按键绑定，而被绑定的C-a叫做命令字符.</p><p>可通过如下键绑定查看所有键绑定．</p><p><strong>C-a ?</strong></p><p>常用的键绑定有：</p><table><thead><tr><th style="text-align:center">键绑定</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">C-a ?</td><td style="text-align:center">显示所有键绑定信息</td></tr><tr><td style="text-align:center">C-a w</td><td style="text-align:center">显示所有窗口列表</td></tr><tr><td style="text-align:center">C-a C-a</td><td style="text-align:center">切换到之前显示的窗口</td></tr><tr><td style="text-align:center">C-a c</td><td style="text-align:center">创建一个新的运行shell的窗口并切换到该窗口</td></tr><tr><td style="text-align:center">C-a n</td><td style="text-align:center">切换到下一个窗口</td></tr><tr><td style="text-align:center">C-a p</td><td style="text-align:center">切换到前一个窗口</td></tr><tr><td style="text-align:center">C-a 0~9</td><td style="text-align:center">切换到0~9窗口</td></tr><tr><td style="text-align:center">C-a a</td><td style="text-align:center">发送C-a到当前窗口</td></tr><tr><td style="text-align:center">C-a d</td><td style="text-align:center">暂时断开screen会话</td></tr><tr><td style="text-align:center">C-a k</td><td style="text-align:center">杀掉当前窗口</td></tr><tr><td style="text-align:center">C-a [</td><td style="text-align:center">进入拷贝/回滚模式</td></tr></tbody></table><p>我们可以自己设置命令字符，使用C-a ?命令可见， 缺省的命令字符为C-a，而转义字符为a;</p><p><img src="/2019/05/09/终端多窗口神器——Screen/DefalutCommandKey.png" alt="默认的命令字符">;</p><p>我们可以修改它，通过如下格式:</p><p><strong>-exy</strong></p><p>x:命令字符</p><p>y:转义字符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[evanmeek@Evan-PC]#</span> screen -e^oo</span><br></pre></td></tr></table></figure><p>这样原本需要使用Ｃ-a a 执行的操作就需要使用C-o o来执行．</p><hr>]]></content>
      
      
      <categories>
          
          <category> 折腾日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 软件折腾 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux中的解压与压缩</title>
      <link href="/2019/05/08/Linux%E4%B8%AD%E7%9A%84%E8%A7%A3%E5%8E%8B%E4%B8%8E%E5%8E%8B%E7%BC%A9/"/>
      <url>/2019/05/08/Linux%E4%B8%AD%E7%9A%84%E8%A7%A3%E5%8E%8B%E4%B8%8E%E5%8E%8B%E7%BC%A9/</url>
      
        <content type="html"><![CDATA[<p>当我们需要传输数据时，如果是直接对文件进行传输，若数据较大，则传输时间会很长。我们可以将文件进行压缩，减少文件的体积，从而减少传输耗时。</p><a id="more"></a><p>在Windows下我们通常使用rar或zip进行压缩解压的操作，但是像rar这种软件实际是收费的，所以在Linux下使用有些不太实际。</p><p>Linux下有三种主流常用的解压压缩软件可选:</p><ul><li><p>gzip (GNUzip)</p></li><li><p>bz2 (bzip2)</p></li><li><p>xz (xzutils)</p></li></ul><p>三个软件的参数相同，只是命令不同:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> gzip [参数] &lt;文件名&gt;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> bzip2 [参数] &lt;文件名&gt;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> xz [参数] &lt;文件名&gt;</span><br></pre></td></tr></table></figure><blockquote><p>可选参数</p></blockquote><table><thead><tr><th></th><th style="text-align:center">参数名</th><th>作用</th></tr></thead><tbody><tr><td></td><td style="text-align:center">-d</td><td>解压</td><td></td></tr><tr><td></td><td style="text-align:center">-k</td><td>压缩时不删除源文件</td><td></td></tr><tr><td></td><td style="text-align:center">-r</td><td>递归查找目录下的文件，并且压缩</td><td></td></tr><tr><td></td><td style="text-align:center">-v</td><td>显示详细信息</td><td></td></tr><tr><td></td><td style="text-align:center">-t</td><td>测试压缩包是否完整</td><td></td></tr><tr><td></td><td style="text-align:center">-l</td><td>显示压缩包信息</td><td></td></tr><tr><td></td><td style="text-align:center">-c</td><td>写入标准输出，保持原始文件不变</td><td></td></tr><tr><td></td><td style="text-align:center">-1~9</td><td>压缩等级</td><td></td></tr></tbody></table><p><strong>示例:</strong></p><blockquote><p>压缩test.txt，并删除.</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> gzip test.txt</span><br></pre></td></tr></table></figure><blockquote><p>压缩test.txt，不删除原文件，并且显示信息.</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> gzip -vk test.txt</span><br></pre></td></tr></table></figure><blockquote><p>以最高压缩test.txt和test2.txt，不删除原文件，显示信息，并把压缩文件写为test.gz</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> gzip -9cvk test.txt test2.txt &gt; test.gz</span><br></pre></td></tr></table></figure><blockquote><p>解压test.gz</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> gzip -d test.gz</span><br></pre></td></tr></table></figure><hr><p>介绍完上面的几种压缩软件，下面介绍一个打包软件<strong>tar</strong></p><p>我们常常可以看见**.tar.xz这种文件，它就是用tar打包，再用xz进行压缩的文件了，下面直接看示例你就会了。</p><h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><p>这里注意第一个参数，它们分别代表使用什么压缩软件。</p><blockquote><p>bz2<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> tar -jcvf test.tar.bz test/</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>xz<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> tar -Jcvf test.tar.xz test/</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>gzip<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> tar -zcvf test.tar.gz test/</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><p>只需要看文件名的后缀，然后把参数c改为x即可.x代表解压.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> tar -Jxvf test.tar.xz test/</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++指针[基础02]</title>
      <link href="/2019/05/06/C-%E6%8C%87%E9%92%88-%E5%9F%BA%E7%A1%8002/"/>
      <url>/2019/05/06/C-%E6%8C%87%E9%92%88-%E5%9F%BA%E7%A1%8002/</url>
      
        <content type="html"><![CDATA[<p>C++指针和数组的操作。</p><a id="more"></a><p>C++中访问数组元素可以使用如下示例进行访问:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="number">3</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"第2个元素为:"</span>&lt;&lt;arr[<span class="number">1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>想必大家都知道输出的值为:1</p><hr><p>那么我们现在可以使用指针进行访问数组元素</p><p>数组名代表的就是当前数组的第一个元素，那么我们通过让指针指向数组的数组名，即可访问数组的第一个元素。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="number">3</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *p = arr;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"p:"</span>&lt;&lt;*p&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p:0</span><br></pre></td></tr></table></figure><p><strong>提问:</strong></p><p>为什么指针可以指向数组名，而不需要使用引用符(&amp;)？</p><p><strong>疑惑解答:</strong></p><p>那是因为在C++中，数组其实就是一块内存空间，然而里面的<strong>每个元素也就组成了一块连续的内存空间</strong>，而<strong>数组名就当任了数组的首地址</strong>的作用，那么它本身就是个地址，所以直接为赋值给指针没问题。</p><hr><p>通过上面的疑惑解答，我们知道数组名是数组的首地址，而数组的内存空间的结构是一块连续的单元，那么我们则可以通过使用指针指向数组的数组名，再进行位偏移，这样就可以使得指针指向的是下一个单元，也就是arr[1];</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="number">3</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *p = arr;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对指针进行位偏移</span></span><br><span class="line">p++;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"p:"</span>;</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p: 1</span><br></pre></td></tr></table></figure><p>上述例子演示了，对指针p进行位偏移，从而使得p重新指向了一个内存单元，即&amp;arr[1]，为何能这样使用呢？我们知道，int类型占用4个字节，而这个指针一个指向int的指针，那么对它进行++时，它所指向的位便+4个字节，那么也就是下一个内存单元&amp;arr[1]的位置，我们通过下图更直观的查看它的变化。</p><p><img src="/2019/05/06/C-指针-基础02/指针位偏移.png" alt="位偏移"></p><hr><p>最后利用指针遍历输出数组内的元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="number">3</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *p = arr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;<span class="number">3</span>;i++,p++)&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;*p&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 指针 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++指针[基础01]</title>
      <link href="/2019/05/06/C-%E6%8C%87%E9%92%88-%E5%9F%BA%E7%A1%8001/"/>
      <url>/2019/05/06/C-%E6%8C%87%E9%92%88-%E5%9F%BA%E7%A1%8001/</url>
      
        <content type="html"><![CDATA[<p>开始写C++中比较难理解的几个知识点的笔记。</p><a id="more"></a><h1 id="0x00-空指针"><a href="#0x00-空指针" class="headerlink" title="0x00 空指针"></a>0x00 <strong>空指针</strong></h1><p><strong>用途:给指针初始化值。</strong></p><p><strong>特性:空指针不可访问。</strong></p><p>为什么不可访问?</p><p>因为空指针所指向的内存空间的编号是0~255之间的，而这之间的内存是系统预留的，不可访问。</p><p><strong>报错例子</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义空指针</span></span><br><span class="line"><span class="keyword">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尝试修改空指针所指向的空间的值,报错!</span></span><br><span class="line">*p = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><strong>常用情景</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义空指针</span></span><br><span class="line"><span class="keyword">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使指针重新指向内存空间,可行!</span></span><br><span class="line">p = &amp;a;</span><br></pre></td></tr></table></figure><p><strong>小结</strong></p><p>空指针不可访问，常用于初始化指针的操作，空指针可重新指向内存空间。</p><h1 id="0x01-野指针"><a href="#0x01-野指针" class="headerlink" title="0x01 野指针"></a>0x01 <strong>野指针</strong></h1><p><strong>说明:指针指向的是非法的内存空间叫做野指针</strong></p><p><strong>异常:读取访问权限错误</strong></p><p><strong>报错例子:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使指针指向一个未知空间</span></span><br><span class="line"><span class="keyword">int</span> *p = (<span class="keyword">int</span>*)<span class="number">0x1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尝试修改指向的空间的值,报错!</span></span><br><span class="line">*p = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><strong>小结</strong></p><p>我们要尽量避免野指针的操作，因为它是不可控的，万一修改了系统所用空间的某个值，就有可能造成系统崩溃!</p><h1 id="0x02-const修饰指针"><a href="#0x02-const修饰指针" class="headerlink" title="0x02 const修饰指针"></a>0x02 <strong>const修饰指针</strong></h1><p>const修饰指针分为三种场景</p><ul><li><p>const修饰指针————常量指针</p></li><li><p>const修饰常量————指针常量</p></li><li><p>const既修饰指针又修饰常量</p></li></ul><blockquote><p>常量指针</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>,b=<span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义常量指针</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p = &amp;a;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尝试修改指针所指向空间的值,报错!</span></span><br><span class="line">*p = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针重新指向新的空间,可行!</span></span><br><span class="line">p = &amp;b;</span><br></pre></td></tr></table></figure><p>看上面的案例，可以得出，<strong>常量指针是不能修改所指向的空间的值，但可重新指向新的空间</strong>,并且定义时，<strong>const关键字是放在指针的左侧的</strong>。</p><hr><blockquote><p>指针常量</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>,b=<span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义指针常量</span></span><br><span class="line"><span class="keyword">int</span> * <span class="keyword">const</span> p = &amp;a;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改指针所指向空间的值,可行!</span></span><br><span class="line">*p=<span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尝试为指针重新指向新的空间，报错!</span></span><br><span class="line">p = &amp;b;</span><br></pre></td></tr></table></figure><p>看上面的案例，可以得出，<strong>常量指针可修改所指向的空间的值，但不可重新指向新的空间</strong>,并且定义时，<strong>const关键字是放在指针的右侧的</strong>。</p><hr><blockquote><p>既修饰指针又修饰常量</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>,b=<span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义同时const修饰指针常量的指针</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> * cosnt p = &amp;a;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尝试修改指针所指向的空间的值，报错!</span></span><br><span class="line">*p = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尝试为指针重新指向新的空间，报错!</span></span><br><span class="line"></span><br><span class="line">p = &amp;b;</span><br></pre></td></tr></table></figure><p>看上面的案例，可以得出，<strong>如果指针和常量都被const修饰，那么就和const 引用非常类似了</strong>。</p><hr><p><strong>小结</strong></p><p>常量指针</p><ul><li>不可修改所指向的空间的值</li><li>可重新指向新的空间</li></ul><p>指针常量</p><ul><li>可修改所指向的空间的值</li><li>不可重新指向新的空间</li></ul><p>指针和常量都被const所修饰</p><ul><li>不可修改所指向的空间的值</li><li>不可重新指向新的空间</li></ul><p><strong>小技巧</strong></p><blockquote><p>辨别一个指针是常量指针还是指针常量可以关注const关键字是放在指针(解除引用符”*”)的右侧还是做左侧。</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 指针 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+next插入网易云音乐</title>
      <link href="/2019/04/30/hexo-next%E6%8F%92%E5%85%A5%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/"/>
      <url>/2019/04/30/hexo-next%E6%8F%92%E5%85%A5%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/</url>
      
        <content type="html"><![CDATA[<p>让大爷们在阅读博客时能优哉游哉的听着歌看文章。</p><a id="more"></a><h1 id="获取外链"><a href="#获取外链" class="headerlink" title="获取外链"></a>获取外链</h1><p>打开<a href="https://music.163.com" target="_blank" rel="noopener">网易云音乐</a>官网</p><p>找到你喜欢的音乐，可以看到有一个生成外链播放器的超链接，点击即可。</p><p><img src="/2019/04/30/hexo-next插入网易云音乐/01.png" alt="01"></p><p>可以设置是否自动播放和尺寸，然后把代码复制下来看如何插入外链吧!</p><h1 id="插入外链"><a href="#插入外链" class="headerlink" title="插入外链"></a>插入外链</h1><p><strong>如果是插入到文章内，直接把外链放文章里面即可，Markdown是支持的.</strong></p><p><strong>如果是想插入到侧边栏</strong></p><p>需要编辑next/layout/_macro/sidebar.swig文件</p><p>此时我们就需要使用开发者工具插入到自己合适的位置下</p><p><img src="/2019/04/30/hexo-next插入网易云音乐/插哪.png" alt="插哪"></p><p>可以看到size-overview这个div包含了很多div,你需要在sidebar.swig文件内找到这一关键词，把外链加进去即可。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 折腾记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 网易云音乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何用hexo+github-pages搭建博客</title>
      <link href="/2019/04/29/%E5%A6%82%E4%BD%95%E7%94%A8hexo-github-pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/04/29/%E5%A6%82%E4%BD%95%E7%94%A8hexo-github-pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>成功搭建博客之后，想让一起学习的小伙伴也学习搭建一下，所以就有了此篇文章.</p><a id="more"></a><p><img src="/2019/04/29/如何用hexo-github-pages搭建博客/逆光.jpg" alt="逆光"></p><h1 id="为何选择hexo"><a href="#为何选择hexo" class="headerlink" title="为何选择hexo"></a>为何选择hexo</h1><ul><li><p>hexo博客框架的网上资料较多，技术较为成熟.</p></li><li><p>hexo使用Makrdown进行渲染.</p></li><li><p>hexo只需几步就可部署博客.</p></li><li><p>hexo具有丰富的主题/插件可选.</p></li></ul><h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><h2 id="安装Nodejs-Git"><a href="#安装Nodejs-Git" class="headerlink" title="安装Nodejs,Git"></a>安装Nodejs,Git</h2><p>要安装hexo必须得安装Nodejs和Git，这里只提供GNU/Linux的过程。</p><p>大部分发行版自带Git,Nodejs只需要一条命令:</p><p><strong>apt</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo apt install nodejs npm</span><br></pre></td></tr></table></figure><p><strong>pacman</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo pacman -S nodejs npm</span><br></pre></td></tr></table></figure><h2 id="配置Nodejs"><a href="#配置Nodejs" class="headerlink" title="配置Nodejs"></a>配置Nodejs</h2><p><strong>安装完成Nodejs和Git后还需要设置npm的软件源.</strong></p><p>在任意目录下执行如下命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>执行如下命令测试是否设置成功(若范围淘宝的npm镜像源地址则成功):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm config get registry</span><br></pre></td></tr></table></figure><h2 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h2><h3 id="注册Github"><a href="#注册Github" class="headerlink" title="注册Github"></a><strong>注册Github</strong></h3><p><a href="https://github.com/join" target="_blank" rel="noopener">注册Github</a></p><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a><strong>创建仓库</strong></h3><p><a href="https://github.com/new" target="_blank" rel="noopener">创建Github仓库</a></p><p>注意: 仓库名必须是<strong>name.github.io</strong></p><p>例如我的 evanmeek.github.io</p><p><img src="/2019/04/29/如何用hexo-github-pages搭建博客/创建仓库.png" alt="创建Github仓库"></p><p>需要设置两点:</p><ul><li>Git身份标识</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git config --global user.email "你的邮箱"</span><br><span class="line"><span class="meta">$</span> git config --global user.name "你的名字"</span><br></pre></td></tr></table></figure><p>推荐把邮箱和名字设置为Github上的邮箱和名字相同</p><ul><li>SSH密钥</li></ul><p>如果是第一次使用Git，那么默认是没有SSH密钥的，执行如下命令查看:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ls ~/.ssh</span><br></pre></td></tr></table></figure><p>若没有则创建新的密钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ssh-keygen -t rsa -C "你的邮箱"</span><br></pre></td></tr></table></figure><p>创建密钥时会提示你输入一个密码，这样在用这里密钥时就需要输入密码，若不需要直接一路回车吧。</p><p>创建完成后，你会在~/.ssh内看到两个文件</p><p><img src="/2019/04/29/如何用hexo-github-pages搭建博客/ssh目录.png" alt="ssh目录"></p><p>分别是私钥(id_rsa),公钥(id_rsa.pub)</p><p>下一步则是需要在Github中添加刚刚生成的密钥</p><p>首先登陆Github,打开设置.</p><p>如图所示：</p><p><img src="/2019/04/29/如何用hexo-github-pages搭建博客/打开设置.png" alt="登陆Github"></p><p>下一步找到SSH选项</p><p>如图所示：</p><p><img src="/2019/04/29/如何用hexo-github-pages搭建博客/设置SSH.png" alt="设置SSH"></p><p>下一步导入公钥</p><p><img src="/2019/04/29/如何用hexo-github-pages搭建博客/导入密钥.png" alt="导入密钥"></p><p>复制公钥的内容复制到key文本框内，Title随便写一个，可以写你的设备名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><h2 id="安装hexo-1"><a href="#安装hexo-1" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>前面安装完Nodejs和Git之后可以通过一条命令安装hexo</p><p><strong>要使用sudo提权</strong></p><p>执行如下命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>看到Done!之后则为安装成功.</p><h1 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h1><h2 id="初始化hexo博客"><a href="#初始化hexo博客" class="headerlink" title="初始化hexo博客"></a>初始化hexo博客</h2><p>使用如下命令初始化博客</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo init &lt;目录&gt;</span><br></pre></td></tr></table></figure><p><img src="/2019/04/29/如何用hexo-github-pages搭建博客/hexoinit.png" alt="hexoinit"></p><p>初始化完成之后目录结构大概是这样的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>下面分别讲下这些文件或目录分别存放了些什么。</p><p>主配置文件: <strong>_config.yml</strong></p><blockquote><p>主要用于博客的配置信息，后面还会在themes里看到_config.yml，和这个不同，我们只要记住这个是博客的主配置文件.</p></blockquote><p>插件信息: <strong>package.json</strong></p><blockquote><p>包含了当前hexo博客中安装了哪些插件.</p></blockquote><p>模板目录: <strong>scaffolds/</strong></p><blockquote><p>里面包含了可定制的模板文件，在创建或生成新的博文时就会按照这里的模板进行渲染.</p></blockquote><p>资源目录: <strong>source/</strong></p><blockquote><p>在这里包含了你的一些资源文件，例如文章源码，图片等，要注意的是_posts目录并不会在生成渲染时并不会被拷贝到public目录下.</p></blockquote><p>主题目录: <strong>themes/</strong></p><blockquote><p>主题目录，所有的主题都丢在这里。</p></blockquote><hr><h2 id="生成博客"><a href="#生成博客" class="headerlink" title="生成博客"></a>生成博客</h2><p>执行如下命令创建一篇博文:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo n "文章名"</span><br></pre></td></tr></table></figure><p>hexo会在source/_posts目录下创建一个markdown文档，这样就可以开始编写了!</p><p>这一步用于生成静态文件(就是把md转为html的操作)</p><p><strong>要在网站目录(就是初始化的目录下)下执行</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo generate</span><br></pre></td></tr></table></figure><p>这个命令可以简化，并且还可以带两个参数</p><p>简化+参数:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo g -d # 生成+部署(也就是推送到github pages去了，你们先不要执行这一步)</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> hexo g -w # 可以监视有哪些文件被生成了</span><br></pre></td></tr></table></figure></p><hr><h1 id="配置hexo"><a href="#配置hexo" class="headerlink" title="配置hexo"></a>配置hexo</h1><p>这里的user.email和user.name可以不是Github的邮箱或名字，但推荐设置为Github相同.</p><p>下面配置hexo，对于hexo的修改，可以通过_config.yml文件修改大多数设置。</p><p>找到deploy项</p><p>修改为:</p><p><img src="/2019/04/29/如何用hexo-github-pages搭建博客/deploy.png" alt="deploy"></p><p><strong>type为git不能为大写</strong></p><hr><h2 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h2><p>部署博客这里只讲两种，分别是通过Git推送到远程代码托管中心(Github)和本地部署</p><p><strong>本地部署</strong></p><p>执行如下命令:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo s</span><br></pre></td></tr></table></figure><p>执行完后可以通过localhost:4000进行<a href="localhost:4000" target="_blank" rel="noopener">查看</a>.</p><p><img src="/2019/04/29/如何用hexo-github-pages搭建博客/本地部署.png" alt="本地部署"></p><p><strong>部署到Github</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo d</span><br></pre></td></tr></table></figure><p>这样就可以部署到Github了，通过https://你的Github用户名.github.io访问</p><h1 id="寻找主题"><a href="#寻找主题" class="headerlink" title="寻找主题"></a>寻找主题</h1><p><a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo主题</a></p><p>把主题clone到博客目录的themes下，并且修改博客目录下的文件_config.yml的theme项为主题名称，重新生成就可以了。</p><h1 id="使用体验"><a href="#使用体验" class="headerlink" title="使用体验"></a>使用体验</h1><p>还是有一些坑要踩的，如有问题，联系邮箱<a href="mailto:the_lty_mail@foxmail.com" target="_blank" rel="noopener">the_lty_mail@foxmail.com</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> 折腾记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客文章插入图片</title>
      <link href="/2019/04/29/hexo%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
      <url>/2019/04/29/hexo%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在撰写博客文章时，我们会向文章插入一些图片，但是hexo本身要插入图片比较麻烦，这边就可以使用hexo的一款插件，它可以让我们插入图片非常简单。</p><a id="more"></a><h1 id="如何安装"><a href="#如何安装" class="headerlink" title="如何安装"></a>如何安装</h1><p>安装此插件很简单，你只需要在你的hexo目录下执行如下命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>如果安装速度很慢可以把npm源改为国内源。</p><p><a href="https://evanmeek.github.io/2019/04/23/ManjaroLinux%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/">点击打开npm源改为国内源的方法</a></p><p>在设置镜像源-&gt;npm国内源下</p><h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>首先，我们得先设置主目录(博客目录)下的 <strong>_config.yml</strong> 文件.</p><p>找到 <strong>post_asset_folder:</strong> 项，将其修改为 <strong>true</strong></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>使用也十分简单，hexo-asset-image可以时hexo在创建文章时自动在文章保存目录下创建一个同名的目录。</p><p>然后我们就可以把要插入的图片放入其目录，在文章中使用Markdown的插入图片语法即可。</p><h1 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo n "test"</span><br><span class="line"><span class="meta">$</span> mv test.jpg source/_posts/test</span><br></pre></td></tr></table></figure><p>插入图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![图片alt](图片地址)</span><br><span class="line"></span><br><span class="line"># ![test](./test/test.jpng)</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 折腾记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++函数探幽</title>
      <link href="/2019/04/24/C-%E5%87%BD%E6%95%B0%E6%8E%A2%E5%B9%BD/"/>
      <url>/2019/04/24/C-%E5%87%BD%E6%95%B0%E6%8E%A2%E5%B9%BD/</url>
      
        <content type="html"><![CDATA[<!--<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=544070223&auto=1&height=66"></iframe>--><a id="more"></a><p><strong>本章内容</strong></p><ul><li>内联函数</li><li>引用变量</li><li>如何按引用传递函数参数</li><li>默认参数</li><li>函数重载</li><li>函数模板</li><li>函数模板具体化</li></ul><p>本章是介绍C++在C基础上新增的特性，是进入C++领域重要的一步．</p><hr><h2 id="C-内联函数"><a href="#C-内联函数" class="headerlink" title="C++内联函数"></a>C++内联函数</h2><blockquote><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a><strong>说明</strong></h3></blockquote><p>内联函数是C++为提高程序运行速度所做出的一项改进．常规函数和内联函数之间的主要区别不在于编写方式，而在于C++编译器如何将它们组合到程序中．要了解内联函数与常规函数之间的区别，必须深入到程序内部．</p><p>那么，我们现在就深入到程序内部．</p><p>首先我们知道，编译器会把我们的源代码编译成可执行程序－－－－由一组机器语言组成．</p><p>当我们运行它时，操作系统将这些指令载入到计算机内存中，因此每条指令都有特定的内存地址．随后计算机将会逐步执行这些指令．</p><p>执行到函数调用指令时，程序将在函数调用后立即存储该指令的内存地址，并将函数参数复制到堆栈，跳到标记函数起点的内存单元，执行函数代码，然后跳回到被保存的指令处．</p><p>那么，来回跳跃并记录跳跃位置意味着以前使用函数时，需要一定的开销．</p><p><strong>所以</strong></p><p>C++内联函数就提供了另一种选择．内联函数的编译代码与其他程序代码＂内联＂(结合/融合)起来．</p><p>相当于编译器将使用相应的函数代码替换函数调用．</p><p>对于内联代码，程序就不用像常规函数那样跳转，只需要将函数定义时的代码复制一份到函数调用时的位置，直接执行即可，这样将会省去函数调用时，疯狂跳转，标记的开销．</p><p><strong>但是</strong></p><p>虽说这样在某种程度上速度确实要快，但是也是有代价的，例如，程序在N个地方调用同一个内联函数，那么改程序将包含该函数代码的10个副本．这样就会有更大的内存开销，虽然运行速度比常规函数的调用快．</p><p><strong>结论</strong></p><p>我们应该在不同的场景选择不同编写函数的方式．如果执行函数代码的时间比处理函数调用机制的时间长，则节省时间只占整个过程的很小一部分，如果代码执行时间短，则内联函数的调用就可以节省非内联函数调用时间的大部分时间．</p><p>另一方面，由于整个过程相当快，因此就算节省了该过程的大部分时间，但节省时间的绝对值并不大．</p><p>_除非_　:该函数被经常调用</p><blockquote><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a><strong>使用</strong></h3></blockquote><p>使用内联函数只需要做到以下两点即可：</p><ul><li><p>在函数声明前加上关键字<strong>inline</strong>;</p></li><li><p>在函数定义前加上关键字<strong>inline</strong>;</p></li></ul><p>通常的写法是省略原型，将整个定义(函数头和所有的函数代码)放在本应提供原型的地方．</p><p><strong>可能遇到的问题</strong></p><p>在我们编写函数为内联函数时，编译器不一定满足这种要求．</p><ul><li><p>编译器认为该函数过大或识别到函数调用了自己 <strong><em>(内联函数不能递归)</em></strong> .</p></li><li><p>有些编译器没有启动或实现这种特性．</p></li></ul><blockquote><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a><strong>案例</strong></h3></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">square</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123; <span class="keyword">return</span> x * x; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    double a(2.0), b(5.0), c(0);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"此时a="</span> &lt;&lt; a &lt;&lt; <span class="string">"\tb="</span> &lt;&lt; b &lt;&lt; <span class="string">" \tc="</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    square(a);</span><br><span class="line">    b = square(b);</span><br><span class="line">    c = square(<span class="number">7</span> + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"此时a="</span> &lt;&lt; a &lt;&lt; <span class="string">"\tb="</span> &lt;&lt; b &lt;&lt; <span class="string">"\tc="</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该程序的输出为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">此时a=2b=5c=0</span><br><span class="line">此时a=4b=25c=64</span><br></pre></td></tr></table></figure><p>看到上面这个例子，自然就知道不管是内联函数还是常规函数，都是按值传递参数的．</p><p>也就是说，例如 c=square(7+1) 这段代码调用square函数时将会先计算7+1的值再传递给形参x，这就是按值传递.</p><p><strong>这使得C++的内联功能远远胜过C语言的宏定义</strong></p><p><strong>尽管程序没有提供单独的函数原型，但C++的原型特征仍在起作用，因为首次函数出现时是定义函数那么就会充当函数原型.</strong></p><p><strong>这也就意味着，如果给square()传递int或long类型的值，程序将回自动进行强制类型转换为double类型再把值复制给形参</strong></p><h3 id="内联与宏"><a href="#内联与宏" class="headerlink" title="内联与宏"></a>内联与宏</h3><p>inline是C++新增的特性.</p><p>C语言使用预处理语句#define来提供宏－－内联代码的原始实现．</p><p>例如下面这个例子.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SQUARE(X) X*X</span></span><br><span class="line"></span><br><span class="line">a = SQUARE(<span class="number">2.0</span>);</span><br><span class="line">b = SQUARE(<span class="number">3.2</span>++);</span><br><span class="line">c = SQUARE(<span class="number">1</span>+<span class="number">2.3</span>);</span><br></pre></td></tr></table></figure><p>上述示例只有第一个调用才能正常工作，因为C语言的宏定义不是按值传递的．</p><hr><h2 id="引用变量"><a href="#引用变量" class="headerlink" title="引用变量"></a>引用变量</h2><p>引用变量是C++新增的一种复合类型.</p><p>引用是为已定义的变量创建了一个别名．</p><p>例如，将变量a作为b的引用，则不管是使用a还是b都可以表示该变量，因为它们的内存块相同.</p><p>引用变量通常的使用场景是作为函数的形参．</p><p>通过将引用变量作为参数，那么函数将使用原始数据，而不是使用其副本．这样除了指针外引用也可以作为处理大型数据结构的一种途径．</p><hr><h3 id="创建引用变量"><a href="#创建引用变量" class="headerlink" title="创建引用变量"></a>创建引用变量</h3><p>C++使用 <strong>&amp;</strong> 用于声明引用，但是它还有另外一个作用：地址运算符。</p><p>当&amp;为声明引用时可有这样的一个例子:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> &amp; b = a;</span><br></pre></td></tr></table></figure><p>是否感觉跟指针有点相像呢？</p><p>是的，它们确实有点相似，就像声明中double*是指指向double类型的指针，而int&amp;是指指向int的引用。</p><p>上面的例子：引用声明允许将a和b互换————它们指向相同的值和内存单元。</p><p>下面再看一个例子，你将懂得C++中使用&amp;时引用和地址运算符的区别。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> &amp; b = a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"a:"</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"b:"</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"a:"</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"b:"</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"a-address:"</span>&lt;&lt;&amp;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"b-address:"</span>&lt;&lt;&amp;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a:1</span><br><span class="line">b:1</span><br><span class="line">a:2</span><br><span class="line">b:2</span><br><span class="line">a-address:0x7ffdd4c4ae74</span><br><span class="line">b-address:0x7ffdd4c4ae74</span><br></pre></td></tr></table></figure><p>首先我们声明定义了两个变量，一个是a，一个是b，b是指向int类型a变量的引用，所以它们的值和内存单元相同。</p><p>然后b被重新赋值，也就是修改它内存单元的值，相应的与它在同块内存单元的a值也随之变化。</p><p>再然后，我们输出的不是a和b的值了而是输出它们的地址:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"a-address:"</span>&lt;&lt;&amp;a&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>此时的&amp;代表的就是地址运算符。</p><p>经过上面的一些小例子，读者们可能认为C++中&amp;为引用的作用时与指针完全一样啊，但他们还是有些不同的，下面将指出有何不同。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,*p;</span><br><span class="line"><span class="keyword">int</span> b,*p2(&amp;b);</span><br><span class="line">*p = a;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码是可以编译通过的。</p><p><strong>指针在声明时编译器允许不为其进行初始化值</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,&amp;b;</span><br><span class="line">    b = a;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果代码是这样，那么则编译不通过。</p><p><strong>我们可以把引用看成cosnt指针</strong>，因为const指针是必须在创建时进行初始化，一旦于某个变量关联起来，则只能与此变量进行操作。</p><p>也就是说：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a,&amp;b(a);</span><br></pre></td></tr></table></figure><p><strong>仅在表示上等同于</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">int</span> *<span class="title">p</span><span class="params">(&amp;a)</span></span>;</span><br></pre></td></tr></table></figure><p>上面提到“仅在表示上等同于“为什么呢，请看下面的例子。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">int a(10),&amp;b(a);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"a:"</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"b:"</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">b = c;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"c:"</span>&lt;&lt;c&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"a:"</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"b:"</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a:10</span><br><span class="line">b:10</span><br><span class="line">c:20</span><br><span class="line">a:20</span><br><span class="line">b:20</span><br></pre></td></tr></table></figure><p>可以看到最初b引用的是a，但随后b作为c的引用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b = c;</span><br></pre></td></tr></table></figure><p><strong>这就根const指针不同了，因为引用是可以改变引用的对象的，而const指针是不能改变指向的对象的.</strong></p><p>我们仔细研究上面的代码可以发现，因为b的引用对象变化，使得b原先引用对象的值也随之发生了变化，这是由于b和a的地址相同，而该地址与c的地址不同。由于b是a的别名，因此上述赋值语句等效于:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = c;</span><br></pre></td></tr></table></figure><p>也就是说，这意味着”将c变量的值赋给a变量“。</p><p>简而言之，<strong>可以通过初始化声明来设置引用，但不能通过赋值来设置。</strong></p><p>下面有一段有趣的代码，你们可以看看。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> *p =&amp;a;</span><br><span class="line"><span class="keyword">int</span> &amp;b = *p;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">*p = &amp;c;</span><br></pre></td></tr></table></figure><p>上述代码首先是指针p指向的a，而b引用*p(相当于引用a),而后面指针p改变了指向的对象，但是b依然是引用a的。</p><h3 id="将"><a href="#将" class="headerlink" title="将"></a>将</h3>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ManjaroLinux的安装过程</title>
      <link href="/2019/04/23/ManjaroLinux%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/"/>
      <url>/2019/04/23/ManjaroLinux%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/04/23/ManjaroLinux的安装过程/桌面.png" alt="桌面"></p><h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><p>ManjaroLinux官方提供了多个桌面环境的镜像，分别是:</p><ul><li>XFCE </li></ul><p>特点</p><blockquote><p>系统资源低耗，快速</p></blockquote><ul><li>KDE</li></ul><p>特点</p><blockquote><p>高可定制化，消耗系统资源相比XFCE要大，开机时内存占用大概500MB+</p></blockquote><ul><li>GNOME</li></ul><p>特点</p><blockquote><p>简单易用，可定制化，美化较为简单，内存占用大</p></blockquote><p>并且ManjaroLinux在国内有4个镜像源可选，分别是:</p><ul><li><a href="https://mirrors.tuna.tsinghua.edu.cn/manjaro-cd/" target="_blank" rel="noopener">清华大学</a></li><li><a href="http://mirrors.ustc.edu.cn/manjaro-cd/" target="_blank" rel="noopener">中科大</a></li><li><a href="https://mirrors.huaweicloud.com/manjaro-cd/" target="_blank" rel="noopener">华为</a></li><li><a href="http://mirrors.zju.edu.cn/manjaro/" target="_blank" rel="noopener">浙江大学</a></li></ul><p>我们也可以直接使用官方的镜像源获取镜像<a href="https://manjaro.org/get-manjaro/" target="_blank" rel="noopener">Manjaro</a></p><p>选择好自己要使用的桌面环境就可以开始制作启动盘了。</p><h2 id="制作启动盘"><a href="#制作启动盘" class="headerlink" title="制作启动盘"></a>制作启动盘</h2><p><strong>Windows:</strong></p><p>推荐使用<a href="https://github.com/pbatard/rufus/releases/download/v3.5/rufus-3.5.exe" target="_blank" rel="noopener">Rufus</a>进行制作启动盘。</p><p>下载好后直接选择镜像和要进行制作的U盘，选择开始。</p><p><strong>开始时会让你勾选制作方式请选择dd模式</strong></p><hr><p><strong>Linux:</strong></p><p>只需要执行这几条命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo lsblk #列出系统上的所有磁盘</span><br></pre></td></tr></table></figure><p>找到大小磁盘大小跟你U盘差不多的那个磁盘名，一般来说都是<strong>sdb或sda</strong></p><p>如果看到你的U盘对应的MOUNTPOINT有内容，就代表目前磁盘是被挂在了的，你就需要先取消挂载.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo umount /dev/sda* #这里的sda是你U盘的磁盘名，</span><br></pre></td></tr></table></figure><p>取消挂载之后就可以进行格式化了.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo mkfs.vfat /dev/sda #注意这里没有*，并且同上一样sda是你的磁盘名.</span><br></pre></td></tr></table></figure><p>格式化完成后，进入到你下载的镜像目录下，开始进行制作启动盘.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo dd bs=4M if=你的iso镜像路径 of=/dev/sda</span><br></pre></td></tr></table></figure><p>如果终端内有一些返回信息，大概是xxMB/s这样的，就代表制作完成，可以关机已U盘启动了。</p><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><p><strong>最好是在网络稳定的环境下进行</strong></p><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>如果启动盘顺利制作成功，并且设置BISO为以U盘启动，你将会看到:</p><p><img src="/2019/04/23/ManjaroLinux的安装过程/安装选择界面.png" alt="安装选择界面"></p><p><strong>keytable</strong>————设置键盘布局</p><p>通常默认即可</p><p><strong>lang</strong>————设置语言</p><p>设置为zh_CN，代表汉语</p><p><strong>driver</strong>————设置使用的驱动是开源的还是不开源的</p><p>笔记本双显卡，想省电可以用free。</p><p>台式机单显卡，推荐nofree。</p><p><strong>Boot</strong>————选择这个就开始安装了</p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>等待一会就会进入Manjaro的live系统(临时系统，可以用于修复系统或体验系统)</p><p><img src="/2019/04/23/ManjaroLinux的安装过程/开始安装.png" alt="开始安装-01"></p><p>这个就是欢迎页面了，包含了些Manjaro的使用文档，支持，参加项目等等。</p><p>标题栏的左边有个下拉栏，可以选择语言，然后点击Lanunch installer或者开始安装即可。</p><p>点击后还可以设置一次语言，默认为中文了</p><p>然后就设置位置，用于设置时区的，我们选择Asia-Shanghai，如果有联网通常会自动选择。</p><p>下一步就是设置键盘布局，直接默认就好，有特殊需求请自行折腾。</p><p>再下一步就是分区了，这一步是挺重要的，请认真看。</p><p>默认情况下有两种选项:</p><p><strong>抹除磁盘</strong></p><p>将磁盘全部数据清除，分区是Manjaro自动帮你分配的.</p><p>这里可以主要到有两个选项，Swap(no Hibernate)和(witch Hibernate)，它们的区别分别是，交换空间是否用于休眠功能。</p><p><strong>手动分区</strong></p><p>选择手动分区之后，你将看到:</p><p><img src="/2019/04/23/ManjaroLinux的安装过程/分区.png" alt="分区"></p><p>如果你是单硬盘(也就是只有一个硬盘,mdzz)</p><p>那比较简单(就算有多个也没啥)</p><p>点击新建分区表，会让你选择创建哪种，默认第一种即可（新手都推荐MBR，我不是歧视…)</p><p>然后就可以看到有一个空闲空间，选中它，然后可以看到<strong>创建</strong>按钮可以点击了</p><p>然后你就点击吧…</p><p>你就可以看到创建分区的窗口，我们要创建的分区是<strong>根目录,主目录，引导</strong></p><blockquote><p>引导的挂载点: /boot/efi</p></blockquote><p>记得标记点为:boot 和 esp</p><blockquote><p>根目录的挂载点: /</p></blockquote><p>记得标记点为:root</p><blockquote><p>主目录的挂载点: /home</p></blockquote><p><img src="/2019/04/23/ManjaroLinux的安装过程/分区标识.png" alt="分区标识"></p><p>如果是多硬盘，在存储器那里选择另一块磁盘，把主目录安装在那。</p><p>要注意的是主目录要选择扩展分区。</p><p>下一步就是设置一些用户信息啊，密码啊什么的，自己看着来，这里写几点不要做的事。</p><ul><li><p>用户名首字母不要大写</p></li><li><p>密码不要太简单</p></li></ul><p>下一步摘要可以看到一些信息，你看你自己的分区有没有搞错，看不懂的话直接下一步吧。。。</p><p><img src="/2019/04/23/ManjaroLinux的安装过程/摘要.png" alt="摘要"></p><p>静静等待吧..安装好后会提示你重启，你也可以再玩一下。。不过一般是等不及直接重启看新系统了。</p><h2 id="设置镜像源"><a href="#设置镜像源" class="headerlink" title="设置镜像源"></a>设置镜像源</h2><p>选择一个好的源是使用Linux体验是否良好的一个重要因素。</p><h3 id="官方软件包源"><a href="#官方软件包源" class="headerlink" title="官方软件包源"></a>官方软件包源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo pacman-mirrors -i -c China -m rank</span><br><span class="line"><span class="meta">$</span> sudo pacman -Syu</span><br></pre></td></tr></table></figure><p>随便选一个就好，推荐中科大的(USTC).</p><h3 id="Aur软件包源"><a href="#Aur软件包源" class="headerlink" title="Aur软件包源"></a>Aur软件包源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo vim /etc/pacman.conf #不一定要使用vim，你可以使用其他编辑器，如果没有默认安装vim可以用vi</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> sudo pacman -Syu</span><br></pre></td></tr></table></figure><p>在最后一行输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch</span><br></pre></td></tr></table></figure><p>安装签名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure><h3 id="npm国内源"><a href="#npm国内源" class="headerlink" title="npm国内源"></a>npm国内源</h3><p>首先你得先下载npm和nodejs</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo pacman -S npm nodejs</span><br></pre></td></tr></table></figure><p>打开终端输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>测试是否成功:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm config get registry</span><br></pre></td></tr></table></figure><p>如果看到上面这个链接就对了</p><h3 id="pip国内源"><a href="#pip国内源" class="headerlink" title="pip国内源"></a>pip国内源</h3><p>修改~/.pip/pip.conf</p><p>(没有则创建)</p><p>修改为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure></p><p>你也可以使用其他的源</p><p><a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">清华</a></p><p><a href="http://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="noopener">阿里云</a></p><p><a href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">中国科技大学</a></p><p><a href="http://pypi.douban.com/simple/" target="_blank" rel="noopener">豆瓣</a></p><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><p>首先安装yay，它可以像使用pacman一样安装aur里面的软件，aur即第三方软件库</p><p>Install Yay</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo pacman -S yay</span><br></pre></td></tr></table></figure><p>安装Vim，VSCode，CLion，IDEA，网易云，搜狗输入法，Chrome，微信，OracleJDK8</p><p>Install Vim</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo pacman -S Vim</span><br></pre></td></tr></table></figure><p>Install VSCode</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo pacman -S visual-studio-code-bin #pacman用的是vscode的二进制</span><br></pre></td></tr></table></figure><p>Install OracleJDK8</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> yay -S jdk8 #这里就是由第三方打包了的</span><br></pre></td></tr></table></figure><p>Install 搜狗输入法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo pacman -S fcitx-im fcitx-configtool fcitx-sogoupinyin</span><br></pre></td></tr></table></figure><p>再编辑配置文件~/.xprofile(若没有创建即可)</p><p>修改为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export GTK_IM_MODULE=fcitx</span><br><span class="line"></span><br><span class="line">export QT_IM_MODULE=fcitx</span><br><span class="line"></span><br><span class="line">export XMODIFIERS=&quot;@im=fcitx&quot;</span><br></pre></td></tr></table></figure><p>注销后就能使用搜狗输入法了</p><p>Install IDEA</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> yay -S intellij-idea-community-edition #社区版 IDEA</span><br><span class="line"><span class="meta">$</span> yay -S intellij-idea-ultimate-edition #付费版 IDEA</span><br></pre></td></tr></table></figure><p>Install CLion</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> yay -S CLion</span><br></pre></td></tr></table></figure><p>Install 网易云音乐</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo pacman -S netease-cloud-music</span><br></pre></td></tr></table></figure><p>Install Chrome</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo pacman -S google-chrome</span><br></pre></td></tr></table></figure><p>这样就能完成基本的日常使用啦~</p><h2 id="使用体验总结"><a href="#使用体验总结" class="headerlink" title="使用体验总结"></a>使用体验总结</h2><p>稀稀算来，我用Linux也有一年多了，中间尝试了Ubuntu-16.04,18.04 Deepin-15.6-&gt;15.9.4 LinuxMint17 ArchLinux </p><p>最终还是选择了Manjaro-kde</p><p>非常建议配置不是太差的同学可以用下kde桌面，相比gnome可定制化更强（gnome更简单)，并且我感觉kde比gnome流畅些，也要比dde流畅。</p><p>这个总结也没有太完善，以后还会开篇新文章写的，最后秀图。</p><p><img src="/2019/04/23/ManjaroLinux的安装过程/编辑文章时截图.png" alt="Manjaro安装过程编写文章时截图"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 折腾 </tag>
            
            <tag> 软件使用 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
