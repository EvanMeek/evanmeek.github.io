{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/exturl.js","path":"js/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatPay.png","path":"images/wechatPay.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/aliPay.png","path":"images/aliPay.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/background.png","path":"images/background.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/card.png","path":"images/card.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/background2.png","path":"images/background2.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/img.jpg","path":"images/img.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.all-contributorsrc","hash":"d139a3b623b2e40bbff5c96ad44adf7dbdbc5be1","modified":1560704940800},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1560704940800},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1560704940800},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1560704940800},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1560704940800},{"_id":"themes/next/.gitignore","hash":"3558a8b174618c7a643aceb13233edd729813f9a","modified":1560704940800},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1560704940800},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1560704940800},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1560704940800},{"_id":"themes/next/README.md","hash":"7958c3f70b2133b479ddaf525cc4b6d87a37e04a","modified":1560704940800},{"_id":"themes/next/_config.yml","hash":"c4ea032b5814bafeea0907fd9be5775128e9333c","modified":1560705835040},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1560704940800},{"_id":"themes/next/bower.json","hash":"8fa4f26f5205cbc64d33318d1be5d35b2667398c","modified":1560704940800},{"_id":"themes/next/gulpfile.coffee","hash":"23bd9587807edc4dbecb5c5a29ab96ade24458b5","modified":1560704940803},{"_id":"themes/next/package.json","hash":"888bcacea284ec536a1428ad957a78dfb3ec255d","modified":1560704940807},{"_id":"source/Qt5/index.md","hash":"16c23dcda76ba24b4877926d47b82106c857fe70","modified":1560704940773},{"_id":"source/categories/index.md","hash":"c253f6262eddb81f50f7e92baa7d4a0185acdbf2","modified":1560704940793},{"_id":"source/Linux/index.md","hash":"a1bd41b7067d0810e698f68913b6118cbe227117","modified":1560707345967},{"_id":"source/_posts/2008年5月12日14时28分04秒.md","hash":"c5ea941e3cf7a39609098a2dd898c51c3a5bd0dd","modified":1560704940773},{"_id":"source/_posts/2019年的规划.md","hash":"e1a6eeaac7854e8fbb7547a19addb2429a06d714","modified":1560704940773},{"_id":"source/_posts/C-内存四区之代码区与全局区.md","hash":"83c3e9f6d0e2a8816edfbe6d1fe4a20f80a67bed","modified":1560704940773},{"_id":"source/_posts/C-内存四区之堆区.md","hash":"e15526c51ce83aae48d53fed6cfbafc4709f1432","modified":1560704940773},{"_id":"source/_posts/C-内存四区之栈区.md","hash":"69104dcc33c9f327aab970295d8879f2747a3767","modified":1560704940773},{"_id":"source/_posts/C-友元.md","hash":"3b1582401978a7783c9cdad7fd084250221d764c","modified":1560704940777},{"_id":"source/_posts/C-函数探幽.md","hash":"2a87dc1c4e79a5ddaccb5ec6d63b672f6ca0966c","modified":1560704940773},{"_id":"source/_posts/C-指针-基础01.md","hash":"efe160c3d372e21f9859c3490b819fb0b7f5a381","modified":1560704940777},{"_id":"source/_posts/C-指针-基础02.md","hash":"5c33a68bef7c0ee36e11753bbd16a3c8a5ea450e","modified":1560704940777},{"_id":"source/_posts/C-的命名空间与作用域.md","hash":"e7541a53f2f0e02ae0667c23ba4510a3a3a3a837","modified":1560704940777},{"_id":"source/_posts/C-读写文件.md","hash":"9a7850229a5ffa7ff0f025b66d1a9cee48694796","modified":1560704940777},{"_id":"source/_posts/Learn-Qt5-HelloWorld.md","hash":"89630e4f7d4571f85dbb3c86c1ff2d8bd5c4c4aa","modified":1560704940777},{"_id":"source/_posts/Learn-Qt5-Qt模块简介.md","hash":"b8fec99cf4bca9c5a642c8e35a73bc840dda058a","modified":1560704940777},{"_id":"source/_posts/Learn-Qt5-信号槽.md","hash":"7ad5053a4e308340b501ea13789f4b1dc4613f64","modified":1560704940777},{"_id":"source/_posts/Learn-Qt5-自定义信号槽.md","hash":"1b0e1dce8ce9fd4a1dcb3e9b22a7808ed519f069","modified":1560704940777},{"_id":"source/_posts/Linux-Linux命令行简介-0.md","hash":"3c129b8dccb39281a4867062ddd4baaddad14d0c","modified":1560704940777},{"_id":"source/_posts/Linux-Linux命令行简介-man命令.md","hash":"0d565ff70854c497155ac8b69cab3f59155f835f","modified":1560704940777},{"_id":"source/_posts/Linux-文件和目录操作命令-1.md","hash":"5ebbfc083375a103d2b6da9935a4e3620c473ebd","modified":1560704940777},{"_id":"source/_posts/Linux中的解压与压缩.md","hash":"315c8b0781112d2f49a59de124926b8e943ecda4","modified":1560704940777},{"_id":"source/_posts/ManjaroLinuxTG讨论群组.md","hash":"d07e8516f78dadabdd29ebef18cc96a715769420","modified":1560704940777},{"_id":"source/_posts/ManjaroLinux的安装过程.md","hash":"47e96f0542a4246cdd300115a5ff0375c08bf921","modified":1560704940777},{"_id":"source/_posts/fcitx5安装与配置.md","hash":"82c9f643c4493412dfdf1ff82b0917da64bc8f64","modified":1560704940783},{"_id":"source/_posts/hexo-next插入网易云音乐.md","hash":"14e906fb89646ca557003f1e4dfd335e51bb2b62","modified":1560704940787},{"_id":"source/_posts/hexo博客文章插入图片.md","hash":"558f15f9aba7a586f16cb3dc4b6be67043d88e0c","modified":1560704940787},{"_id":"source/_posts/如何用hexo-github-pages搭建博客.md","hash":"3914749b99ea79f5e84920cf507723692e986c71","modified":1560704940787},{"_id":"source/_posts/如何自学编程.md","hash":"e10482035620aab36ee98acae72ed6b8b8e68fc2","modified":1560704940793},{"_id":"source/_posts/我的Linux之路.md","hash":"98695246419a1381a04c23cf514995fe1f6cfba4","modified":1560704940793},{"_id":"source/_posts/常用算法-1.md","hash":"bb94988d1671d648d275acad6031ebc2eca6437b","modified":1560704940793},{"_id":"source/_posts/深拷贝和浅拷贝的区别.md","hash":"4df9447000917c6f6f08e727f3b598e8ac01752b","modified":1560704940793},{"_id":"source/_posts/终端多窗口神器——Screen.md","hash":"b99e62af0cc6e8d128ed650502921f24c4459a24","modified":1560704940793},{"_id":"source/_posts/解决KDE下部分应用不能使用fctix中文输入法的问题.md","hash":"4c13009cf28143e7192350a99ebf3e89b0bfd5a9","modified":1560704940793},{"_id":"source/tags/index.md","hash":"603136cef8b46b91aa07a80a7abd0716b1217709","modified":1560704940793},{"_id":"source/关于我/index.md","hash":"8dd11324b17266ba9f9d60ad990ac7d5db49ca48","modified":1560704940793},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"c149f003d03501565e7688915cd8f2e99fbf8f42","modified":1560704940800},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"285a95aca36e0ac770bcde2b35e3b572d45d1518","modified":1560704940800},{"_id":"source/_posts/我儿子的博客.md","hash":"f0af5adf03a78befaeded83a43f47d14bd1cbb65","modified":1560704940793},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1560704940800},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"492b2c159d871e5b5d4c70d259f36e603afe192d","modified":1560704940800},{"_id":"themes/next/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1560704940800},{"_id":"themes/next/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1560704940800},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1560704940800},{"_id":"themes/next/.github/lock.yml","hash":"585d2c471047be320aa62f2b74dad797bf09c530","modified":1560704940800},{"_id":"themes/next/.github/mergeable.yml","hash":"8e3a6abc74b5cba57f9586fe6d98762fd4fc9b04","modified":1560704940800},{"_id":"themes/next/.github/release-drafter.yml","hash":"b4476ada5c62ee7d63ba2e59ead2ec4897086e3c","modified":1560704940800},{"_id":"themes/next/.github/stale.yml","hash":"41bf97ee86b8940a0b2e754499ec77fd2b44b717","modified":1560704940800},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1560704940800},{"_id":"themes/next/.github/topissuebot.yml","hash":"10665bf2b5aba351725715c71e94ad183a0e8f18","modified":1560704940800},{"_id":"themes/next/.github/weekly-digest.yml","hash":"404e4ccb7fcd6587bc9b0247a7a7ff256d21f2cb","modified":1560704940800},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1560704940800},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"0d2f22ea09dd1ef63c66164e048d8239d2ccb2b8","modified":1560704940800},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1560704940800},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1560704940800},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1560704940800},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"212a36d57495990b5f56e46ca8dce1d76c199660","modified":1560704940800},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1560704940800},{"_id":"themes/next/docs/MATH.md","hash":"e6023505dcccaef0b856102543585a13fc6af0b1","modified":1560704940800},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1560704940800},{"_id":"themes/next/languages/de.yml","hash":"9e524b2bdfb848504b93a51c5650e76bba5fa9e0","modified":1560704940803},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1560704940803},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1560704940803},{"_id":"themes/next/languages/es.yml","hash":"1752429687861b5cedd063c6ebe5dacefbe7e5a7","modified":1560704940803},{"_id":"themes/next/languages/fr.yml","hash":"7005c2b42c2c6e82bd7a1be5cc2f443b5fc79105","modified":1560704940803},{"_id":"themes/next/languages/id.yml","hash":"1c4868837f5109f1df863b04fe627352c31d404b","modified":1560704940803},{"_id":"themes/next/languages/it.yml","hash":"b30ff77ad8044e3b021a3b09187cd377dc789fd2","modified":1560704940803},{"_id":"themes/next/languages/ja.yml","hash":"1dc35e436da6214cdb3c2ff44bc4a06d0be5b9a0","modified":1560704940803},{"_id":"themes/next/languages/ko.yml","hash":"20bfaa7600d35235996c18e5c13dcef89c119626","modified":1560704940803},{"_id":"themes/next/languages/nl.yml","hash":"1c44b3cb2f817808607f3bf6ef47f58ce7599995","modified":1560704940803},{"_id":"themes/next/languages/pt-BR.yml","hash":"08b913a5cf4cc160083069cb4dfb2d66eecd1218","modified":1560704940803},{"_id":"themes/next/languages/pt.yml","hash":"8ddac820e2c17b484b56c0da8881e142b10e221b","modified":1560704940803},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1560704940803},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1560704940803},{"_id":"themes/next/languages/uk.yml","hash":"1eb59e581568da9a81d6e20541b4ada5fc1c55c0","modified":1560704940803},{"_id":"themes/next/languages/vi.yml","hash":"ba7aff8f88e03f69a0acf7f1b90ee03e077ee88e","modified":1560704940803},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1560704940803},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1560704940803},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1560704940803},{"_id":"themes/next/layout/_layout.swig","hash":"74701fcf2303d59400587436ab4c244e04df7ad9","modified":1560704940803},{"_id":"themes/next/layout/archive.swig","hash":"7e8f3a41a68e912f2b2aaba905d314306ccaf794","modified":1560704940807},{"_id":"themes/next/layout/category.swig","hash":"dda0e6b2139decaf5e865d22ec9d45fdb615a703","modified":1560704940807},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1560704940807},{"_id":"themes/next/layout/page.swig","hash":"d8a6cbf6f611c5d68d5da430cb6dc7010ff2c7e0","modified":1560704940807},{"_id":"themes/next/layout/post.swig","hash":"f74929fd792541916eb25c2addfb35431be071ba","modified":1560704940807},{"_id":"themes/next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1560704940807},{"_id":"themes/next/layout/tag.swig","hash":"a6be69a90924c9d2f4d90fb4867234859bd2c2e9","modified":1560704940807},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1560704940807},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1560704940807},{"_id":"themes/next/source/404.html","hash":"a5991bb3598c5d934bd97e3bc4ed14b71ebf1e62","modified":1560704940807},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1560704940847},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1560704940847},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560704940810},{"_id":"source/_posts/2008年5月12日14时28分04秒/操场.webp","hash":"84b7577e7d9c8c41cde1d1a41606d9077e4c682d","modified":1560704940773},{"_id":"source/_posts/2008年5月12日14时28分04秒/流量图.webp","hash":"27c7ab59ae1f74cfea9a7cb67f9502ff3f4144be","modified":1560704940773},{"_id":"source/_posts/2008年5月12日14时28分04秒/空降.webp","hash":"9a4e00e6b4f76fcef94423bfa1910da06a01364f","modified":1560704940773},{"_id":"source/_posts/C-内存四区之代码区与全局区/代码区示意图.png","hash":"2a6b0689ddce4a392d7682b7cc097553ba275324","modified":1560704940773},{"_id":"source/_posts/C-内存四区之堆区/test.png","hash":"23c51bc2893f2c2b8828d47a5d531ac10111c300","modified":1560704940773},{"_id":"source/_posts/C-指针-基础02/指针位偏移.png","hash":"156676e17c34db6889b740035c5afebc560c79f4","modified":1560704940777},{"_id":"source/_posts/C-读写文件/二进制文件.png","hash":"5fce0c55af8a1d1a375ab1dd71c7b06f3416e13c","modified":1560704940777},{"_id":"source/_posts/Linux-Linux命令行简介-0/1.1.2-0","hash":"8c8736d267902d23fd9defe497df7bb07e753d62","modified":1560704940777},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1560704940847},{"_id":"source/_posts/hexo-next插入网易云音乐/插哪.png","hash":"8928d6bd2393fb9cebf22a137d4f198a1bca8f1f","modified":1560704940787},{"_id":"source/_posts/如何用hexo-github-pages搭建博客/deploy.png","hash":"e7b85d668727ff191542d33f0f8b7fd4626216d9","modified":1560704940787},{"_id":"source/_posts/如何用hexo-github-pages搭建博客/ssh目录.png","hash":"6929462dbbece6c66d66111337bc50954f3420e1","modified":1560704940790},{"_id":"source/_posts/如何用hexo-github-pages搭建博客/导入密钥.png","hash":"eb1ed1a6da91cf7a446f714ca7ad95edde7a4545","modified":1560704940790},{"_id":"source/_posts/如何用hexo-github-pages搭建博客/打开设置.png","hash":"a277cee3b835adfc37ce01e798a5302a5ae70e02","modified":1560704940790},{"_id":"source/_posts/终端多窗口神器——Screen/detachedInfo.png","hash":"39337b8922e262fb456a13464188e1d145199b97","modified":1560704940793},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c37a60580c901c79ccb22564b228a46e06207445","modified":1560704940800},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"57e1e06e845193e80c7df4a4454af28352526f7a","modified":1560704940800},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"07c423cce4157b8e2dbf60907ccbf3f18c4cf98a","modified":1560704940800},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"0b0727ff4d5180ae67f930fb4f8e9488e33eda9f","modified":1560704940800},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1560704940800},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1560704940803},{"_id":"themes/next/docs/ru/README.md","hash":"4d7ef717d0b57288e606996ee56c20ffd59d5a99","modified":1560704940803},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1560704940803},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"caa624092175d44e3d3a8c6ca23922718da2354c","modified":1560704940803},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bc43beb3af74d64fbd3920539d08861e4cadb9a0","modified":1560704940803},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"b218e30df4126b6adc87684775ac4c86ea7f7958","modified":1560704940803},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1560704940803},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1560704940803},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"115ffbde2b3ce01ef1f8c2b3833e6f6794650132","modified":1560704940803},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b76ccbc658024e86639cfa5f8a3817647fc8d651","modified":1560704940803},{"_id":"themes/next/docs/zh-CN/README.md","hash":"1b5bd6ae5781137d81dc8667e912d3df6eeab260","modified":1560704940803},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1560704940803},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1560704940803},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1560704940803},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1560704940803},{"_id":"themes/next/layout/_macro/my-copyright.swig","hash":"b787d5c965ffe1a9cb8c3fbfa767f3a62bfe2ea0","modified":1560704940803},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"f29b50d83bcdc9e70696b6a8a8917d8b2ad4be10","modified":1560704940803},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"89b0a0e64637bf5b0cfea0a23642df3d95eedfa4","modified":1560704940803},{"_id":"themes/next/layout/_macro/post.swig","hash":"06c586ee180ee66989804dad666a7951c34f93fc","modified":1560704940803},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"23b9dacfac1e5a137b1f4687a3eddb5d2c0fc7bf","modified":1560704940803},{"_id":"themes/next/layout/_partials/comments.swig","hash":"09a01a124bc1cf4ba369fa6101f547906b68edc2","modified":1560704940803},{"_id":"themes/next/layout/_partials/footer.swig","hash":"589f545333e21a8c7823bce89ab45cf1eb7db6e2","modified":1560704940803},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"6357537ac0bb114aed4d61bafb39e6690a413697","modified":1560704940803},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1560704940803},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"06dac109504812b63766a80ede9ddacbd42d227d","modified":1560704940803},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"50be1762f60222379a8bef5e42ab1a0f3872b7ff","modified":1560704940803},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"61ae10d41f67ece004a025077fdb28724af05090","modified":1560704940803},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"012e3ece672cc3b13d5e032139f328d3426d7d65","modified":1560704940803},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"edaff4766e0c05fd5c889d9dd32884d376bef9d9","modified":1560704940803},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"ccd13d73429ef91ef5e8b7d9fa43c8188facdf41","modified":1560704940803},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"83470eb401f78f4683907c48ad6760b90730daa3","modified":1560704940803},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"4ccf2abbfd070874265b0436a3eff21f7c998dfb","modified":1560704940803},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"10b61a8bac671e375916a4d234c120117098a78f","modified":1560704940803},{"_id":"themes/next/layout/_third-party/chatra.swig","hash":"eefb68b69b4b0ed558ee0324ccd711990059b20d","modified":1560704940803},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"01ded5e1bad89a6f8d64cd063e3e4e42c20d33bc","modified":1560704940803},{"_id":"themes/next/layout/_third-party/mermaid.swig","hash":"d6e6ddda836bd9e2e8d9767a910c7d3280080e81","modified":1560704940803},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"2c4a66be4677d3e4dec3f169ac8a769098dad1fe","modified":1560704940803},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"810a9b2a6059f46c4a2ddb178f1eaa4c5e23750b","modified":1560704940803},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5db80e8d7ea3f29e998320f79508f7e14342a33c","modified":1560704940803},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"c28f9dc96ab735daeb7f599f86470aa5a83c03cf","modified":1560704940803},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"cbe40cb67dad15ade967b0f396c1a95b6871f76a","modified":1560704940803},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"2398e5cd0cb466953b6e7a42c2b2caddebf3c348","modified":1560704940803},{"_id":"themes/next/layout/_third-party/tidio.swig","hash":"912368c41de675f458b267a49a99ae3e7e420ebb","modified":1560704940807},{"_id":"themes/next/scripts/filters/exturl.js","hash":"79ad823ca803cb00e0bfc648aa6c9d59711e0519","modified":1560704940807},{"_id":"themes/next/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1560704940807},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1560704940807},{"_id":"themes/next/source/css/main.styl","hash":"e010ec8ac73268a0f137204c89e0080ab8d59b3d","modified":1560704940810},{"_id":"themes/next/source/css/style.styl","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1560704940810},{"_id":"themes/next/scripts/tags/exturl.js","hash":"d605918cf819887e9555212dbe12da97fd887a0b","modified":1560704940807},{"_id":"themes/next/scripts/tags/button.js","hash":"f3b4f7ae7e58072bbf410d950a99a0b53cbc866d","modified":1560704940807},{"_id":"themes/next/scripts/tags/full-image.js","hash":"fcb41c1c81560ed49dc4024654388a28ee7d32b0","modified":1560704940807},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"598220fa92ff3540dcab74f633ba41523daa8364","modified":1560704940807},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1560704940807},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1560704940807},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1560704940807},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1560704940807},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1560704940807},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1560704940807},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1560704940807},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1560704940807},{"_id":"themes/next/source/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1560704940843},{"_id":"themes/next/source/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1560704940843},{"_id":"themes/next/source/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1560704940843},{"_id":"themes/next/source/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1560704940843},{"_id":"themes/next/source/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1560704940843},{"_id":"themes/next/source/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1560704940843},{"_id":"themes/next/source/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1560704940843},{"_id":"themes/next/source/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1560704940843},{"_id":"themes/next/source/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1560704940843},{"_id":"themes/next/source/js/utils.js","hash":"3c987de7cfb944c33e9e527f1214724c7aafc796","modified":1560704940843},{"_id":"source/_posts/ManjaroLinux的安装过程/分区标识.png","hash":"675089cbcbe932471d6ce5c7b3a8671ee689c8c2","modified":1560704940780},{"_id":"source/_posts/ManjaroLinux的安装过程/分区.png","hash":"6a54d049cbfe3fc4d65d6a027b36ad758ed61b6c","modified":1560704940780},{"_id":"source/_posts/hexo-next插入网易云音乐/01.png","hash":"f1bbad3d02ccb53b8898fc7ad337ef5ea368b2ae","modified":1560704940787},{"_id":"source/_posts/如何用hexo-github-pages搭建博客/创建仓库.png","hash":"2008592b8eda92867b78f6deb69971dce00c7b13","modified":1560704940790},{"_id":"source/_posts/如何用hexo-github-pages搭建博客/设置SSH.png","hash":"e9f200e3559e93a06fa4e8b9c37a486949081a45","modified":1560704940790},{"_id":"source/_posts/终端多窗口神器——Screen/DefalutCommandKey.png","hash":"6a5a12569b253f7bec7087f7f6ad3eea3791218c","modified":1560704940793},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560704940807},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560704940807},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560704940807},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560704940807},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560704940810},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560704940810},{"_id":"source/_posts/ManjaroLinux的安装过程/安装选择界面.png","hash":"25d2152a8bb8e8e2eb904610ef7068576c9b7d11","modified":1560704940780},{"_id":"source/_posts/ManjaroLinux的安装过程/开始安装.png","hash":"2ac6b5ee42b758265b9c4d130d303e2050e8a929","modified":1560704940780},{"_id":"source/_posts/ManjaroLinux的安装过程/摘要.png","hash":"763ba8b64bc381afc7eb4b0166db36741399872a","modified":1560704940780},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1560704940810},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1560704940810},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1560704940810},{"_id":"themes/next/source/images/alipay.jpg","hash":"ac4b5bc8f3ae1a8a512b0d0663e2abf0bfea246d","modified":1560704940810},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1560704940823},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1560704940823},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1560704940823},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1560704940823},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1560704940823},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1560704940823},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1560704940823},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1560704940823},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1560704940843},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1560704940823},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1560704940843},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1560704940843},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1560704940843},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1560704940843},{"_id":"themes/next/source/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1560704940843},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1560704940803},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"fb33f499022cd02722f834fcef1a0e193362cfde","modified":1560704940803},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"02bb5748e8540b024e7f4008a9e640890b45280f","modified":1560704940803},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"fc6bafc8c633afadc538c5afa5620ea2a1cdcb84","modified":1560704940803},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1560704940803},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"648bf7eda66629592cb915c4004534b3913cbc22","modified":1560704940803},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"36eae78a4d7160a1c5e59ca3f7333f00b43d359b","modified":1560704940803},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"71af31fea5913fd30c233e555ef13cf2c9768f72","modified":1560704940803},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"0fa4fadb39467b01cede49f21b22e86b1a2da805","modified":1560704940803},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"5adc60100e129c1d0307bdcaa0c7b8e8375a6ea4","modified":1560704940803},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"2940df694fff28e8bf71b6546b4162f1e38227db","modified":1560704940803},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"3615db591dd910fb9fa96542734c7ec0ef05019c","modified":1560704940803},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"eea95b785c9c36d28e1839619793f66e89773bee","modified":1560704940803},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"d44f025eb93c99ddf90202d8293ccf80689a00c7","modified":1560704940803},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"ef11b5be5bfb2f0affe82cf521c002b37fef9819","modified":1560704940803},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1560704940803},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1560704940803},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a5587bd1f60d35e58618576cec45e662aa44ea1f","modified":1560704940803},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"7d1693416a5dc098f4723a53da2e2d1fc2d6e075","modified":1560704940803},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"6f181cc188ecbe5e607fd989756e470d4cb9765d","modified":1560704940803},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"15b542f5b06b7532234af367340b9ed9fcebb0ac","modified":1560704940803},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"b45e934d24d76ec6b6a790e92bdb3d56186b0e2a","modified":1560704940803},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"5b05f165547391bf231e52f56f3d925efc09bc44","modified":1560704940803},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1560704940803},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1560704940803},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"e42604fbb17648484e5f12afe230d826de089388","modified":1560704940803},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0097e45e7b671f8006b8b2d3c4f95cacc76a983c","modified":1560704940803},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"a5723950c343d220270bfd27bd30050eda6c3fb3","modified":1560704940803},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"798d67e4a736613ab899eabe6529091bbcda7850","modified":1560704940803},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"8eadb929c9e50e58502ccad2dc2657746f8c592a","modified":1560704940803},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"591b2ccd9713ccb922b9fcf5e278b6de9c5ec30b","modified":1560704940803},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"08cd47ef8572121b7811342d3c9a84a338a18191","modified":1560704940803},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"050ea01f25cfe492be9bb77b409644d623fdf2dc","modified":1560704940803},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1560704940803},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"d422beaf35a5d2646feaa098bc3e5adf691c7565","modified":1560704940803},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"f240a50cd9b627620d9a374a29cf95f0c5e99d7c","modified":1560704940803},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c754f699c90f6278b9159eff1855c17bc713ee96","modified":1560704940803},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1560704940803},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"92e04a2b9e0c3df594bc22235d1894e5ad458dfc","modified":1560704940803},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"0dd5b315d1da55dbfc10f51a1f8952f72eba2720","modified":1560704940803},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"4a966b7ffe2d80ff1b3dd0fd14b355766dc5c70f","modified":1560704940803},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"3533167c4295637b91d90f3bae7c651cd128bb6e","modified":1560704940803},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"c77a2e7ef5f449a445fb4d36b055721fba4a81af","modified":1560704940803},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"3cfeafefc672d9a7704650ebfb2f9d8668b38d9a","modified":1560704940803},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"e8f91c571ceb4b80aafebc4d36b89fb41b1ae040","modified":1560704940803},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"388efc86af7f19c05ad0e26720cd24ee012d20b9","modified":1560704940803},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"2cbaae65a020bbb0e9265364488aff8bf84fa48d","modified":1560704940803},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"5856d5f701e51dfae1fd6fb486cefde67effd555","modified":1560704940803},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4a908b613518878b9b69576c5dba4a5185f552ab","modified":1560704940803},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a7e304b05a44279d3e4f611908d7faef9dc14d7c","modified":1560704940803},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"c2cb2f384bc30d31cdccf9794a729c03e687b45c","modified":1560704940803},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"601774d8672577aefbcefac82c94b01f0338da31","modified":1560704940803},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"0a13dfd2de52a96901039098c6fc7b515edfc50b","modified":1560704940807},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"ea94aa85034c6d1b6bb865aecea55c73f8a14501","modified":1560704940807},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b3eaab6a269aa3fcbafe24fd06f0c9206dc12716","modified":1560704940807},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1560704940807},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2e8fb29aa92325df39054b5450757858c6cebc41","modified":1560704940807},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"2036bbb73afd43251982ce824f06c6e88d35a2ef","modified":1560704940807},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"a8aa41625b94cf17a7f473ed10dcbe683b1db705","modified":1560704940810},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1560704940810},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"fc15e277d1504532a09b7b1bd31f900ad95ec4b8","modified":1560704940810},{"_id":"themes/next/source/css/_variables/base.styl","hash":"640f25a63770af5566ccc9cec79c40a4f1c0b29e","modified":1560704940810},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1560704940847},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1560704940847},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1560704940847},{"_id":"themes/next/source/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1560704940843},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1560704940843},{"_id":"source/_posts/如何自学编程/群组.png","hash":"41dcf8a1a81a79580dd7a9b35edd424d54c1e79d","modified":1560704940793},{"_id":"themes/next/source/images/wechatPay.png","hash":"69539f4644858fc6e2fbeb6a5d187a7244c89506","modified":1560704940843},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"38959a2b517f6c0b7c851b288ed0339d9bc62f76","modified":1560704940843},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1560704940843},{"_id":"source/_posts/fcitx5安装与配置/kcm.png","hash":"0ecc38623c9d9e5194317468e871c9176667f1df","modified":1560704940787},{"_id":"source/_posts/我儿子的博客/预览.png","hash":"127d112dee5632a53e88a5e6888bd0acb94404ab","modified":1560704940793},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7e51ea64611ab5d678c112b4688d4db4fd2737e2","modified":1560704940807},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"6d900b4159eeb869196a619602578bf4d83a117b","modified":1560704940807},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"8e0740a9ad349ce5555122325da872923135a698","modified":1560704940807},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"a5305a2fa0b03b1dc1dfd156bb1a590b4819f1f3","modified":1560704940807},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"7ffde343bdf10add1f052f3c4308a15180eb4404","modified":1560704940807},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1560704940807},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"33456264a74d1bba38264d14713544d67d003733","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"fe5ff961b86004a306778c7d33a85b32e5e00e48","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"c8b3225396cb444d8baeb94bac78e5216b992a81","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"b98c65006e2546fbf3870c16fbbcbc009dbaab15","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"ea7ae16562c619a589bcddde57a061b883f6c6bc","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/gitment.styl","hash":"a22797865d5266e6f8560570c1e874bb87da552b","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"ce826aedf42b9eca424a044452f5d193866726a6","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"ce2aae8f3ed8ceac3a2417e0481044cf69c788aa","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"d7b8bcf2a6031296c84bb4f4ecfb037af01d2d82","modified":1560704940807},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9a2d298dbdcbfd758518fd74b63897bc80ce15a5","modified":1560704940807},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6565b4a309325596768d0d32e022c80ef23066cb","modified":1560704940807},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"fc160583f742c94316a0fee05c18468033173534","modified":1560704940807},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"1edf4e69d0ec0dc9cefed6c35d3e803e0da4093d","modified":1560704940807},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1560704940807},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1560704940807},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"57044a6d19eb418c1c3d28787e82c69efa9e0ca6","modified":1560704940807},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"75737591682a2bafa71db4c03fb79e970ac0e7aa","modified":1560704940807},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"b6dac5bbf20f090cf4b67d156f030d7170dfb39c","modified":1560704940810},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"6400c98a9fd2b9a8502269f33355bd7ab3ff793b","modified":1560704940810},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5b936dddb7b4de4720cd1e8428b30a2f06d63fb","modified":1560704940810},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"232aedbd44243b3b80c4503c947060d3269c1afc","modified":1560704940810},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1560704940807},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"24230e46fc9fb7b8551f97bb36e9bc1f7423098e","modified":1560704940807},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1560704940807},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"75d2d92af070eb10273558b2436972d3f12b361c","modified":1560704940807},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa33213aceed7bf4bf25437ca9c1a00f7734ae65","modified":1560704940807},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1560704940807},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a96e46a6ae86c423f932bc2bc78b9f7453e4e4e5","modified":1560704940807},{"_id":"source/_posts/fcitx5安装与配置/输入.gif","hash":"5a875cd145cc0be553fbbd9f3b75ad6637efa0c1","modified":1560704940787},{"_id":"source/_posts/如何用hexo-github-pages搭建博客/逆光.jpg","hash":"e31908ec199b23699ac587a1963a54bce16d362a","modified":1560704940793},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1560704940843},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4cfeec9434a72d5efc6ca225d3445d084d4590f7","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ca97f0b6990eef947039faede80c56d9c4381ee1","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"6c4990d375b640ee4551e62c48c1cbe4c3d62212","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"a410ed529afd46ddf4a96ecf0de6599488716887","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"c0d9e18a9210fdcaf33e488518b3b288eb58c0a1","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"cc6ee18f47f2e1e06df6fa0eadb37079e580fd11","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"71d8d1cc22a2a7627a6db7240f0c4902a14f9bea","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"e9dd8de7d98f1478ac7d351624fffd3d8738c905","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"6904fd7ea6455e008d9884558b68254608af9a3c","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"2d142c6f39853916256ad8fc79eb6b85f4001ae8","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f1d52954b9a5d1ca8e224382349f525e598dd923","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"80addb9b725e329915c05c27b9fadaf56457a9b3","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"61ca40856e5cacd48e0fa9728fde4605c7dd4c94","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/post/my-post-copyright.styl","hash":"1a510f995e665b28d85ba4d169b824276c40e4f3","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"6a75bb1f2435f4e895cbbb5abbddf6e8f7257804","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"c961d37190d9bec58a36306c7e716c4e72c4582f","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"1385862a5c0bd845015d165aadbd1a6add7b72d7","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0bf899fab331add63f0c8ead31ca3a3db2ad74d9","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b082d07b13a3d55b4c032fd351dfa9a4fd74edec","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"496f931e3a7e313ba8088fb91bb20789cace72c9","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"3f33bb862c2aa993f54987fbb345da067b79b112","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"5440013a081201ca791582db98159dce93ea9e75","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"d5c8ffed7f2c701052b7a53abaf5ef437374ea72","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"a6c24393dffbdd94dd5c01cdbec5e180b0bfbbbd","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"473dd49e73f4356b93699904f4daa64c43bc2430","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"9224b566cd2632f64c1a964e2c786cee93b93286","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"707527c9950a7459355c8abcf4751c0964de0bc1","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"cc83816614f21c7e1d8d3f867d547ff7c658cec4","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"517d541a80d59ad99a3f648be74891e0c7bc72a8","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"c2d9c3b6fbfa65544e6b5a55d3cb2149df04a8a9","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"9a3bfc878ca797946815bed23cd6f92b24a16358","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"8a24b56524a388fbabd408ffc8ba9b56eb9e01ce","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c01609176929590f8f347075a9a12b661acd661e","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e5c884fb950937afa350c608545455c87aa6129","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"967fb3a3c6c851b34ec5df2d945dc266ed63d146","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"58ec00eebe68d0eebd2eea435c710063877447df","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"d7501ae01fc45fa15b00d1bc5233b9fffa20a3c9","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"21b32840d8b3a14b10770153114778304ba6d1b0","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"da8d34729fb6eb0fcb8ee81e67d2be3c02bc1bc4","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"fcda60fecff1479adaf6521cf629cda2506337a8","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"cbc0be5a3285b469858ec9ead48e2ea90bd47ae1","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fc58498d4f5081fcf6218e9e18c5bf2328275bef","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/third-party/copy-code.styl","hash":"688ca3eccc26727d050ad098b32b40934719588a","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"f1d9ee1f86a179741f2478f8c70ca11ab578810e","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"7059e24235b7c57a07f3f8abaa06b0bd6a7eda2f","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"9fac89c8146eb2675721a26f528d7d0f8be7debe","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"61466e3e5459960b5802a267751a0c8018918b0b","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"3ae3f3c276d444862033fd3434c632ad0d2f84e6","modified":1560704940807},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"03c4fa9573fddd930552784cf484fd2ee7825323","modified":1560704940807},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1560704940807},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1560704940807},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1560704940807},{"_id":"source/_posts/ManjaroLinux的安装过程/编辑文章时截图.png","hash":"3557732a051927d718f9bdff7c4bd3f98a8bbe52","modified":1560704940783},{"_id":"source/_posts/如何用hexo-github-pages搭建博客/本地部署.png","hash":"0cfadb0ae6808ba58c821653ca76e8099819e98d","modified":1560704940790},{"_id":"source/_posts/如何用hexo-github-pages搭建博客/hexoinit.png","hash":"46b6d53a445cc3e15cc45ab9afd916486e3a5d7a","modified":1560704940790},{"_id":"source/_posts/Learn-Qt5-HelloWorld/newProject.gif","hash":"1e02a369607b0aac39283e7779f54df5304f552d","modified":1560704940777},{"_id":"themes/next/source/images/aliPay.png","hash":"61750b1d63b30ca8ac5bcbec79664d541223b879","modified":1560704940810},{"_id":"source/_posts/ManjaroLinux的安装过程/桌面.png","hash":"99a28838b2ba8cf7fdce7f3f997723c185326fdf","modified":1560704940783},{"_id":"themes/next/source/images/background.png","hash":"a0ec840a777b3b18ca80b71b3d23553311008191","modified":1560704940813},{"_id":"themes/next/source/images/card.png","hash":"08e8213581ac3fac8c119440a124643b05ef716a","modified":1560704940823},{"_id":"themes/next/source/images/background2.png","hash":"8611760e073872829af4a22dbeb38cd5ccf2144a","modified":1560704940820},{"_id":"themes/next/source/images/img.jpg","hash":"f84efb620744db1c422800669c4fcb852e03998d","modified":1560704940843},{"_id":"public/atom.xml","hash":"c5f76a00efa9a28cd0bf12d6a6f56fe6aa7ebc38","modified":1560707355157},{"_id":"public/search.xml","hash":"f3df57ee208240b450308d92b17f33b67344b3ee","modified":1560707355158},{"_id":"public/sitemap.xml","hash":"4f30c75a29ba6bf5605b2b9dc976a1ca4a053130","modified":1560707355179},{"_id":"public/Qt5/index.html","hash":"e043d9685ce06e0ce609f94197611e2dd4c84393","modified":1560707355187},{"_id":"public/categories/index.html","hash":"c0e24e04a74b994283073df1e7d961898268364c","modified":1560707355188},{"_id":"public/Linux/index.html","hash":"25f93990ad2ea3f3f7781fae95ce7777dbced4b1","modified":1560707355188},{"_id":"public/关于我/index.html","hash":"f7976810cef06d89c96a128bd58be578ae813106","modified":1560707355188},{"_id":"public/tags/index.html","hash":"235402f488912c93c3a7056f13d2cf1292169275","modified":1560707355188},{"_id":"public/2019/06/16/Linux-文件和目录操作命令-1/index.html","hash":"1fa8de0c6a81530cc0f7a8ea232601632bab4d22","modified":1560707355188},{"_id":"public/2019/06/15/Linux-Linux命令行简介-man命令/index.html","hash":"07892c89b829ec6c7ca62167a5676fb6e7852319","modified":1560707355188},{"_id":"public/2019/06/15/Linux-Linux命令行简介-0/index.html","hash":"e9608d4c5a9b6183c5963f04875f9926f0bdc0eb","modified":1560707355188},{"_id":"public/2019/06/14/fcitx5安装与配置/index.html","hash":"1d73289577a56f4b90a6a4698ce02f5989b9d871","modified":1560707355188},{"_id":"public/2019/06/12/Learn-Qt5-Qt模块简介/index.html","hash":"91ea33e2180366f53dc46f8673aeae1a59ec0466","modified":1560707355188},{"_id":"public/2019/06/11/Learn-Qt5-自定义信号槽/index.html","hash":"be1a1fdb459002b1ca79396b477e66dac92bf77f","modified":1560707355188},{"_id":"public/2019/06/10/Learn-Qt5-信号槽/index.html","hash":"49db706cc665722ad2310daad2c43c5992843780","modified":1560707355188},{"_id":"public/2019/06/09/2019年的规划/index.html","hash":"a2525ab0f10215127539db4311c2905b1a957bd6","modified":1560707355188},{"_id":"public/2019/06/08/Learn-Qt5-HelloWorld/index.html","hash":"f7362108d4ad72cee6ccec129a2c94f172eb8421","modified":1560707355188},{"_id":"public/2019/05/30/C-的命名空间与作用域/index.html","hash":"137bc91b7a0b2c7f8e7140460ae18d6150e4b99f","modified":1560707355189},{"_id":"public/2019/05/27/常用算法-1/index.html","hash":"fef48cafb7b253e99566fb8372a1a95108e11c0c","modified":1560707355189},{"_id":"public/2019/05/23/如何自学编程/index.html","hash":"1c8f36ae0fde55431304c3bf2eaa5a918957c9c4","modified":1560707355189},{"_id":"public/2019/05/22/C-读写文件/index.html","hash":"a29c1d720ca12126e150fdb0a57541acbc03616a","modified":1560707355189},{"_id":"public/2019/05/21/我儿子的博客/index.html","hash":"3750f19a8fd1c560400bbf1d4f21aaafd6558bdc","modified":1560707355189},{"_id":"public/2019/05/19/解决KDE下部分应用不能使用fctix中文输入法的问题/index.html","hash":"d5e5c278c8504bdf54a674448769b7e0e88e0089","modified":1560707355189},{"_id":"public/2019/05/17/C-友元/index.html","hash":"8c3e0a3d13220b23ac5b829860b3380953889181","modified":1560707355189},{"_id":"public/2019/05/16/ManjaroLinuxTG讨论群组/index.html","hash":"daae350917f2e256e6a71dcf05e61a2e440d55b5","modified":1560707355189},{"_id":"public/2019/05/15/我的Linux之路/index.html","hash":"3b884fe963d65b84242e7832a01c0610b398287b","modified":1560707355189},{"_id":"public/2019/05/14/深拷贝和浅拷贝的区别/index.html","hash":"529ec2d71c7b95abcb5fa55f04340b13b19c0e9c","modified":1560707355189},{"_id":"public/2019/05/12/2008年5月12日14时28分04秒/index.html","hash":"3096e37f8eb670be664a1c84c1d3f503caca36c6","modified":1560707355189},{"_id":"public/2019/05/11/C-内存四区之代码区与全局区/index.html","hash":"98d1c5cb6caa1a3719e341d7e0ee215f30a17210","modified":1560707355189},{"_id":"public/2019/05/10/C-内存四区之堆区/index.html","hash":"f5bc5d441fa8355a333aec9c5a6e3c3706d41e85","modified":1560707355190},{"_id":"public/2019/05/10/C-内存四区之栈区/index.html","hash":"d7af6c8c19dba5aafdf9e1e90a4175049694c0b3","modified":1560707355190},{"_id":"public/2019/05/09/终端多窗口神器——Screen/index.html","hash":"8daf42a81632518a411dbf33da4ca0ed1c055a27","modified":1560707355190},{"_id":"public/2019/05/08/Linux中的解压与压缩/index.html","hash":"9be79f12f259357ddf6e8b3e0cbd8202eaf4589e","modified":1560707355190},{"_id":"public/2019/05/06/C-指针-基础02/index.html","hash":"cbc533d67d0d1bf74314ad323f7ea0e267b1774f","modified":1560707355190},{"_id":"public/2019/05/06/C-指针-基础01/index.html","hash":"388b08a75bb558c1c65ba6971bb73516ee176710","modified":1560707355190},{"_id":"public/2019/04/30/hexo-next插入网易云音乐/index.html","hash":"b50d901a75ec288f012a06a832694295363dcfc4","modified":1560707355190},{"_id":"public/2019/04/29/如何用hexo-github-pages搭建博客/index.html","hash":"219879f77dd29c13f9b80da0e43a96f56f88220c","modified":1560707355190},{"_id":"public/2019/04/29/hexo博客文章插入图片/index.html","hash":"829215eaf7a0d752f84e5ea1c6c7ceab112c3cda","modified":1560707355190},{"_id":"public/2019/04/24/C-函数探幽/index.html","hash":"cd1151a08bac7b1d33ca637329e905d420e28df8","modified":1560707355190},{"_id":"public/2019/04/23/ManjaroLinux的安装过程/index.html","hash":"89df6b28c778607e2d4517fc993c91af93a1903f","modified":1560707355190},{"_id":"public/archives/index.html","hash":"89e6a7bff120346b5ab6548c314f480415d171f7","modified":1560707355190},{"_id":"public/archives/page/2/index.html","hash":"179b3a8638636e942aaa8437eddbfc3b84e62d0c","modified":1560707355190},{"_id":"public/archives/page/3/index.html","hash":"a45a47e82fd75d978ddd1ee0dc08cb05e8d48fe0","modified":1560707355190},{"_id":"public/archives/page/4/index.html","hash":"1f7f04de0353b78cabd2b16dd96b9b6faa6a19b5","modified":1560707355190},{"_id":"public/archives/2019/index.html","hash":"6da3e04b89023d3362c233777595f807988b7ee3","modified":1560707355191},{"_id":"public/archives/2019/page/2/index.html","hash":"4fed8b5d27855ac903deb83f9235b2b4e035ad14","modified":1560707355191},{"_id":"public/archives/2019/page/3/index.html","hash":"58105b0f705ffc56265dc4c4157fadb2eb1ebc5c","modified":1560707355191},{"_id":"public/archives/2019/page/4/index.html","hash":"1475347b08dc456d7919dcaae152b478962102db","modified":1560707355191},{"_id":"public/archives/2019/04/index.html","hash":"49bdeda8ad9e580418b16b7cc514bfa6df90b0f7","modified":1560707355191},{"_id":"public/archives/2019/05/index.html","hash":"b3734fc975c6ad2c8d23aca8c8fad103c15dac10","modified":1560707355191},{"_id":"public/archives/2019/05/page/2/index.html","hash":"f8afabb6051f4ba774c9dbef8b696fe809f0d884","modified":1560707355191},{"_id":"public/archives/2019/06/index.html","hash":"e3742fad9a71aa2b6bb57665e6cae2c3f638d855","modified":1560707355191},{"_id":"public/categories/转载/index.html","hash":"e713418d5e23c90a75eae0e0909d8ec0a302ec85","modified":1560707355191},{"_id":"public/categories/分享/index.html","hash":"bb58e32371dcc809f07d447f925c68c5e36512df","modified":1560707355191},{"_id":"public/categories/学习笔记/index.html","hash":"8f6164f9cf5d714195425f1f576898991fd63d1f","modified":1560707355191},{"_id":"public/categories/学习笔记/page/2/index.html","hash":"9ec94484cd26a7f0061801aad57dd25426d97ad7","modified":1560707355191},{"_id":"public/categories/Linux系列/index.html","hash":"a551ecb90a37da07fe441b739a5e1fdab7e054cb","modified":1560707355191},{"_id":"public/categories/折腾日记/index.html","hash":"64ee9df26855e038fdfee6817f1f885ac6385175","modified":1560707355191},{"_id":"public/categories/折腾记录/index.html","hash":"3c76b9fe53fa37f621211eb65ea7d6d198fce284","modified":1560707355191},{"_id":"public/categories/个人感想/index.html","hash":"ba887ab5cd5a498beb3a3f1fcd35e0e38ebb2334","modified":1560707355191},{"_id":"public/index.html","hash":"e2e27e537d610895565d2f0180103367a2f387e6","modified":1560707355191},{"_id":"public/page/2/index.html","hash":"061ff6111d2a85ad0e8709c51c8bafae14b76dcd","modified":1560707355192},{"_id":"public/page/3/index.html","hash":"9cc8c5ea0137de775159a5fb411ff43e7e1ac010","modified":1560707355192},{"_id":"public/page/4/index.html","hash":"12c94a4598e7fcc35bfc99de814e5a2cb6495284","modified":1560707355192},{"_id":"public/tags/社会事件/index.html","hash":"294427547a81c0c5364c2cdcfd59cd96852f8b0d","modified":1560707355192},{"_id":"public/tags/C/index.html","hash":"0c5ddb250deaa149a456638765ffdf076a685f27","modified":1560707355192},{"_id":"public/tags/C/page/2/index.html","hash":"d5954c9abf2c3850dd2ca5563669766f65f178f0","modified":1560707355192},{"_id":"public/tags/指针/index.html","hash":"8e87030b8ddd54e5d77a31714040fb3a2eb7fc2a","modified":1560707355192},{"_id":"public/tags/学习笔记/index.html","hash":"f95e77ea58dfade2dc38a5764f61d2cc65114b46","modified":1560707355192},{"_id":"public/tags/基础/index.html","hash":"3e36d21bcaa706f0a84e3677c06afb2436f70ea7","modified":1560707355192},{"_id":"public/tags/Qt5/index.html","hash":"3e06c9b16281d4a3fe8a4b168429ca4ecd3a64d8","modified":1560707355192},{"_id":"public/tags/Qt/index.html","hash":"81b1ae42d597af3cf21e60ce397e41a27c0b8440","modified":1560707355192},{"_id":"public/tags/Linux/index.html","hash":"5fafa3ab9230ddf5c3fc2aca45f2f7b5069fd09c","modified":1560707355192},{"_id":"public/tags/Telegram/index.html","hash":"9dfc6b72487823767af6e233a3f212f16683987b","modified":1560707355192},{"_id":"public/tags/fcitx5/index.html","hash":"97104174c285e393b8ecfd309ae5146df1ff88d3","modified":1560707355192},{"_id":"public/tags/hexo/index.html","hash":"98abdf88d9a8711af32799376e1cf81ce8d1d214","modified":1560707355192},{"_id":"public/tags/网易云音乐/index.html","hash":"d16975a86dd2d85c03c6532632a092d55caa8fc3","modified":1560707355192},{"_id":"public/tags/折腾/index.html","hash":"4e2a1a38dbfc75068f2b676e244e296849571116","modified":1560707355192},{"_id":"public/tags/软件使用/index.html","hash":"fb601e1700b916733b2b222b5d85857a342b82a9","modified":1560707355192},{"_id":"public/tags/博客/index.html","hash":"6d83f0d7277b809e9a47d2d7611e9c828cba89bb","modified":1560707355192},{"_id":"public/tags/个人感想/index.html","hash":"eef8d9da0997a068f5eb6ad968f91dcde4fe0366","modified":1560707355192},{"_id":"public/tags/编程/index.html","hash":"6bd380f07d9996ac2931ec1d3e999e9b8d55c54d","modified":1560707355193},{"_id":"public/tags/经典案例/index.html","hash":"f32a6e6ba95b088048147d4ce585dc4887ce9552","modified":1560707355193},{"_id":"public/tags/软件折腾/index.html","hash":"c2dc9f7d5838d38e7be539a6653490f2c285aa5e","modified":1560707355193},{"_id":"public/tags/KDE/index.html","hash":"14ac9154503199a7da1cc88b9f910dc1ca85bd2c","modified":1560707355193},{"_id":"public/tags/欢乐时光/index.html","hash":"ee0a50ade8ba5b476c3d0beefef5f1dc13b9fae7","modified":1560707355193},{"_id":"public/tags/算法/index.html","hash":"233418ef21d881041312ac9a12cd6e3a62ae996d","modified":1560707355193},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1560707355205},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1560707355205},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1560707355205},{"_id":"public/images/alipay.jpg","hash":"ac4b5bc8f3ae1a8a512b0d0663e2abf0bfea246d","modified":1560707355205},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1560707355205},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1560707355205},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1560707355206},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1560707355206},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1560707355206},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1560707355206},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1560707355206},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1560707355206},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1560707355206},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1560707355206},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1560707355206},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1560707355206},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1560707355206},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1560707355206},{"_id":"public/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1560707355206},{"_id":"public/2019/05/11/C-内存四区之代码区与全局区/代码区示意图.png","hash":"2a6b0689ddce4a392d7682b7cc097553ba275324","modified":1560707355206},{"_id":"public/2019/05/10/C-内存四区之堆区/test.png","hash":"23c51bc2893f2c2b8828d47a5d531ac10111c300","modified":1560707355206},{"_id":"public/2019/05/06/C-指针-基础02/指针位偏移.png","hash":"156676e17c34db6889b740035c5afebc560c79f4","modified":1560707355206},{"_id":"public/2019/06/15/Linux-Linux命令行简介-0/1.1.2-0","hash":"8c8736d267902d23fd9defe497df7bb07e753d62","modified":1560707355206},{"_id":"public/2019/04/30/hexo-next插入网易云音乐/插哪.png","hash":"8928d6bd2393fb9cebf22a137d4f198a1bca8f1f","modified":1560707355206},{"_id":"public/2019/05/12/2008年5月12日14时28分04秒/操场.webp","hash":"84b7577e7d9c8c41cde1d1a41606d9077e4c682d","modified":1560707355206},{"_id":"public/2019/05/12/2008年5月12日14时28分04秒/流量图.webp","hash":"27c7ab59ae1f74cfea9a7cb67f9502ff3f4144be","modified":1560707355206},{"_id":"public/2019/05/12/2008年5月12日14时28分04秒/空降.webp","hash":"9a4e00e6b4f76fcef94423bfa1910da06a01364f","modified":1560707355206},{"_id":"public/2019/04/29/如何用hexo-github-pages搭建博客/deploy.png","hash":"e7b85d668727ff191542d33f0f8b7fd4626216d9","modified":1560707355206},{"_id":"public/2019/04/29/如何用hexo-github-pages搭建博客/ssh目录.png","hash":"6929462dbbece6c66d66111337bc50954f3420e1","modified":1560707355206},{"_id":"public/2019/04/29/如何用hexo-github-pages搭建博客/导入密钥.png","hash":"eb1ed1a6da91cf7a446f714ca7ad95edde7a4545","modified":1560707355207},{"_id":"public/2019/04/29/如何用hexo-github-pages搭建博客/打开设置.png","hash":"a277cee3b835adfc37ce01e798a5302a5ae70e02","modified":1560707355207},{"_id":"public/2019/05/22/C-读写文件/二进制文件.png","hash":"5fce0c55af8a1d1a375ab1dd71c7b06f3416e13c","modified":1560707355207},{"_id":"public/2019/05/09/终端多窗口神器——Screen/detachedInfo.png","hash":"39337b8922e262fb456a13464188e1d145199b97","modified":1560707355207},{"_id":"public/images/wechatPay.png","hash":"69539f4644858fc6e2fbeb6a5d187a7244c89506","modified":1560707355502},{"_id":"public/images/wechatpay.jpg","hash":"38959a2b517f6c0b7c851b288ed0339d9bc62f76","modified":1560707355503},{"_id":"public/2019/04/30/hexo-next插入网易云音乐/01.png","hash":"f1bbad3d02ccb53b8898fc7ad337ef5ea368b2ae","modified":1560707355504},{"_id":"public/2019/04/23/ManjaroLinux的安装过程/分区.png","hash":"6a54d049cbfe3fc4d65d6a027b36ad758ed61b6c","modified":1560707355504},{"_id":"public/2019/04/23/ManjaroLinux的安装过程/分区标识.png","hash":"675089cbcbe932471d6ce5c7b3a8671ee689c8c2","modified":1560707355504},{"_id":"public/2019/04/23/ManjaroLinux的安装过程/安装选择界面.png","hash":"25d2152a8bb8e8e2eb904610ef7068576c9b7d11","modified":1560707355505},{"_id":"public/2019/04/29/如何用hexo-github-pages搭建博客/创建仓库.png","hash":"2008592b8eda92867b78f6deb69971dce00c7b13","modified":1560707355505},{"_id":"public/2019/04/29/如何用hexo-github-pages搭建博客/设置SSH.png","hash":"e9f200e3559e93a06fa4e8b9c37a486949081a45","modified":1560707355505},{"_id":"public/2019/05/09/终端多窗口神器——Screen/DefalutCommandKey.png","hash":"6a5a12569b253f7bec7087f7f6ad3eea3791218c","modified":1560707355505},{"_id":"public/css/style.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560707355512},{"_id":"public/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1560707355512},{"_id":"public/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1560707355512},{"_id":"public/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1560707355512},{"_id":"public/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1560707355512},{"_id":"public/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1560707355512},{"_id":"public/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1560707355512},{"_id":"public/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1560707355512},{"_id":"public/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1560707355512},{"_id":"public/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1560707355513},{"_id":"public/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1560707355513},{"_id":"public/404.html","hash":"f2d404775c821e92b69dc7e06612994449feefdc","modified":1560707355513},{"_id":"public/css/main.css","hash":"7505c5c3de465fd986f7496cf5ac884b1e219633","modified":1560707355513},{"_id":"public/2019/05/23/如何自学编程/群组.png","hash":"41dcf8a1a81a79580dd7a9b35edd424d54c1e79d","modified":1560707355513},{"_id":"public/2019/04/23/ManjaroLinux的安装过程/开始安装.png","hash":"2ac6b5ee42b758265b9c4d130d303e2050e8a929","modified":1560707355513},{"_id":"public/2019/04/23/ManjaroLinux的安装过程/摘要.png","hash":"763ba8b64bc381afc7eb4b0166db36741399872a","modified":1560707355513},{"_id":"public/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1560707355516},{"_id":"public/js/utils.js","hash":"3c987de7cfb944c33e9e527f1214724c7aafc796","modified":1560707355516},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1560707355516},{"_id":"public/2019/05/21/我儿子的博客/预览.png","hash":"127d112dee5632a53e88a5e6888bd0acb94404ab","modified":1560707355520},{"_id":"public/2019/04/29/如何用hexo-github-pages搭建博客/逆光.jpg","hash":"e31908ec199b23699ac587a1963a54bce16d362a","modified":1560707355520},{"_id":"public/2019/06/14/fcitx5安装与配置/kcm.png","hash":"0ecc38623c9d9e5194317468e871c9176667f1df","modified":1560707355527},{"_id":"public/2019/06/14/fcitx5安装与配置/输入.gif","hash":"5a875cd145cc0be553fbbd9f3b75ad6637efa0c1","modified":1560707355527},{"_id":"public/2019/04/29/如何用hexo-github-pages搭建博客/hexoinit.png","hash":"46b6d53a445cc3e15cc45ab9afd916486e3a5d7a","modified":1560707355527},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1560707355532},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1560707355532},{"_id":"public/images/aliPay.png","hash":"61750b1d63b30ca8ac5bcbec79664d541223b879","modified":1560707355532},{"_id":"public/2019/06/08/Learn-Qt5-HelloWorld/newProject.gif","hash":"1e02a369607b0aac39283e7779f54df5304f552d","modified":1560707355532},{"_id":"public/2019/04/29/如何用hexo-github-pages搭建博客/本地部署.png","hash":"0cfadb0ae6808ba58c821653ca76e8099819e98d","modified":1560707355532},{"_id":"public/2019/04/23/ManjaroLinux的安装过程/编辑文章时截图.png","hash":"3557732a051927d718f9bdff7c4bd3f98a8bbe52","modified":1560707355537},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1560707355548},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1560707355557},{"_id":"public/2019/04/23/ManjaroLinux的安装过程/桌面.png","hash":"99a28838b2ba8cf7fdce7f3f997723c185326fdf","modified":1560707355558},{"_id":"public/images/background.png","hash":"a0ec840a777b3b18ca80b71b3d23553311008191","modified":1560707355565},{"_id":"public/images/card.png","hash":"08e8213581ac3fac8c119440a124643b05ef716a","modified":1560707355568},{"_id":"public/images/background2.png","hash":"8611760e073872829af4a22dbeb38cd5ccf2144a","modified":1560707355584},{"_id":"public/images/img.jpg","hash":"f84efb620744db1c422800669c4fcb852e03998d","modified":1560707355597}],"Category":[{"name":"转载","_id":"cjwz8uz990004oums5n5erook"},{"name":"分享","_id":"cjwz8uz9d000aoumsvgy39s03"},{"name":"学习笔记","_id":"cjwz8uz9h000goumscj1xqtvv"},{"name":"Linux系列","_id":"cjwz8uza0001coumsvn4gwnfu"},{"name":"折腾日记","_id":"cjwz8uza6001zoums2cn89lvh"},{"name":"折腾记录","_id":"cjwz8uza80027oums1gcxe3t3"},{"name":"个人感想","_id":"cjwz8uzaa002joums1ac7hq7c"}],"Data":[],"Page":[{"title":"Qt5","date":"2019-06-12T13:22:31.000Z","_content":"","source":"Qt5/index.md","raw":"---\ntitle: Qt5\ndate: 2019-06-12 21:22:31\n---\n","updated":"2019-06-16T17:09:00.773Z","path":"Qt5/index.html","comments":1,"layout":"page","_id":"cjwz8uz920000oums9u1iqjli","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"文章分类","date":"2019-04-23T08:03:29.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2019-04-23 16:03:29\ntype: \"categories\"\n---\n","updated":"2019-06-16T17:09:00.793Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjwz8uz970002oumsjfxb8cdb","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Linux","date":"2019-06-12T13:22:22.000Z","_content":"\n# 前言\n\n本系列根据《跟老男孩学Linux运维》系列丛书进行个人笔记整理，由于《跟老男孩学Linux运维》分为三个系列，分别是:\n\n- 核心系统命令实践\n\n- Shell编程实战\n\n- Web集群实战\n\n我将会依次的进行笔记整理以及学习，并且分享至博客。\n\n> 曾经的《Linux系统管理完全手册》由于教材太旧，很多技术点都已过时，但是其中却有很多关乎管理方面的智慧，我只好放弃那一系列，但其中的管理之道会在日后补上。\n\n# 核心系统命令实践\n\n## 目录索引\n\n  - [第1章-Linux命令行简介](/2019/06/15/Linux-Linux命令行简介-0/) [√] \n\n  - [第2章-文件和目录操作命令](/2019/06/16/Linux-文件和目录操作命令-1) [ ] \n\n  - [第3章-文件过滤及内容编辑处理命令]() [ ] \n\n  - [第4章-文本处理三剑客]() [ ] \n\n  - [第5章-Linux信息显示与搜索文件命令]() [ ] \n\n  - [第6章-文件备份与压缩命令]() [ ] \n\n  - [第7章-Linux用户管理及用户信息查询命令]() [ ] \n\n  - [第8章-Linux磁盘与文件系统管理命令]() [ ] \n\n  - [第9章-Linux进程管理命令]() [ ] \n\n  - [第10章-Linux网络管理命令]() [ ] \n\n  - [第11章-Linux系统管理命令]() [ ] \n\n  - [第12章-Linux系统常用内置命令]() [ ] \n\n\n# Shelli编程实战\n\n## 目录索引\n\n__暂未开始__\n\n# Web集群实战\n\n## 目录索引\n\n__暂未开始___\n","source":"Linux/index.md","raw":"---\ntitle: Linux\ndate: 2019-06-12 21:22:22\n---\n\n# 前言\n\n本系列根据《跟老男孩学Linux运维》系列丛书进行个人笔记整理，由于《跟老男孩学Linux运维》分为三个系列，分别是:\n\n- 核心系统命令实践\n\n- Shell编程实战\n\n- Web集群实战\n\n我将会依次的进行笔记整理以及学习，并且分享至博客。\n\n> 曾经的《Linux系统管理完全手册》由于教材太旧，很多技术点都已过时，但是其中却有很多关乎管理方面的智慧，我只好放弃那一系列，但其中的管理之道会在日后补上。\n\n# 核心系统命令实践\n\n## 目录索引\n\n  - [第1章-Linux命令行简介](/2019/06/15/Linux-Linux命令行简介-0/) [√] \n\n  - [第2章-文件和目录操作命令](/2019/06/16/Linux-文件和目录操作命令-1) [ ] \n\n  - [第3章-文件过滤及内容编辑处理命令]() [ ] \n\n  - [第4章-文本处理三剑客]() [ ] \n\n  - [第5章-Linux信息显示与搜索文件命令]() [ ] \n\n  - [第6章-文件备份与压缩命令]() [ ] \n\n  - [第7章-Linux用户管理及用户信息查询命令]() [ ] \n\n  - [第8章-Linux磁盘与文件系统管理命令]() [ ] \n\n  - [第9章-Linux进程管理命令]() [ ] \n\n  - [第10章-Linux网络管理命令]() [ ] \n\n  - [第11章-Linux系统管理命令]() [ ] \n\n  - [第12章-Linux系统常用内置命令]() [ ] \n\n\n# Shelli编程实战\n\n## 目录索引\n\n__暂未开始__\n\n# Web集群实战\n\n## 目录索引\n\n__暂未开始___\n","updated":"2019-06-16T17:49:05.967Z","path":"Linux/index.html","comments":1,"layout":"page","_id":"cjwz8uz9b0006oumsb9869jv3","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本系列根据《跟老男孩学Linux运维》系列丛书进行个人笔记整理，由于《跟老男孩学Linux运维》分为三个系列，分别是:</p>\n<ul>\n<li><p>核心系统命令实践</p>\n</li>\n<li><p>Shell编程实战</p>\n</li>\n<li><p>Web集群实战</p>\n</li>\n</ul>\n<p>我将会依次的进行笔记整理以及学习，并且分享至博客。</p>\n<blockquote>\n<p>曾经的《Linux系统管理完全手册》由于教材太旧，很多技术点都已过时，但是其中却有很多关乎管理方面的智慧，我只好放弃那一系列，但其中的管理之道会在日后补上。</p>\n</blockquote>\n<h1 id=\"核心系统命令实践\"><a href=\"#核心系统命令实践\" class=\"headerlink\" title=\"核心系统命令实践\"></a>核心系统命令实践</h1><h2 id=\"目录索引\"><a href=\"#目录索引\" class=\"headerlink\" title=\"目录索引\"></a>目录索引</h2><ul>\n<li><p><a href=\"/2019/06/15/Linux-Linux命令行简介-0/\">第1章-Linux命令行简介</a> [√] </p>\n</li>\n<li><p><a href=\"/2019/06/16/Linux-文件和目录操作命令-1\">第2章-文件和目录操作命令</a> [ ] </p>\n</li>\n<li><p><a href>第3章-文件过滤及内容编辑处理命令</a> [ ] </p>\n</li>\n<li><p><a href>第4章-文本处理三剑客</a> [ ] </p>\n</li>\n<li><p><a href>第5章-Linux信息显示与搜索文件命令</a> [ ] </p>\n</li>\n<li><p><a href>第6章-文件备份与压缩命令</a> [ ] </p>\n</li>\n<li><p><a href>第7章-Linux用户管理及用户信息查询命令</a> [ ] </p>\n</li>\n<li><p><a href>第8章-Linux磁盘与文件系统管理命令</a> [ ] </p>\n</li>\n<li><p><a href>第9章-Linux进程管理命令</a> [ ] </p>\n</li>\n<li><p><a href>第10章-Linux网络管理命令</a> [ ] </p>\n</li>\n<li><p><a href>第11章-Linux系统管理命令</a> [ ] </p>\n</li>\n<li><p><a href>第12章-Linux系统常用内置命令</a> [ ] </p>\n</li>\n</ul>\n<h1 id=\"Shelli编程实战\"><a href=\"#Shelli编程实战\" class=\"headerlink\" title=\"Shelli编程实战\"></a>Shelli编程实战</h1><h2 id=\"目录索引-1\"><a href=\"#目录索引-1\" class=\"headerlink\" title=\"目录索引\"></a>目录索引</h2><p><strong>暂未开始</strong></p>\n<h1 id=\"Web集群实战\"><a href=\"#Web集群实战\" class=\"headerlink\" title=\"Web集群实战\"></a>Web集群实战</h1><h2 id=\"目录索引-2\"><a href=\"#目录索引-2\" class=\"headerlink\" title=\"目录索引\"></a>目录索引</h2><p><strong>暂未开始_</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本系列根据《跟老男孩学Linux运维》系列丛书进行个人笔记整理，由于《跟老男孩学Linux运维》分为三个系列，分别是:</p>\n<ul>\n<li><p>核心系统命令实践</p>\n</li>\n<li><p>Shell编程实战</p>\n</li>\n<li><p>Web集群实战</p>\n</li>\n</ul>\n<p>我将会依次的进行笔记整理以及学习，并且分享至博客。</p>\n<blockquote>\n<p>曾经的《Linux系统管理完全手册》由于教材太旧，很多技术点都已过时，但是其中却有很多关乎管理方面的智慧，我只好放弃那一系列，但其中的管理之道会在日后补上。</p>\n</blockquote>\n<h1 id=\"核心系统命令实践\"><a href=\"#核心系统命令实践\" class=\"headerlink\" title=\"核心系统命令实践\"></a>核心系统命令实践</h1><h2 id=\"目录索引\"><a href=\"#目录索引\" class=\"headerlink\" title=\"目录索引\"></a>目录索引</h2><ul>\n<li><p><a href=\"/2019/06/15/Linux-Linux命令行简介-0/\">第1章-Linux命令行简介</a> [√] </p>\n</li>\n<li><p><a href=\"/2019/06/16/Linux-文件和目录操作命令-1\">第2章-文件和目录操作命令</a> [ ] </p>\n</li>\n<li><p><a href>第3章-文件过滤及内容编辑处理命令</a> [ ] </p>\n</li>\n<li><p><a href>第4章-文本处理三剑客</a> [ ] </p>\n</li>\n<li><p><a href>第5章-Linux信息显示与搜索文件命令</a> [ ] </p>\n</li>\n<li><p><a href>第6章-文件备份与压缩命令</a> [ ] </p>\n</li>\n<li><p><a href>第7章-Linux用户管理及用户信息查询命令</a> [ ] </p>\n</li>\n<li><p><a href>第8章-Linux磁盘与文件系统管理命令</a> [ ] </p>\n</li>\n<li><p><a href>第9章-Linux进程管理命令</a> [ ] </p>\n</li>\n<li><p><a href>第10章-Linux网络管理命令</a> [ ] </p>\n</li>\n<li><p><a href>第11章-Linux系统管理命令</a> [ ] </p>\n</li>\n<li><p><a href>第12章-Linux系统常用内置命令</a> [ ] </p>\n</li>\n</ul>\n<h1 id=\"Shelli编程实战\"><a href=\"#Shelli编程实战\" class=\"headerlink\" title=\"Shelli编程实战\"></a>Shelli编程实战</h1><h2 id=\"目录索引-1\"><a href=\"#目录索引-1\" class=\"headerlink\" title=\"目录索引\"></a>目录索引</h2><p><strong>暂未开始</strong></p>\n<h1 id=\"Web集群实战\"><a href=\"#Web集群实战\" class=\"headerlink\" title=\"Web集群实战\"></a>Web集群实战</h1><h2 id=\"目录索引-2\"><a href=\"#目录索引-2\" class=\"headerlink\" title=\"目录索引\"></a>目录索引</h2><p><strong>暂未开始_</strong></p>\n"},{"title":"关于我","date":"2019-05-01T12:58:42.000Z","_content":"\n# Q: 你是谁?\n\n# A: 我叫李天宇，今年18，生活在广州，没钱时宅，有钱时浪，现在处于没钱时。\n\n---\n\n# Q: 你是做什么的?\n\n# A: 大一学生，爱折腾计算机相关事物，偶尔拿起单反拍拍照。\n\n---\n\n# Q: 如何联系你?\n\n# A: 你可以通过如下途径联系我:\n\n- email: the_lty_mail@foxmail.com\n\n- wechat: A2-B0x\n\n- tencentQQ: 2864011679\n\n- GitHub-Issue: [点击提交反馈](https://github.com/EvanMeek/evanmeek.github.io/issues/new)\n","source":"关于我/index.md","raw":"---\ntitle: 关于我\ndate: 2019-05-01 20:58:42\n---\n\n# Q: 你是谁?\n\n# A: 我叫李天宇，今年18，生活在广州，没钱时宅，有钱时浪，现在处于没钱时。\n\n---\n\n# Q: 你是做什么的?\n\n# A: 大一学生，爱折腾计算机相关事物，偶尔拿起单反拍拍照。\n\n---\n\n# Q: 如何联系你?\n\n# A: 你可以通过如下途径联系我:\n\n- email: the_lty_mail@foxmail.com\n\n- wechat: A2-B0x\n\n- tencentQQ: 2864011679\n\n- GitHub-Issue: [点击提交反馈](https://github.com/EvanMeek/evanmeek.github.io/issues/new)\n","updated":"2019-06-16T17:09:00.793Z","path":"关于我/index.html","comments":1,"layout":"page","_id":"cjwz8uzeh003noums81qo16ho","content":"<h1 id=\"Q-你是谁\"><a href=\"#Q-你是谁\" class=\"headerlink\" title=\"Q: 你是谁?\"></a>Q: 你是谁?</h1><h1 id=\"A-我叫李天宇，今年18，生活在广州，没钱时宅，有钱时浪，现在处于没钱时。\"><a href=\"#A-我叫李天宇，今年18，生活在广州，没钱时宅，有钱时浪，现在处于没钱时。\" class=\"headerlink\" title=\"A: 我叫李天宇，今年18，生活在广州，没钱时宅，有钱时浪，现在处于没钱时。\"></a>A: 我叫李天宇，今年18，生活在广州，没钱时宅，有钱时浪，现在处于没钱时。</h1><hr>\n<h1 id=\"Q-你是做什么的\"><a href=\"#Q-你是做什么的\" class=\"headerlink\" title=\"Q: 你是做什么的?\"></a>Q: 你是做什么的?</h1><h1 id=\"A-大一学生，爱折腾计算机相关事物，偶尔拿起单反拍拍照。\"><a href=\"#A-大一学生，爱折腾计算机相关事物，偶尔拿起单反拍拍照。\" class=\"headerlink\" title=\"A: 大一学生，爱折腾计算机相关事物，偶尔拿起单反拍拍照。\"></a>A: 大一学生，爱折腾计算机相关事物，偶尔拿起单反拍拍照。</h1><hr>\n<h1 id=\"Q-如何联系你\"><a href=\"#Q-如何联系你\" class=\"headerlink\" title=\"Q: 如何联系你?\"></a>Q: 如何联系你?</h1><h1 id=\"A-你可以通过如下途径联系我\"><a href=\"#A-你可以通过如下途径联系我\" class=\"headerlink\" title=\"A: 你可以通过如下途径联系我:\"></a>A: 你可以通过如下途径联系我:</h1><ul>\n<li><p>email: <a href=\"mailto:the_lty_mail@foxmail.com\" target=\"_blank\" rel=\"noopener\">the_lty_mail@foxmail.com</a></p>\n</li>\n<li><p>wechat: A2-B0x</p>\n</li>\n<li><p>tencentQQ: 2864011679</p>\n</li>\n<li><p>GitHub-Issue: <a href=\"https://github.com/EvanMeek/evanmeek.github.io/issues/new\" target=\"_blank\" rel=\"noopener\">点击提交反馈</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Q-你是谁\"><a href=\"#Q-你是谁\" class=\"headerlink\" title=\"Q: 你是谁?\"></a>Q: 你是谁?</h1><h1 id=\"A-我叫李天宇，今年18，生活在广州，没钱时宅，有钱时浪，现在处于没钱时。\"><a href=\"#A-我叫李天宇，今年18，生活在广州，没钱时宅，有钱时浪，现在处于没钱时。\" class=\"headerlink\" title=\"A: 我叫李天宇，今年18，生活在广州，没钱时宅，有钱时浪，现在处于没钱时。\"></a>A: 我叫李天宇，今年18，生活在广州，没钱时宅，有钱时浪，现在处于没钱时。</h1><hr>\n<h1 id=\"Q-你是做什么的\"><a href=\"#Q-你是做什么的\" class=\"headerlink\" title=\"Q: 你是做什么的?\"></a>Q: 你是做什么的?</h1><h1 id=\"A-大一学生，爱折腾计算机相关事物，偶尔拿起单反拍拍照。\"><a href=\"#A-大一学生，爱折腾计算机相关事物，偶尔拿起单反拍拍照。\" class=\"headerlink\" title=\"A: 大一学生，爱折腾计算机相关事物，偶尔拿起单反拍拍照。\"></a>A: 大一学生，爱折腾计算机相关事物，偶尔拿起单反拍拍照。</h1><hr>\n<h1 id=\"Q-如何联系你\"><a href=\"#Q-如何联系你\" class=\"headerlink\" title=\"Q: 如何联系你?\"></a>Q: 如何联系你?</h1><h1 id=\"A-你可以通过如下途径联系我\"><a href=\"#A-你可以通过如下途径联系我\" class=\"headerlink\" title=\"A: 你可以通过如下途径联系我:\"></a>A: 你可以通过如下途径联系我:</h1><ul>\n<li><p>email: <a href=\"mailto:the_lty_mail@foxmail.com\" target=\"_blank\" rel=\"noopener\">the_lty_mail@foxmail.com</a></p>\n</li>\n<li><p>wechat: A2-B0x</p>\n</li>\n<li><p>tencentQQ: 2864011679</p>\n</li>\n<li><p>GitHub-Issue: <a href=\"https://github.com/EvanMeek/evanmeek.github.io/issues/new\" target=\"_blank\" rel=\"noopener\">点击提交反馈</a></p>\n</li>\n</ul>\n"},{"title":"tags","date":"2019-04-23T08:06:47.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-04-23 16:06:47\ntype: \"tags\"\n---\n","updated":"2019-06-16T17:09:00.793Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjwz8uzej003poumsj0zctjj4","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"2008年5月12日14时28分04秒","copyright":false,"date":"2019-05-12T14:53:06.000Z","_content":"\n![空降](2008年5月12日14时28分04秒/空降.webp)\n\n  图为汶川大地震时某部队空降救灾  \n\n<!--more-->\n\n# 0x00  \n\n5·12汶川地震，发生于2008年5月12日（星期一）14时28分04秒，根据地震局的数据，此次地震的面波震级 里氏震级达8.0Ms、矩震级达8.3Mw，地震烈度达到11度。\n\n此次地震的地震波已确认共环绕了地球6圈。地震波及大半个中国及亚洲多个国家和地区，北至辽宁，东至上海，南至香港、澳门、泰国、越南，西至巴基斯坦均有震感。\n\n伤亡人数：69227人遇难，374643人受伤，17923人失踪。\n\n以上是一些冷冰冰的数字，在这些数字背后是无数悲痛的家庭，在遭遇国家大灾大难的时候，一切都显得那么渺小。\n\n# 0x01   \n\n每年的这个时刻，我都不由自主的想起这个事情。\n\n2008年的时候正读大二，大学在宝鸡市距离汶川大概10小时的车程，震感非常剧烈，那是我人生中第一次明显的感觉到地震的威力。\n\n那天像往常一样，午休完来到教室，照例坐到了教室的最后一排，等待老师来上课，\n\n突然感觉到桌子在猛烈的摇晃，而桌子是固定在地板上的，前面的女同学也转过头来诧异的看着我，以为我在后面搞什么鬼。\n\n这时候，抬头看到教室的吊灯在疯狂的摆动，突然有人意识到地震了！对大家喊到：快跑，地震了！\n\n跑到楼道的时候已经满是人，毕竟是大学生，虽然紧张，下楼也很有秩序。有的人跑到教室下面的广场就绷不住了大哭。\n\n宿舍楼那边，有人穿着睡衣就跑到了楼下，有人拿着伞从二楼跳下，还有的估计是裸睡，披个床单就下来了。没有嘲笑，只有震惊和后怕。\n\n因为不知道震源在哪里，所有人的第一反应是给家里打电话，基站一下子就崩溃了。平均每拨出100多个电话，能有一个打通。\n\n大部分同学都联系到了家里，有那么几个却没有。晚些时候，消息传了过来，震源在汶川。\n\n晚上路过学校操场的时候，听到一个女孩大声的哭声，心中一片凄凉。四川籍同学们围成了一个大圈，点着蜡烛，在祈祷。\n\n学校开始不定期停课，余震不断，我们从宿舍搬到了大操场，幸亏那段时间没有下雨。\n\n天天过上了打牌闲逛的生活，一周后学校通知放假两周，大家纷纷回家。再次回到学校，所有的空地都搭建了军用帐篷。\n\n![操场](2008年5月12日14时28分04秒/操场.webp)\n\n# 0x02   \n2008年5月19日全国默哀日，老师站在讲台上，14时28分全体起立，低头默哀三分钟。\n\n我站在靠马路旁的窗子，当防空警报响起的时候，所有的车辆都自觉的靠边停车，汽车嘀声长鸣。\n\n两种声音交织低沉而婉转，像是为逝去的人在哭泣，举国悲痛。\n\n![流量](2008年5月12日14时28分04秒/流量图.webp)\n\n这是一张2008年的老图，当时，还没有从中国撤出的谷歌在自己官方博客“谷歌黑板报”上贴出了这张图，记录的是汶川地震一周后，5月19日的流量曲线。\n\n这暴跌几乎到0的几分钟，是全国为汶川地震默哀的三分钟。\n\n谷歌当时的博文说道：\n\n“当我们依照惯例整理和分析谷歌搜索引擎的流量数据时，一条从未见过的曲线出现在我们面前。当意识到发生了什么事情时，我们的眼睛湿润了。”\n\n几乎降到0的那个节点说明了当时的一切，这个几乎不可能出现的数据记录着中国为汶川地震默哀的三分钟。\n\n全世界的中华儿女在这三分钟连在了一起。\n\n# 0x03   \n\n在这之前我觉得中国人浑身上下充满了劣根性，自私，无爱，中国人就是一盘散沙。地震之后我才发现，中国人一下就团结起来了，那个时候也没有所谓的官员和百姓，没有奸商和地痞。\n\n大家那时候就只有一个身份，就叫中国人。\n\n那次灾难让我明白，中国人的团结，是刻在DNA里面的，不是挂在嘴上的，和平时候大家该干嘛干嘛，一旦到了国家危急的时候，就仿佛血液里的基因被激活，大家都知道自己该做什么。\n\n   况且古往今来，历史诚不欺我。   \n\n> 知乎 ———— 小小白告\n\n\n\n汶川地震第三天早上，一个师兄没按时到校，班主任以为是睡过头了，也没有特意去找，结果一直到第四节课也没来。\n\n打电话问家长，家长说孩子早早就去上学了，这下两边都慌了，上窜下跳的找孩子。\n\n最后我们耿直可爱的师兄在济南火车站被拦截，身上背着家里全部现金，药品和压缩食品，要做火车去成都再去汶川救灾。\n\n  多年过去，讲起这个故事，仍旧热泪盈眶。  \n\n> 知乎 ———— 匿名用户\n\n\n\n昨晚在宿舍，室友是个四川妹子正在看腾讯视频上《新青川十年之后遇见你》。\n\n她给我看她们初中的学校。\n\n我问她当年你的同学是不是好多都不在了。她沉默了一会说当年宿舍一共八个人，只有她一个人活下来了。\n\n我听了这句话瞬间眼睛红了，那年她初二，今年她研二。\n\n   活着，本身就意味着一切。   \n\n> 知乎 ———— 匿名用户\n\n\n\n推荐25分钟纪录片:《为了生命》。\n\n---\n\n本篇文章转载于：[阅读原文](https://mp.weixin.qq.com/s/CFNQAx1Ksnxkl29FLnqDnA##)\n作者：纯洁的微笑(一个有故事的程序员)\n\n\n\n","source":"_posts/2008年5月12日14时28分04秒.md","raw":"---\ntitle: 2008年5月12日14时28分04秒\ncopyright: false\ndate: 2019-05-12 22:53:06\ncategories: 转载\ntags:\n - 社会事件\n---\n\n![空降](2008年5月12日14时28分04秒/空降.webp)\n\n  图为汶川大地震时某部队空降救灾  \n\n<!--more-->\n\n# 0x00  \n\n5·12汶川地震，发生于2008年5月12日（星期一）14时28分04秒，根据地震局的数据，此次地震的面波震级 里氏震级达8.0Ms、矩震级达8.3Mw，地震烈度达到11度。\n\n此次地震的地震波已确认共环绕了地球6圈。地震波及大半个中国及亚洲多个国家和地区，北至辽宁，东至上海，南至香港、澳门、泰国、越南，西至巴基斯坦均有震感。\n\n伤亡人数：69227人遇难，374643人受伤，17923人失踪。\n\n以上是一些冷冰冰的数字，在这些数字背后是无数悲痛的家庭，在遭遇国家大灾大难的时候，一切都显得那么渺小。\n\n# 0x01   \n\n每年的这个时刻，我都不由自主的想起这个事情。\n\n2008年的时候正读大二，大学在宝鸡市距离汶川大概10小时的车程，震感非常剧烈，那是我人生中第一次明显的感觉到地震的威力。\n\n那天像往常一样，午休完来到教室，照例坐到了教室的最后一排，等待老师来上课，\n\n突然感觉到桌子在猛烈的摇晃，而桌子是固定在地板上的，前面的女同学也转过头来诧异的看着我，以为我在后面搞什么鬼。\n\n这时候，抬头看到教室的吊灯在疯狂的摆动，突然有人意识到地震了！对大家喊到：快跑，地震了！\n\n跑到楼道的时候已经满是人，毕竟是大学生，虽然紧张，下楼也很有秩序。有的人跑到教室下面的广场就绷不住了大哭。\n\n宿舍楼那边，有人穿着睡衣就跑到了楼下，有人拿着伞从二楼跳下，还有的估计是裸睡，披个床单就下来了。没有嘲笑，只有震惊和后怕。\n\n因为不知道震源在哪里，所有人的第一反应是给家里打电话，基站一下子就崩溃了。平均每拨出100多个电话，能有一个打通。\n\n大部分同学都联系到了家里，有那么几个却没有。晚些时候，消息传了过来，震源在汶川。\n\n晚上路过学校操场的时候，听到一个女孩大声的哭声，心中一片凄凉。四川籍同学们围成了一个大圈，点着蜡烛，在祈祷。\n\n学校开始不定期停课，余震不断，我们从宿舍搬到了大操场，幸亏那段时间没有下雨。\n\n天天过上了打牌闲逛的生活，一周后学校通知放假两周，大家纷纷回家。再次回到学校，所有的空地都搭建了军用帐篷。\n\n![操场](2008年5月12日14时28分04秒/操场.webp)\n\n# 0x02   \n2008年5月19日全国默哀日，老师站在讲台上，14时28分全体起立，低头默哀三分钟。\n\n我站在靠马路旁的窗子，当防空警报响起的时候，所有的车辆都自觉的靠边停车，汽车嘀声长鸣。\n\n两种声音交织低沉而婉转，像是为逝去的人在哭泣，举国悲痛。\n\n![流量](2008年5月12日14时28分04秒/流量图.webp)\n\n这是一张2008年的老图，当时，还没有从中国撤出的谷歌在自己官方博客“谷歌黑板报”上贴出了这张图，记录的是汶川地震一周后，5月19日的流量曲线。\n\n这暴跌几乎到0的几分钟，是全国为汶川地震默哀的三分钟。\n\n谷歌当时的博文说道：\n\n“当我们依照惯例整理和分析谷歌搜索引擎的流量数据时，一条从未见过的曲线出现在我们面前。当意识到发生了什么事情时，我们的眼睛湿润了。”\n\n几乎降到0的那个节点说明了当时的一切，这个几乎不可能出现的数据记录着中国为汶川地震默哀的三分钟。\n\n全世界的中华儿女在这三分钟连在了一起。\n\n# 0x03   \n\n在这之前我觉得中国人浑身上下充满了劣根性，自私，无爱，中国人就是一盘散沙。地震之后我才发现，中国人一下就团结起来了，那个时候也没有所谓的官员和百姓，没有奸商和地痞。\n\n大家那时候就只有一个身份，就叫中国人。\n\n那次灾难让我明白，中国人的团结，是刻在DNA里面的，不是挂在嘴上的，和平时候大家该干嘛干嘛，一旦到了国家危急的时候，就仿佛血液里的基因被激活，大家都知道自己该做什么。\n\n   况且古往今来，历史诚不欺我。   \n\n> 知乎 ———— 小小白告\n\n\n\n汶川地震第三天早上，一个师兄没按时到校，班主任以为是睡过头了，也没有特意去找，结果一直到第四节课也没来。\n\n打电话问家长，家长说孩子早早就去上学了，这下两边都慌了，上窜下跳的找孩子。\n\n最后我们耿直可爱的师兄在济南火车站被拦截，身上背着家里全部现金，药品和压缩食品，要做火车去成都再去汶川救灾。\n\n  多年过去，讲起这个故事，仍旧热泪盈眶。  \n\n> 知乎 ———— 匿名用户\n\n\n\n昨晚在宿舍，室友是个四川妹子正在看腾讯视频上《新青川十年之后遇见你》。\n\n她给我看她们初中的学校。\n\n我问她当年你的同学是不是好多都不在了。她沉默了一会说当年宿舍一共八个人，只有她一个人活下来了。\n\n我听了这句话瞬间眼睛红了，那年她初二，今年她研二。\n\n   活着，本身就意味着一切。   \n\n> 知乎 ———— 匿名用户\n\n\n\n推荐25分钟纪录片:《为了生命》。\n\n---\n\n本篇文章转载于：[阅读原文](https://mp.weixin.qq.com/s/CFNQAx1Ksnxkl29FLnqDnA##)\n作者：纯洁的微笑(一个有故事的程序员)\n\n\n\n","slug":"2008年5月12日14时28分04秒","published":1,"updated":"2019-06-16T17:09:00.773Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uz940001oumsmeyjrh5q","content":"<p><img src=\"/2019/05/12/2008年5月12日14时28分04秒/空降.webp\" alt=\"空降\"></p>\n<p>  图为汶川大地震时某部队空降救灾  </p>\n<a id=\"more\"></a>\n<h1 id=\"0x00\"><a href=\"#0x00\" class=\"headerlink\" title=\"0x00\"></a>0x00</h1><p>5·12汶川地震，发生于2008年5月12日（星期一）14时28分04秒，根据地震局的数据，此次地震的面波震级 里氏震级达8.0Ms、矩震级达8.3Mw，地震烈度达到11度。</p>\n<p>此次地震的地震波已确认共环绕了地球6圈。地震波及大半个中国及亚洲多个国家和地区，北至辽宁，东至上海，南至香港、澳门、泰国、越南，西至巴基斯坦均有震感。</p>\n<p>伤亡人数：69227人遇难，374643人受伤，17923人失踪。</p>\n<p>以上是一些冷冰冰的数字，在这些数字背后是无数悲痛的家庭，在遭遇国家大灾大难的时候，一切都显得那么渺小。</p>\n<h1 id=\"0x01\"><a href=\"#0x01\" class=\"headerlink\" title=\"0x01\"></a>0x01</h1><p>每年的这个时刻，我都不由自主的想起这个事情。</p>\n<p>2008年的时候正读大二，大学在宝鸡市距离汶川大概10小时的车程，震感非常剧烈，那是我人生中第一次明显的感觉到地震的威力。</p>\n<p>那天像往常一样，午休完来到教室，照例坐到了教室的最后一排，等待老师来上课，</p>\n<p>突然感觉到桌子在猛烈的摇晃，而桌子是固定在地板上的，前面的女同学也转过头来诧异的看着我，以为我在后面搞什么鬼。</p>\n<p>这时候，抬头看到教室的吊灯在疯狂的摆动，突然有人意识到地震了！对大家喊到：快跑，地震了！</p>\n<p>跑到楼道的时候已经满是人，毕竟是大学生，虽然紧张，下楼也很有秩序。有的人跑到教室下面的广场就绷不住了大哭。</p>\n<p>宿舍楼那边，有人穿着睡衣就跑到了楼下，有人拿着伞从二楼跳下，还有的估计是裸睡，披个床单就下来了。没有嘲笑，只有震惊和后怕。</p>\n<p>因为不知道震源在哪里，所有人的第一反应是给家里打电话，基站一下子就崩溃了。平均每拨出100多个电话，能有一个打通。</p>\n<p>大部分同学都联系到了家里，有那么几个却没有。晚些时候，消息传了过来，震源在汶川。</p>\n<p>晚上路过学校操场的时候，听到一个女孩大声的哭声，心中一片凄凉。四川籍同学们围成了一个大圈，点着蜡烛，在祈祷。</p>\n<p>学校开始不定期停课，余震不断，我们从宿舍搬到了大操场，幸亏那段时间没有下雨。</p>\n<p>天天过上了打牌闲逛的生活，一周后学校通知放假两周，大家纷纷回家。再次回到学校，所有的空地都搭建了军用帐篷。</p>\n<p><img src=\"/2019/05/12/2008年5月12日14时28分04秒/操场.webp\" alt=\"操场\"></p>\n<h1 id=\"0x02\"><a href=\"#0x02\" class=\"headerlink\" title=\"0x02\"></a>0x02</h1><p>2008年5月19日全国默哀日，老师站在讲台上，14时28分全体起立，低头默哀三分钟。</p>\n<p>我站在靠马路旁的窗子，当防空警报响起的时候，所有的车辆都自觉的靠边停车，汽车嘀声长鸣。</p>\n<p>两种声音交织低沉而婉转，像是为逝去的人在哭泣，举国悲痛。</p>\n<p><img src=\"/2019/05/12/2008年5月12日14时28分04秒/流量图.webp\" alt=\"流量\"></p>\n<p>这是一张2008年的老图，当时，还没有从中国撤出的谷歌在自己官方博客“谷歌黑板报”上贴出了这张图，记录的是汶川地震一周后，5月19日的流量曲线。</p>\n<p>这暴跌几乎到0的几分钟，是全国为汶川地震默哀的三分钟。</p>\n<p>谷歌当时的博文说道：</p>\n<p>“当我们依照惯例整理和分析谷歌搜索引擎的流量数据时，一条从未见过的曲线出现在我们面前。当意识到发生了什么事情时，我们的眼睛湿润了。”</p>\n<p>几乎降到0的那个节点说明了当时的一切，这个几乎不可能出现的数据记录着中国为汶川地震默哀的三分钟。</p>\n<p>全世界的中华儿女在这三分钟连在了一起。</p>\n<h1 id=\"0x03\"><a href=\"#0x03\" class=\"headerlink\" title=\"0x03\"></a>0x03</h1><p>在这之前我觉得中国人浑身上下充满了劣根性，自私，无爱，中国人就是一盘散沙。地震之后我才发现，中国人一下就团结起来了，那个时候也没有所谓的官员和百姓，没有奸商和地痞。</p>\n<p>大家那时候就只有一个身份，就叫中国人。</p>\n<p>那次灾难让我明白，中国人的团结，是刻在DNA里面的，不是挂在嘴上的，和平时候大家该干嘛干嘛，一旦到了国家危急的时候，就仿佛血液里的基因被激活，大家都知道自己该做什么。</p>\n<p>   况且古往今来，历史诚不欺我。   </p>\n<blockquote>\n<p>知乎 ———— 小小白告</p>\n</blockquote>\n<p>汶川地震第三天早上，一个师兄没按时到校，班主任以为是睡过头了，也没有特意去找，结果一直到第四节课也没来。</p>\n<p>打电话问家长，家长说孩子早早就去上学了，这下两边都慌了，上窜下跳的找孩子。</p>\n<p>最后我们耿直可爱的师兄在济南火车站被拦截，身上背着家里全部现金，药品和压缩食品，要做火车去成都再去汶川救灾。</p>\n<p>  多年过去，讲起这个故事，仍旧热泪盈眶。  </p>\n<blockquote>\n<p>知乎 ———— 匿名用户</p>\n</blockquote>\n<p>昨晚在宿舍，室友是个四川妹子正在看腾讯视频上《新青川十年之后遇见你》。</p>\n<p>她给我看她们初中的学校。</p>\n<p>我问她当年你的同学是不是好多都不在了。她沉默了一会说当年宿舍一共八个人，只有她一个人活下来了。</p>\n<p>我听了这句话瞬间眼睛红了，那年她初二，今年她研二。</p>\n<p>   活着，本身就意味着一切。   </p>\n<blockquote>\n<p>知乎 ———— 匿名用户</p>\n</blockquote>\n<p>推荐25分钟纪录片:《为了生命》。</p>\n<hr>\n<p>本篇文章转载于：<a href=\"https://mp.weixin.qq.com/s/CFNQAx1Ksnxkl29FLnqDnA##\" target=\"_blank\" rel=\"noopener\">阅读原文</a><br>作者：纯洁的微笑(一个有故事的程序员)</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/2019/05/12/2008年5月12日14时28分04秒/空降.webp\" alt=\"空降\"></p>\n<p>  图为汶川大地震时某部队空降救灾  </p>","more":"<h1 id=\"0x00\"><a href=\"#0x00\" class=\"headerlink\" title=\"0x00\"></a>0x00</h1><p>5·12汶川地震，发生于2008年5月12日（星期一）14时28分04秒，根据地震局的数据，此次地震的面波震级 里氏震级达8.0Ms、矩震级达8.3Mw，地震烈度达到11度。</p>\n<p>此次地震的地震波已确认共环绕了地球6圈。地震波及大半个中国及亚洲多个国家和地区，北至辽宁，东至上海，南至香港、澳门、泰国、越南，西至巴基斯坦均有震感。</p>\n<p>伤亡人数：69227人遇难，374643人受伤，17923人失踪。</p>\n<p>以上是一些冷冰冰的数字，在这些数字背后是无数悲痛的家庭，在遭遇国家大灾大难的时候，一切都显得那么渺小。</p>\n<h1 id=\"0x01\"><a href=\"#0x01\" class=\"headerlink\" title=\"0x01\"></a>0x01</h1><p>每年的这个时刻，我都不由自主的想起这个事情。</p>\n<p>2008年的时候正读大二，大学在宝鸡市距离汶川大概10小时的车程，震感非常剧烈，那是我人生中第一次明显的感觉到地震的威力。</p>\n<p>那天像往常一样，午休完来到教室，照例坐到了教室的最后一排，等待老师来上课，</p>\n<p>突然感觉到桌子在猛烈的摇晃，而桌子是固定在地板上的，前面的女同学也转过头来诧异的看着我，以为我在后面搞什么鬼。</p>\n<p>这时候，抬头看到教室的吊灯在疯狂的摆动，突然有人意识到地震了！对大家喊到：快跑，地震了！</p>\n<p>跑到楼道的时候已经满是人，毕竟是大学生，虽然紧张，下楼也很有秩序。有的人跑到教室下面的广场就绷不住了大哭。</p>\n<p>宿舍楼那边，有人穿着睡衣就跑到了楼下，有人拿着伞从二楼跳下，还有的估计是裸睡，披个床单就下来了。没有嘲笑，只有震惊和后怕。</p>\n<p>因为不知道震源在哪里，所有人的第一反应是给家里打电话，基站一下子就崩溃了。平均每拨出100多个电话，能有一个打通。</p>\n<p>大部分同学都联系到了家里，有那么几个却没有。晚些时候，消息传了过来，震源在汶川。</p>\n<p>晚上路过学校操场的时候，听到一个女孩大声的哭声，心中一片凄凉。四川籍同学们围成了一个大圈，点着蜡烛，在祈祷。</p>\n<p>学校开始不定期停课，余震不断，我们从宿舍搬到了大操场，幸亏那段时间没有下雨。</p>\n<p>天天过上了打牌闲逛的生活，一周后学校通知放假两周，大家纷纷回家。再次回到学校，所有的空地都搭建了军用帐篷。</p>\n<p><img src=\"/2019/05/12/2008年5月12日14时28分04秒/操场.webp\" alt=\"操场\"></p>\n<h1 id=\"0x02\"><a href=\"#0x02\" class=\"headerlink\" title=\"0x02\"></a>0x02</h1><p>2008年5月19日全国默哀日，老师站在讲台上，14时28分全体起立，低头默哀三分钟。</p>\n<p>我站在靠马路旁的窗子，当防空警报响起的时候，所有的车辆都自觉的靠边停车，汽车嘀声长鸣。</p>\n<p>两种声音交织低沉而婉转，像是为逝去的人在哭泣，举国悲痛。</p>\n<p><img src=\"/2019/05/12/2008年5月12日14时28分04秒/流量图.webp\" alt=\"流量\"></p>\n<p>这是一张2008年的老图，当时，还没有从中国撤出的谷歌在自己官方博客“谷歌黑板报”上贴出了这张图，记录的是汶川地震一周后，5月19日的流量曲线。</p>\n<p>这暴跌几乎到0的几分钟，是全国为汶川地震默哀的三分钟。</p>\n<p>谷歌当时的博文说道：</p>\n<p>“当我们依照惯例整理和分析谷歌搜索引擎的流量数据时，一条从未见过的曲线出现在我们面前。当意识到发生了什么事情时，我们的眼睛湿润了。”</p>\n<p>几乎降到0的那个节点说明了当时的一切，这个几乎不可能出现的数据记录着中国为汶川地震默哀的三分钟。</p>\n<p>全世界的中华儿女在这三分钟连在了一起。</p>\n<h1 id=\"0x03\"><a href=\"#0x03\" class=\"headerlink\" title=\"0x03\"></a>0x03</h1><p>在这之前我觉得中国人浑身上下充满了劣根性，自私，无爱，中国人就是一盘散沙。地震之后我才发现，中国人一下就团结起来了，那个时候也没有所谓的官员和百姓，没有奸商和地痞。</p>\n<p>大家那时候就只有一个身份，就叫中国人。</p>\n<p>那次灾难让我明白，中国人的团结，是刻在DNA里面的，不是挂在嘴上的，和平时候大家该干嘛干嘛，一旦到了国家危急的时候，就仿佛血液里的基因被激活，大家都知道自己该做什么。</p>\n<p>   况且古往今来，历史诚不欺我。   </p>\n<blockquote>\n<p>知乎 ———— 小小白告</p>\n</blockquote>\n<p>汶川地震第三天早上，一个师兄没按时到校，班主任以为是睡过头了，也没有特意去找，结果一直到第四节课也没来。</p>\n<p>打电话问家长，家长说孩子早早就去上学了，这下两边都慌了，上窜下跳的找孩子。</p>\n<p>最后我们耿直可爱的师兄在济南火车站被拦截，身上背着家里全部现金，药品和压缩食品，要做火车去成都再去汶川救灾。</p>\n<p>  多年过去，讲起这个故事，仍旧热泪盈眶。  </p>\n<blockquote>\n<p>知乎 ———— 匿名用户</p>\n</blockquote>\n<p>昨晚在宿舍，室友是个四川妹子正在看腾讯视频上《新青川十年之后遇见你》。</p>\n<p>她给我看她们初中的学校。</p>\n<p>我问她当年你的同学是不是好多都不在了。她沉默了一会说当年宿舍一共八个人，只有她一个人活下来了。</p>\n<p>我听了这句话瞬间眼睛红了，那年她初二，今年她研二。</p>\n<p>   活着，本身就意味着一切。   </p>\n<blockquote>\n<p>知乎 ———— 匿名用户</p>\n</blockquote>\n<p>推荐25分钟纪录片:《为了生命》。</p>\n<hr>\n<p>本篇文章转载于：<a href=\"https://mp.weixin.qq.com/s/CFNQAx1Ksnxkl29FLnqDnA##\" target=\"_blank\" rel=\"noopener\">阅读原文</a><br>作者：纯洁的微笑(一个有故事的程序员)</p>"},{"title":"2019年的规划","copyright":true,"date":"2019-06-09T14:23:53.000Z","_content":"\n2019年已过半，今晚正好想整理下自己完成的2019年目标，顺便把自己2019年的目标分享在博客。\n\n<!--more-->\n\n# 书籍\n\n《标准C++入门与编程实践》————————————————————已读完\n《Linux系统管理完全手册》————————————————————在读\n《Vim实用技巧》——————————————————————————————未读\n《计算机网络教程》———————————————————————————未读\n《Qt5编程入门》——————————————————————————————在读\n\n# 想学但未学\n\nAdobe Photoshop\nAdobe AfterEffects \nAdobe Primiere\n\n# 生活\n\n想多拿起相机拍拍美好的世界，\n\n想找个女朋友，\n\n想减肥，\n\n想写操作系统....\n\n","source":"_posts/2019年的规划.md","raw":"---\ntitle: 2019年的规划\ncopyright: true\ndate: 2019-06-09 22:23:53\ncategories: 分享\ntags:\n---\n\n2019年已过半，今晚正好想整理下自己完成的2019年目标，顺便把自己2019年的目标分享在博客。\n\n<!--more-->\n\n# 书籍\n\n《标准C++入门与编程实践》————————————————————已读完\n《Linux系统管理完全手册》————————————————————在读\n《Vim实用技巧》——————————————————————————————未读\n《计算机网络教程》———————————————————————————未读\n《Qt5编程入门》——————————————————————————————在读\n\n# 想学但未学\n\nAdobe Photoshop\nAdobe AfterEffects \nAdobe Primiere\n\n# 生活\n\n想多拿起相机拍拍美好的世界，\n\n想找个女朋友，\n\n想减肥，\n\n想写操作系统....\n\n","slug":"2019年的规划","published":1,"updated":"2019-06-16T17:09:00.773Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uz970003oumsuxdajcls","content":"<p>2019年已过半，今晚正好想整理下自己完成的2019年目标，顺便把自己2019年的目标分享在博客。</p>\n<a id=\"more\"></a>\n<h1 id=\"书籍\"><a href=\"#书籍\" class=\"headerlink\" title=\"书籍\"></a>书籍</h1><p>《标准C++入门与编程实践》————————————————————已读完<br>《Linux系统管理完全手册》————————————————————在读<br>《Vim实用技巧》——————————————————————————————未读<br>《计算机网络教程》———————————————————————————未读<br>《Qt5编程入门》——————————————————————————————在读</p>\n<h1 id=\"想学但未学\"><a href=\"#想学但未学\" class=\"headerlink\" title=\"想学但未学\"></a>想学但未学</h1><p>Adobe Photoshop<br>Adobe AfterEffects<br>Adobe Primiere</p>\n<h1 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h1><p>想多拿起相机拍拍美好的世界，</p>\n<p>想找个女朋友，</p>\n<p>想减肥，</p>\n<p>想写操作系统….</p>\n","site":{"data":{}},"excerpt":"<p>2019年已过半，今晚正好想整理下自己完成的2019年目标，顺便把自己2019年的目标分享在博客。</p>","more":"<h1 id=\"书籍\"><a href=\"#书籍\" class=\"headerlink\" title=\"书籍\"></a>书籍</h1><p>《标准C++入门与编程实践》————————————————————已读完<br>《Linux系统管理完全手册》————————————————————在读<br>《Vim实用技巧》——————————————————————————————未读<br>《计算机网络教程》———————————————————————————未读<br>《Qt5编程入门》——————————————————————————————在读</p>\n<h1 id=\"想学但未学\"><a href=\"#想学但未学\" class=\"headerlink\" title=\"想学但未学\"></a>想学但未学</h1><p>Adobe Photoshop<br>Adobe AfterEffects<br>Adobe Primiere</p>\n<h1 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h1><p>想多拿起相机拍拍美好的世界，</p>\n<p>想找个女朋友，</p>\n<p>想减肥，</p>\n<p>想写操作系统….</p>"},{"title":"C++内存四区之代码区与全局区","copyright":true,"date":"2019-05-11T12:52:44.000Z","_content":"\n其实这一篇应该是作为\"C++内存四区\"的第一篇的。\n\n<!--more-->\n\n# 0x00 内存分区模型\n\nC++程序在执行时，内存大方向的可划分为 *****************四个区域**\n\n   - 代码区: 存放代码的二进制代码，由操作系统进行管理。\n\n   - 全局区: 存放全局变量和静态变量以及常量。\n\n   - 栈区: 由编译器自动分配释放，存放函数的参数值，局部变量等。\n\n   - 堆区: 由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收。\n\n## 内存四区的意义:\n\n不同区域存放的数据，代表着不同的生命周期，不同的生命周期使我们可以更灵活的编程。\n\n# 0x01 程序运行前\n\n在程序编译后，生成的可执行程序，当我们未执行此程序前，分为两个区域\n\n代码区:\n\n   存放CPU执行的机器指令\n   \n   共享的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可。\n\n   只读的，为了防止程序意外修改代码的指令，所以有了只读。\n\n![代码区示意图](C-内存四区之代码区与全局区/代码区示意图.png)\n\n如上图所示，代码区主要分为两个部分，共享区是存放常备执行的代码，例如程序员所指定的内联函数，或编译器所生成的代码，这些数据在程序跑起来会一直保存在内存中,\n\n而只读部分是为了防止外部对程序内部的数据进行非法访问，举个栗子，你的程序设定买一个苹果需要1金币，但是某开发人员，通过某手段将此内存中的数据修改为-99999金币，那么就会造成数据非法修改。\n\n---\n\n","source":"_posts/C-内存四区之代码区与全局区.md","raw":"---\ntitle: C++内存四区之代码区与全局区\ncopyright: true\ndate: 2019-05-11 20:52:44\ncategories: 学习笔记\ntags:\n  - C++\n---\n\n其实这一篇应该是作为\"C++内存四区\"的第一篇的。\n\n<!--more-->\n\n# 0x00 内存分区模型\n\nC++程序在执行时，内存大方向的可划分为 *****************四个区域**\n\n   - 代码区: 存放代码的二进制代码，由操作系统进行管理。\n\n   - 全局区: 存放全局变量和静态变量以及常量。\n\n   - 栈区: 由编译器自动分配释放，存放函数的参数值，局部变量等。\n\n   - 堆区: 由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收。\n\n## 内存四区的意义:\n\n不同区域存放的数据，代表着不同的生命周期，不同的生命周期使我们可以更灵活的编程。\n\n# 0x01 程序运行前\n\n在程序编译后，生成的可执行程序，当我们未执行此程序前，分为两个区域\n\n代码区:\n\n   存放CPU执行的机器指令\n   \n   共享的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可。\n\n   只读的，为了防止程序意外修改代码的指令，所以有了只读。\n\n![代码区示意图](C-内存四区之代码区与全局区/代码区示意图.png)\n\n如上图所示，代码区主要分为两个部分，共享区是存放常备执行的代码，例如程序员所指定的内联函数，或编译器所生成的代码，这些数据在程序跑起来会一直保存在内存中,\n\n而只读部分是为了防止外部对程序内部的数据进行非法访问，举个栗子，你的程序设定买一个苹果需要1金币，但是某开发人员，通过某手段将此内存中的数据修改为-99999金币，那么就会造成数据非法修改。\n\n---\n\n","slug":"C-内存四区之代码区与全局区","published":1,"updated":"2019-06-16T17:09:00.773Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uz9b0007oumsxe36q803","content":"<p>其实这一篇应该是作为”C++内存四区”的第一篇的。</p>\n<a id=\"more\"></a>\n<h1 id=\"0x00-内存分区模型\"><a href=\"#0x00-内存分区模型\" class=\"headerlink\" title=\"0x00 内存分区模型\"></a>0x00 内存分区模型</h1><p>C++程序在执行时，内存大方向的可划分为 <strong><strong><strong><strong>*</strong></strong></strong></strong>四个区域**</p>\n<ul>\n<li><p>代码区: 存放代码的二进制代码，由操作系统进行管理。</p>\n</li>\n<li><p>全局区: 存放全局变量和静态变量以及常量。</p>\n</li>\n<li><p>栈区: 由编译器自动分配释放，存放函数的参数值，局部变量等。</p>\n</li>\n<li><p>堆区: 由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收。</p>\n</li>\n</ul>\n<h2 id=\"内存四区的意义\"><a href=\"#内存四区的意义\" class=\"headerlink\" title=\"内存四区的意义:\"></a>内存四区的意义:</h2><p>不同区域存放的数据，代表着不同的生命周期，不同的生命周期使我们可以更灵活的编程。</p>\n<h1 id=\"0x01-程序运行前\"><a href=\"#0x01-程序运行前\" class=\"headerlink\" title=\"0x01 程序运行前\"></a>0x01 程序运行前</h1><p>在程序编译后，生成的可执行程序，当我们未执行此程序前，分为两个区域</p>\n<p>代码区:</p>\n<p>   存放CPU执行的机器指令</p>\n<p>   共享的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可。</p>\n<p>   只读的，为了防止程序意外修改代码的指令，所以有了只读。</p>\n<p><img src=\"/2019/05/11/C-内存四区之代码区与全局区/代码区示意图.png\" alt=\"代码区示意图\"></p>\n<p>如上图所示，代码区主要分为两个部分，共享区是存放常备执行的代码，例如程序员所指定的内联函数，或编译器所生成的代码，这些数据在程序跑起来会一直保存在内存中,</p>\n<p>而只读部分是为了防止外部对程序内部的数据进行非法访问，举个栗子，你的程序设定买一个苹果需要1金币，但是某开发人员，通过某手段将此内存中的数据修改为-99999金币，那么就会造成数据非法修改。</p>\n<hr>\n","site":{"data":{}},"excerpt":"<p>其实这一篇应该是作为”C++内存四区”的第一篇的。</p>","more":"<h1 id=\"0x00-内存分区模型\"><a href=\"#0x00-内存分区模型\" class=\"headerlink\" title=\"0x00 内存分区模型\"></a>0x00 内存分区模型</h1><p>C++程序在执行时，内存大方向的可划分为 <strong><strong><strong><strong>*</strong></strong></strong></strong>四个区域**</p>\n<ul>\n<li><p>代码区: 存放代码的二进制代码，由操作系统进行管理。</p>\n</li>\n<li><p>全局区: 存放全局变量和静态变量以及常量。</p>\n</li>\n<li><p>栈区: 由编译器自动分配释放，存放函数的参数值，局部变量等。</p>\n</li>\n<li><p>堆区: 由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收。</p>\n</li>\n</ul>\n<h2 id=\"内存四区的意义\"><a href=\"#内存四区的意义\" class=\"headerlink\" title=\"内存四区的意义:\"></a>内存四区的意义:</h2><p>不同区域存放的数据，代表着不同的生命周期，不同的生命周期使我们可以更灵活的编程。</p>\n<h1 id=\"0x01-程序运行前\"><a href=\"#0x01-程序运行前\" class=\"headerlink\" title=\"0x01 程序运行前\"></a>0x01 程序运行前</h1><p>在程序编译后，生成的可执行程序，当我们未执行此程序前，分为两个区域</p>\n<p>代码区:</p>\n<p>   存放CPU执行的机器指令</p>\n<p>   共享的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可。</p>\n<p>   只读的，为了防止程序意外修改代码的指令，所以有了只读。</p>\n<p><img src=\"/2019/05/11/C-内存四区之代码区与全局区/代码区示意图.png\" alt=\"代码区示意图\"></p>\n<p>如上图所示，代码区主要分为两个部分，共享区是存放常备执行的代码，例如程序员所指定的内联函数，或编译器所生成的代码，这些数据在程序跑起来会一直保存在内存中,</p>\n<p>而只读部分是为了防止外部对程序内部的数据进行非法访问，举个栗子，你的程序设定买一个苹果需要1金币，但是某开发人员，通过某手段将此内存中的数据修改为-99999金币，那么就会造成数据非法修改。</p>\n<hr>"},{"title":"C++内存四区之堆区","copyright":true,"date":"2019-05-10T03:13:46.000Z","_content":"\n# 什么是堆区\n\n由程序员分配释放的内存单元，若程序员不释放，则在程序关闭时由操作系统回收．\n\n# 如何将数据放在堆区\n\n在C++中由**new**关键字在堆区中开辟内存。\n\n~~~C++\n#include <iostream>\n\nusing namespace std;\n\nint* func(){\n    //创建局部指针变量，但是数据是存放在堆区的。\n    int *a_p= new int(10);\n\n    return a_p;\n} \n\nint main(){\n    int *p = func();\n\n    cout<<*p<<endl;\n\n    return 0;\n}\n~~~\n\n输出结果为:\n\n~~~\n10\n~~~\n\n看到上述代码的**创建局部指针变量，但数据存放在栈区**是什么意思呢?\n\n其实在a_p这个指针变量，仍然是一个局部变量，只不过它在由new在堆区开辟的内存中存放的，请看下图。\n\n![堆区](C-内存四区之堆区/test.png)\n\n也就是说*a_p只不过是指向的堆区中的数据，但是这个指针变量还是存放在栈区的。函数的最终返回值时堆区的10的地址。\n\n---\n","source":"_posts/C-内存四区之堆区.md","raw":"---\ntitle: C++内存四区之堆区\ncopyright: true\ndate: 2019-05-10 11:13:46\ncategories: 学习笔记\ntags:\n - C++\n---\n\n# 什么是堆区\n\n由程序员分配释放的内存单元，若程序员不释放，则在程序关闭时由操作系统回收．\n\n# 如何将数据放在堆区\n\n在C++中由**new**关键字在堆区中开辟内存。\n\n~~~C++\n#include <iostream>\n\nusing namespace std;\n\nint* func(){\n    //创建局部指针变量，但是数据是存放在堆区的。\n    int *a_p= new int(10);\n\n    return a_p;\n} \n\nint main(){\n    int *p = func();\n\n    cout<<*p<<endl;\n\n    return 0;\n}\n~~~\n\n输出结果为:\n\n~~~\n10\n~~~\n\n看到上述代码的**创建局部指针变量，但数据存放在栈区**是什么意思呢?\n\n其实在a_p这个指针变量，仍然是一个局部变量，只不过它在由new在堆区开辟的内存中存放的，请看下图。\n\n![堆区](C-内存四区之堆区/test.png)\n\n也就是说*a_p只不过是指向的堆区中的数据，但是这个指针变量还是存放在栈区的。函数的最终返回值时堆区的10的地址。\n\n---\n","slug":"C-内存四区之堆区","published":1,"updated":"2019-06-16T17:09:00.773Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uz9c0008oumsx3ee3zkj","content":"<h1 id=\"什么是堆区\"><a href=\"#什么是堆区\" class=\"headerlink\" title=\"什么是堆区\"></a>什么是堆区</h1><p>由程序员分配释放的内存单元，若程序员不释放，则在程序关闭时由操作系统回收．</p>\n<h1 id=\"如何将数据放在堆区\"><a href=\"#如何将数据放在堆区\" class=\"headerlink\" title=\"如何将数据放在堆区\"></a>如何将数据放在堆区</h1><p>在C++中由<strong>new</strong>关键字在堆区中开辟内存。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>* <span class=\"title\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建局部指针变量，但是数据是存放在堆区的。</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> *a_p= <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a_p;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *p = func();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;*p&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br></pre></td></tr></table></figure>\n<p>看到上述代码的<strong>创建局部指针变量，但数据存放在栈区</strong>是什么意思呢?</p>\n<p>其实在a_p这个指针变量，仍然是一个局部变量，只不过它在由new在堆区开辟的内存中存放的，请看下图。</p>\n<p><img src=\"/2019/05/10/C-内存四区之堆区/test.png\" alt=\"堆区\"></p>\n<p>也就是说*a_p只不过是指向的堆区中的数据，但是这个指针变量还是存放在栈区的。函数的最终返回值时堆区的10的地址。</p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是堆区\"><a href=\"#什么是堆区\" class=\"headerlink\" title=\"什么是堆区\"></a>什么是堆区</h1><p>由程序员分配释放的内存单元，若程序员不释放，则在程序关闭时由操作系统回收．</p>\n<h1 id=\"如何将数据放在堆区\"><a href=\"#如何将数据放在堆区\" class=\"headerlink\" title=\"如何将数据放在堆区\"></a>如何将数据放在堆区</h1><p>在C++中由<strong>new</strong>关键字在堆区中开辟内存。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>* <span class=\"title\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建局部指针变量，但是数据是存放在堆区的。</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> *a_p= <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a_p;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *p = func();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;*p&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br></pre></td></tr></table></figure>\n<p>看到上述代码的<strong>创建局部指针变量，但数据存放在栈区</strong>是什么意思呢?</p>\n<p>其实在a_p这个指针变量，仍然是一个局部变量，只不过它在由new在堆区开辟的内存中存放的，请看下图。</p>\n<p><img src=\"/2019/05/10/C-内存四区之堆区/test.png\" alt=\"堆区\"></p>\n<p>也就是说*a_p只不过是指向的堆区中的数据，但是这个指针变量还是存放在栈区的。函数的最终返回值时堆区的10的地址。</p>\n<hr>\n"},{"title":"C++内存四区之栈区","copyright":true,"date":"2019-05-10T02:51:17.000Z","_content":"\n# 什么是栈区\n\n栈区是由编译器自动分配释放的内存区块，它可以用来存放局部变量，例如函数的参数值等..\n\n# 操作栈区的注意事项\n\n在函数的返回值类型为指针或引用时，不要返回栈区内的数据， 例如返回一个局部变量的地址．\n\n因为所有局部的数据都是存放在栈区的，而栈区的内存是由编译器自动释放的，若在编译器已把某内存单元释放后，再对那个内存单元进行操作，则会报错．\n\n~~~C++\n#include <iostream>\n\nusing namespace std;\nint *func(){\n    //局部变量．存放在栈区,此变量将会在函数体执行完后自动释放．\n    int a = 10;\n\n    //尝试返回局部变量的地址\n    return &a;\n}\nint main(){\n    //接受func的返回值\n    int *p = func();\n    //输出p\n    cout<<*p<<endl;\n    return 0;\n}\n~~~\n\n输出结果:\n\n~~~\nProcess finished with exit code 139 (interrupted by signal 11: SIGSEGV)\n~~~\n\n上述代码中:func()函数的返回值类型为指针，并且它的返回值为函数体内部定义的变量a的地址，当这个函数被执行完，内部变量的内存空间将会被自动释放，所以在main函数内输出已经被释放的内存单元就会发生内存溢出的问题．\n\n# 其他问题\n\n可能有些编译器在第一次输出时可以正常输出，但如果是第二次输出则会报错,因为有些编译器会保留局部变量的值．\n\n---","source":"_posts/C-内存四区之栈区.md","raw":"---\ntitle: C++内存四区之栈区\ncopyright: true\ndate: 2019-05-10 10:51:17\ncategories: 学习笔记\ntags:\n  - C++\n---\n\n# 什么是栈区\n\n栈区是由编译器自动分配释放的内存区块，它可以用来存放局部变量，例如函数的参数值等..\n\n# 操作栈区的注意事项\n\n在函数的返回值类型为指针或引用时，不要返回栈区内的数据， 例如返回一个局部变量的地址．\n\n因为所有局部的数据都是存放在栈区的，而栈区的内存是由编译器自动释放的，若在编译器已把某内存单元释放后，再对那个内存单元进行操作，则会报错．\n\n~~~C++\n#include <iostream>\n\nusing namespace std;\nint *func(){\n    //局部变量．存放在栈区,此变量将会在函数体执行完后自动释放．\n    int a = 10;\n\n    //尝试返回局部变量的地址\n    return &a;\n}\nint main(){\n    //接受func的返回值\n    int *p = func();\n    //输出p\n    cout<<*p<<endl;\n    return 0;\n}\n~~~\n\n输出结果:\n\n~~~\nProcess finished with exit code 139 (interrupted by signal 11: SIGSEGV)\n~~~\n\n上述代码中:func()函数的返回值类型为指针，并且它的返回值为函数体内部定义的变量a的地址，当这个函数被执行完，内部变量的内存空间将会被自动释放，所以在main函数内输出已经被释放的内存单元就会发生内存溢出的问题．\n\n# 其他问题\n\n可能有些编译器在第一次输出时可以正常输出，但如果是第二次输出则会报错,因为有些编译器会保留局部变量的值．\n\n---","slug":"C-内存四区之栈区","published":1,"updated":"2019-06-16T17:09:00.773Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uz9d0009oumsok9whcuy","content":"<h1 id=\"什么是栈区\"><a href=\"#什么是栈区\" class=\"headerlink\" title=\"什么是栈区\"></a>什么是栈区</h1><p>栈区是由编译器自动分配释放的内存区块，它可以用来存放局部变量，例如函数的参数值等..</p>\n<h1 id=\"操作栈区的注意事项\"><a href=\"#操作栈区的注意事项\" class=\"headerlink\" title=\"操作栈区的注意事项\"></a>操作栈区的注意事项</h1><p>在函数的返回值类型为指针或引用时，不要返回栈区内的数据， 例如返回一个局部变量的地址．</p>\n<p>因为所有局部的数据都是存放在栈区的，而栈区的内存是由编译器自动释放的，若在编译器已把某内存单元释放后，再对那个内存单元进行操作，则会报错．</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> *<span class=\"title\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//局部变量．存放在栈区,此变量将会在函数体执行完后自动释放．</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//尝试返回局部变量的地址</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//接受func的返回值</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> *p = func();</span><br><span class=\"line\">    <span class=\"comment\">//输出p</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;*p&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Process finished with exit code 139 (interrupted by signal 11: SIGSEGV)</span><br></pre></td></tr></table></figure>\n<p>上述代码中:func()函数的返回值类型为指针，并且它的返回值为函数体内部定义的变量a的地址，当这个函数被执行完，内部变量的内存空间将会被自动释放，所以在main函数内输出已经被释放的内存单元就会发生内存溢出的问题．</p>\n<h1 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h1><p>可能有些编译器在第一次输出时可以正常输出，但如果是第二次输出则会报错,因为有些编译器会保留局部变量的值．</p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是栈区\"><a href=\"#什么是栈区\" class=\"headerlink\" title=\"什么是栈区\"></a>什么是栈区</h1><p>栈区是由编译器自动分配释放的内存区块，它可以用来存放局部变量，例如函数的参数值等..</p>\n<h1 id=\"操作栈区的注意事项\"><a href=\"#操作栈区的注意事项\" class=\"headerlink\" title=\"操作栈区的注意事项\"></a>操作栈区的注意事项</h1><p>在函数的返回值类型为指针或引用时，不要返回栈区内的数据， 例如返回一个局部变量的地址．</p>\n<p>因为所有局部的数据都是存放在栈区的，而栈区的内存是由编译器自动释放的，若在编译器已把某内存单元释放后，再对那个内存单元进行操作，则会报错．</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> *<span class=\"title\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//局部变量．存放在栈区,此变量将会在函数体执行完后自动释放．</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//尝试返回局部变量的地址</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//接受func的返回值</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> *p = func();</span><br><span class=\"line\">    <span class=\"comment\">//输出p</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;*p&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Process finished with exit code 139 (interrupted by signal 11: SIGSEGV)</span><br></pre></td></tr></table></figure>\n<p>上述代码中:func()函数的返回值类型为指针，并且它的返回值为函数体内部定义的变量a的地址，当这个函数被执行完，内部变量的内存空间将会被自动释放，所以在main函数内输出已经被释放的内存单元就会发生内存溢出的问题．</p>\n<h1 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h1><p>可能有些编译器在第一次输出时可以正常输出，但如果是第二次输出则会报错,因为有些编译器会保留局部变量的值．</p>\n<hr>\n"},{"title":"C++友元","copyright":true,"date":"2019-05-17T09:07:28.000Z","_content":"\n相比Java的继承，C++的友元在某些场景下更加方便，再加上我是没用过友元的，所以就深入研究了下友元，所以有了这篇文章。\n\n<!--more-->\n\n# 什么是友元？\n\n友元可以访问类中私有的成员。\n\n它的使用场景又如下几种:\n\n- 全局函数作友元\n\n- 类作友元\n\n- 成员函数做友元\n\n# 实例\n\n下面将通过几个案例，分别演示不同场景下，友元的使用方式。\n\n---\n\n## 全局函数作友元\n\n本小节通过使用一个全局函数访问类的私有成员，分别有两种情况，一种为无友元，另一种则使用了友元。\n\n~~~C++\n#include <iostream>\nusing namespace std;\n\n//先声明Person类，防止下面报错\nclass Person;\n//声明showPrivateVar函数，防止报错.\nvoid showPrivateVar();\n\n//定义Person类\nclass Person{\nprivate:\n    //私有属性，money,showPrivateVar函数访问的就是这个\n    double money;\npublic:\n    //声明构造函数\n    Person();\n};\n\n//类外定义构造函数\nPerson::Person(){\n    this->money = 10;\n}\n/**\n * 访问私有成员\n */\nvoid showPrivateVar(){\n    //实例化Person类对象\n    Person p;\n    //访问Person对象的私有成员\n    cout<<\"尝试访问Person类的私有属性:\"<<p.money<<endl;\n}\n\nint main(){\n    //调用访问私有成员函数\n    showPrivateVar();\n    return 0;\n}\n~~~\n\n显然，这个程序是跑不起来的，因为全局函数showPrivateVar访问了类Person的私有成员，这是没有使用友元的情况下，但是如果我们把友元加上，那么再跑一遍试试。\n\n~~~C++\nclass Person{\n    //使showPrivateVar函数作为Person类的友元\n    friend void showPrivateVar();\nprivate:\n    //私有属性，money,showPrivateVar函数访问的就是这个\n    double money;\npublic:\n    //声明构造函数\n    Person();\n};\n~~~\n\n运行结果:\n\n~~~shell\n尝试访问Person类的私有属性:10\n\nProcess finished with exit code 0\n~~~\n\n我们只是在定义类时加了一行代码，使得showPrivateVar函数作为类的友元，我们就可以在使用showPrivateVar函数时访问Person类的私有成员.\n\n**那么，得出结论：将全局函数作为某类的友元，那么其则可访问类的私有成员。**\n\n---\n\n## 类作类的友元\n\n这个例子，我们将演示，一个类作作为另一个类的友元，并且访问类中私有的成员.\n\n~~~C++\n#include <iostream>\nusing namespace std;\n\n//声明类，防止报错\nclass Build;\n/**\n * Build类的好朋友类，可以访问它的私有属性\n */\nclass FriendForBuild{\n    Build * b;\npublic:\n    //声明构造函数\n    FriendForBuild();\n    //声明visit函数\n    void visit();\n};\n\n//定义Build类\nclass Build{\n    friend FriendForBuild;\nprivate:\n    //私有房间\n    string privateRoom;\npublic:\n    //公共房间\n    string publicRoom;\n    /**\n     * 构造函数\n     */\n    Build(){\n       this->privateRoom = \"私人卧室\";\n       this->publicRoom = \"公共客厅\";\n    }\n};\n\nFriendForBuild::FriendForBuild() {\n    b = new Build();\n}\n/**\n * 访问Build类对象的所有成员，包括私有成员\n */\nvoid FriendForBuild::visit(){\n    cout<<\"我正在访问Build类对象的publicRoom成员:\"<<b->publicRoom<<endl;\n    cout<<\"我正在访问Build类对象的privateRoom成员:\"<<b->privateRoom<<endl;\n}\n\nint main(){\n    FriendForBuild friendForBuild;\n    friendForBuild.visit();\n    return 0;\n}\n~~~\n\n输出结果:\n\n~~~shell\n我正在访问Build类对象的publicRoom成员:公共客厅\n我正在访问Build类对象的privateRoom成员:私人卧室\n\nProcess finished with exit code 0\n~~~\n\n**可以看到，我们若需要在类中访问另外一个类的私有成员，只需要把当前类作为其他类的友元，这样就可以使得当前类不受私有访问权限的限制。**\n\n---\n\n## 成员函数做友元\n\n上面我们引入了类作类的友元，但他有个缺陷：我们可以通过友元类的所有成员访问类的私有成员了，这样就没一一个太大的限制，那么我们下面只需要将成员函数作为友元就可以避免这种问题。\n\n~~~C++\n#include <iostream>\nusing namespace std;\n\n//声明类，防止报错\nclass Build;\n/**\n * Build类的好朋友类，可以访问它的私有属性\n */\nclass FriendForBuild{\n    Build * b;\npublic:\n    //声明构造函数\n    FriendForBuild();\n    //声明visit函数\n    void visit();\n};\n\n//定义Build类\nclass Build{\n    friend void FriendForBuild::visit();\nprivate:\n    //私有房间\n    string privateRoom;\npublic:\n    //公共房间\n    string publicRoom;\n    /**\n     * 构造函数\n     */\n    Build(){\n       this->privateRoom = \"私人卧室\";\n       this->publicRoom = \"公共客厅\";\n    }\n};\n\nFriendForBuild::FriendForBuild() {\n    b = new Build();\n}\n/**\n * 访问Build类对象的所有成员，包括私有成员\n */\nvoid FriendForBuild::visit(){\n    cout<<\"我正在访问Build类对象的publicRoom成员:\"<<b->publicRoom<<endl;\n    cout<<\"我正在访问Build类对象的privateRoom成员:\"<<b->privateRoom<<endl;\n}\n\n\nint main(){\n    FriendForBuild friendForBuild;\n    friendForBuild.visit();\n    return 0;\n}\n~~~\n\n---\n\n# 总结\n\n友元可以说成时一个类的朋友，这个朋友可以访问类的所有属性，不管是私有的还是公有的，不同的场景下可以使用不同的方法使用友元。\n","source":"_posts/C-友元.md","raw":"---\ntitle: C++友元\ncopyright: true\ndate: 2019-05-17 17:07:28\ncategories: 学习笔记\ntags:\n  - C++\n---\n\n相比Java的继承，C++的友元在某些场景下更加方便，再加上我是没用过友元的，所以就深入研究了下友元，所以有了这篇文章。\n\n<!--more-->\n\n# 什么是友元？\n\n友元可以访问类中私有的成员。\n\n它的使用场景又如下几种:\n\n- 全局函数作友元\n\n- 类作友元\n\n- 成员函数做友元\n\n# 实例\n\n下面将通过几个案例，分别演示不同场景下，友元的使用方式。\n\n---\n\n## 全局函数作友元\n\n本小节通过使用一个全局函数访问类的私有成员，分别有两种情况，一种为无友元，另一种则使用了友元。\n\n~~~C++\n#include <iostream>\nusing namespace std;\n\n//先声明Person类，防止下面报错\nclass Person;\n//声明showPrivateVar函数，防止报错.\nvoid showPrivateVar();\n\n//定义Person类\nclass Person{\nprivate:\n    //私有属性，money,showPrivateVar函数访问的就是这个\n    double money;\npublic:\n    //声明构造函数\n    Person();\n};\n\n//类外定义构造函数\nPerson::Person(){\n    this->money = 10;\n}\n/**\n * 访问私有成员\n */\nvoid showPrivateVar(){\n    //实例化Person类对象\n    Person p;\n    //访问Person对象的私有成员\n    cout<<\"尝试访问Person类的私有属性:\"<<p.money<<endl;\n}\n\nint main(){\n    //调用访问私有成员函数\n    showPrivateVar();\n    return 0;\n}\n~~~\n\n显然，这个程序是跑不起来的，因为全局函数showPrivateVar访问了类Person的私有成员，这是没有使用友元的情况下，但是如果我们把友元加上，那么再跑一遍试试。\n\n~~~C++\nclass Person{\n    //使showPrivateVar函数作为Person类的友元\n    friend void showPrivateVar();\nprivate:\n    //私有属性，money,showPrivateVar函数访问的就是这个\n    double money;\npublic:\n    //声明构造函数\n    Person();\n};\n~~~\n\n运行结果:\n\n~~~shell\n尝试访问Person类的私有属性:10\n\nProcess finished with exit code 0\n~~~\n\n我们只是在定义类时加了一行代码，使得showPrivateVar函数作为类的友元，我们就可以在使用showPrivateVar函数时访问Person类的私有成员.\n\n**那么，得出结论：将全局函数作为某类的友元，那么其则可访问类的私有成员。**\n\n---\n\n## 类作类的友元\n\n这个例子，我们将演示，一个类作作为另一个类的友元，并且访问类中私有的成员.\n\n~~~C++\n#include <iostream>\nusing namespace std;\n\n//声明类，防止报错\nclass Build;\n/**\n * Build类的好朋友类，可以访问它的私有属性\n */\nclass FriendForBuild{\n    Build * b;\npublic:\n    //声明构造函数\n    FriendForBuild();\n    //声明visit函数\n    void visit();\n};\n\n//定义Build类\nclass Build{\n    friend FriendForBuild;\nprivate:\n    //私有房间\n    string privateRoom;\npublic:\n    //公共房间\n    string publicRoom;\n    /**\n     * 构造函数\n     */\n    Build(){\n       this->privateRoom = \"私人卧室\";\n       this->publicRoom = \"公共客厅\";\n    }\n};\n\nFriendForBuild::FriendForBuild() {\n    b = new Build();\n}\n/**\n * 访问Build类对象的所有成员，包括私有成员\n */\nvoid FriendForBuild::visit(){\n    cout<<\"我正在访问Build类对象的publicRoom成员:\"<<b->publicRoom<<endl;\n    cout<<\"我正在访问Build类对象的privateRoom成员:\"<<b->privateRoom<<endl;\n}\n\nint main(){\n    FriendForBuild friendForBuild;\n    friendForBuild.visit();\n    return 0;\n}\n~~~\n\n输出结果:\n\n~~~shell\n我正在访问Build类对象的publicRoom成员:公共客厅\n我正在访问Build类对象的privateRoom成员:私人卧室\n\nProcess finished with exit code 0\n~~~\n\n**可以看到，我们若需要在类中访问另外一个类的私有成员，只需要把当前类作为其他类的友元，这样就可以使得当前类不受私有访问权限的限制。**\n\n---\n\n## 成员函数做友元\n\n上面我们引入了类作类的友元，但他有个缺陷：我们可以通过友元类的所有成员访问类的私有成员了，这样就没一一个太大的限制，那么我们下面只需要将成员函数作为友元就可以避免这种问题。\n\n~~~C++\n#include <iostream>\nusing namespace std;\n\n//声明类，防止报错\nclass Build;\n/**\n * Build类的好朋友类，可以访问它的私有属性\n */\nclass FriendForBuild{\n    Build * b;\npublic:\n    //声明构造函数\n    FriendForBuild();\n    //声明visit函数\n    void visit();\n};\n\n//定义Build类\nclass Build{\n    friend void FriendForBuild::visit();\nprivate:\n    //私有房间\n    string privateRoom;\npublic:\n    //公共房间\n    string publicRoom;\n    /**\n     * 构造函数\n     */\n    Build(){\n       this->privateRoom = \"私人卧室\";\n       this->publicRoom = \"公共客厅\";\n    }\n};\n\nFriendForBuild::FriendForBuild() {\n    b = new Build();\n}\n/**\n * 访问Build类对象的所有成员，包括私有成员\n */\nvoid FriendForBuild::visit(){\n    cout<<\"我正在访问Build类对象的publicRoom成员:\"<<b->publicRoom<<endl;\n    cout<<\"我正在访问Build类对象的privateRoom成员:\"<<b->privateRoom<<endl;\n}\n\n\nint main(){\n    FriendForBuild friendForBuild;\n    friendForBuild.visit();\n    return 0;\n}\n~~~\n\n---\n\n# 总结\n\n友元可以说成时一个类的朋友，这个朋友可以访问类的所有属性，不管是私有的还是公有的，不同的场景下可以使用不同的方法使用友元。\n","slug":"C-友元","published":1,"updated":"2019-06-16T17:09:00.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uz9e000doumswgdaz7x5","content":"<p>相比Java的继承，C++的友元在某些场景下更加方便，再加上我是没用过友元的，所以就深入研究了下友元，所以有了这篇文章。</p>\n<a id=\"more\"></a>\n<h1 id=\"什么是友元？\"><a href=\"#什么是友元？\" class=\"headerlink\" title=\"什么是友元？\"></a>什么是友元？</h1><p>友元可以访问类中私有的成员。</p>\n<p>它的使用场景又如下几种:</p>\n<ul>\n<li><p>全局函数作友元</p>\n</li>\n<li><p>类作友元</p>\n</li>\n<li><p>成员函数做友元</p>\n</li>\n</ul>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><p>下面将通过几个案例，分别演示不同场景下，友元的使用方式。</p>\n<hr>\n<h2 id=\"全局函数作友元\"><a href=\"#全局函数作友元\" class=\"headerlink\" title=\"全局函数作友元\"></a>全局函数作友元</h2><p>本小节通过使用一个全局函数访问类的私有成员，分别有两种情况，一种为无友元，另一种则使用了友元。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//先声明Person类，防止下面报错</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>;</span></span><br><span class=\"line\"><span class=\"comment\">//声明showPrivateVar函数，防止报错.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPrivateVar</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义Person类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"comment\">//私有属性，money,showPrivateVar函数访问的就是这个</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> money;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//声明构造函数</span></span><br><span class=\"line\">    Person();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//类外定义构造函数</span></span><br><span class=\"line\">Person::Person()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;money = <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 访问私有成员</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPrivateVar</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实例化Person类对象</span></span><br><span class=\"line\">    Person p;</span><br><span class=\"line\">    <span class=\"comment\">//访问Person对象的私有成员</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"尝试访问Person类的私有属性:\"</span>&lt;&lt;p.money&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//调用访问私有成员函数</span></span><br><span class=\"line\">    showPrivateVar();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>显然，这个程序是跑不起来的，因为全局函数showPrivateVar访问了类Person的私有成员，这是没有使用友元的情况下，但是如果我们把友元加上，那么再跑一遍试试。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//使showPrivateVar函数作为Person类的友元</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"keyword\">void</span> <span class=\"title\">showPrivateVar</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"comment\">//私有属性，money,showPrivateVar函数访问的就是这个</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> money;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//声明构造函数</span></span><br><span class=\"line\">    Person();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>运行结果:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">尝试访问Person类的私有属性:10</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n<p>我们只是在定义类时加了一行代码，使得showPrivateVar函数作为类的友元，我们就可以在使用showPrivateVar函数时访问Person类的私有成员.</p>\n<p><strong>那么，得出结论：将全局函数作为某类的友元，那么其则可访问类的私有成员。</strong></p>\n<hr>\n<h2 id=\"类作类的友元\"><a href=\"#类作类的友元\" class=\"headerlink\" title=\"类作类的友元\"></a>类作类的友元</h2><p>这个例子，我们将演示，一个类作作为另一个类的友元，并且访问类中私有的成员.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//声明类，防止报错</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Build</span>;</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Build类的好朋友类，可以访问它的私有属性</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FriendForBuild</span>&#123;</span></span><br><span class=\"line\">    Build * b;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//声明构造函数</span></span><br><span class=\"line\">    FriendForBuild();</span><br><span class=\"line\">    <span class=\"comment\">//声明visit函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义Build类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Build</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">friend</span> FriendForBuild;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"comment\">//私有房间</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> privateRoom;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//公共房间</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> publicRoom;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构造函数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Build()&#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>-&gt;privateRoom = <span class=\"string\">\"私人卧室\"</span>;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>-&gt;publicRoom = <span class=\"string\">\"公共客厅\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">FriendForBuild::FriendForBuild() &#123;</span><br><span class=\"line\">    b = <span class=\"keyword\">new</span> Build();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 访问Build类对象的所有成员，包括私有成员</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> FriendForBuild::visit()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"我正在访问Build类对象的publicRoom成员:\"</span>&lt;&lt;b-&gt;publicRoom&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"我正在访问Build类对象的privateRoom成员:\"</span>&lt;&lt;b-&gt;privateRoom&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    FriendForBuild friendForBuild;</span><br><span class=\"line\">    friendForBuild.visit();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我正在访问Build类对象的publicRoom成员:公共客厅</span><br><span class=\"line\">我正在访问Build类对象的privateRoom成员:私人卧室</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n<p><strong>可以看到，我们若需要在类中访问另外一个类的私有成员，只需要把当前类作为其他类的友元，这样就可以使得当前类不受私有访问权限的限制。</strong></p>\n<hr>\n<h2 id=\"成员函数做友元\"><a href=\"#成员函数做友元\" class=\"headerlink\" title=\"成员函数做友元\"></a>成员函数做友元</h2><p>上面我们引入了类作类的友元，但他有个缺陷：我们可以通过友元类的所有成员访问类的私有成员了，这样就没一一个太大的限制，那么我们下面只需要将成员函数作为友元就可以避免这种问题。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//声明类，防止报错</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Build</span>;</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Build类的好朋友类，可以访问它的私有属性</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FriendForBuild</span>&#123;</span></span><br><span class=\"line\">    Build * b;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//声明构造函数</span></span><br><span class=\"line\">    FriendForBuild();</span><br><span class=\"line\">    <span class=\"comment\">//声明visit函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义Build类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Build</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">void</span> FriendForBuild::visit();</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"comment\">//私有房间</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> privateRoom;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//公共房间</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> publicRoom;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构造函数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Build()&#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>-&gt;privateRoom = <span class=\"string\">\"私人卧室\"</span>;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>-&gt;publicRoom = <span class=\"string\">\"公共客厅\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">FriendForBuild::FriendForBuild() &#123;</span><br><span class=\"line\">    b = <span class=\"keyword\">new</span> Build();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 访问Build类对象的所有成员，包括私有成员</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> FriendForBuild::visit()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"我正在访问Build类对象的publicRoom成员:\"</span>&lt;&lt;b-&gt;publicRoom&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"我正在访问Build类对象的privateRoom成员:\"</span>&lt;&lt;b-&gt;privateRoom&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    FriendForBuild friendForBuild;</span><br><span class=\"line\">    friendForBuild.visit();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>友元可以说成时一个类的朋友，这个朋友可以访问类的所有属性，不管是私有的还是公有的，不同的场景下可以使用不同的方法使用友元。</p>\n","site":{"data":{}},"excerpt":"<p>相比Java的继承，C++的友元在某些场景下更加方便，再加上我是没用过友元的，所以就深入研究了下友元，所以有了这篇文章。</p>","more":"<h1 id=\"什么是友元？\"><a href=\"#什么是友元？\" class=\"headerlink\" title=\"什么是友元？\"></a>什么是友元？</h1><p>友元可以访问类中私有的成员。</p>\n<p>它的使用场景又如下几种:</p>\n<ul>\n<li><p>全局函数作友元</p>\n</li>\n<li><p>类作友元</p>\n</li>\n<li><p>成员函数做友元</p>\n</li>\n</ul>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><p>下面将通过几个案例，分别演示不同场景下，友元的使用方式。</p>\n<hr>\n<h2 id=\"全局函数作友元\"><a href=\"#全局函数作友元\" class=\"headerlink\" title=\"全局函数作友元\"></a>全局函数作友元</h2><p>本小节通过使用一个全局函数访问类的私有成员，分别有两种情况，一种为无友元，另一种则使用了友元。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//先声明Person类，防止下面报错</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>;</span></span><br><span class=\"line\"><span class=\"comment\">//声明showPrivateVar函数，防止报错.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPrivateVar</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义Person类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"comment\">//私有属性，money,showPrivateVar函数访问的就是这个</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> money;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//声明构造函数</span></span><br><span class=\"line\">    Person();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//类外定义构造函数</span></span><br><span class=\"line\">Person::Person()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;money = <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 访问私有成员</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPrivateVar</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实例化Person类对象</span></span><br><span class=\"line\">    Person p;</span><br><span class=\"line\">    <span class=\"comment\">//访问Person对象的私有成员</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"尝试访问Person类的私有属性:\"</span>&lt;&lt;p.money&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//调用访问私有成员函数</span></span><br><span class=\"line\">    showPrivateVar();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>显然，这个程序是跑不起来的，因为全局函数showPrivateVar访问了类Person的私有成员，这是没有使用友元的情况下，但是如果我们把友元加上，那么再跑一遍试试。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//使showPrivateVar函数作为Person类的友元</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"keyword\">void</span> <span class=\"title\">showPrivateVar</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"comment\">//私有属性，money,showPrivateVar函数访问的就是这个</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> money;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//声明构造函数</span></span><br><span class=\"line\">    Person();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>运行结果:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">尝试访问Person类的私有属性:10</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n<p>我们只是在定义类时加了一行代码，使得showPrivateVar函数作为类的友元，我们就可以在使用showPrivateVar函数时访问Person类的私有成员.</p>\n<p><strong>那么，得出结论：将全局函数作为某类的友元，那么其则可访问类的私有成员。</strong></p>\n<hr>\n<h2 id=\"类作类的友元\"><a href=\"#类作类的友元\" class=\"headerlink\" title=\"类作类的友元\"></a>类作类的友元</h2><p>这个例子，我们将演示，一个类作作为另一个类的友元，并且访问类中私有的成员.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//声明类，防止报错</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Build</span>;</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Build类的好朋友类，可以访问它的私有属性</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FriendForBuild</span>&#123;</span></span><br><span class=\"line\">    Build * b;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//声明构造函数</span></span><br><span class=\"line\">    FriendForBuild();</span><br><span class=\"line\">    <span class=\"comment\">//声明visit函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义Build类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Build</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">friend</span> FriendForBuild;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"comment\">//私有房间</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> privateRoom;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//公共房间</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> publicRoom;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构造函数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Build()&#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>-&gt;privateRoom = <span class=\"string\">\"私人卧室\"</span>;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>-&gt;publicRoom = <span class=\"string\">\"公共客厅\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">FriendForBuild::FriendForBuild() &#123;</span><br><span class=\"line\">    b = <span class=\"keyword\">new</span> Build();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 访问Build类对象的所有成员，包括私有成员</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> FriendForBuild::visit()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"我正在访问Build类对象的publicRoom成员:\"</span>&lt;&lt;b-&gt;publicRoom&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"我正在访问Build类对象的privateRoom成员:\"</span>&lt;&lt;b-&gt;privateRoom&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    FriendForBuild friendForBuild;</span><br><span class=\"line\">    friendForBuild.visit();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我正在访问Build类对象的publicRoom成员:公共客厅</span><br><span class=\"line\">我正在访问Build类对象的privateRoom成员:私人卧室</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n<p><strong>可以看到，我们若需要在类中访问另外一个类的私有成员，只需要把当前类作为其他类的友元，这样就可以使得当前类不受私有访问权限的限制。</strong></p>\n<hr>\n<h2 id=\"成员函数做友元\"><a href=\"#成员函数做友元\" class=\"headerlink\" title=\"成员函数做友元\"></a>成员函数做友元</h2><p>上面我们引入了类作类的友元，但他有个缺陷：我们可以通过友元类的所有成员访问类的私有成员了，这样就没一一个太大的限制，那么我们下面只需要将成员函数作为友元就可以避免这种问题。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//声明类，防止报错</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Build</span>;</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Build类的好朋友类，可以访问它的私有属性</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FriendForBuild</span>&#123;</span></span><br><span class=\"line\">    Build * b;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//声明构造函数</span></span><br><span class=\"line\">    FriendForBuild();</span><br><span class=\"line\">    <span class=\"comment\">//声明visit函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义Build类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Build</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">void</span> FriendForBuild::visit();</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"comment\">//私有房间</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> privateRoom;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//公共房间</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> publicRoom;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构造函数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Build()&#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>-&gt;privateRoom = <span class=\"string\">\"私人卧室\"</span>;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>-&gt;publicRoom = <span class=\"string\">\"公共客厅\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">FriendForBuild::FriendForBuild() &#123;</span><br><span class=\"line\">    b = <span class=\"keyword\">new</span> Build();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 访问Build类对象的所有成员，包括私有成员</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> FriendForBuild::visit()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"我正在访问Build类对象的publicRoom成员:\"</span>&lt;&lt;b-&gt;publicRoom&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"我正在访问Build类对象的privateRoom成员:\"</span>&lt;&lt;b-&gt;privateRoom&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    FriendForBuild friendForBuild;</span><br><span class=\"line\">    friendForBuild.visit();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>友元可以说成时一个类的朋友，这个朋友可以访问类的所有属性，不管是私有的还是公有的，不同的场景下可以使用不同的方法使用友元。</p>"},{"title":"C++指针[基础01]","date":"2019-05-06T12:19:25.000Z","copyright":true,"_content":"\n开始写C++中比较难理解的几个知识点的笔记。\n\n<!--more-->\n\n# 0x00 **空指针**\n\n**用途:给指针初始化值。**\n\n**特性:空指针不可访问。**\n\n为什么不可访问?\n\n因为空指针所指向的内存空间的编号是0~255之间的，而这之间的内存是系统预留的，不可访问。\n\n**报错例子**\n\n~~~c++\n//定义空指针\nint *p = NULL;\n\n//尝试修改空指针所指向的空间的值,报错!\n*p = 2;\n~~~\n\n**常用情景**\n\n~~~C++\n//定义空指针\nint *p = NULL;\n\nint a = 10;\n\n//使指针重新指向内存空间,可行!\np = &a;\n\n~~~\n\n**小结**\n\n空指针不可访问，常用于初始化指针的操作，空指针可重新指向内存空间。\n\n# 0x01 **野指针**\n\n**说明:指针指向的是非法的内存空间叫做野指针**\n\n**异常:读取访问权限错误**\n\n**报错例子:**\n\n~~~C++\n//使指针指向一个未知空间\nint *p = (int*)0x1010;\n\n//尝试修改指向的空间的值,报错!\n*p = 10;\n~~~\n\n**小结**\n\n我们要尽量避免野指针的操作，因为它是不可控的，万一修改了系统所用空间的某个值，就有可能造成系统崩溃!\n\n# 0x02 **const修饰指针**\n\nconst修饰指针分为三种场景\n\n- const修饰指针————常量指针\n\n- const修饰常量————指针常量\n\n- const既修饰指针又修饰常量\n\n> 常量指针\n\n~~~C++\nint a=10,b=20;\n\n//定义常量指针\nconst int *p = &a;\n\n//尝试修改指针所指向空间的值,报错!\n*p = 20;\n\n//指针重新指向新的空间,可行!\np = &b;\n~~~\n\n看上面的案例，可以得出，**常量指针是不能修改所指向的空间的值，但可重新指向新的空间**,并且定义时，**const关键字是放在指针的左侧的**。\n\n---\n\n> 指针常量\n\n~~~C++\nint a=10,b=20;\n\n//定义指针常量\nint * const p = &a;\n\n//修改指针所指向空间的值,可行!\n*p=20;\n\n//尝试为指针重新指向新的空间，报错!\np = &b;\n~~~\n\n看上面的案例，可以得出，**常量指针可修改所指向的空间的值，但不可重新指向新的空间**,并且定义时，**const关键字是放在指针的右侧的**。\n\n---\n\n> 既修饰指针又修饰常量\n\n~~~C++\n\nint a=10,b=20;\n\n//定义同时const修饰指针常量的指针\nconst int * cosnt p = &a;\n\n//尝试修改指针所指向的空间的值，报错!\n*p = 20;\n\n//尝试为指针重新指向新的空间，报错!\n\np = &b;\n~~~\n\n看上面的案例，可以得出，**如果指针和常量都被const修饰，那么就和const 引用非常类似了**。\n\n---\n\n**小结**\n\n常量指针\n\n- 不可修改所指向的空间的值\n- 可重新指向新的空间\n\n指针常量\n\n- 可修改所指向的空间的值\n- 不可重新指向新的空间\n\n指针和常量都被const所修饰\n\n- 不可修改所指向的空间的值\n- 不可重新指向新的空间\n\n**小技巧**\n\n> 辨别一个指针是常量指针还是指针常量可以关注const关键字是放在指针(解除引用符\"*\")的右侧还是做左侧。\n\n---","source":"_posts/C-指针-基础01.md","raw":"---\ntitle: 'C++指针[基础01]'\ndate: 2019-05-06 20:19:25\ncategories: 学习笔记\ntags:\n  - C++\n  - 指针\n  - 学习笔记\n  - 基础\ncopyright: true\n---\n\n开始写C++中比较难理解的几个知识点的笔记。\n\n<!--more-->\n\n# 0x00 **空指针**\n\n**用途:给指针初始化值。**\n\n**特性:空指针不可访问。**\n\n为什么不可访问?\n\n因为空指针所指向的内存空间的编号是0~255之间的，而这之间的内存是系统预留的，不可访问。\n\n**报错例子**\n\n~~~c++\n//定义空指针\nint *p = NULL;\n\n//尝试修改空指针所指向的空间的值,报错!\n*p = 2;\n~~~\n\n**常用情景**\n\n~~~C++\n//定义空指针\nint *p = NULL;\n\nint a = 10;\n\n//使指针重新指向内存空间,可行!\np = &a;\n\n~~~\n\n**小结**\n\n空指针不可访问，常用于初始化指针的操作，空指针可重新指向内存空间。\n\n# 0x01 **野指针**\n\n**说明:指针指向的是非法的内存空间叫做野指针**\n\n**异常:读取访问权限错误**\n\n**报错例子:**\n\n~~~C++\n//使指针指向一个未知空间\nint *p = (int*)0x1010;\n\n//尝试修改指向的空间的值,报错!\n*p = 10;\n~~~\n\n**小结**\n\n我们要尽量避免野指针的操作，因为它是不可控的，万一修改了系统所用空间的某个值，就有可能造成系统崩溃!\n\n# 0x02 **const修饰指针**\n\nconst修饰指针分为三种场景\n\n- const修饰指针————常量指针\n\n- const修饰常量————指针常量\n\n- const既修饰指针又修饰常量\n\n> 常量指针\n\n~~~C++\nint a=10,b=20;\n\n//定义常量指针\nconst int *p = &a;\n\n//尝试修改指针所指向空间的值,报错!\n*p = 20;\n\n//指针重新指向新的空间,可行!\np = &b;\n~~~\n\n看上面的案例，可以得出，**常量指针是不能修改所指向的空间的值，但可重新指向新的空间**,并且定义时，**const关键字是放在指针的左侧的**。\n\n---\n\n> 指针常量\n\n~~~C++\nint a=10,b=20;\n\n//定义指针常量\nint * const p = &a;\n\n//修改指针所指向空间的值,可行!\n*p=20;\n\n//尝试为指针重新指向新的空间，报错!\np = &b;\n~~~\n\n看上面的案例，可以得出，**常量指针可修改所指向的空间的值，但不可重新指向新的空间**,并且定义时，**const关键字是放在指针的右侧的**。\n\n---\n\n> 既修饰指针又修饰常量\n\n~~~C++\n\nint a=10,b=20;\n\n//定义同时const修饰指针常量的指针\nconst int * cosnt p = &a;\n\n//尝试修改指针所指向的空间的值，报错!\n*p = 20;\n\n//尝试为指针重新指向新的空间，报错!\n\np = &b;\n~~~\n\n看上面的案例，可以得出，**如果指针和常量都被const修饰，那么就和const 引用非常类似了**。\n\n---\n\n**小结**\n\n常量指针\n\n- 不可修改所指向的空间的值\n- 可重新指向新的空间\n\n指针常量\n\n- 可修改所指向的空间的值\n- 不可重新指向新的空间\n\n指针和常量都被const所修饰\n\n- 不可修改所指向的空间的值\n- 不可重新指向新的空间\n\n**小技巧**\n\n> 辨别一个指针是常量指针还是指针常量可以关注const关键字是放在指针(解除引用符\"*\")的右侧还是做左侧。\n\n---","slug":"C-指针-基础01","published":1,"updated":"2019-06-16T17:09:00.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uz9g000eoums6a7viy0j","content":"<p>开始写C++中比较难理解的几个知识点的笔记。</p>\n<a id=\"more\"></a>\n<h1 id=\"0x00-空指针\"><a href=\"#0x00-空指针\" class=\"headerlink\" title=\"0x00 空指针\"></a>0x00 <strong>空指针</strong></h1><p><strong>用途:给指针初始化值。</strong></p>\n<p><strong>特性:空指针不可访问。</strong></p>\n<p>为什么不可访问?</p>\n<p>因为空指针所指向的内存空间的编号是0~255之间的，而这之间的内存是系统预留的，不可访问。</p>\n<p><strong>报错例子</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义空指针</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> *p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//尝试修改空指针所指向的空间的值,报错!</span></span><br><span class=\"line\">*p = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>常用情景</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义空指针</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> *p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使指针重新指向内存空间,可行!</span></span><br><span class=\"line\">p = &amp;a;</span><br></pre></td></tr></table></figure>\n<p><strong>小结</strong></p>\n<p>空指针不可访问，常用于初始化指针的操作，空指针可重新指向内存空间。</p>\n<h1 id=\"0x01-野指针\"><a href=\"#0x01-野指针\" class=\"headerlink\" title=\"0x01 野指针\"></a>0x01 <strong>野指针</strong></h1><p><strong>说明:指针指向的是非法的内存空间叫做野指针</strong></p>\n<p><strong>异常:读取访问权限错误</strong></p>\n<p><strong>报错例子:</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使指针指向一个未知空间</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> *p = (<span class=\"keyword\">int</span>*)<span class=\"number\">0x1010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//尝试修改指向的空间的值,报错!</span></span><br><span class=\"line\">*p = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>小结</strong></p>\n<p>我们要尽量避免野指针的操作，因为它是不可控的，万一修改了系统所用空间的某个值，就有可能造成系统崩溃!</p>\n<h1 id=\"0x02-const修饰指针\"><a href=\"#0x02-const修饰指针\" class=\"headerlink\" title=\"0x02 const修饰指针\"></a>0x02 <strong>const修饰指针</strong></h1><p>const修饰指针分为三种场景</p>\n<ul>\n<li><p>const修饰指针————常量指针</p>\n</li>\n<li><p>const修饰常量————指针常量</p>\n</li>\n<li><p>const既修饰指针又修饰常量</p>\n</li>\n</ul>\n<blockquote>\n<p>常量指针</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a=<span class=\"number\">10</span>,b=<span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义常量指针</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> *p = &amp;a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//尝试修改指针所指向空间的值,报错!</span></span><br><span class=\"line\">*p = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//指针重新指向新的空间,可行!</span></span><br><span class=\"line\">p = &amp;b;</span><br></pre></td></tr></table></figure>\n<p>看上面的案例，可以得出，<strong>常量指针是不能修改所指向的空间的值，但可重新指向新的空间</strong>,并且定义时，<strong>const关键字是放在指针的左侧的</strong>。</p>\n<hr>\n<blockquote>\n<p>指针常量</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a=<span class=\"number\">10</span>,b=<span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义指针常量</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> * <span class=\"keyword\">const</span> p = &amp;a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//修改指针所指向空间的值,可行!</span></span><br><span class=\"line\">*p=<span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//尝试为指针重新指向新的空间，报错!</span></span><br><span class=\"line\">p = &amp;b;</span><br></pre></td></tr></table></figure>\n<p>看上面的案例，可以得出，<strong>常量指针可修改所指向的空间的值，但不可重新指向新的空间</strong>,并且定义时，<strong>const关键字是放在指针的右侧的</strong>。</p>\n<hr>\n<blockquote>\n<p>既修饰指针又修饰常量</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a=<span class=\"number\">10</span>,b=<span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义同时const修饰指针常量的指针</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> * cosnt p = &amp;a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//尝试修改指针所指向的空间的值，报错!</span></span><br><span class=\"line\">*p = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//尝试为指针重新指向新的空间，报错!</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = &amp;b;</span><br></pre></td></tr></table></figure>\n<p>看上面的案例，可以得出，<strong>如果指针和常量都被const修饰，那么就和const 引用非常类似了</strong>。</p>\n<hr>\n<p><strong>小结</strong></p>\n<p>常量指针</p>\n<ul>\n<li>不可修改所指向的空间的值</li>\n<li>可重新指向新的空间</li>\n</ul>\n<p>指针常量</p>\n<ul>\n<li>可修改所指向的空间的值</li>\n<li>不可重新指向新的空间</li>\n</ul>\n<p>指针和常量都被const所修饰</p>\n<ul>\n<li>不可修改所指向的空间的值</li>\n<li>不可重新指向新的空间</li>\n</ul>\n<p><strong>小技巧</strong></p>\n<blockquote>\n<p>辨别一个指针是常量指针还是指针常量可以关注const关键字是放在指针(解除引用符”*”)的右侧还是做左侧。</p>\n</blockquote>\n<hr>\n","site":{"data":{}},"excerpt":"<p>开始写C++中比较难理解的几个知识点的笔记。</p>","more":"<h1 id=\"0x00-空指针\"><a href=\"#0x00-空指针\" class=\"headerlink\" title=\"0x00 空指针\"></a>0x00 <strong>空指针</strong></h1><p><strong>用途:给指针初始化值。</strong></p>\n<p><strong>特性:空指针不可访问。</strong></p>\n<p>为什么不可访问?</p>\n<p>因为空指针所指向的内存空间的编号是0~255之间的，而这之间的内存是系统预留的，不可访问。</p>\n<p><strong>报错例子</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义空指针</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> *p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//尝试修改空指针所指向的空间的值,报错!</span></span><br><span class=\"line\">*p = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>常用情景</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义空指针</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> *p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使指针重新指向内存空间,可行!</span></span><br><span class=\"line\">p = &amp;a;</span><br></pre></td></tr></table></figure>\n<p><strong>小结</strong></p>\n<p>空指针不可访问，常用于初始化指针的操作，空指针可重新指向内存空间。</p>\n<h1 id=\"0x01-野指针\"><a href=\"#0x01-野指针\" class=\"headerlink\" title=\"0x01 野指针\"></a>0x01 <strong>野指针</strong></h1><p><strong>说明:指针指向的是非法的内存空间叫做野指针</strong></p>\n<p><strong>异常:读取访问权限错误</strong></p>\n<p><strong>报错例子:</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使指针指向一个未知空间</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> *p = (<span class=\"keyword\">int</span>*)<span class=\"number\">0x1010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//尝试修改指向的空间的值,报错!</span></span><br><span class=\"line\">*p = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>小结</strong></p>\n<p>我们要尽量避免野指针的操作，因为它是不可控的，万一修改了系统所用空间的某个值，就有可能造成系统崩溃!</p>\n<h1 id=\"0x02-const修饰指针\"><a href=\"#0x02-const修饰指针\" class=\"headerlink\" title=\"0x02 const修饰指针\"></a>0x02 <strong>const修饰指针</strong></h1><p>const修饰指针分为三种场景</p>\n<ul>\n<li><p>const修饰指针————常量指针</p>\n</li>\n<li><p>const修饰常量————指针常量</p>\n</li>\n<li><p>const既修饰指针又修饰常量</p>\n</li>\n</ul>\n<blockquote>\n<p>常量指针</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a=<span class=\"number\">10</span>,b=<span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义常量指针</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> *p = &amp;a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//尝试修改指针所指向空间的值,报错!</span></span><br><span class=\"line\">*p = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//指针重新指向新的空间,可行!</span></span><br><span class=\"line\">p = &amp;b;</span><br></pre></td></tr></table></figure>\n<p>看上面的案例，可以得出，<strong>常量指针是不能修改所指向的空间的值，但可重新指向新的空间</strong>,并且定义时，<strong>const关键字是放在指针的左侧的</strong>。</p>\n<hr>\n<blockquote>\n<p>指针常量</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a=<span class=\"number\">10</span>,b=<span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义指针常量</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> * <span class=\"keyword\">const</span> p = &amp;a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//修改指针所指向空间的值,可行!</span></span><br><span class=\"line\">*p=<span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//尝试为指针重新指向新的空间，报错!</span></span><br><span class=\"line\">p = &amp;b;</span><br></pre></td></tr></table></figure>\n<p>看上面的案例，可以得出，<strong>常量指针可修改所指向的空间的值，但不可重新指向新的空间</strong>,并且定义时，<strong>const关键字是放在指针的右侧的</strong>。</p>\n<hr>\n<blockquote>\n<p>既修饰指针又修饰常量</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a=<span class=\"number\">10</span>,b=<span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义同时const修饰指针常量的指针</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> * cosnt p = &amp;a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//尝试修改指针所指向的空间的值，报错!</span></span><br><span class=\"line\">*p = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//尝试为指针重新指向新的空间，报错!</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = &amp;b;</span><br></pre></td></tr></table></figure>\n<p>看上面的案例，可以得出，<strong>如果指针和常量都被const修饰，那么就和const 引用非常类似了</strong>。</p>\n<hr>\n<p><strong>小结</strong></p>\n<p>常量指针</p>\n<ul>\n<li>不可修改所指向的空间的值</li>\n<li>可重新指向新的空间</li>\n</ul>\n<p>指针常量</p>\n<ul>\n<li>可修改所指向的空间的值</li>\n<li>不可重新指向新的空间</li>\n</ul>\n<p>指针和常量都被const所修饰</p>\n<ul>\n<li>不可修改所指向的空间的值</li>\n<li>不可重新指向新的空间</li>\n</ul>\n<p><strong>小技巧</strong></p>\n<blockquote>\n<p>辨别一个指针是常量指针还是指针常量可以关注const关键字是放在指针(解除引用符”*”)的右侧还是做左侧。</p>\n</blockquote>\n<hr>"},{"title":"C++指针[基础02]","date":"2019-05-06T13:58:29.000Z","copyright":true,"_content":"\nC++指针和数组的操作。\n\n<!--more-->\n\nC++中访问数组元素可以使用如下示例进行访问:\n\n~~~C++\nint arr[3]={0,1,2};\n\ncout<<\"第2个元素为:\"<<arr[1]<<endl;\n~~~\n\n想必大家都知道输出的值为:1\n\n---\n\n那么我们现在可以使用指针进行访问数组元素\n\n数组名代表的就是当前数组的第一个元素，那么我们通过让指针指向数组的数组名，即可访问数组的第一个元素。\n\n~~~C++\nint arr[3]={0,1,2};\n\nint *p = arr;\n\ncout<<\"p:\"<<*p<<endl;\n~~~\n\n输出结果为:\n\n~~~\np:0\n~~~\n\n**提问:**\n\n为什么指针可以指向数组名，而不需要使用引用符(&)？\n\n**疑惑解答:**\n\n那是因为在C++中，数组其实就是一块内存空间，然而里面的**每个元素也就组成了一块连续的内存空间**，而**数组名就当任了数组的首地址**的作用，那么它本身就是个地址，所以直接为赋值给指针没问题。\n\n---\n\n通过上面的疑惑解答，我们知道数组名是数组的首地址，而数组的内存空间的结构是一块连续的单元，那么我们则可以通过使用指针指向数组的数组名，再进行位偏移，这样就可以使得指针指向的是下一个单元，也就是arr[1];\n\n~~~C++\nint arr[3]={0,1,2};\n\nint *p = arr;\n\n//对指针进行位偏移\np++;\n\ncout<<\"p:\";\n~~~\n\n输出结果:\n\n~~~\np: 1\n~~~\n\n上述例子演示了，对指针p进行位偏移，从而使得p重新指向了一个内存单元，即&arr[1]，为何能这样使用呢？我们知道，int类型占用4个字节，而这个指针一个指向int的指针，那么对它进行++时，它所指向的位便+4个字节，那么也就是下一个内存单元&arr[1]的位置，我们通过下图更直观的查看它的变化。\n\n![位偏移](C-指针-基础02/指针位偏移.png)\n\n---\n\n最后利用指针遍历输出数组内的元素\n\n~~~C++\nint arr[3] = {0,1,2};\n\nint *p = arr;\n\nfor(int i = 0;i <3;i++,p++){\n  std::cout<<*p<<std::endl;\n}\n~~~\n\n输出结果:\n\n~~~\n0\n1\n2\n~~~\n\n---","source":"_posts/C-指针-基础02.md","raw":"---\ntitle: 'C++指针[基础02]'\ndate: 2019-05-06 21:58:29\ncategories: 学习笔记\ntags:\n  - C++\n  - 指针\n  - 学习笔记\ncopyright: true\n---\n\nC++指针和数组的操作。\n\n<!--more-->\n\nC++中访问数组元素可以使用如下示例进行访问:\n\n~~~C++\nint arr[3]={0,1,2};\n\ncout<<\"第2个元素为:\"<<arr[1]<<endl;\n~~~\n\n想必大家都知道输出的值为:1\n\n---\n\n那么我们现在可以使用指针进行访问数组元素\n\n数组名代表的就是当前数组的第一个元素，那么我们通过让指针指向数组的数组名，即可访问数组的第一个元素。\n\n~~~C++\nint arr[3]={0,1,2};\n\nint *p = arr;\n\ncout<<\"p:\"<<*p<<endl;\n~~~\n\n输出结果为:\n\n~~~\np:0\n~~~\n\n**提问:**\n\n为什么指针可以指向数组名，而不需要使用引用符(&)？\n\n**疑惑解答:**\n\n那是因为在C++中，数组其实就是一块内存空间，然而里面的**每个元素也就组成了一块连续的内存空间**，而**数组名就当任了数组的首地址**的作用，那么它本身就是个地址，所以直接为赋值给指针没问题。\n\n---\n\n通过上面的疑惑解答，我们知道数组名是数组的首地址，而数组的内存空间的结构是一块连续的单元，那么我们则可以通过使用指针指向数组的数组名，再进行位偏移，这样就可以使得指针指向的是下一个单元，也就是arr[1];\n\n~~~C++\nint arr[3]={0,1,2};\n\nint *p = arr;\n\n//对指针进行位偏移\np++;\n\ncout<<\"p:\";\n~~~\n\n输出结果:\n\n~~~\np: 1\n~~~\n\n上述例子演示了，对指针p进行位偏移，从而使得p重新指向了一个内存单元，即&arr[1]，为何能这样使用呢？我们知道，int类型占用4个字节，而这个指针一个指向int的指针，那么对它进行++时，它所指向的位便+4个字节，那么也就是下一个内存单元&arr[1]的位置，我们通过下图更直观的查看它的变化。\n\n![位偏移](C-指针-基础02/指针位偏移.png)\n\n---\n\n最后利用指针遍历输出数组内的元素\n\n~~~C++\nint arr[3] = {0,1,2};\n\nint *p = arr;\n\nfor(int i = 0;i <3;i++,p++){\n  std::cout<<*p<<std::endl;\n}\n~~~\n\n输出结果:\n\n~~~\n0\n1\n2\n~~~\n\n---","slug":"C-指针-基础02","published":1,"updated":"2019-06-16T17:09:00.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uz9k000joums7n75um5k","content":"<p>C++指针和数组的操作。</p>\n<a id=\"more\"></a>\n<p>C++中访问数组元素可以使用如下示例进行访问:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> arr[<span class=\"number\">3</span>]=&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"第2个元素为:\"</span>&lt;&lt;arr[<span class=\"number\">1</span>]&lt;&lt;<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<p>想必大家都知道输出的值为:1</p>\n<hr>\n<p>那么我们现在可以使用指针进行访问数组元素</p>\n<p>数组名代表的就是当前数组的第一个元素，那么我们通过让指针指向数组的数组名，即可访问数组的第一个元素。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> arr[<span class=\"number\">3</span>]=&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> *p = arr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"p:\"</span>&lt;&lt;*p&lt;&lt;<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<p>输出结果为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p:0</span><br></pre></td></tr></table></figure>\n<p><strong>提问:</strong></p>\n<p>为什么指针可以指向数组名，而不需要使用引用符(&amp;)？</p>\n<p><strong>疑惑解答:</strong></p>\n<p>那是因为在C++中，数组其实就是一块内存空间，然而里面的<strong>每个元素也就组成了一块连续的内存空间</strong>，而<strong>数组名就当任了数组的首地址</strong>的作用，那么它本身就是个地址，所以直接为赋值给指针没问题。</p>\n<hr>\n<p>通过上面的疑惑解答，我们知道数组名是数组的首地址，而数组的内存空间的结构是一块连续的单元，那么我们则可以通过使用指针指向数组的数组名，再进行位偏移，这样就可以使得指针指向的是下一个单元，也就是arr[1];</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> arr[<span class=\"number\">3</span>]=&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> *p = arr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对指针进行位偏移</span></span><br><span class=\"line\">p++;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"p:\"</span>;</span><br></pre></td></tr></table></figure>\n<p>输出结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p: 1</span><br></pre></td></tr></table></figure>\n<p>上述例子演示了，对指针p进行位偏移，从而使得p重新指向了一个内存单元，即&amp;arr[1]，为何能这样使用呢？我们知道，int类型占用4个字节，而这个指针一个指向int的指针，那么对它进行++时，它所指向的位便+4个字节，那么也就是下一个内存单元&amp;arr[1]的位置，我们通过下图更直观的查看它的变化。</p>\n<p><img src=\"/2019/05/06/C-指针-基础02/指针位偏移.png\" alt=\"位偏移\"></p>\n<hr>\n<p>最后利用指针遍历输出数组内的元素</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> arr[<span class=\"number\">3</span>] = &#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> *p = arr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt;<span class=\"number\">3</span>;i++,p++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;*p&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n<hr>\n","site":{"data":{}},"excerpt":"<p>C++指针和数组的操作。</p>","more":"<p>C++中访问数组元素可以使用如下示例进行访问:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> arr[<span class=\"number\">3</span>]=&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"第2个元素为:\"</span>&lt;&lt;arr[<span class=\"number\">1</span>]&lt;&lt;<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<p>想必大家都知道输出的值为:1</p>\n<hr>\n<p>那么我们现在可以使用指针进行访问数组元素</p>\n<p>数组名代表的就是当前数组的第一个元素，那么我们通过让指针指向数组的数组名，即可访问数组的第一个元素。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> arr[<span class=\"number\">3</span>]=&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> *p = arr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"p:\"</span>&lt;&lt;*p&lt;&lt;<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<p>输出结果为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p:0</span><br></pre></td></tr></table></figure>\n<p><strong>提问:</strong></p>\n<p>为什么指针可以指向数组名，而不需要使用引用符(&amp;)？</p>\n<p><strong>疑惑解答:</strong></p>\n<p>那是因为在C++中，数组其实就是一块内存空间，然而里面的<strong>每个元素也就组成了一块连续的内存空间</strong>，而<strong>数组名就当任了数组的首地址</strong>的作用，那么它本身就是个地址，所以直接为赋值给指针没问题。</p>\n<hr>\n<p>通过上面的疑惑解答，我们知道数组名是数组的首地址，而数组的内存空间的结构是一块连续的单元，那么我们则可以通过使用指针指向数组的数组名，再进行位偏移，这样就可以使得指针指向的是下一个单元，也就是arr[1];</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> arr[<span class=\"number\">3</span>]=&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> *p = arr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对指针进行位偏移</span></span><br><span class=\"line\">p++;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"p:\"</span>;</span><br></pre></td></tr></table></figure>\n<p>输出结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p: 1</span><br></pre></td></tr></table></figure>\n<p>上述例子演示了，对指针p进行位偏移，从而使得p重新指向了一个内存单元，即&amp;arr[1]，为何能这样使用呢？我们知道，int类型占用4个字节，而这个指针一个指向int的指针，那么对它进行++时，它所指向的位便+4个字节，那么也就是下一个内存单元&amp;arr[1]的位置，我们通过下图更直观的查看它的变化。</p>\n<p><img src=\"/2019/05/06/C-指针-基础02/指针位偏移.png\" alt=\"位偏移\"></p>\n<hr>\n<p>最后利用指针遍历输出数组内的元素</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> arr[<span class=\"number\">3</span>] = &#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> *p = arr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt;<span class=\"number\">3</span>;i++,p++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;*p&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n<hr>"},{"title":"Learn-Qt5-HelloWorld","copyright":true,"date":"2019-06-08T07:57:36.000Z","_content":"\n当我学习完C++的基础语法后，开始有了想制作拥有Gui界面的应用程序，所以我便选择了Qt，它具有可跨平台，并且已经有一些优质的中文教程可选．\n\n那么就让我们从Qt5的HelloWorld开始吧!\n\n<!--more-->\n\n第一步先创建一个项目\n\n可以使用快捷键 `Ctrl+N` 即可呼出创建项目的菜单\n\n![新建项目](Learn-Qt5-HelloWorld/newProject.gif)\n\n创建完成后可以看到右侧项目栏有了刚刚创建的项目，并且对不同类型的文件进行了区分\n\nHelloWorld.pro: Qt的工程文件，由qmake处理\n\nmain.cpp: 里面就是main函数\n\nmainwindows.cpp,mainwindows.h,mainwindows.ui这些就是我们创建项目时指定的名称。\n\n至此，我们就可以编译并启动一个Qt5应用程序了，点击左下角的第一个绿色按钮则会进行编译运行的操作。\n\n---\n\n现在我们需要在窗体上放上一个标签，这里标签的内容就是HelloWorld。\n\n修改main.cpp文件\n\n~~~C++\n#include <QApplication>\n#include <QLabel>\n\nint main(int argc, char *argv[])\n{\n    QApplication a(argc, argv);\n    QLabel label(\"HelloWorld\");\n    label.show();\n\n    return a.exec();\n}\n~~~\n\n再编译运行，我们则可看到一个显示\"HelloWorld\"的窗体程序。\n\n\n\n\n\n\n\n\n\n","source":"_posts/Learn-Qt5-HelloWorld.md","raw":"---\ntitle: Learn-Qt5-HelloWorld\ncopyright: true\ndate: 2019-06-08 15:57:36\ncategories: 学习笔记\ntags:\n  - C++\n  - Qt5\n---\n\n当我学习完C++的基础语法后，开始有了想制作拥有Gui界面的应用程序，所以我便选择了Qt，它具有可跨平台，并且已经有一些优质的中文教程可选．\n\n那么就让我们从Qt5的HelloWorld开始吧!\n\n<!--more-->\n\n第一步先创建一个项目\n\n可以使用快捷键 `Ctrl+N` 即可呼出创建项目的菜单\n\n![新建项目](Learn-Qt5-HelloWorld/newProject.gif)\n\n创建完成后可以看到右侧项目栏有了刚刚创建的项目，并且对不同类型的文件进行了区分\n\nHelloWorld.pro: Qt的工程文件，由qmake处理\n\nmain.cpp: 里面就是main函数\n\nmainwindows.cpp,mainwindows.h,mainwindows.ui这些就是我们创建项目时指定的名称。\n\n至此，我们就可以编译并启动一个Qt5应用程序了，点击左下角的第一个绿色按钮则会进行编译运行的操作。\n\n---\n\n现在我们需要在窗体上放上一个标签，这里标签的内容就是HelloWorld。\n\n修改main.cpp文件\n\n~~~C++\n#include <QApplication>\n#include <QLabel>\n\nint main(int argc, char *argv[])\n{\n    QApplication a(argc, argv);\n    QLabel label(\"HelloWorld\");\n    label.show();\n\n    return a.exec();\n}\n~~~\n\n再编译运行，我们则可看到一个显示\"HelloWorld\"的窗体程序。\n\n\n\n\n\n\n\n\n\n","slug":"Learn-Qt5-HelloWorld","published":1,"updated":"2019-06-16T17:09:00.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uz9l000loumsnvkno49l","content":"<p>当我学习完C++的基础语法后，开始有了想制作拥有Gui界面的应用程序，所以我便选择了Qt，它具有可跨平台，并且已经有一些优质的中文教程可选．</p>\n<p>那么就让我们从Qt5的HelloWorld开始吧!</p>\n<a id=\"more\"></a>\n<p>第一步先创建一个项目</p>\n<p>可以使用快捷键 <code>Ctrl+N</code> 即可呼出创建项目的菜单</p>\n<p><img src=\"/2019/06/08/Learn-Qt5-HelloWorld/newProject.gif\" alt=\"新建项目\"></p>\n<p>创建完成后可以看到右侧项目栏有了刚刚创建的项目，并且对不同类型的文件进行了区分</p>\n<p>HelloWorld.pro: Qt的工程文件，由qmake处理</p>\n<p>main.cpp: 里面就是main函数</p>\n<p>mainwindows.cpp,mainwindows.h,mainwindows.ui这些就是我们创建项目时指定的名称。</p>\n<p>至此，我们就可以编译并启动一个Qt5应用程序了，点击左下角的第一个绿色按钮则会进行编译运行的操作。</p>\n<hr>\n<p>现在我们需要在窗体上放上一个标签，这里标签的内容就是HelloWorld。</p>\n<p>修改main.cpp文件</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;QApplication&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;QLabel&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QApplication <span class=\"title\">a</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">QLabel <span class=\"title\">label</span><span class=\"params\">(<span class=\"string\">\"HelloWorld\"</span>)</span></span>;</span><br><span class=\"line\">    label.show();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.exec();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再编译运行，我们则可看到一个显示”HelloWorld”的窗体程序。</p>\n","site":{"data":{}},"excerpt":"<p>当我学习完C++的基础语法后，开始有了想制作拥有Gui界面的应用程序，所以我便选择了Qt，它具有可跨平台，并且已经有一些优质的中文教程可选．</p>\n<p>那么就让我们从Qt5的HelloWorld开始吧!</p>","more":"<p>第一步先创建一个项目</p>\n<p>可以使用快捷键 <code>Ctrl+N</code> 即可呼出创建项目的菜单</p>\n<p><img src=\"/2019/06/08/Learn-Qt5-HelloWorld/newProject.gif\" alt=\"新建项目\"></p>\n<p>创建完成后可以看到右侧项目栏有了刚刚创建的项目，并且对不同类型的文件进行了区分</p>\n<p>HelloWorld.pro: Qt的工程文件，由qmake处理</p>\n<p>main.cpp: 里面就是main函数</p>\n<p>mainwindows.cpp,mainwindows.h,mainwindows.ui这些就是我们创建项目时指定的名称。</p>\n<p>至此，我们就可以编译并启动一个Qt5应用程序了，点击左下角的第一个绿色按钮则会进行编译运行的操作。</p>\n<hr>\n<p>现在我们需要在窗体上放上一个标签，这里标签的内容就是HelloWorld。</p>\n<p>修改main.cpp文件</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;QApplication&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;QLabel&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QApplication <span class=\"title\">a</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">QLabel <span class=\"title\">label</span><span class=\"params\">(<span class=\"string\">\"HelloWorld\"</span>)</span></span>;</span><br><span class=\"line\">    label.show();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.exec();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再编译运行，我们则可看到一个显示”HelloWorld”的窗体程序。</p>"},{"title":"Learn-Qt5-Qt模块简介","copyright":true,"date":"2019-06-12T12:30:42.000Z","_content":"\nQt5分为两个大的模块，分别是`Qt Essentials`以及`Qt Add-Ons`以及一些额外的模块和工具．\n\n<!--more-->\n\n# Qt Essentials\n\n`Qt Essentials`是Qt的基础，它可以在所有平台上运行，下面列出了Qt Essentials模块的组件．\n\n|模块|简述|\n|:-:|:-:|\n|Qt Core|其他非图形类模块所使用的核心,|\n|Qt GUI|图形界面组件的基类，包括了OpenGL.|\n|Qt Multimedia|音频，视频，广播和摄像头相关功能.|\n|Qt Network|提供跨平台的网络能力．|\n|Qt Qml|提供QML使用的C++API.|\n|Qt Quick|允许在Qt/C++程序中嵌入 Qt Quick|\n|Qt SQL|允许使用SQL访问数据库|\n|Qt Test|提供Qt程序的单元测试能力｜\n|Qt Webkit|基于WebKit2的实现以及一套全新的QML API|\n\n# Qt Add-Ons\n`Qt Add-Ons`是Qt的扩展模块，建立在基础模块之上，在能运行Qt的平台之上可以酌情引人．\n\n|模块|简述|\n|:-:|:-:|\n|Qt 3D|提供声明式语法，在Qt程序中可以简单地嵌入3D图像．｜\n|Qt Bluetooth|提供用于访问蓝牙无线设备的C++和QML API.|\n|Qt Contacts|用于访问地址薄或联系人数据库的C++和QML API.|\n|Qt D-Bus|Unix平台独有的类库，用于使用D-Bus协议进与进程间进行交互|\n|Qt Graphical Effects|提供一系列用于实现图像特效的类|\n|Qt Image Formats|支持图片格式的一系列插件|\n|Qt JS Backend|为V8 JavaScript引擎的移植，仅供QtQML模块内部使用|\n|Qt Location|方便在Qt应用程序中使用OpenGL，保留于Qt4|\n|Qt Organize|使用QML和C++API访问组织事件｜\n|Qt Print Support|提供对打印功能的支持｜\n|Qt Publish and Subscribe|为应用程序提供对项目值的读取，导航，订阅等功能.|\n|Qt Quick 1|从Qt4移植而来的Qt Declarative模块，用于提供与Qt4兼容|\n|Qt Script|提供脚本化机制，为了与Qt5兼容|\n|Qt Script Tools|为了使用Qt Script模块的应用程序提供的额外的组件|\n|Qt Sensors|提供访问各类传感器的QML和C++接口.|\n|Qt Service Framework|提供客户端发现其他设备的服务.|\n|Qt SVF|提供渲染和创建SVG文件的功能．|\n|Qt System Info|提供一套API，用于发现系统相关的信息.|\n|Qt Tools|提供了Qt开发的方便工具,例如Qt CLucene,Qt Designer,Qt Help以及Qt UI Tools.|\n|Qt Versit|提供了对Versit API的支持．|\n|Qt Wayland|仅用于Linux平台，用户替代QWS|\n|Qt WebKit|从Qt4 一直来的基于WebKit1和QWidget的API|\n|Qt Widgets|使用C++扩展的Qt Gui模块，提供了一些界面组建，比如按钮，单选框|\n|Qt XML|SAX和DOM的C++实现．此模块已凉凉，更换为QXmlStreamReader/Writer|\n|Qt XML Patterns|提供对XPath,XQuery,XSLT和XML Schema验证的支持．|\n\n\n\n","source":"_posts/Learn-Qt5-Qt模块简介.md","raw":"---\ntitle: Learn-Qt5-Qt模块简介\ncopyright: true\ndate: 2019-06-12 20:30:42\ncategories: 学习笔记\ntags:\n  - Qt\n  - C_++\n---\n\nQt5分为两个大的模块，分别是`Qt Essentials`以及`Qt Add-Ons`以及一些额外的模块和工具．\n\n<!--more-->\n\n# Qt Essentials\n\n`Qt Essentials`是Qt的基础，它可以在所有平台上运行，下面列出了Qt Essentials模块的组件．\n\n|模块|简述|\n|:-:|:-:|\n|Qt Core|其他非图形类模块所使用的核心,|\n|Qt GUI|图形界面组件的基类，包括了OpenGL.|\n|Qt Multimedia|音频，视频，广播和摄像头相关功能.|\n|Qt Network|提供跨平台的网络能力．|\n|Qt Qml|提供QML使用的C++API.|\n|Qt Quick|允许在Qt/C++程序中嵌入 Qt Quick|\n|Qt SQL|允许使用SQL访问数据库|\n|Qt Test|提供Qt程序的单元测试能力｜\n|Qt Webkit|基于WebKit2的实现以及一套全新的QML API|\n\n# Qt Add-Ons\n`Qt Add-Ons`是Qt的扩展模块，建立在基础模块之上，在能运行Qt的平台之上可以酌情引人．\n\n|模块|简述|\n|:-:|:-:|\n|Qt 3D|提供声明式语法，在Qt程序中可以简单地嵌入3D图像．｜\n|Qt Bluetooth|提供用于访问蓝牙无线设备的C++和QML API.|\n|Qt Contacts|用于访问地址薄或联系人数据库的C++和QML API.|\n|Qt D-Bus|Unix平台独有的类库，用于使用D-Bus协议进与进程间进行交互|\n|Qt Graphical Effects|提供一系列用于实现图像特效的类|\n|Qt Image Formats|支持图片格式的一系列插件|\n|Qt JS Backend|为V8 JavaScript引擎的移植，仅供QtQML模块内部使用|\n|Qt Location|方便在Qt应用程序中使用OpenGL，保留于Qt4|\n|Qt Organize|使用QML和C++API访问组织事件｜\n|Qt Print Support|提供对打印功能的支持｜\n|Qt Publish and Subscribe|为应用程序提供对项目值的读取，导航，订阅等功能.|\n|Qt Quick 1|从Qt4移植而来的Qt Declarative模块，用于提供与Qt4兼容|\n|Qt Script|提供脚本化机制，为了与Qt5兼容|\n|Qt Script Tools|为了使用Qt Script模块的应用程序提供的额外的组件|\n|Qt Sensors|提供访问各类传感器的QML和C++接口.|\n|Qt Service Framework|提供客户端发现其他设备的服务.|\n|Qt SVF|提供渲染和创建SVG文件的功能．|\n|Qt System Info|提供一套API，用于发现系统相关的信息.|\n|Qt Tools|提供了Qt开发的方便工具,例如Qt CLucene,Qt Designer,Qt Help以及Qt UI Tools.|\n|Qt Versit|提供了对Versit API的支持．|\n|Qt Wayland|仅用于Linux平台，用户替代QWS|\n|Qt WebKit|从Qt4 一直来的基于WebKit1和QWidget的API|\n|Qt Widgets|使用C++扩展的Qt Gui模块，提供了一些界面组建，比如按钮，单选框|\n|Qt XML|SAX和DOM的C++实现．此模块已凉凉，更换为QXmlStreamReader/Writer|\n|Qt XML Patterns|提供对XPath,XQuery,XSLT和XML Schema验证的支持．|\n\n\n\n","slug":"Learn-Qt5-Qt模块简介","published":1,"updated":"2019-06-16T17:09:00.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uz9o000poumsrqhg1eym","content":"<p>Qt5分为两个大的模块，分别是<code>Qt Essentials</code>以及<code>Qt Add-Ons</code>以及一些额外的模块和工具．</p>\n<a id=\"more\"></a>\n<h1 id=\"Qt-Essentials\"><a href=\"#Qt-Essentials\" class=\"headerlink\" title=\"Qt Essentials\"></a>Qt Essentials</h1><p><code>Qt Essentials</code>是Qt的基础，它可以在所有平台上运行，下面列出了Qt Essentials模块的组件．</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">模块</th>\n<th style=\"text-align:center\">简述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Qt Core</td>\n<td style=\"text-align:center\">其他非图形类模块所使用的核心,</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt GUI</td>\n<td style=\"text-align:center\">图形界面组件的基类，包括了OpenGL.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Multimedia</td>\n<td style=\"text-align:center\">音频，视频，广播和摄像头相关功能.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Network</td>\n<td style=\"text-align:center\">提供跨平台的网络能力．</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Qml</td>\n<td style=\"text-align:center\">提供QML使用的C++API.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Quick</td>\n<td style=\"text-align:center\">允许在Qt/C++程序中嵌入 Qt Quick</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt SQL</td>\n<td style=\"text-align:center\">允许使用SQL访问数据库</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Test</td>\n<td style=\"text-align:center\">提供Qt程序的单元测试能力｜</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Webkit</td>\n<td style=\"text-align:center\">基于WebKit2的实现以及一套全新的QML API</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"Qt-Add-Ons\"><a href=\"#Qt-Add-Ons\" class=\"headerlink\" title=\"Qt Add-Ons\"></a>Qt Add-Ons</h1><p><code>Qt Add-Ons</code>是Qt的扩展模块，建立在基础模块之上，在能运行Qt的平台之上可以酌情引人．</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">模块</th>\n<th style=\"text-align:center\">简述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Qt 3D</td>\n<td style=\"text-align:center\">提供声明式语法，在Qt程序中可以简单地嵌入3D图像．｜</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Bluetooth</td>\n<td style=\"text-align:center\">提供用于访问蓝牙无线设备的C++和QML API.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Contacts</td>\n<td style=\"text-align:center\">用于访问地址薄或联系人数据库的C++和QML API.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt D-Bus</td>\n<td style=\"text-align:center\">Unix平台独有的类库，用于使用D-Bus协议进与进程间进行交互</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Graphical Effects</td>\n<td style=\"text-align:center\">提供一系列用于实现图像特效的类</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Image Formats</td>\n<td style=\"text-align:center\">支持图片格式的一系列插件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt JS Backend</td>\n<td style=\"text-align:center\">为V8 JavaScript引擎的移植，仅供QtQML模块内部使用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Location</td>\n<td style=\"text-align:center\">方便在Qt应用程序中使用OpenGL，保留于Qt4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Organize</td>\n<td style=\"text-align:center\">使用QML和C++API访问组织事件｜</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Print Support</td>\n<td style=\"text-align:center\">提供对打印功能的支持｜</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Publish and Subscribe</td>\n<td style=\"text-align:center\">为应用程序提供对项目值的读取，导航，订阅等功能.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Quick 1</td>\n<td style=\"text-align:center\">从Qt4移植而来的Qt Declarative模块，用于提供与Qt4兼容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Script</td>\n<td style=\"text-align:center\">提供脚本化机制，为了与Qt5兼容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Script Tools</td>\n<td style=\"text-align:center\">为了使用Qt Script模块的应用程序提供的额外的组件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Sensors</td>\n<td style=\"text-align:center\">提供访问各类传感器的QML和C++接口.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Service Framework</td>\n<td style=\"text-align:center\">提供客户端发现其他设备的服务.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt SVF</td>\n<td style=\"text-align:center\">提供渲染和创建SVG文件的功能．</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt System Info</td>\n<td style=\"text-align:center\">提供一套API，用于发现系统相关的信息.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Tools</td>\n<td style=\"text-align:center\">提供了Qt开发的方便工具,例如Qt CLucene,Qt Designer,Qt Help以及Qt UI Tools.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Versit</td>\n<td style=\"text-align:center\">提供了对Versit API的支持．</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Wayland</td>\n<td style=\"text-align:center\">仅用于Linux平台，用户替代QWS</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt WebKit</td>\n<td style=\"text-align:center\">从Qt4 一直来的基于WebKit1和QWidget的API</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Widgets</td>\n<td style=\"text-align:center\">使用C++扩展的Qt Gui模块，提供了一些界面组建，比如按钮，单选框</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt XML</td>\n<td style=\"text-align:center\">SAX和DOM的C++实现．此模块已凉凉，更换为QXmlStreamReader/Writer</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt XML Patterns</td>\n<td style=\"text-align:center\">提供对XPath,XQuery,XSLT和XML Schema验证的支持．</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<p>Qt5分为两个大的模块，分别是<code>Qt Essentials</code>以及<code>Qt Add-Ons</code>以及一些额外的模块和工具．</p>","more":"<h1 id=\"Qt-Essentials\"><a href=\"#Qt-Essentials\" class=\"headerlink\" title=\"Qt Essentials\"></a>Qt Essentials</h1><p><code>Qt Essentials</code>是Qt的基础，它可以在所有平台上运行，下面列出了Qt Essentials模块的组件．</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">模块</th>\n<th style=\"text-align:center\">简述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Qt Core</td>\n<td style=\"text-align:center\">其他非图形类模块所使用的核心,</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt GUI</td>\n<td style=\"text-align:center\">图形界面组件的基类，包括了OpenGL.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Multimedia</td>\n<td style=\"text-align:center\">音频，视频，广播和摄像头相关功能.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Network</td>\n<td style=\"text-align:center\">提供跨平台的网络能力．</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Qml</td>\n<td style=\"text-align:center\">提供QML使用的C++API.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Quick</td>\n<td style=\"text-align:center\">允许在Qt/C++程序中嵌入 Qt Quick</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt SQL</td>\n<td style=\"text-align:center\">允许使用SQL访问数据库</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Test</td>\n<td style=\"text-align:center\">提供Qt程序的单元测试能力｜</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Webkit</td>\n<td style=\"text-align:center\">基于WebKit2的实现以及一套全新的QML API</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"Qt-Add-Ons\"><a href=\"#Qt-Add-Ons\" class=\"headerlink\" title=\"Qt Add-Ons\"></a>Qt Add-Ons</h1><p><code>Qt Add-Ons</code>是Qt的扩展模块，建立在基础模块之上，在能运行Qt的平台之上可以酌情引人．</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">模块</th>\n<th style=\"text-align:center\">简述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Qt 3D</td>\n<td style=\"text-align:center\">提供声明式语法，在Qt程序中可以简单地嵌入3D图像．｜</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Bluetooth</td>\n<td style=\"text-align:center\">提供用于访问蓝牙无线设备的C++和QML API.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Contacts</td>\n<td style=\"text-align:center\">用于访问地址薄或联系人数据库的C++和QML API.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt D-Bus</td>\n<td style=\"text-align:center\">Unix平台独有的类库，用于使用D-Bus协议进与进程间进行交互</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Graphical Effects</td>\n<td style=\"text-align:center\">提供一系列用于实现图像特效的类</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Image Formats</td>\n<td style=\"text-align:center\">支持图片格式的一系列插件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt JS Backend</td>\n<td style=\"text-align:center\">为V8 JavaScript引擎的移植，仅供QtQML模块内部使用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Location</td>\n<td style=\"text-align:center\">方便在Qt应用程序中使用OpenGL，保留于Qt4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Organize</td>\n<td style=\"text-align:center\">使用QML和C++API访问组织事件｜</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Print Support</td>\n<td style=\"text-align:center\">提供对打印功能的支持｜</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Publish and Subscribe</td>\n<td style=\"text-align:center\">为应用程序提供对项目值的读取，导航，订阅等功能.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Quick 1</td>\n<td style=\"text-align:center\">从Qt4移植而来的Qt Declarative模块，用于提供与Qt4兼容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Script</td>\n<td style=\"text-align:center\">提供脚本化机制，为了与Qt5兼容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Script Tools</td>\n<td style=\"text-align:center\">为了使用Qt Script模块的应用程序提供的额外的组件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Sensors</td>\n<td style=\"text-align:center\">提供访问各类传感器的QML和C++接口.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Service Framework</td>\n<td style=\"text-align:center\">提供客户端发现其他设备的服务.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt SVF</td>\n<td style=\"text-align:center\">提供渲染和创建SVG文件的功能．</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt System Info</td>\n<td style=\"text-align:center\">提供一套API，用于发现系统相关的信息.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Tools</td>\n<td style=\"text-align:center\">提供了Qt开发的方便工具,例如Qt CLucene,Qt Designer,Qt Help以及Qt UI Tools.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Versit</td>\n<td style=\"text-align:center\">提供了对Versit API的支持．</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Wayland</td>\n<td style=\"text-align:center\">仅用于Linux平台，用户替代QWS</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt WebKit</td>\n<td style=\"text-align:center\">从Qt4 一直来的基于WebKit1和QWidget的API</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt Widgets</td>\n<td style=\"text-align:center\">使用C++扩展的Qt Gui模块，提供了一些界面组建，比如按钮，单选框</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt XML</td>\n<td style=\"text-align:center\">SAX和DOM的C++实现．此模块已凉凉，更换为QXmlStreamReader/Writer</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Qt XML Patterns</td>\n<td style=\"text-align:center\">提供对XPath,XQuery,XSLT和XML Schema验证的支持．</td>\n</tr>\n</tbody>\n</table>"},{"title":"Learn-Qt5-信号槽","copyright":true,"date":"2019-06-10T00:49:35.000Z","_content":"\n信号槽是Qt的一个很重要的特性，掌握信号槽是学好Qt的必要条件之一.\n\n\n<!--more-->\n\n\n信号槽，我们可以理解为监听模式或者是观察者模式，当Qt的某个事件发生后，那么它就会发出一个信号，例如一个按钮(button)被点击(clicked)，那么它会发出一个信号.\n\n但是这种信号是毫无目的的，但是如果我们使用连接(connect)函数，那么就可以使用由我们定义的函数(槽slot)来处理这个信号．\n\n简而言之则是，当某个信号发出，被连接的槽函数则会被回调，这就是观察者模式；当这个信号有来连接的槽函数，那么某个操作则会被触发．\n\n\n下面看代码:\n\n~~~C++\n\n#include <QApplication>\n#include <QDebug>\n#include <QPushButton>\n\nint main(int argc, char *argv[]) {\n  QApplication a(argc, argv);\n  QPushButton button(\"Quit\");\n  QObject::connect(&button, &QPushButton::clicked, &QApplication::quit);\n  button.show();\n  return a.exec();\n}\n\n~~~\n\n编译运行后，我们将会看到一个显示文本为Quit的Button，当我们点击它则会退出这个应用程序．\n\n下面我们分析一下QObject::connect这个函数.\n\n首先它拥有以下几种重载\n\n~~~C++\n\nQMetaObject::Connection connect(const QObject *, const char *,\n                                const QObject *, const char *,\n                                Qt::ConnectionType);\n\nQMetaObject::Connection connect(const QObject *, const QMetaMethod &,\n                                const QObject *, const QMetaMethod &,\n                                Qt::ConnectionType);\n\nQMetaObject::Connection connect(const QObject *, const char *,\n                                const char *,\n                                Qt::ConnectionType) const;\n\nQMetaObject::Connection connect(const QObject *, PointerToMemberFunction,\n                                const QObject *, PointerToMemberFunction,\n                                Qt::ConnectionType)\n\nQMetaObject::Connection connect(const QObject *, PointerToMemberFunction,Functor);\n\n~~~\n\n每种重载的返回值都是QMetaObject::Connection，这里暂时不讨论，先让我们看看connect函数最常用的用法:\n\n~~~C++\nconnect(sender,signal,receiver,slot);\n~~~\n\nconnect一般会接受前四个参数，第一个sender是发出信号的对象，第二个signal是sender发出的信号,第三个是接收信号的对象，第四个是receiver接收信号之后需要调用的参数．\n\n简而言之，当sender对象发出signal信号由receiver对象接受再调用slot函数．\n\n根据这个常用的形式，我们可以依次分析connect的重载．\n\n- 第一种\n\n  > sender类型为常量QObject指针，signal为常量字符指针，receiver为常量Object指针，slot为常量字符指针，signal和slot都被作为字符串进行处理．\n\n- 第二种\n\n  > sender和receiver仍为常量Object指针，然而signal和slot则为QMetathod引用，由此我们可以对signal和slot进行比较\n\n- 第三种\n\n  > sender仍为const Object*，而signal和slot则是const char*，这里的reveiver被省略了，它由this指针代替.\n\n- 第四种\n\n  > sender和receiver仍为const Object *，而signal和slot则为PointerToMemberFunction，看其名知其意，PointerToMemberFunction则是一个指向成员函数的指针．\n\n- 第五种\n\n  > 注意最后的Functor参数，它可以接收，static函数，全局函数以及Lambda表达式.\n\n经过我们的分析，可以看出，connect()函数的参数里，sender和receiver没有什么区别，都是QObject指针，主要只有signal和slot的形式区别．\n\n信号槽要求信号和槽的参数一致.一致也就是说，参数类型一致．如果不一致，只有槽函数的参数比信号的少的情况才允许，即使是这样，槽函数的参数列表的顺序也必须和信号参数一致．这是因为，你可以使槽函数忽略信号传的参数，但是不能说信号没有这个数据．","source":"_posts/Learn-Qt5-信号槽.md","raw":"---\ntitle: Learn-Qt5-信号槽\ncopyright: true\ndate: 2019-06-10 08:49:35\ncategories: 学习笔记\ntags:\n  - C++\n  - Qt5\n---\n\n信号槽是Qt的一个很重要的特性，掌握信号槽是学好Qt的必要条件之一.\n\n\n<!--more-->\n\n\n信号槽，我们可以理解为监听模式或者是观察者模式，当Qt的某个事件发生后，那么它就会发出一个信号，例如一个按钮(button)被点击(clicked)，那么它会发出一个信号.\n\n但是这种信号是毫无目的的，但是如果我们使用连接(connect)函数，那么就可以使用由我们定义的函数(槽slot)来处理这个信号．\n\n简而言之则是，当某个信号发出，被连接的槽函数则会被回调，这就是观察者模式；当这个信号有来连接的槽函数，那么某个操作则会被触发．\n\n\n下面看代码:\n\n~~~C++\n\n#include <QApplication>\n#include <QDebug>\n#include <QPushButton>\n\nint main(int argc, char *argv[]) {\n  QApplication a(argc, argv);\n  QPushButton button(\"Quit\");\n  QObject::connect(&button, &QPushButton::clicked, &QApplication::quit);\n  button.show();\n  return a.exec();\n}\n\n~~~\n\n编译运行后，我们将会看到一个显示文本为Quit的Button，当我们点击它则会退出这个应用程序．\n\n下面我们分析一下QObject::connect这个函数.\n\n首先它拥有以下几种重载\n\n~~~C++\n\nQMetaObject::Connection connect(const QObject *, const char *,\n                                const QObject *, const char *,\n                                Qt::ConnectionType);\n\nQMetaObject::Connection connect(const QObject *, const QMetaMethod &,\n                                const QObject *, const QMetaMethod &,\n                                Qt::ConnectionType);\n\nQMetaObject::Connection connect(const QObject *, const char *,\n                                const char *,\n                                Qt::ConnectionType) const;\n\nQMetaObject::Connection connect(const QObject *, PointerToMemberFunction,\n                                const QObject *, PointerToMemberFunction,\n                                Qt::ConnectionType)\n\nQMetaObject::Connection connect(const QObject *, PointerToMemberFunction,Functor);\n\n~~~\n\n每种重载的返回值都是QMetaObject::Connection，这里暂时不讨论，先让我们看看connect函数最常用的用法:\n\n~~~C++\nconnect(sender,signal,receiver,slot);\n~~~\n\nconnect一般会接受前四个参数，第一个sender是发出信号的对象，第二个signal是sender发出的信号,第三个是接收信号的对象，第四个是receiver接收信号之后需要调用的参数．\n\n简而言之，当sender对象发出signal信号由receiver对象接受再调用slot函数．\n\n根据这个常用的形式，我们可以依次分析connect的重载．\n\n- 第一种\n\n  > sender类型为常量QObject指针，signal为常量字符指针，receiver为常量Object指针，slot为常量字符指针，signal和slot都被作为字符串进行处理．\n\n- 第二种\n\n  > sender和receiver仍为常量Object指针，然而signal和slot则为QMetathod引用，由此我们可以对signal和slot进行比较\n\n- 第三种\n\n  > sender仍为const Object*，而signal和slot则是const char*，这里的reveiver被省略了，它由this指针代替.\n\n- 第四种\n\n  > sender和receiver仍为const Object *，而signal和slot则为PointerToMemberFunction，看其名知其意，PointerToMemberFunction则是一个指向成员函数的指针．\n\n- 第五种\n\n  > 注意最后的Functor参数，它可以接收，static函数，全局函数以及Lambda表达式.\n\n经过我们的分析，可以看出，connect()函数的参数里，sender和receiver没有什么区别，都是QObject指针，主要只有signal和slot的形式区别．\n\n信号槽要求信号和槽的参数一致.一致也就是说，参数类型一致．如果不一致，只有槽函数的参数比信号的少的情况才允许，即使是这样，槽函数的参数列表的顺序也必须和信号参数一致．这是因为，你可以使槽函数忽略信号传的参数，但是不能说信号没有这个数据．","slug":"Learn-Qt5-信号槽","published":1,"updated":"2019-06-16T17:09:00.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uz9q000roums3pgzthcq","content":"<p>信号槽是Qt的一个很重要的特性，掌握信号槽是学好Qt的必要条件之一.</p>\n<a id=\"more\"></a>\n<p>信号槽，我们可以理解为监听模式或者是观察者模式，当Qt的某个事件发生后，那么它就会发出一个信号，例如一个按钮(button)被点击(clicked)，那么它会发出一个信号.</p>\n<p>但是这种信号是毫无目的的，但是如果我们使用连接(connect)函数，那么就可以使用由我们定义的函数(槽slot)来处理这个信号．</p>\n<p>简而言之则是，当某个信号发出，被连接的槽函数则会被回调，这就是观察者模式；当这个信号有来连接的槽函数，那么某个操作则会被触发．</p>\n<p>下面看代码:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;QApplication&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;QDebug&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;QPushButton&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">QApplication <span class=\"title\">a</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\">  <span class=\"function\">QPushButton <span class=\"title\">button</span><span class=\"params\">(<span class=\"string\">\"Quit\"</span>)</span></span>;</span><br><span class=\"line\">  QObject::connect(&amp;button, &amp;QPushButton::clicked, &amp;QApplication::quit);</span><br><span class=\"line\">  button.show();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a.exec();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译运行后，我们将会看到一个显示文本为Quit的Button，当我们点击它则会退出这个应用程序．</p>\n<p>下面我们分析一下QObject::connect这个函数.</p>\n<p>首先它拥有以下几种重载</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">QMetaObject::<span class=\"function\">Connection <span class=\"title\">connect</span><span class=\"params\">(<span class=\"keyword\">const</span> QObject *, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                <span class=\"keyword\">const</span> QObject *, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                Qt::ConnectionType)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">QMetaObject::<span class=\"function\">Connection <span class=\"title\">connect</span><span class=\"params\">(<span class=\"keyword\">const</span> QObject *, <span class=\"keyword\">const</span> QMetaMethod &amp;,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                <span class=\"keyword\">const</span> QObject *, <span class=\"keyword\">const</span> QMetaMethod &amp;,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                Qt::ConnectionType)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">QMetaObject::<span class=\"function\">Connection <span class=\"title\">connect</span><span class=\"params\">(<span class=\"keyword\">const</span> QObject *, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                Qt::ConnectionType)</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">QMetaObject::<span class=\"function\">Connection <span class=\"title\">connect</span><span class=\"params\">(<span class=\"keyword\">const</span> QObject *, PointerToMemberFunction,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                <span class=\"keyword\">const</span> QObject *, PointerToMemberFunction,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                Qt::ConnectionType)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\">QMetaObject::Connection connect(const QObject *, PointerToMemberFunction,Functor);</span><br></pre></td></tr></table></figure>\n<p>每种重载的返回值都是QMetaObject::Connection，这里暂时不讨论，先让我们看看connect函数最常用的用法:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connect(sender,signal,receiver,slot);</span><br></pre></td></tr></table></figure>\n<p>connect一般会接受前四个参数，第一个sender是发出信号的对象，第二个signal是sender发出的信号,第三个是接收信号的对象，第四个是receiver接收信号之后需要调用的参数．</p>\n<p>简而言之，当sender对象发出signal信号由receiver对象接受再调用slot函数．</p>\n<p>根据这个常用的形式，我们可以依次分析connect的重载．</p>\n<ul>\n<li><p>第一种</p>\n<blockquote>\n<p>sender类型为常量QObject指针，signal为常量字符指针，receiver为常量Object指针，slot为常量字符指针，signal和slot都被作为字符串进行处理．</p>\n</blockquote>\n</li>\n<li><p>第二种</p>\n<blockquote>\n<p>sender和receiver仍为常量Object指针，然而signal和slot则为QMetathod引用，由此我们可以对signal和slot进行比较</p>\n</blockquote>\n</li>\n<li><p>第三种</p>\n<blockquote>\n<p>sender仍为const Object<em>，而signal和slot则是const char</em>，这里的reveiver被省略了，它由this指针代替.</p>\n</blockquote>\n</li>\n<li><p>第四种</p>\n<blockquote>\n<p>sender和receiver仍为const Object *，而signal和slot则为PointerToMemberFunction，看其名知其意，PointerToMemberFunction则是一个指向成员函数的指针．</p>\n</blockquote>\n</li>\n<li><p>第五种</p>\n<blockquote>\n<p>注意最后的Functor参数，它可以接收，static函数，全局函数以及Lambda表达式.</p>\n</blockquote>\n</li>\n</ul>\n<p>经过我们的分析，可以看出，connect()函数的参数里，sender和receiver没有什么区别，都是QObject指针，主要只有signal和slot的形式区别．</p>\n<p>信号槽要求信号和槽的参数一致.一致也就是说，参数类型一致．如果不一致，只有槽函数的参数比信号的少的情况才允许，即使是这样，槽函数的参数列表的顺序也必须和信号参数一致．这是因为，你可以使槽函数忽略信号传的参数，但是不能说信号没有这个数据．</p>\n","site":{"data":{}},"excerpt":"<p>信号槽是Qt的一个很重要的特性，掌握信号槽是学好Qt的必要条件之一.</p>","more":"<p>信号槽，我们可以理解为监听模式或者是观察者模式，当Qt的某个事件发生后，那么它就会发出一个信号，例如一个按钮(button)被点击(clicked)，那么它会发出一个信号.</p>\n<p>但是这种信号是毫无目的的，但是如果我们使用连接(connect)函数，那么就可以使用由我们定义的函数(槽slot)来处理这个信号．</p>\n<p>简而言之则是，当某个信号发出，被连接的槽函数则会被回调，这就是观察者模式；当这个信号有来连接的槽函数，那么某个操作则会被触发．</p>\n<p>下面看代码:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;QApplication&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;QDebug&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;QPushButton&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">QApplication <span class=\"title\">a</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\">  <span class=\"function\">QPushButton <span class=\"title\">button</span><span class=\"params\">(<span class=\"string\">\"Quit\"</span>)</span></span>;</span><br><span class=\"line\">  QObject::connect(&amp;button, &amp;QPushButton::clicked, &amp;QApplication::quit);</span><br><span class=\"line\">  button.show();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a.exec();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译运行后，我们将会看到一个显示文本为Quit的Button，当我们点击它则会退出这个应用程序．</p>\n<p>下面我们分析一下QObject::connect这个函数.</p>\n<p>首先它拥有以下几种重载</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">QMetaObject::<span class=\"function\">Connection <span class=\"title\">connect</span><span class=\"params\">(<span class=\"keyword\">const</span> QObject *, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                <span class=\"keyword\">const</span> QObject *, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                Qt::ConnectionType)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">QMetaObject::<span class=\"function\">Connection <span class=\"title\">connect</span><span class=\"params\">(<span class=\"keyword\">const</span> QObject *, <span class=\"keyword\">const</span> QMetaMethod &amp;,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                <span class=\"keyword\">const</span> QObject *, <span class=\"keyword\">const</span> QMetaMethod &amp;,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                Qt::ConnectionType)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">QMetaObject::<span class=\"function\">Connection <span class=\"title\">connect</span><span class=\"params\">(<span class=\"keyword\">const</span> QObject *, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                Qt::ConnectionType)</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">QMetaObject::<span class=\"function\">Connection <span class=\"title\">connect</span><span class=\"params\">(<span class=\"keyword\">const</span> QObject *, PointerToMemberFunction,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                <span class=\"keyword\">const</span> QObject *, PointerToMemberFunction,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                Qt::ConnectionType)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\">QMetaObject::Connection connect(const QObject *, PointerToMemberFunction,Functor);</span><br></pre></td></tr></table></figure>\n<p>每种重载的返回值都是QMetaObject::Connection，这里暂时不讨论，先让我们看看connect函数最常用的用法:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connect(sender,signal,receiver,slot);</span><br></pre></td></tr></table></figure>\n<p>connect一般会接受前四个参数，第一个sender是发出信号的对象，第二个signal是sender发出的信号,第三个是接收信号的对象，第四个是receiver接收信号之后需要调用的参数．</p>\n<p>简而言之，当sender对象发出signal信号由receiver对象接受再调用slot函数．</p>\n<p>根据这个常用的形式，我们可以依次分析connect的重载．</p>\n<ul>\n<li><p>第一种</p>\n<blockquote>\n<p>sender类型为常量QObject指针，signal为常量字符指针，receiver为常量Object指针，slot为常量字符指针，signal和slot都被作为字符串进行处理．</p>\n</blockquote>\n</li>\n<li><p>第二种</p>\n<blockquote>\n<p>sender和receiver仍为常量Object指针，然而signal和slot则为QMetathod引用，由此我们可以对signal和slot进行比较</p>\n</blockquote>\n</li>\n<li><p>第三种</p>\n<blockquote>\n<p>sender仍为const Object<em>，而signal和slot则是const char</em>，这里的reveiver被省略了，它由this指针代替.</p>\n</blockquote>\n</li>\n<li><p>第四种</p>\n<blockquote>\n<p>sender和receiver仍为const Object *，而signal和slot则为PointerToMemberFunction，看其名知其意，PointerToMemberFunction则是一个指向成员函数的指针．</p>\n</blockquote>\n</li>\n<li><p>第五种</p>\n<blockquote>\n<p>注意最后的Functor参数，它可以接收，static函数，全局函数以及Lambda表达式.</p>\n</blockquote>\n</li>\n</ul>\n<p>经过我们的分析，可以看出，connect()函数的参数里，sender和receiver没有什么区别，都是QObject指针，主要只有signal和slot的形式区别．</p>\n<p>信号槽要求信号和槽的参数一致.一致也就是说，参数类型一致．如果不一致，只有槽函数的参数比信号的少的情况才允许，即使是这样，槽函数的参数列表的顺序也必须和信号参数一致．这是因为，你可以使槽函数忽略信号传的参数，但是不能说信号没有这个数据．</p>"},{"title":"Learn-Qt5-自定义信号槽","copyright":true,"date":"2019-06-11T03:26:58.000Z","_content":"\n上一篇信号槽的学习，我们分析了QObject::connect()函数，使用connect()可以让我们连接Qt提供的信号，但Qt的信号槽机制还允许我们自定义的信号和槽，使得我们的程序更加的健壮，具有解耦性．\n\n我们通过一个新闻和订阅者的例子讲解典型的观察者模式．\n\n有一个报纸类`Newspaper`，有一个订阅者类`Subscriber`，`Subscriber`可订阅`Newspaper`，订阅后若`Newspaper`有了新内容，那么`Subscriber`则会立即得到通知．\n\n上面这个案例的观察者是`Subscriber`，被观察者则是`Newspaper`．在实现代码时，观察者会将自身注册自被观察者的一个容器中．被观察者发生了任何变化时，便会通知这个容器的所有观察者．\n\n下面，我们将用Qt的信号槽实现上面的的案例．\n\n~~~C++\n\n//newspaper.h\n#include <QObject>\n\nclass NewsPaper : public QObject {\n  Q_OBJECT\npublic:\n  NewsPaper(const QString &name) : m_name(name) {}\n  void send() { emit newPaper(m_name); }\nsignals:\n  void newPaper(const QString &name);\n\nprivate:\n  QString m_name;\n};\n\n//reader.h\n#include <QObject>\nclass Reader : public QObject {\n    Q_OBJECT\npublic:\n    void receiverNewsPaper(const QString &name){\n        qDebug()<<\"Newpaper:\"<<name;\n    }\n};\n\n//main.cpp\n#include <QCoreApplication>\n#include <newspaper.h>\n#include <reader.h>\n\nint main(int argc, char *argv[]) {\n  QCoreApplication a(argc, argv);\n  NewsPaper paper(\"xx与xxx结婚了!\");\n  Reader reader;\n\n  QObject::connect(&paper, &NewsPaper::newPaper, &reader,\n                   &Reader::receiverNewsPaper);\n\n  paper.send();\n\n  return a.exec();\n}\n\n~~~\n\n运行结果:\n\n~~~\nNewpaper:xx与xxx结婚了!\n~~~\n\n我们看到`Reader`类和`Newspaper`类都继承了`QObject` 类，在Qt中，只有继承了`QObject`类的类才具有信号槽的能力．凡是`Object`类还是它的派生类或者是间接派生类，都应该在类体的第一行代码写上`Q_OBJECT`．这是一个宏，它为我们的类提供了信号槽额机制，国际化机制，以及Qt提供的反射能力（非C++ RTTI)．你可能会认为假如你的类不需要使用信号槽则不添加这个宏，那是错误的，因为它不仅仅提供了信号槽的能力，还有很多操作都依赖于这个宏．目前，只需要知道我们要将这个宏加在头文件内．\n\n再看`Newspaper`类，它的代码很简单，只不过是加了一个signals关键字，signals所列出的块就是该类的信号．信号就是一个个的函数名，返回值为void，参数是该类需要让外界知道的数据.\n\n`Newspaper`类的`send()`函数比较简单，只有一条语句`emit newPaper(m_name);`. emit是Qt对C++的一个扩展关键字，但实际上也是一个宏．emit的翻译是发出，也就是发出`newPaper()`信号．如果有接受者关注这个信号，　那么还需要知道是哪条新闻发出的信号，所以我们将实际的新闻名字`m_name`以参数传递的方式给这个信号，当接收者收到这个信号时，就可通过槽函数获得实际的值，这样也就完成了数据从发出者到接受者的一个转移．\n\n`Reader`类是接受信号的，所以我们也需要继承`QObject`，并且添加`Q_OBJECT`宏．其他的代码则是默认构造函数和一个普通的成员函数．在Qt5中，任何成员函数,static函数,全局函数和Lamabda表达式都可以作为槽函数．槽函数其实也就是普通的成员函数，因此作为成员函数，也会收到public,private等访问控制符的影响．信号也会收到影响，因为如果信号是private的，那么这个信号就不能在类的外面使用，也就没有了意义．\n\nmain函数中，我们首先创建了`Newspaper`和`Reader`两个独享，然后使用`QObject::connect()`函数．这个然后我们调用`Newspaper`的`send()`函数．这个函数只有一个语句：发出信号．由于我们将`Newspaper`的信号和`Reader`的槽函数进行了连接，当这个信号发出时，那么将会自动调用`Reader`的槽函数．\n\n总结自定义信号槽需要注意的事项:\n\n- 发送者和接收者都需要的是`QObject`的子类，若草函数是全局函数，Lambda表达式等其他无需接受者则除外．\n- 使用signals标记信号函数，信号是一个函数声明，返回void，不需要实现函数代码；\n- 使用emit发送信号\n- 使用QObject::connect()函数连接信号和槽.","source":"_posts/Learn-Qt5-自定义信号槽.md","raw":"---\ntitle: Learn-Qt5-自定义信号槽\ncopyright: true\ndate: 2019-06-11 11:26:58\ncategories: 学习笔记\ntags:\n  - Qt5\n  - C++\n---\n\n上一篇信号槽的学习，我们分析了QObject::connect()函数，使用connect()可以让我们连接Qt提供的信号，但Qt的信号槽机制还允许我们自定义的信号和槽，使得我们的程序更加的健壮，具有解耦性．\n\n我们通过一个新闻和订阅者的例子讲解典型的观察者模式．\n\n有一个报纸类`Newspaper`，有一个订阅者类`Subscriber`，`Subscriber`可订阅`Newspaper`，订阅后若`Newspaper`有了新内容，那么`Subscriber`则会立即得到通知．\n\n上面这个案例的观察者是`Subscriber`，被观察者则是`Newspaper`．在实现代码时，观察者会将自身注册自被观察者的一个容器中．被观察者发生了任何变化时，便会通知这个容器的所有观察者．\n\n下面，我们将用Qt的信号槽实现上面的的案例．\n\n~~~C++\n\n//newspaper.h\n#include <QObject>\n\nclass NewsPaper : public QObject {\n  Q_OBJECT\npublic:\n  NewsPaper(const QString &name) : m_name(name) {}\n  void send() { emit newPaper(m_name); }\nsignals:\n  void newPaper(const QString &name);\n\nprivate:\n  QString m_name;\n};\n\n//reader.h\n#include <QObject>\nclass Reader : public QObject {\n    Q_OBJECT\npublic:\n    void receiverNewsPaper(const QString &name){\n        qDebug()<<\"Newpaper:\"<<name;\n    }\n};\n\n//main.cpp\n#include <QCoreApplication>\n#include <newspaper.h>\n#include <reader.h>\n\nint main(int argc, char *argv[]) {\n  QCoreApplication a(argc, argv);\n  NewsPaper paper(\"xx与xxx结婚了!\");\n  Reader reader;\n\n  QObject::connect(&paper, &NewsPaper::newPaper, &reader,\n                   &Reader::receiverNewsPaper);\n\n  paper.send();\n\n  return a.exec();\n}\n\n~~~\n\n运行结果:\n\n~~~\nNewpaper:xx与xxx结婚了!\n~~~\n\n我们看到`Reader`类和`Newspaper`类都继承了`QObject` 类，在Qt中，只有继承了`QObject`类的类才具有信号槽的能力．凡是`Object`类还是它的派生类或者是间接派生类，都应该在类体的第一行代码写上`Q_OBJECT`．这是一个宏，它为我们的类提供了信号槽额机制，国际化机制，以及Qt提供的反射能力（非C++ RTTI)．你可能会认为假如你的类不需要使用信号槽则不添加这个宏，那是错误的，因为它不仅仅提供了信号槽的能力，还有很多操作都依赖于这个宏．目前，只需要知道我们要将这个宏加在头文件内．\n\n再看`Newspaper`类，它的代码很简单，只不过是加了一个signals关键字，signals所列出的块就是该类的信号．信号就是一个个的函数名，返回值为void，参数是该类需要让外界知道的数据.\n\n`Newspaper`类的`send()`函数比较简单，只有一条语句`emit newPaper(m_name);`. emit是Qt对C++的一个扩展关键字，但实际上也是一个宏．emit的翻译是发出，也就是发出`newPaper()`信号．如果有接受者关注这个信号，　那么还需要知道是哪条新闻发出的信号，所以我们将实际的新闻名字`m_name`以参数传递的方式给这个信号，当接收者收到这个信号时，就可通过槽函数获得实际的值，这样也就完成了数据从发出者到接受者的一个转移．\n\n`Reader`类是接受信号的，所以我们也需要继承`QObject`，并且添加`Q_OBJECT`宏．其他的代码则是默认构造函数和一个普通的成员函数．在Qt5中，任何成员函数,static函数,全局函数和Lamabda表达式都可以作为槽函数．槽函数其实也就是普通的成员函数，因此作为成员函数，也会收到public,private等访问控制符的影响．信号也会收到影响，因为如果信号是private的，那么这个信号就不能在类的外面使用，也就没有了意义．\n\nmain函数中，我们首先创建了`Newspaper`和`Reader`两个独享，然后使用`QObject::connect()`函数．这个然后我们调用`Newspaper`的`send()`函数．这个函数只有一个语句：发出信号．由于我们将`Newspaper`的信号和`Reader`的槽函数进行了连接，当这个信号发出时，那么将会自动调用`Reader`的槽函数．\n\n总结自定义信号槽需要注意的事项:\n\n- 发送者和接收者都需要的是`QObject`的子类，若草函数是全局函数，Lambda表达式等其他无需接受者则除外．\n- 使用signals标记信号函数，信号是一个函数声明，返回void，不需要实现函数代码；\n- 使用emit发送信号\n- 使用QObject::connect()函数连接信号和槽.","slug":"Learn-Qt5-自定义信号槽","published":1,"updated":"2019-06-16T17:09:00.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uz9t000voumsnszsmxl2","content":"<p>上一篇信号槽的学习，我们分析了QObject::connect()函数，使用connect()可以让我们连接Qt提供的信号，但Qt的信号槽机制还允许我们自定义的信号和槽，使得我们的程序更加的健壮，具有解耦性．</p>\n<p>我们通过一个新闻和订阅者的例子讲解典型的观察者模式．</p>\n<p>有一个报纸类<code>Newspaper</code>，有一个订阅者类<code>Subscriber</code>，<code>Subscriber</code>可订阅<code>Newspaper</code>，订阅后若<code>Newspaper</code>有了新内容，那么<code>Subscriber</code>则会立即得到通知．</p>\n<p>上面这个案例的观察者是<code>Subscriber</code>，被观察者则是<code>Newspaper</code>．在实现代码时，观察者会将自身注册自被观察者的一个容器中．被观察者发生了任何变化时，便会通知这个容器的所有观察者．</p>\n<p>下面，我们将用Qt的信号槽实现上面的的案例．</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//newspaper.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;QObject&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewsPaper</span> :</span> <span class=\"keyword\">public</span> QObject &#123;</span><br><span class=\"line\">  Q_OBJECT</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  NewsPaper(<span class=\"keyword\">const</span> QString &amp;name) : m_name(name) &#123;&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">send</span><span class=\"params\">()</span> </span>&#123; <span class=\"function\">emit <span class=\"title\">newPaper</span><span class=\"params\">(m_name)</span></span>; &#125;</span><br><span class=\"line\">signals:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">newPaper</span><span class=\"params\">(<span class=\"keyword\">const</span> QString &amp;name)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">  QString m_name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//reader.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;QObject&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Reader</span> :</span> <span class=\"keyword\">public</span> QObject &#123;</span><br><span class=\"line\">    Q_OBJECT</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">receiverNewsPaper</span><span class=\"params\">(<span class=\"keyword\">const</span> QString &amp;name)</span></span>&#123;</span><br><span class=\"line\">        qDebug()&lt;&lt;<span class=\"string\">\"Newpaper:\"</span>&lt;&lt;name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//main.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;QCoreApplication&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;newspaper.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;reader.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">QCoreApplication <span class=\"title\">a</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\">  <span class=\"function\">NewsPaper <span class=\"title\">paper</span><span class=\"params\">(<span class=\"string\">\"xx与xxx结婚了!\"</span>)</span></span>;</span><br><span class=\"line\">  Reader reader;</span><br><span class=\"line\"></span><br><span class=\"line\">  QObject::connect(&amp;paper, &amp;NewsPaper::newPaper, &amp;reader,</span><br><span class=\"line\">                   &amp;Reader::receiverNewsPaper);</span><br><span class=\"line\"></span><br><span class=\"line\">  paper.send();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> a.exec();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Newpaper:xx与xxx结婚了!</span><br></pre></td></tr></table></figure>\n<p>我们看到<code>Reader</code>类和<code>Newspaper</code>类都继承了<code>QObject</code> 类，在Qt中，只有继承了<code>QObject</code>类的类才具有信号槽的能力．凡是<code>Object</code>类还是它的派生类或者是间接派生类，都应该在类体的第一行代码写上<code>Q_OBJECT</code>．这是一个宏，它为我们的类提供了信号槽额机制，国际化机制，以及Qt提供的反射能力（非C++ RTTI)．你可能会认为假如你的类不需要使用信号槽则不添加这个宏，那是错误的，因为它不仅仅提供了信号槽的能力，还有很多操作都依赖于这个宏．目前，只需要知道我们要将这个宏加在头文件内．</p>\n<p>再看<code>Newspaper</code>类，它的代码很简单，只不过是加了一个signals关键字，signals所列出的块就是该类的信号．信号就是一个个的函数名，返回值为void，参数是该类需要让外界知道的数据.</p>\n<p><code>Newspaper</code>类的<code>send()</code>函数比较简单，只有一条语句<code>emit newPaper(m_name);</code>. emit是Qt对C++的一个扩展关键字，但实际上也是一个宏．emit的翻译是发出，也就是发出<code>newPaper()</code>信号．如果有接受者关注这个信号，　那么还需要知道是哪条新闻发出的信号，所以我们将实际的新闻名字<code>m_name</code>以参数传递的方式给这个信号，当接收者收到这个信号时，就可通过槽函数获得实际的值，这样也就完成了数据从发出者到接受者的一个转移．</p>\n<p><code>Reader</code>类是接受信号的，所以我们也需要继承<code>QObject</code>，并且添加<code>Q_OBJECT</code>宏．其他的代码则是默认构造函数和一个普通的成员函数．在Qt5中，任何成员函数,static函数,全局函数和Lamabda表达式都可以作为槽函数．槽函数其实也就是普通的成员函数，因此作为成员函数，也会收到public,private等访问控制符的影响．信号也会收到影响，因为如果信号是private的，那么这个信号就不能在类的外面使用，也就没有了意义．</p>\n<p>main函数中，我们首先创建了<code>Newspaper</code>和<code>Reader</code>两个独享，然后使用<code>QObject::connect()</code>函数．这个然后我们调用<code>Newspaper</code>的<code>send()</code>函数．这个函数只有一个语句：发出信号．由于我们将<code>Newspaper</code>的信号和<code>Reader</code>的槽函数进行了连接，当这个信号发出时，那么将会自动调用<code>Reader</code>的槽函数．</p>\n<p>总结自定义信号槽需要注意的事项:</p>\n<ul>\n<li>发送者和接收者都需要的是<code>QObject</code>的子类，若草函数是全局函数，Lambda表达式等其他无需接受者则除外．</li>\n<li>使用signals标记信号函数，信号是一个函数声明，返回void，不需要实现函数代码；</li>\n<li>使用emit发送信号</li>\n<li>使用QObject::connect()函数连接信号和槽.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>上一篇信号槽的学习，我们分析了QObject::connect()函数，使用connect()可以让我们连接Qt提供的信号，但Qt的信号槽机制还允许我们自定义的信号和槽，使得我们的程序更加的健壮，具有解耦性．</p>\n<p>我们通过一个新闻和订阅者的例子讲解典型的观察者模式．</p>\n<p>有一个报纸类<code>Newspaper</code>，有一个订阅者类<code>Subscriber</code>，<code>Subscriber</code>可订阅<code>Newspaper</code>，订阅后若<code>Newspaper</code>有了新内容，那么<code>Subscriber</code>则会立即得到通知．</p>\n<p>上面这个案例的观察者是<code>Subscriber</code>，被观察者则是<code>Newspaper</code>．在实现代码时，观察者会将自身注册自被观察者的一个容器中．被观察者发生了任何变化时，便会通知这个容器的所有观察者．</p>\n<p>下面，我们将用Qt的信号槽实现上面的的案例．</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//newspaper.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;QObject&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewsPaper</span> :</span> <span class=\"keyword\">public</span> QObject &#123;</span><br><span class=\"line\">  Q_OBJECT</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  NewsPaper(<span class=\"keyword\">const</span> QString &amp;name) : m_name(name) &#123;&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">send</span><span class=\"params\">()</span> </span>&#123; <span class=\"function\">emit <span class=\"title\">newPaper</span><span class=\"params\">(m_name)</span></span>; &#125;</span><br><span class=\"line\">signals:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">newPaper</span><span class=\"params\">(<span class=\"keyword\">const</span> QString &amp;name)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">  QString m_name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//reader.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;QObject&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Reader</span> :</span> <span class=\"keyword\">public</span> QObject &#123;</span><br><span class=\"line\">    Q_OBJECT</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">receiverNewsPaper</span><span class=\"params\">(<span class=\"keyword\">const</span> QString &amp;name)</span></span>&#123;</span><br><span class=\"line\">        qDebug()&lt;&lt;<span class=\"string\">\"Newpaper:\"</span>&lt;&lt;name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//main.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;QCoreApplication&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;newspaper.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;reader.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">QCoreApplication <span class=\"title\">a</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\">  <span class=\"function\">NewsPaper <span class=\"title\">paper</span><span class=\"params\">(<span class=\"string\">\"xx与xxx结婚了!\"</span>)</span></span>;</span><br><span class=\"line\">  Reader reader;</span><br><span class=\"line\"></span><br><span class=\"line\">  QObject::connect(&amp;paper, &amp;NewsPaper::newPaper, &amp;reader,</span><br><span class=\"line\">                   &amp;Reader::receiverNewsPaper);</span><br><span class=\"line\"></span><br><span class=\"line\">  paper.send();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> a.exec();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Newpaper:xx与xxx结婚了!</span><br></pre></td></tr></table></figure>\n<p>我们看到<code>Reader</code>类和<code>Newspaper</code>类都继承了<code>QObject</code> 类，在Qt中，只有继承了<code>QObject</code>类的类才具有信号槽的能力．凡是<code>Object</code>类还是它的派生类或者是间接派生类，都应该在类体的第一行代码写上<code>Q_OBJECT</code>．这是一个宏，它为我们的类提供了信号槽额机制，国际化机制，以及Qt提供的反射能力（非C++ RTTI)．你可能会认为假如你的类不需要使用信号槽则不添加这个宏，那是错误的，因为它不仅仅提供了信号槽的能力，还有很多操作都依赖于这个宏．目前，只需要知道我们要将这个宏加在头文件内．</p>\n<p>再看<code>Newspaper</code>类，它的代码很简单，只不过是加了一个signals关键字，signals所列出的块就是该类的信号．信号就是一个个的函数名，返回值为void，参数是该类需要让外界知道的数据.</p>\n<p><code>Newspaper</code>类的<code>send()</code>函数比较简单，只有一条语句<code>emit newPaper(m_name);</code>. emit是Qt对C++的一个扩展关键字，但实际上也是一个宏．emit的翻译是发出，也就是发出<code>newPaper()</code>信号．如果有接受者关注这个信号，　那么还需要知道是哪条新闻发出的信号，所以我们将实际的新闻名字<code>m_name</code>以参数传递的方式给这个信号，当接收者收到这个信号时，就可通过槽函数获得实际的值，这样也就完成了数据从发出者到接受者的一个转移．</p>\n<p><code>Reader</code>类是接受信号的，所以我们也需要继承<code>QObject</code>，并且添加<code>Q_OBJECT</code>宏．其他的代码则是默认构造函数和一个普通的成员函数．在Qt5中，任何成员函数,static函数,全局函数和Lamabda表达式都可以作为槽函数．槽函数其实也就是普通的成员函数，因此作为成员函数，也会收到public,private等访问控制符的影响．信号也会收到影响，因为如果信号是private的，那么这个信号就不能在类的外面使用，也就没有了意义．</p>\n<p>main函数中，我们首先创建了<code>Newspaper</code>和<code>Reader</code>两个独享，然后使用<code>QObject::connect()</code>函数．这个然后我们调用<code>Newspaper</code>的<code>send()</code>函数．这个函数只有一个语句：发出信号．由于我们将<code>Newspaper</code>的信号和<code>Reader</code>的槽函数进行了连接，当这个信号发出时，那么将会自动调用<code>Reader</code>的槽函数．</p>\n<p>总结自定义信号槽需要注意的事项:</p>\n<ul>\n<li>发送者和接收者都需要的是<code>QObject</code>的子类，若草函数是全局函数，Lambda表达式等其他无需接受者则除外．</li>\n<li>使用signals标记信号函数，信号是一个函数声明，返回void，不需要实现函数代码；</li>\n<li>使用emit发送信号</li>\n<li>使用QObject::connect()函数连接信号和槽.</li>\n</ul>\n"},{"title":"Linux-Linux命令行简介-0","copyright":true,"date":"2019-06-15T08:35:38.000Z","_content":"\n# 1.1 Linux命令行概述\n\n## 1.1.1 Linux命令行的作用与意义\n\n  Linux命令行相比图形界面操作的优点:\n\n  - 快速\n\n  - 批量\n\n  - 自动化\n\n  - 智能化管理\n\n## 1.1.2 Linux命令行介绍\n\n  大多数互联网企业在使用Linux不会安装图形界面，而是才用文本模式（命令行）的方式进行使用，如图:\n\n  ![命令行图](Linux-Linux命令行简介-0/1.1.2-0)\n\n## 1.1.3 Linux命令行的开启及退出\n\n  主机开机时，Linux将会进行初始化等各种操作，最终将进入命令行，想使用必须先登录。\n\n  ~~~Shell\n  user login:_\n  password:_\n  ~~~\n\n  等待你输入用户名密码，密码输入时是不会显示的。\n\n  使用`exit`,`logout`或者`Ctrl+d`快捷键可退出登录，若退出则需要重新登录才会被允许使用Shell命令。\n\n## 1.1.4 Linux命令行提示符介绍\n  \n  Linux命令提示符分为两种，分别是:\n\n  - `$`普通用户\n  - `#`超级管理员(root)\n\n  例子:\n\n  ~~~Shell\n  [evanmeek@EvanLinux ~]$:_\n  [root@EvanLinux ~]#:_\n  ~~~\n\n  其中@前面的为当前登录的`用户名(username)`,@后面的为`主机名(hostname)`，主机名后面的`~`为路径，代表了`home目录`，而`$`或`#`分别代表了用户的是超级管理员还是普通用户。\n\n  > 超级管理员从此以后本系列都以`root`代表。\n\n  root与普通用户的区别：\n\n  - root\n\n    > 拥有管理整个系统的权限。\n  \n  - 普通用户\n\n    > 权限较少，通常只有查看系统文件的权限，以及管理自身`home`目录下所有文件的权限。\n\n  查看当前登录的用户名:使用`whoami`查询\n  查看主机名:使用`hostname`查询\n\n  额外技巧: Linux命令提示符由`PS1`环境变量控制，通过修改`PS1`环境变量，可以让提示符发生变化，例子如下:\n\n  ~~~Shell\n  [evanmeek@EvanLinux ~]$ set|grep PS1\n  PS1='[\\u@\\h \\W]\\$'\n  ~~~\n  \n  `PS1`有特殊的变量可供选择，我们可以设置全局配置文件`/etc/bashrc`或/etc/profile`进行按需配置。\n\n## 1.1.5 Linux命令行常用快捷键\n\n  企业工作中，管理Linux通常使用远程连接工具连接到Linux，常见的工具有: `SecureCRT`和`XShell`,以下快捷键可在此两款软件中使用。\n\n  记住常用的快捷键有利于提高效率，常用快捷键由`!`标注\n\n  |快捷键|功能说明(`!`为常用)|\n  |:-----:|:---------------:|\n  |最有用的快捷键||\n  |tab|命令或路径的补全键，Linux最有用的快捷键`!`|\n  |移动光标快捷键||\n  |Ctrl+a|移动光标至行首`!`|\n  |Ctrl+e|移动光标至行尾`!`|\n  |Ctrl+f|光标向右移动一个字符(等价与方向键右键)|\n  |Ctrl+b|光标向左移动一个字符(同上)|\n  |剪切、粘贴、清楚快捷键||\n  |Ctrl+Insert|复制命令行内容`!`|\n  |Shift+Insert|粘贴命令行内容`!`|\n  |Ctrl+k|剪切(删除)光标处至行尾的字符`!`|\n  |Ctrl+u|剪切(删除)光标处至行首的字符`!`|\n  |Ctrl+w|剪切(删除)光标前一个单词`!`|\n  |Ctrl+y|粘贴上面三个剪切(删除)的字符|\n  |Ctrl+c|终止终端正在执行的任务或删除整行字符`!`|\n  |Ctrl+h|删除光标前一个字符(等同于Backspace)`!`|\n  |重复执行命令快捷键||\n  |Ctrl+d|退出当前Shell命令行`!`|\n  |Ctrl+r|搜索命令历史记录`!`|\n  |Ctrl+g|退出搜索命令历史记录|\n  |控制快捷键|\n  |Ctrl+l|清屏(等同于clear命令)`!`|\n  |Ctrl+s|锁定终端，使之无法输入|\n  |Ctrl+q|解锁锁定终端|\n  |Ctrl+z|暂停执行终端运行中的任务`!`|\n  |\\!开头的快捷键命令|\n  |!!|执行上一条命令|\n  |!pw|执行最近一次以pw开头的命令`!`|\n  |!pw:p|打印输出最近以pwd开头的命令，不执行|\n  |!num|执行历史命令列表的第num(数字)条命令`!`|\n  |!$|上一条命令的最后一个参数，等同于`Esc+.`|\n  |ESC相关|\n  |Esc+.|获取上一条命令的最后部分`!`|\n  |Esc+b|移动到当前单词的开头|\n  |Esc+f|移动到当前单词的结尾|\n\n# 1.2 在Linux命令行下查看命令帮助\n\n  man命令是Linux很重要的一个命令，它可以帮助我们查看命令的使用方法和一些信息。\n\n  由于篇幅较大，请点击链接单独查看本章附录man命令。\n\n  [点击访问](/2019/06/15/Linux-Linux命令行简介-man命令/)\n\n# 1.3 Linux关机、重启、注销命令\n\n  关机或重启命令:`shutdown`\n\n  |参数选项|说明|\n  |:------:|:--:|\n  |-r|重启机器|\n  |-P|关闭机器电源(默认)|\n  |-H|暂停机器，CPU停止工作但不断电|\n  |-h|等效-P，除非使用了-H|\n  |-k|只发送关机提示,不做任何操作|\n  |-c|取消关机|\n\n  例子:\n\n  ~~~\n  # 立即关机\n  [evanmeek@EvanLinux ~]$ shutdown -h now\n  # 立即重启 \n  [evanmeek@EvanLinux ~]$ shutdonw -r now\n  # 5分钟后关机\n  [evanmeek@EvanLinux ~]$ shutdown -h +5\n  # 1分钟后重启\n  [evanmeek@EvanLinux ~]$ shutdown -r +1\n  ~~~\n\n  重启或关机命令:`halt`/`poweroff`/`reboot`\n\n  `halt`和`poweroff`都是`reboot`的链接而已。\n\n  `reboot`和`shutdown`都是`systemctl`的链接\n\n__本章完，如果觉得我的笔记整理的好，可以给我个打赏，你的一块钱是对我最大的鼓励!__\n\n\n","source":"_posts/Linux-Linux命令行简介-0.md","raw":"---\ntitle: Linux-Linux命令行简介-0\ncopyright: true\ndate: 2019-06-15 16:35:38\ncategories: Linux系列\ntags:\n - Linux\n---\n\n# 1.1 Linux命令行概述\n\n## 1.1.1 Linux命令行的作用与意义\n\n  Linux命令行相比图形界面操作的优点:\n\n  - 快速\n\n  - 批量\n\n  - 自动化\n\n  - 智能化管理\n\n## 1.1.2 Linux命令行介绍\n\n  大多数互联网企业在使用Linux不会安装图形界面，而是才用文本模式（命令行）的方式进行使用，如图:\n\n  ![命令行图](Linux-Linux命令行简介-0/1.1.2-0)\n\n## 1.1.3 Linux命令行的开启及退出\n\n  主机开机时，Linux将会进行初始化等各种操作，最终将进入命令行，想使用必须先登录。\n\n  ~~~Shell\n  user login:_\n  password:_\n  ~~~\n\n  等待你输入用户名密码，密码输入时是不会显示的。\n\n  使用`exit`,`logout`或者`Ctrl+d`快捷键可退出登录，若退出则需要重新登录才会被允许使用Shell命令。\n\n## 1.1.4 Linux命令行提示符介绍\n  \n  Linux命令提示符分为两种，分别是:\n\n  - `$`普通用户\n  - `#`超级管理员(root)\n\n  例子:\n\n  ~~~Shell\n  [evanmeek@EvanLinux ~]$:_\n  [root@EvanLinux ~]#:_\n  ~~~\n\n  其中@前面的为当前登录的`用户名(username)`,@后面的为`主机名(hostname)`，主机名后面的`~`为路径，代表了`home目录`，而`$`或`#`分别代表了用户的是超级管理员还是普通用户。\n\n  > 超级管理员从此以后本系列都以`root`代表。\n\n  root与普通用户的区别：\n\n  - root\n\n    > 拥有管理整个系统的权限。\n  \n  - 普通用户\n\n    > 权限较少，通常只有查看系统文件的权限，以及管理自身`home`目录下所有文件的权限。\n\n  查看当前登录的用户名:使用`whoami`查询\n  查看主机名:使用`hostname`查询\n\n  额外技巧: Linux命令提示符由`PS1`环境变量控制，通过修改`PS1`环境变量，可以让提示符发生变化，例子如下:\n\n  ~~~Shell\n  [evanmeek@EvanLinux ~]$ set|grep PS1\n  PS1='[\\u@\\h \\W]\\$'\n  ~~~\n  \n  `PS1`有特殊的变量可供选择，我们可以设置全局配置文件`/etc/bashrc`或/etc/profile`进行按需配置。\n\n## 1.1.5 Linux命令行常用快捷键\n\n  企业工作中，管理Linux通常使用远程连接工具连接到Linux，常见的工具有: `SecureCRT`和`XShell`,以下快捷键可在此两款软件中使用。\n\n  记住常用的快捷键有利于提高效率，常用快捷键由`!`标注\n\n  |快捷键|功能说明(`!`为常用)|\n  |:-----:|:---------------:|\n  |最有用的快捷键||\n  |tab|命令或路径的补全键，Linux最有用的快捷键`!`|\n  |移动光标快捷键||\n  |Ctrl+a|移动光标至行首`!`|\n  |Ctrl+e|移动光标至行尾`!`|\n  |Ctrl+f|光标向右移动一个字符(等价与方向键右键)|\n  |Ctrl+b|光标向左移动一个字符(同上)|\n  |剪切、粘贴、清楚快捷键||\n  |Ctrl+Insert|复制命令行内容`!`|\n  |Shift+Insert|粘贴命令行内容`!`|\n  |Ctrl+k|剪切(删除)光标处至行尾的字符`!`|\n  |Ctrl+u|剪切(删除)光标处至行首的字符`!`|\n  |Ctrl+w|剪切(删除)光标前一个单词`!`|\n  |Ctrl+y|粘贴上面三个剪切(删除)的字符|\n  |Ctrl+c|终止终端正在执行的任务或删除整行字符`!`|\n  |Ctrl+h|删除光标前一个字符(等同于Backspace)`!`|\n  |重复执行命令快捷键||\n  |Ctrl+d|退出当前Shell命令行`!`|\n  |Ctrl+r|搜索命令历史记录`!`|\n  |Ctrl+g|退出搜索命令历史记录|\n  |控制快捷键|\n  |Ctrl+l|清屏(等同于clear命令)`!`|\n  |Ctrl+s|锁定终端，使之无法输入|\n  |Ctrl+q|解锁锁定终端|\n  |Ctrl+z|暂停执行终端运行中的任务`!`|\n  |\\!开头的快捷键命令|\n  |!!|执行上一条命令|\n  |!pw|执行最近一次以pw开头的命令`!`|\n  |!pw:p|打印输出最近以pwd开头的命令，不执行|\n  |!num|执行历史命令列表的第num(数字)条命令`!`|\n  |!$|上一条命令的最后一个参数，等同于`Esc+.`|\n  |ESC相关|\n  |Esc+.|获取上一条命令的最后部分`!`|\n  |Esc+b|移动到当前单词的开头|\n  |Esc+f|移动到当前单词的结尾|\n\n# 1.2 在Linux命令行下查看命令帮助\n\n  man命令是Linux很重要的一个命令，它可以帮助我们查看命令的使用方法和一些信息。\n\n  由于篇幅较大，请点击链接单独查看本章附录man命令。\n\n  [点击访问](/2019/06/15/Linux-Linux命令行简介-man命令/)\n\n# 1.3 Linux关机、重启、注销命令\n\n  关机或重启命令:`shutdown`\n\n  |参数选项|说明|\n  |:------:|:--:|\n  |-r|重启机器|\n  |-P|关闭机器电源(默认)|\n  |-H|暂停机器，CPU停止工作但不断电|\n  |-h|等效-P，除非使用了-H|\n  |-k|只发送关机提示,不做任何操作|\n  |-c|取消关机|\n\n  例子:\n\n  ~~~\n  # 立即关机\n  [evanmeek@EvanLinux ~]$ shutdown -h now\n  # 立即重启 \n  [evanmeek@EvanLinux ~]$ shutdonw -r now\n  # 5分钟后关机\n  [evanmeek@EvanLinux ~]$ shutdown -h +5\n  # 1分钟后重启\n  [evanmeek@EvanLinux ~]$ shutdown -r +1\n  ~~~\n\n  重启或关机命令:`halt`/`poweroff`/`reboot`\n\n  `halt`和`poweroff`都是`reboot`的链接而已。\n\n  `reboot`和`shutdown`都是`systemctl`的链接\n\n__本章完，如果觉得我的笔记整理的好，可以给我个打赏，你的一块钱是对我最大的鼓励!__\n\n\n","slug":"Linux-Linux命令行简介-0","published":1,"updated":"2019-06-16T17:09:00.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uz9u000youms0c3zuclj","content":"<h1 id=\"1-1-Linux命令行概述\"><a href=\"#1-1-Linux命令行概述\" class=\"headerlink\" title=\"1.1 Linux命令行概述\"></a>1.1 Linux命令行概述</h1><h2 id=\"1-1-1-Linux命令行的作用与意义\"><a href=\"#1-1-1-Linux命令行的作用与意义\" class=\"headerlink\" title=\"1.1.1 Linux命令行的作用与意义\"></a>1.1.1 Linux命令行的作用与意义</h2><p>  Linux命令行相比图形界面操作的优点:</p>\n<ul>\n<li><p>快速</p>\n</li>\n<li><p>批量</p>\n</li>\n<li><p>自动化</p>\n</li>\n<li><p>智能化管理</p>\n</li>\n</ul>\n<h2 id=\"1-1-2-Linux命令行介绍\"><a href=\"#1-1-2-Linux命令行介绍\" class=\"headerlink\" title=\"1.1.2 Linux命令行介绍\"></a>1.1.2 Linux命令行介绍</h2><p>  大多数互联网企业在使用Linux不会安装图形界面，而是才用文本模式（命令行）的方式进行使用，如图:</p>\n<p>  <img src=\"/2019/06/15/Linux-Linux命令行简介-0/1.1.2-0\" alt=\"命令行图\"></p>\n<h2 id=\"1-1-3-Linux命令行的开启及退出\"><a href=\"#1-1-3-Linux命令行的开启及退出\" class=\"headerlink\" title=\"1.1.3 Linux命令行的开启及退出\"></a>1.1.3 Linux命令行的开启及退出</h2><p>  主机开机时，Linux将会进行初始化等各种操作，最终将进入命令行，想使用必须先登录。</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user login:_</span><br><span class=\"line\">password:_</span><br></pre></td></tr></table></figure>\n<p>  等待你输入用户名密码，密码输入时是不会显示的。</p>\n<p>  使用<code>exit</code>,<code>logout</code>或者<code>Ctrl+d</code>快捷键可退出登录，若退出则需要重新登录才会被允许使用Shell命令。</p>\n<h2 id=\"1-1-4-Linux命令行提示符介绍\"><a href=\"#1-1-4-Linux命令行提示符介绍\" class=\"headerlink\" title=\"1.1.4 Linux命令行提示符介绍\"></a>1.1.4 Linux命令行提示符介绍</h2><p>  Linux命令提示符分为两种，分别是:</p>\n<ul>\n<li><code>$</code>普通用户</li>\n<li><p><code>#</code>超级管理员(root)</p>\n<p>例子:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[evanmeek@EvanLinux ~]$:_</span><br><span class=\"line\">[root@EvanLinux ~]#:_</span><br></pre></td></tr></table></figure>\n<p>其中@前面的为当前登录的<code>用户名(username)</code>,@后面的为<code>主机名(hostname)</code>，主机名后面的<code>~</code>为路径，代表了<code>home目录</code>，而<code>$</code>或<code>#</code>分别代表了用户的是超级管理员还是普通用户。</p>\n<blockquote>\n<p>超级管理员从此以后本系列都以<code>root</code>代表。</p>\n</blockquote>\n<p>root与普通用户的区别：</p>\n</li>\n<li><p>root</p>\n<blockquote>\n<p>拥有管理整个系统的权限。</p>\n</blockquote>\n</li>\n<li><p>普通用户</p>\n<blockquote>\n<p>权限较少，通常只有查看系统文件的权限，以及管理自身<code>home</code>目录下所有文件的权限。</p>\n</blockquote>\n<p>查看当前登录的用户名:使用<code>whoami</code>查询<br>查看主机名:使用<code>hostname</code>查询</p>\n<p>额外技巧: Linux命令提示符由<code>PS1</code>环境变量控制，通过修改<code>PS1</code>环境变量，可以让提示符发生变化，例子如下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[evanmeek@EvanLinux ~]$ set|grep PS1</span><br><span class=\"line\">PS1='[\\u@\\h \\W]\\$'</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>  <code>PS1</code>有特殊的变量可供选择，我们可以设置全局配置文件<code>/etc/bashrc</code>或/etc/profile`进行按需配置。</p>\n<h2 id=\"1-1-5-Linux命令行常用快捷键\"><a href=\"#1-1-5-Linux命令行常用快捷键\" class=\"headerlink\" title=\"1.1.5 Linux命令行常用快捷键\"></a>1.1.5 Linux命令行常用快捷键</h2><p>  企业工作中，管理Linux通常使用远程连接工具连接到Linux，常见的工具有: <code>SecureCRT</code>和<code>XShell</code>,以下快捷键可在此两款软件中使用。</p>\n<p>  记住常用的快捷键有利于提高效率，常用快捷键由<code>!</code>标注</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">快捷键</th>\n<th style=\"text-align:center\">功能说明(<code>!</code>为常用)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">最有用的快捷键</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tab</td>\n<td style=\"text-align:center\">命令或路径的补全键，Linux最有用的快捷键<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">移动光标快捷键</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+a</td>\n<td style=\"text-align:center\">移动光标至行首<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+e</td>\n<td style=\"text-align:center\">移动光标至行尾<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+f</td>\n<td style=\"text-align:center\">光标向右移动一个字符(等价与方向键右键)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+b</td>\n<td style=\"text-align:center\">光标向左移动一个字符(同上)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">剪切、粘贴、清楚快捷键</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Insert</td>\n<td style=\"text-align:center\">复制命令行内容<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+Insert</td>\n<td style=\"text-align:center\">粘贴命令行内容<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+k</td>\n<td style=\"text-align:center\">剪切(删除)光标处至行尾的字符<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+u</td>\n<td style=\"text-align:center\">剪切(删除)光标处至行首的字符<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+w</td>\n<td style=\"text-align:center\">剪切(删除)光标前一个单词<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+y</td>\n<td style=\"text-align:center\">粘贴上面三个剪切(删除)的字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+c</td>\n<td style=\"text-align:center\">终止终端正在执行的任务或删除整行字符<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+h</td>\n<td style=\"text-align:center\">删除光标前一个字符(等同于Backspace)<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">重复执行命令快捷键</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+d</td>\n<td style=\"text-align:center\">退出当前Shell命令行<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+r</td>\n<td style=\"text-align:center\">搜索命令历史记录<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+g</td>\n<td style=\"text-align:center\">退出搜索命令历史记录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">控制快捷键</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+l</td>\n<td style=\"text-align:center\">清屏(等同于clear命令)<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+s</td>\n<td style=\"text-align:center\">锁定终端，使之无法输入</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+q</td>\n<td style=\"text-align:center\">解锁锁定终端</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+z</td>\n<td style=\"text-align:center\">暂停执行终端运行中的任务<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!开头的快捷键命令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!!</td>\n<td style=\"text-align:center\">执行上一条命令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!pw</td>\n<td style=\"text-align:center\">执行最近一次以pw开头的命令<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!pw:p</td>\n<td style=\"text-align:center\">打印输出最近以pwd开头的命令，不执行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!num</td>\n<td style=\"text-align:center\">执行历史命令列表的第num(数字)条命令<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!$</td>\n<td style=\"text-align:center\">上一条命令的最后一个参数，等同于<code>Esc+.</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ESC相关</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Esc+.</td>\n<td style=\"text-align:center\">获取上一条命令的最后部分<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Esc+b</td>\n<td style=\"text-align:center\">移动到当前单词的开头</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Esc+f</td>\n<td style=\"text-align:center\">移动到当前单词的结尾</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"1-2-在Linux命令行下查看命令帮助\"><a href=\"#1-2-在Linux命令行下查看命令帮助\" class=\"headerlink\" title=\"1.2 在Linux命令行下查看命令帮助\"></a>1.2 在Linux命令行下查看命令帮助</h1><p>  man命令是Linux很重要的一个命令，它可以帮助我们查看命令的使用方法和一些信息。</p>\n<p>  由于篇幅较大，请点击链接单独查看本章附录man命令。</p>\n<p>  <a href=\"/2019/06/15/Linux-Linux命令行简介-man命令/\">点击访问</a></p>\n<h1 id=\"1-3-Linux关机、重启、注销命令\"><a href=\"#1-3-Linux关机、重启、注销命令\" class=\"headerlink\" title=\"1.3 Linux关机、重启、注销命令\"></a>1.3 Linux关机、重启、注销命令</h1><p>  关机或重启命令:<code>shutdown</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数选项</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-r</td>\n<td style=\"text-align:center\">重启机器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-P</td>\n<td style=\"text-align:center\">关闭机器电源(默认)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-H</td>\n<td style=\"text-align:center\">暂停机器，CPU停止工作但不断电</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-h</td>\n<td style=\"text-align:center\">等效-P，除非使用了-H</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-k</td>\n<td style=\"text-align:center\">只发送关机提示,不做任何操作</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-c</td>\n<td style=\"text-align:center\">取消关机</td>\n</tr>\n</tbody>\n</table>\n<p>  例子:</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 立即关机</span><br><span class=\"line\">[evanmeek@EvanLinux ~]$ shutdown -h now</span><br><span class=\"line\"># 立即重启 </span><br><span class=\"line\">[evanmeek@EvanLinux ~]$ shutdonw -r now</span><br><span class=\"line\"># 5分钟后关机</span><br><span class=\"line\">[evanmeek@EvanLinux ~]$ shutdown -h +5</span><br><span class=\"line\"># 1分钟后重启</span><br><span class=\"line\">[evanmeek@EvanLinux ~]$ shutdown -r +1</span><br></pre></td></tr></table></figure>\n<p>  重启或关机命令:<code>halt</code>/<code>poweroff</code>/<code>reboot</code></p>\n<p>  <code>halt</code>和<code>poweroff</code>都是<code>reboot</code>的链接而已。</p>\n<p>  <code>reboot</code>和<code>shutdown</code>都是<code>systemctl</code>的链接</p>\n<p><strong>本章完，如果觉得我的笔记整理的好，可以给我个打赏，你的一块钱是对我最大的鼓励!</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-1-Linux命令行概述\"><a href=\"#1-1-Linux命令行概述\" class=\"headerlink\" title=\"1.1 Linux命令行概述\"></a>1.1 Linux命令行概述</h1><h2 id=\"1-1-1-Linux命令行的作用与意义\"><a href=\"#1-1-1-Linux命令行的作用与意义\" class=\"headerlink\" title=\"1.1.1 Linux命令行的作用与意义\"></a>1.1.1 Linux命令行的作用与意义</h2><p>  Linux命令行相比图形界面操作的优点:</p>\n<ul>\n<li><p>快速</p>\n</li>\n<li><p>批量</p>\n</li>\n<li><p>自动化</p>\n</li>\n<li><p>智能化管理</p>\n</li>\n</ul>\n<h2 id=\"1-1-2-Linux命令行介绍\"><a href=\"#1-1-2-Linux命令行介绍\" class=\"headerlink\" title=\"1.1.2 Linux命令行介绍\"></a>1.1.2 Linux命令行介绍</h2><p>  大多数互联网企业在使用Linux不会安装图形界面，而是才用文本模式（命令行）的方式进行使用，如图:</p>\n<p>  <img src=\"/2019/06/15/Linux-Linux命令行简介-0/1.1.2-0\" alt=\"命令行图\"></p>\n<h2 id=\"1-1-3-Linux命令行的开启及退出\"><a href=\"#1-1-3-Linux命令行的开启及退出\" class=\"headerlink\" title=\"1.1.3 Linux命令行的开启及退出\"></a>1.1.3 Linux命令行的开启及退出</h2><p>  主机开机时，Linux将会进行初始化等各种操作，最终将进入命令行，想使用必须先登录。</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user login:_</span><br><span class=\"line\">password:_</span><br></pre></td></tr></table></figure>\n<p>  等待你输入用户名密码，密码输入时是不会显示的。</p>\n<p>  使用<code>exit</code>,<code>logout</code>或者<code>Ctrl+d</code>快捷键可退出登录，若退出则需要重新登录才会被允许使用Shell命令。</p>\n<h2 id=\"1-1-4-Linux命令行提示符介绍\"><a href=\"#1-1-4-Linux命令行提示符介绍\" class=\"headerlink\" title=\"1.1.4 Linux命令行提示符介绍\"></a>1.1.4 Linux命令行提示符介绍</h2><p>  Linux命令提示符分为两种，分别是:</p>\n<ul>\n<li><code>$</code>普通用户</li>\n<li><p><code>#</code>超级管理员(root)</p>\n<p>例子:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[evanmeek@EvanLinux ~]$:_</span><br><span class=\"line\">[root@EvanLinux ~]#:_</span><br></pre></td></tr></table></figure>\n<p>其中@前面的为当前登录的<code>用户名(username)</code>,@后面的为<code>主机名(hostname)</code>，主机名后面的<code>~</code>为路径，代表了<code>home目录</code>，而<code>$</code>或<code>#</code>分别代表了用户的是超级管理员还是普通用户。</p>\n<blockquote>\n<p>超级管理员从此以后本系列都以<code>root</code>代表。</p>\n</blockquote>\n<p>root与普通用户的区别：</p>\n</li>\n<li><p>root</p>\n<blockquote>\n<p>拥有管理整个系统的权限。</p>\n</blockquote>\n</li>\n<li><p>普通用户</p>\n<blockquote>\n<p>权限较少，通常只有查看系统文件的权限，以及管理自身<code>home</code>目录下所有文件的权限。</p>\n</blockquote>\n<p>查看当前登录的用户名:使用<code>whoami</code>查询<br>查看主机名:使用<code>hostname</code>查询</p>\n<p>额外技巧: Linux命令提示符由<code>PS1</code>环境变量控制，通过修改<code>PS1</code>环境变量，可以让提示符发生变化，例子如下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[evanmeek@EvanLinux ~]$ set|grep PS1</span><br><span class=\"line\">PS1='[\\u@\\h \\W]\\$'</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>  <code>PS1</code>有特殊的变量可供选择，我们可以设置全局配置文件<code>/etc/bashrc</code>或/etc/profile`进行按需配置。</p>\n<h2 id=\"1-1-5-Linux命令行常用快捷键\"><a href=\"#1-1-5-Linux命令行常用快捷键\" class=\"headerlink\" title=\"1.1.5 Linux命令行常用快捷键\"></a>1.1.5 Linux命令行常用快捷键</h2><p>  企业工作中，管理Linux通常使用远程连接工具连接到Linux，常见的工具有: <code>SecureCRT</code>和<code>XShell</code>,以下快捷键可在此两款软件中使用。</p>\n<p>  记住常用的快捷键有利于提高效率，常用快捷键由<code>!</code>标注</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">快捷键</th>\n<th style=\"text-align:center\">功能说明(<code>!</code>为常用)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">最有用的快捷键</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tab</td>\n<td style=\"text-align:center\">命令或路径的补全键，Linux最有用的快捷键<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">移动光标快捷键</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+a</td>\n<td style=\"text-align:center\">移动光标至行首<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+e</td>\n<td style=\"text-align:center\">移动光标至行尾<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+f</td>\n<td style=\"text-align:center\">光标向右移动一个字符(等价与方向键右键)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+b</td>\n<td style=\"text-align:center\">光标向左移动一个字符(同上)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">剪切、粘贴、清楚快捷键</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Insert</td>\n<td style=\"text-align:center\">复制命令行内容<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+Insert</td>\n<td style=\"text-align:center\">粘贴命令行内容<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+k</td>\n<td style=\"text-align:center\">剪切(删除)光标处至行尾的字符<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+u</td>\n<td style=\"text-align:center\">剪切(删除)光标处至行首的字符<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+w</td>\n<td style=\"text-align:center\">剪切(删除)光标前一个单词<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+y</td>\n<td style=\"text-align:center\">粘贴上面三个剪切(删除)的字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+c</td>\n<td style=\"text-align:center\">终止终端正在执行的任务或删除整行字符<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+h</td>\n<td style=\"text-align:center\">删除光标前一个字符(等同于Backspace)<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">重复执行命令快捷键</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+d</td>\n<td style=\"text-align:center\">退出当前Shell命令行<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+r</td>\n<td style=\"text-align:center\">搜索命令历史记录<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+g</td>\n<td style=\"text-align:center\">退出搜索命令历史记录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">控制快捷键</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+l</td>\n<td style=\"text-align:center\">清屏(等同于clear命令)<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+s</td>\n<td style=\"text-align:center\">锁定终端，使之无法输入</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+q</td>\n<td style=\"text-align:center\">解锁锁定终端</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+z</td>\n<td style=\"text-align:center\">暂停执行终端运行中的任务<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!开头的快捷键命令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!!</td>\n<td style=\"text-align:center\">执行上一条命令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!pw</td>\n<td style=\"text-align:center\">执行最近一次以pw开头的命令<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!pw:p</td>\n<td style=\"text-align:center\">打印输出最近以pwd开头的命令，不执行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!num</td>\n<td style=\"text-align:center\">执行历史命令列表的第num(数字)条命令<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!$</td>\n<td style=\"text-align:center\">上一条命令的最后一个参数，等同于<code>Esc+.</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ESC相关</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Esc+.</td>\n<td style=\"text-align:center\">获取上一条命令的最后部分<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Esc+b</td>\n<td style=\"text-align:center\">移动到当前单词的开头</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Esc+f</td>\n<td style=\"text-align:center\">移动到当前单词的结尾</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"1-2-在Linux命令行下查看命令帮助\"><a href=\"#1-2-在Linux命令行下查看命令帮助\" class=\"headerlink\" title=\"1.2 在Linux命令行下查看命令帮助\"></a>1.2 在Linux命令行下查看命令帮助</h1><p>  man命令是Linux很重要的一个命令，它可以帮助我们查看命令的使用方法和一些信息。</p>\n<p>  由于篇幅较大，请点击链接单独查看本章附录man命令。</p>\n<p>  <a href=\"/2019/06/15/Linux-Linux命令行简介-man命令/\">点击访问</a></p>\n<h1 id=\"1-3-Linux关机、重启、注销命令\"><a href=\"#1-3-Linux关机、重启、注销命令\" class=\"headerlink\" title=\"1.3 Linux关机、重启、注销命令\"></a>1.3 Linux关机、重启、注销命令</h1><p>  关机或重启命令:<code>shutdown</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数选项</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-r</td>\n<td style=\"text-align:center\">重启机器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-P</td>\n<td style=\"text-align:center\">关闭机器电源(默认)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-H</td>\n<td style=\"text-align:center\">暂停机器，CPU停止工作但不断电</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-h</td>\n<td style=\"text-align:center\">等效-P，除非使用了-H</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-k</td>\n<td style=\"text-align:center\">只发送关机提示,不做任何操作</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-c</td>\n<td style=\"text-align:center\">取消关机</td>\n</tr>\n</tbody>\n</table>\n<p>  例子:</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 立即关机</span><br><span class=\"line\">[evanmeek@EvanLinux ~]$ shutdown -h now</span><br><span class=\"line\"># 立即重启 </span><br><span class=\"line\">[evanmeek@EvanLinux ~]$ shutdonw -r now</span><br><span class=\"line\"># 5分钟后关机</span><br><span class=\"line\">[evanmeek@EvanLinux ~]$ shutdown -h +5</span><br><span class=\"line\"># 1分钟后重启</span><br><span class=\"line\">[evanmeek@EvanLinux ~]$ shutdown -r +1</span><br></pre></td></tr></table></figure>\n<p>  重启或关机命令:<code>halt</code>/<code>poweroff</code>/<code>reboot</code></p>\n<p>  <code>halt</code>和<code>poweroff</code>都是<code>reboot</code>的链接而已。</p>\n<p>  <code>reboot</code>和<code>shutdown</code>都是<code>systemctl</code>的链接</p>\n<p><strong>本章完，如果觉得我的笔记整理的好，可以给我个打赏，你的一块钱是对我最大的鼓励!</strong></p>\n"},{"title":"Linux-Linux命令行简介-man命令","copyright":true,"date":"2019-06-15T10:31:17.000Z","_content":"\n本篇文章为Linux系列的第1章 Linux命令行简介 1.2小节的外部展示。\n\n<!--more-->\n\n# 1.2.1 使用man获取命令帮助信息\n\nman命令的作用:\n  \n  - 查看命令的使用帮助\n\n  - 查看软件服务配置文件\n\n  - 查看系统调用信息\n\n  - 查看C库函数帮助信息\n\nman命令的使用:\n  \n  ~~~Shell\n  man 参数选项 命令/文件\n  ~~~\n\nman命令可选参数:\n\n  |参数|英文说明|中文说明|\n  |:--:|:------:|:------:|\n  |1|User Commands|用户命令相关|\n  |2|System Calls|系统调用相关|\n  |3|C Library Functions|C的库函数相关|\n  |4|Devices and Special Files|设备与特殊文件相关|\n  |5|File Formats and Conventions|文件格式和规则|\n  |6|Games et. Al.|游戏及其他|\n  |7|Miscellanea|宏，包及其他杂项|\n  |8|System Admin tools and Deamons|系统管理员命令和进程|\n\n  例子:\n  \n  ~~~Shell\n  # 查看cp命令的使用帮助\n  man cp\n  # 查看C语言printf函数的使用帮助\n  man 3 printf\n  ~~~\n\nman命令信息的格式\n\n  |标签|说明(`!`表示重点)|\n  |:--:|:---------------:|\n  |NAME|命令说明及介绍`!`|\n  |SYNOPSIS|命令的基本使用语法`!`|\n  |DESCRIPTION|命令的详细描述，有的命令会单独使用标签介绍COMMANDS LINE OPTION或OPTIONS`!`|\n  |OPTIONS|命令参数选项说明|\n  |COMMANDS|执行某个软件时可附加的软件的命令|\n  |FILES|程序涉及的相关文件|\n  |EXAMPLES|命令的例子`!`|\n  |SEE ALSO|命令相关信息的说明|\n  |BUGS(REPORTING BUGS)|命令对应缺陷问题的描述|\n  |COPYRIGHT|版权信息相关声明|\n  |AUTHOR|作者介绍|\n\nman命令信息操作键\n\n  |操作键|功能说明|\n  |:----:|:------:|\n  |Page Down|向下翻页|\n  |Page Up|向上翻页|\n  |Home|跳转到第一页|\n  |End|跳转到最后一页|\n  |/|向下查找某个字符|\n  |?|向上查找某个字符|\n  |n,N|当使用向上查找，那么n则为下一个，N为上一个。当使用向下查找，那么则取反|\n  |q|结束本次man帮助|\n\n# 1.2.2 使用--help参数获取命令帮助信息\n\n  例子:\n\n  ~~~Shell\n  [evanmeek@EvanLinux ~]$ ls --help\n  ~~~\n\n  输出如下:\n\n  ~~~Shell\n  用法：ls [选项]... [文件]...\n  列出给定文件（默认为当前目录）的信息。\n  如果不指定 -cftuvSUX 中任意一个或--sort 选项，则根据字母大小排序。\n\n  必选参数对长短选项同时适用。\n  -a, --all                     不隐藏任何以. 开始的项目\n  -A, --almost-all              列出除. 及.. 以外的任何项目\n      --author                  与-l 同时使用时列出每个文件的作者\n  -b, --escape                  以八进制溢出序列表示不可打印的字符\n\n  ~~~\n\n# 1.2.3 使用help命令获取命令帮助信息\n\n  例子:\n  \n  ~~~Shell\n  [evanmeek@EvanLinux ~]$ help cd\n  ~~~\n\n  输出如下:\n\n  ~~~Shell\n  cd: cd [-L|[-P [-e]] [-@]] [目录]\n    改变 shell 工作目录。\n    \n    改变当前目录至 DIR 目录。默认的 DIR 目录是 shell 变量 HOME\n    的值。\n    \n    变量 CDPATH 定义了含有 DIR 的目录的搜索路径，其中不同的目录名称由冒号 (:)分隔。\n    一个空的目录名称表示当前目录。如果要切换到的 DIR 由斜杠 (/) 开头，则 CDPATH\n    不会用上变量。\n    \n    如果路径找不到，并且 shell 选项 `cdable_vars' 被设定，则参数词被假定为一个\n    变量名。如果该变量有值，则它的值被当作 DIR 目录。\n  ~~~\n\n# 1.2.4 使用info获取帮助信息\n  \n  例子:\n\n  ~~~shell\n  [evanmeek@EvanLinux ~]$ info cd\n  ~~~\n  \n  即可打开cd的文档信息，操作跟man的使用方式相似。\n\n# 1.2.5 从互联网搜索获取命令帮助信息\n\n  [Google](https://www.google.com)\n  [Bing](https://www.bing.com)\n  [Github](https://www.github.com)\n  [StackOverFlow](https://stackoverflow.com)\n","source":"_posts/Linux-Linux命令行简介-man命令.md","raw":"---\ntitle: Linux-Linux命令行简介-man命令\ncopyright: true\ndate: 2019-06-15 18:31:17\ncategories: Linux系列\ntags:\n - Linux\n---\n\n本篇文章为Linux系列的第1章 Linux命令行简介 1.2小节的外部展示。\n\n<!--more-->\n\n# 1.2.1 使用man获取命令帮助信息\n\nman命令的作用:\n  \n  - 查看命令的使用帮助\n\n  - 查看软件服务配置文件\n\n  - 查看系统调用信息\n\n  - 查看C库函数帮助信息\n\nman命令的使用:\n  \n  ~~~Shell\n  man 参数选项 命令/文件\n  ~~~\n\nman命令可选参数:\n\n  |参数|英文说明|中文说明|\n  |:--:|:------:|:------:|\n  |1|User Commands|用户命令相关|\n  |2|System Calls|系统调用相关|\n  |3|C Library Functions|C的库函数相关|\n  |4|Devices and Special Files|设备与特殊文件相关|\n  |5|File Formats and Conventions|文件格式和规则|\n  |6|Games et. Al.|游戏及其他|\n  |7|Miscellanea|宏，包及其他杂项|\n  |8|System Admin tools and Deamons|系统管理员命令和进程|\n\n  例子:\n  \n  ~~~Shell\n  # 查看cp命令的使用帮助\n  man cp\n  # 查看C语言printf函数的使用帮助\n  man 3 printf\n  ~~~\n\nman命令信息的格式\n\n  |标签|说明(`!`表示重点)|\n  |:--:|:---------------:|\n  |NAME|命令说明及介绍`!`|\n  |SYNOPSIS|命令的基本使用语法`!`|\n  |DESCRIPTION|命令的详细描述，有的命令会单独使用标签介绍COMMANDS LINE OPTION或OPTIONS`!`|\n  |OPTIONS|命令参数选项说明|\n  |COMMANDS|执行某个软件时可附加的软件的命令|\n  |FILES|程序涉及的相关文件|\n  |EXAMPLES|命令的例子`!`|\n  |SEE ALSO|命令相关信息的说明|\n  |BUGS(REPORTING BUGS)|命令对应缺陷问题的描述|\n  |COPYRIGHT|版权信息相关声明|\n  |AUTHOR|作者介绍|\n\nman命令信息操作键\n\n  |操作键|功能说明|\n  |:----:|:------:|\n  |Page Down|向下翻页|\n  |Page Up|向上翻页|\n  |Home|跳转到第一页|\n  |End|跳转到最后一页|\n  |/|向下查找某个字符|\n  |?|向上查找某个字符|\n  |n,N|当使用向上查找，那么n则为下一个，N为上一个。当使用向下查找，那么则取反|\n  |q|结束本次man帮助|\n\n# 1.2.2 使用--help参数获取命令帮助信息\n\n  例子:\n\n  ~~~Shell\n  [evanmeek@EvanLinux ~]$ ls --help\n  ~~~\n\n  输出如下:\n\n  ~~~Shell\n  用法：ls [选项]... [文件]...\n  列出给定文件（默认为当前目录）的信息。\n  如果不指定 -cftuvSUX 中任意一个或--sort 选项，则根据字母大小排序。\n\n  必选参数对长短选项同时适用。\n  -a, --all                     不隐藏任何以. 开始的项目\n  -A, --almost-all              列出除. 及.. 以外的任何项目\n      --author                  与-l 同时使用时列出每个文件的作者\n  -b, --escape                  以八进制溢出序列表示不可打印的字符\n\n  ~~~\n\n# 1.2.3 使用help命令获取命令帮助信息\n\n  例子:\n  \n  ~~~Shell\n  [evanmeek@EvanLinux ~]$ help cd\n  ~~~\n\n  输出如下:\n\n  ~~~Shell\n  cd: cd [-L|[-P [-e]] [-@]] [目录]\n    改变 shell 工作目录。\n    \n    改变当前目录至 DIR 目录。默认的 DIR 目录是 shell 变量 HOME\n    的值。\n    \n    变量 CDPATH 定义了含有 DIR 的目录的搜索路径，其中不同的目录名称由冒号 (:)分隔。\n    一个空的目录名称表示当前目录。如果要切换到的 DIR 由斜杠 (/) 开头，则 CDPATH\n    不会用上变量。\n    \n    如果路径找不到，并且 shell 选项 `cdable_vars' 被设定，则参数词被假定为一个\n    变量名。如果该变量有值，则它的值被当作 DIR 目录。\n  ~~~\n\n# 1.2.4 使用info获取帮助信息\n  \n  例子:\n\n  ~~~shell\n  [evanmeek@EvanLinux ~]$ info cd\n  ~~~\n  \n  即可打开cd的文档信息，操作跟man的使用方式相似。\n\n# 1.2.5 从互联网搜索获取命令帮助信息\n\n  [Google](https://www.google.com)\n  [Bing](https://www.bing.com)\n  [Github](https://www.github.com)\n  [StackOverFlow](https://stackoverflow.com)\n","slug":"Linux-Linux命令行简介-man命令","published":1,"updated":"2019-06-16T17:09:00.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uz9w0012oumsk37jtz6g","content":"<p>本篇文章为Linux系列的第1章 Linux命令行简介 1.2小节的外部展示。</p>\n<a id=\"more\"></a>\n<h1 id=\"1-2-1-使用man获取命令帮助信息\"><a href=\"#1-2-1-使用man获取命令帮助信息\" class=\"headerlink\" title=\"1.2.1 使用man获取命令帮助信息\"></a>1.2.1 使用man获取命令帮助信息</h1><p>man命令的作用:</p>\n<ul>\n<li><p>查看命令的使用帮助</p>\n</li>\n<li><p>查看软件服务配置文件</p>\n</li>\n<li><p>查看系统调用信息</p>\n</li>\n<li><p>查看C库函数帮助信息</p>\n</li>\n</ul>\n<p>man命令的使用:</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man 参数选项 命令/文件</span><br></pre></td></tr></table></figure>\n<p>man命令可选参数:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">英文说明</th>\n<th style=\"text-align:center\">中文说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">User Commands</td>\n<td style=\"text-align:center\">用户命令相关</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">System Calls</td>\n<td style=\"text-align:center\">系统调用相关</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">C Library Functions</td>\n<td style=\"text-align:center\">C的库函数相关</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">Devices and Special Files</td>\n<td style=\"text-align:center\">设备与特殊文件相关</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">File Formats and Conventions</td>\n<td style=\"text-align:center\">文件格式和规则</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">Games et. Al.</td>\n<td style=\"text-align:center\">游戏及其他</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">Miscellanea</td>\n<td style=\"text-align:center\">宏，包及其他杂项</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">System Admin tools and Deamons</td>\n<td style=\"text-align:center\">系统管理员命令和进程</td>\n</tr>\n</tbody>\n</table>\n<p>  例子:</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 查看cp命令的使用帮助</span><br><span class=\"line\">man cp</span><br><span class=\"line\"><span class=\"meta\">#</span> 查看C语言printf函数的使用帮助</span><br><span class=\"line\">man 3 printf</span><br></pre></td></tr></table></figure>\n<p>man命令信息的格式</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">标签</th>\n<th style=\"text-align:center\">说明(<code>!</code>表示重点)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">NAME</td>\n<td style=\"text-align:center\">命令说明及介绍<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SYNOPSIS</td>\n<td style=\"text-align:center\">命令的基本使用语法<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DESCRIPTION</td>\n<td style=\"text-align:center\">命令的详细描述，有的命令会单独使用标签介绍COMMANDS LINE OPTION或OPTIONS<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">OPTIONS</td>\n<td style=\"text-align:center\">命令参数选项说明</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">COMMANDS</td>\n<td style=\"text-align:center\">执行某个软件时可附加的软件的命令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">FILES</td>\n<td style=\"text-align:center\">程序涉及的相关文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">EXAMPLES</td>\n<td style=\"text-align:center\">命令的例子<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SEE ALSO</td>\n<td style=\"text-align:center\">命令相关信息的说明</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">BUGS(REPORTING BUGS)</td>\n<td style=\"text-align:center\">命令对应缺陷问题的描述</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">COPYRIGHT</td>\n<td style=\"text-align:center\">版权信息相关声明</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AUTHOR</td>\n<td style=\"text-align:center\">作者介绍</td>\n</tr>\n</tbody>\n</table>\n<p>man命令信息操作键</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作键</th>\n<th style=\"text-align:center\">功能说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Page Down</td>\n<td style=\"text-align:center\">向下翻页</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Page Up</td>\n<td style=\"text-align:center\">向上翻页</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Home</td>\n<td style=\"text-align:center\">跳转到第一页</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">End</td>\n<td style=\"text-align:center\">跳转到最后一页</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">/</td>\n<td style=\"text-align:center\">向下查找某个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">?</td>\n<td style=\"text-align:center\">向上查找某个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">n,N</td>\n<td style=\"text-align:center\">当使用向上查找，那么n则为下一个，N为上一个。当使用向下查找，那么则取反</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">q</td>\n<td style=\"text-align:center\">结束本次man帮助</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"1-2-2-使用–help参数获取命令帮助信息\"><a href=\"#1-2-2-使用–help参数获取命令帮助信息\" class=\"headerlink\" title=\"1.2.2 使用–help参数获取命令帮助信息\"></a>1.2.2 使用–help参数获取命令帮助信息</h1><p>  例子:</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[evanmeek@EvanLinux ~]$ ls --help</span><br></pre></td></tr></table></figure>\n<p>  输出如下:</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用法：ls [选项]... [文件]...</span><br><span class=\"line\">列出给定文件（默认为当前目录）的信息。</span><br><span class=\"line\">如果不指定 -cftuvSUX 中任意一个或--sort 选项，则根据字母大小排序。</span><br><span class=\"line\"></span><br><span class=\"line\">必选参数对长短选项同时适用。</span><br><span class=\"line\">-a, --all                     不隐藏任何以. 开始的项目</span><br><span class=\"line\">-A, --almost-all              列出除. 及.. 以外的任何项目</span><br><span class=\"line\">    --author                  与-l 同时使用时列出每个文件的作者</span><br><span class=\"line\">-b, --escape                  以八进制溢出序列表示不可打印的字符</span><br></pre></td></tr></table></figure>\n<h1 id=\"1-2-3-使用help命令获取命令帮助信息\"><a href=\"#1-2-3-使用help命令获取命令帮助信息\" class=\"headerlink\" title=\"1.2.3 使用help命令获取命令帮助信息\"></a>1.2.3 使用help命令获取命令帮助信息</h1><p>  例子:</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[evanmeek@EvanLinux ~]$ help cd</span><br></pre></td></tr></table></figure>\n<p>  输出如下:</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd: cd [-L|[-P [-e]] [-@]] [目录]</span><br><span class=\"line\">  改变 shell 工作目录。</span><br><span class=\"line\">  </span><br><span class=\"line\">  改变当前目录至 DIR 目录。默认的 DIR 目录是 shell 变量 HOME</span><br><span class=\"line\">  的值。</span><br><span class=\"line\">  </span><br><span class=\"line\">  变量 CDPATH 定义了含有 DIR 的目录的搜索路径，其中不同的目录名称由冒号 (:)分隔。</span><br><span class=\"line\">  一个空的目录名称表示当前目录。如果要切换到的 DIR 由斜杠 (/) 开头，则 CDPATH</span><br><span class=\"line\">  不会用上变量。</span><br><span class=\"line\">  </span><br><span class=\"line\">  如果路径找不到，并且 shell 选项 `cdable_vars' 被设定，则参数词被假定为一个</span><br><span class=\"line\">  变量名。如果该变量有值，则它的值被当作 DIR 目录。</span><br></pre></td></tr></table></figure>\n<h1 id=\"1-2-4-使用info获取帮助信息\"><a href=\"#1-2-4-使用info获取帮助信息\" class=\"headerlink\" title=\"1.2.4 使用info获取帮助信息\"></a>1.2.4 使用info获取帮助信息</h1><p>  例子:</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[evanmeek@EvanLinux ~]$ info cd</span><br></pre></td></tr></table></figure>\n<p>  即可打开cd的文档信息，操作跟man的使用方式相似。</p>\n<h1 id=\"1-2-5-从互联网搜索获取命令帮助信息\"><a href=\"#1-2-5-从互联网搜索获取命令帮助信息\" class=\"headerlink\" title=\"1.2.5 从互联网搜索获取命令帮助信息\"></a>1.2.5 从互联网搜索获取命令帮助信息</h1><p>  <a href=\"https://www.google.com\" target=\"_blank\" rel=\"noopener\">Google</a><br>  <a href=\"https://www.bing.com\" target=\"_blank\" rel=\"noopener\">Bing</a><br>  <a href=\"https://www.github.com\" target=\"_blank\" rel=\"noopener\">Github</a><br>  <a href=\"https://stackoverflow.com\" target=\"_blank\" rel=\"noopener\">StackOverFlow</a></p>\n","site":{"data":{}},"excerpt":"<p>本篇文章为Linux系列的第1章 Linux命令行简介 1.2小节的外部展示。</p>","more":"<h1 id=\"1-2-1-使用man获取命令帮助信息\"><a href=\"#1-2-1-使用man获取命令帮助信息\" class=\"headerlink\" title=\"1.2.1 使用man获取命令帮助信息\"></a>1.2.1 使用man获取命令帮助信息</h1><p>man命令的作用:</p>\n<ul>\n<li><p>查看命令的使用帮助</p>\n</li>\n<li><p>查看软件服务配置文件</p>\n</li>\n<li><p>查看系统调用信息</p>\n</li>\n<li><p>查看C库函数帮助信息</p>\n</li>\n</ul>\n<p>man命令的使用:</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man 参数选项 命令/文件</span><br></pre></td></tr></table></figure>\n<p>man命令可选参数:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">英文说明</th>\n<th style=\"text-align:center\">中文说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">User Commands</td>\n<td style=\"text-align:center\">用户命令相关</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">System Calls</td>\n<td style=\"text-align:center\">系统调用相关</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">C Library Functions</td>\n<td style=\"text-align:center\">C的库函数相关</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">Devices and Special Files</td>\n<td style=\"text-align:center\">设备与特殊文件相关</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">File Formats and Conventions</td>\n<td style=\"text-align:center\">文件格式和规则</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">Games et. Al.</td>\n<td style=\"text-align:center\">游戏及其他</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">Miscellanea</td>\n<td style=\"text-align:center\">宏，包及其他杂项</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">System Admin tools and Deamons</td>\n<td style=\"text-align:center\">系统管理员命令和进程</td>\n</tr>\n</tbody>\n</table>\n<p>  例子:</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 查看cp命令的使用帮助</span><br><span class=\"line\">man cp</span><br><span class=\"line\"><span class=\"meta\">#</span> 查看C语言printf函数的使用帮助</span><br><span class=\"line\">man 3 printf</span><br></pre></td></tr></table></figure>\n<p>man命令信息的格式</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">标签</th>\n<th style=\"text-align:center\">说明(<code>!</code>表示重点)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">NAME</td>\n<td style=\"text-align:center\">命令说明及介绍<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SYNOPSIS</td>\n<td style=\"text-align:center\">命令的基本使用语法<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DESCRIPTION</td>\n<td style=\"text-align:center\">命令的详细描述，有的命令会单独使用标签介绍COMMANDS LINE OPTION或OPTIONS<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">OPTIONS</td>\n<td style=\"text-align:center\">命令参数选项说明</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">COMMANDS</td>\n<td style=\"text-align:center\">执行某个软件时可附加的软件的命令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">FILES</td>\n<td style=\"text-align:center\">程序涉及的相关文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">EXAMPLES</td>\n<td style=\"text-align:center\">命令的例子<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SEE ALSO</td>\n<td style=\"text-align:center\">命令相关信息的说明</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">BUGS(REPORTING BUGS)</td>\n<td style=\"text-align:center\">命令对应缺陷问题的描述</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">COPYRIGHT</td>\n<td style=\"text-align:center\">版权信息相关声明</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AUTHOR</td>\n<td style=\"text-align:center\">作者介绍</td>\n</tr>\n</tbody>\n</table>\n<p>man命令信息操作键</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作键</th>\n<th style=\"text-align:center\">功能说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Page Down</td>\n<td style=\"text-align:center\">向下翻页</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Page Up</td>\n<td style=\"text-align:center\">向上翻页</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Home</td>\n<td style=\"text-align:center\">跳转到第一页</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">End</td>\n<td style=\"text-align:center\">跳转到最后一页</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">/</td>\n<td style=\"text-align:center\">向下查找某个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">?</td>\n<td style=\"text-align:center\">向上查找某个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">n,N</td>\n<td style=\"text-align:center\">当使用向上查找，那么n则为下一个，N为上一个。当使用向下查找，那么则取反</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">q</td>\n<td style=\"text-align:center\">结束本次man帮助</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"1-2-2-使用–help参数获取命令帮助信息\"><a href=\"#1-2-2-使用–help参数获取命令帮助信息\" class=\"headerlink\" title=\"1.2.2 使用–help参数获取命令帮助信息\"></a>1.2.2 使用–help参数获取命令帮助信息</h1><p>  例子:</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[evanmeek@EvanLinux ~]$ ls --help</span><br></pre></td></tr></table></figure>\n<p>  输出如下:</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用法：ls [选项]... [文件]...</span><br><span class=\"line\">列出给定文件（默认为当前目录）的信息。</span><br><span class=\"line\">如果不指定 -cftuvSUX 中任意一个或--sort 选项，则根据字母大小排序。</span><br><span class=\"line\"></span><br><span class=\"line\">必选参数对长短选项同时适用。</span><br><span class=\"line\">-a, --all                     不隐藏任何以. 开始的项目</span><br><span class=\"line\">-A, --almost-all              列出除. 及.. 以外的任何项目</span><br><span class=\"line\">    --author                  与-l 同时使用时列出每个文件的作者</span><br><span class=\"line\">-b, --escape                  以八进制溢出序列表示不可打印的字符</span><br></pre></td></tr></table></figure>\n<h1 id=\"1-2-3-使用help命令获取命令帮助信息\"><a href=\"#1-2-3-使用help命令获取命令帮助信息\" class=\"headerlink\" title=\"1.2.3 使用help命令获取命令帮助信息\"></a>1.2.3 使用help命令获取命令帮助信息</h1><p>  例子:</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[evanmeek@EvanLinux ~]$ help cd</span><br></pre></td></tr></table></figure>\n<p>  输出如下:</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd: cd [-L|[-P [-e]] [-@]] [目录]</span><br><span class=\"line\">  改变 shell 工作目录。</span><br><span class=\"line\">  </span><br><span class=\"line\">  改变当前目录至 DIR 目录。默认的 DIR 目录是 shell 变量 HOME</span><br><span class=\"line\">  的值。</span><br><span class=\"line\">  </span><br><span class=\"line\">  变量 CDPATH 定义了含有 DIR 的目录的搜索路径，其中不同的目录名称由冒号 (:)分隔。</span><br><span class=\"line\">  一个空的目录名称表示当前目录。如果要切换到的 DIR 由斜杠 (/) 开头，则 CDPATH</span><br><span class=\"line\">  不会用上变量。</span><br><span class=\"line\">  </span><br><span class=\"line\">  如果路径找不到，并且 shell 选项 `cdable_vars' 被设定，则参数词被假定为一个</span><br><span class=\"line\">  变量名。如果该变量有值，则它的值被当作 DIR 目录。</span><br></pre></td></tr></table></figure>\n<h1 id=\"1-2-4-使用info获取帮助信息\"><a href=\"#1-2-4-使用info获取帮助信息\" class=\"headerlink\" title=\"1.2.4 使用info获取帮助信息\"></a>1.2.4 使用info获取帮助信息</h1><p>  例子:</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[evanmeek@EvanLinux ~]$ info cd</span><br></pre></td></tr></table></figure>\n<p>  即可打开cd的文档信息，操作跟man的使用方式相似。</p>\n<h1 id=\"1-2-5-从互联网搜索获取命令帮助信息\"><a href=\"#1-2-5-从互联网搜索获取命令帮助信息\" class=\"headerlink\" title=\"1.2.5 从互联网搜索获取命令帮助信息\"></a>1.2.5 从互联网搜索获取命令帮助信息</h1><p>  <a href=\"https://www.google.com\" target=\"_blank\" rel=\"noopener\">Google</a><br>  <a href=\"https://www.bing.com\" target=\"_blank\" rel=\"noopener\">Bing</a><br>  <a href=\"https://www.github.com\" target=\"_blank\" rel=\"noopener\">Github</a><br>  <a href=\"https://stackoverflow.com\" target=\"_blank\" rel=\"noopener\">StackOverFlow</a></p>"},{"title":"ManjaroLinuxTG讨论群组","copyright":true,"date":"2019-05-15T16:01:58.000Z","_content":"\n创建了个ManjaroLinux的Telegram讨论群组，欢迎加入讨论。\n\n# [点击加入](https://t.me/manjarozhihu)\n","source":"_posts/ManjaroLinuxTG讨论群组.md","raw":"---\ntitle: ManjaroLinuxTG讨论群组\ncopyright: true\ndate: 2019-05-16 00:01:58\ncategories: 分享\ntags:\n - Telegram\n - Linux\n---\n\n创建了个ManjaroLinux的Telegram讨论群组，欢迎加入讨论。\n\n# [点击加入](https://t.me/manjarozhihu)\n","slug":"ManjaroLinuxTG讨论群组","published":1,"updated":"2019-06-16T17:09:00.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uz9x0014oums31st5kp1","content":"<p>创建了个ManjaroLinux的Telegram讨论群组，欢迎加入讨论。</p>\n<h1 id=\"点击加入\"><a href=\"#点击加入\" class=\"headerlink\" title=\"点击加入\"></a><a href=\"https://t.me/manjarozhihu\" target=\"_blank\" rel=\"noopener\">点击加入</a></h1>","site":{"data":{}},"excerpt":"","more":"<p>创建了个ManjaroLinux的Telegram讨论群组，欢迎加入讨论。</p>\n<h1 id=\"点击加入\"><a href=\"#点击加入\" class=\"headerlink\" title=\"点击加入\"></a><a href=\"https://t.me/manjarozhihu\" target=\"_blank\" rel=\"noopener\">点击加入</a></h1>"},{"title":"Linux中的解压与压缩","date":"2019-05-08T12:54:19.000Z","copyright":true,"_content":"\n当我们需要传输数据时，如果是直接对文件进行传输，若数据较大，则传输时间会很长。我们可以将文件进行压缩，减少文件的体积，从而减少传输耗时。\n\n<!--more-->\n\n在Windows下我们通常使用rar或zip进行压缩解压的操作，但是像rar这种软件实际是收费的，所以在Linux下使用有些不太实际。\n\n\nLinux下有三种主流常用的解压压缩软件可选:\n\n- gzip (GNUzip)\n\n- bz2 (bzip2)\n\n- xz (xzutils)\n\n三个软件的参数相同，只是命令不同:\n\n~~~shell\n$ gzip [参数] <文件名>\n~~~\n\n~~~shell\n$ bzip2 [参数] <文件名>\n~~~\n\n~~~shell\n$ xz [参数] <文件名>\n~~~\n\n> 可选参数\n\n|参数名|作用|\n---|:---:|---\n|-d|解压|\n|-k|压缩时不删除源文件|\n|-r|递归查找目录下的文件，并且压缩|\n|-v|显示详细信息|\n|-t|测试压缩包是否完整|\n|-l|显示压缩包信息|\n|-c|写入标准输出，保持原始文件不变|\n|-1~9|压缩等级|\n\n**示例:**\n\n> 压缩test.txt，并删除.\n\n~~~shell\n$ gzip test.txt\n~~~\n\n> 压缩test.txt，不删除原文件，并且显示信息.\n\n~~~shell\n$ gzip -vk test.txt\n~~~\n\n> 以最高压缩test.txt和test2.txt，不删除原文件，显示信息，并把压缩文件写为test.gz\n\n~~~shell\n$ gzip -9cvk test.txt test2.txt > test.gz\n~~~\n\n> 解压test.gz\n\n~~~shell\n$ gzip -d test.gz\n~~~\n\n---\n\n介绍完上面的几种压缩软件，下面介绍一个打包软件**tar**\n\n我们常常可以看见**.tar.xz这种文件，它就是用tar打包，再用xz进行压缩的文件了，下面直接看示例你就会了。\n\n\n## 压缩\n\n这里注意第一个参数，它们分别代表使用什么压缩软件。\n\n> bz2\n~~~shell\n$ tar -jcvf test.tar.bz test/ \n~~~\n\n>xz\n~~~shell\n$ tar -Jcvf test.tar.xz test/\n~~~\n\n>gzip\n~~~shell\n$ tar -zcvf test.tar.gz test/\n~~~\n\n## 解压\n\n只需要看文件名的后缀，然后把参数c改为x即可.x代表解压.\n\n\n~~~shell\n$ tar -Jxvf test.tar.xz test/\n~~~\n\n---\n","source":"_posts/Linux中的解压与压缩.md","raw":"---\ntitle: Linux中的解压与压缩\ndate: 2019-05-08 20:54:19\ncategories: 学习笔记\ntags:\n  - Linux\ncopyright: true\n---\n\n当我们需要传输数据时，如果是直接对文件进行传输，若数据较大，则传输时间会很长。我们可以将文件进行压缩，减少文件的体积，从而减少传输耗时。\n\n<!--more-->\n\n在Windows下我们通常使用rar或zip进行压缩解压的操作，但是像rar这种软件实际是收费的，所以在Linux下使用有些不太实际。\n\n\nLinux下有三种主流常用的解压压缩软件可选:\n\n- gzip (GNUzip)\n\n- bz2 (bzip2)\n\n- xz (xzutils)\n\n三个软件的参数相同，只是命令不同:\n\n~~~shell\n$ gzip [参数] <文件名>\n~~~\n\n~~~shell\n$ bzip2 [参数] <文件名>\n~~~\n\n~~~shell\n$ xz [参数] <文件名>\n~~~\n\n> 可选参数\n\n|参数名|作用|\n---|:---:|---\n|-d|解压|\n|-k|压缩时不删除源文件|\n|-r|递归查找目录下的文件，并且压缩|\n|-v|显示详细信息|\n|-t|测试压缩包是否完整|\n|-l|显示压缩包信息|\n|-c|写入标准输出，保持原始文件不变|\n|-1~9|压缩等级|\n\n**示例:**\n\n> 压缩test.txt，并删除.\n\n~~~shell\n$ gzip test.txt\n~~~\n\n> 压缩test.txt，不删除原文件，并且显示信息.\n\n~~~shell\n$ gzip -vk test.txt\n~~~\n\n> 以最高压缩test.txt和test2.txt，不删除原文件，显示信息，并把压缩文件写为test.gz\n\n~~~shell\n$ gzip -9cvk test.txt test2.txt > test.gz\n~~~\n\n> 解压test.gz\n\n~~~shell\n$ gzip -d test.gz\n~~~\n\n---\n\n介绍完上面的几种压缩软件，下面介绍一个打包软件**tar**\n\n我们常常可以看见**.tar.xz这种文件，它就是用tar打包，再用xz进行压缩的文件了，下面直接看示例你就会了。\n\n\n## 压缩\n\n这里注意第一个参数，它们分别代表使用什么压缩软件。\n\n> bz2\n~~~shell\n$ tar -jcvf test.tar.bz test/ \n~~~\n\n>xz\n~~~shell\n$ tar -Jcvf test.tar.xz test/\n~~~\n\n>gzip\n~~~shell\n$ tar -zcvf test.tar.gz test/\n~~~\n\n## 解压\n\n只需要看文件名的后缀，然后把参数c改为x即可.x代表解压.\n\n\n~~~shell\n$ tar -Jxvf test.tar.xz test/\n~~~\n\n---\n","slug":"Linux中的解压与压缩","published":1,"updated":"2019-06-16T17:09:00.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uz9y0018oums2oojfq51","content":"<p>当我们需要传输数据时，如果是直接对文件进行传输，若数据较大，则传输时间会很长。我们可以将文件进行压缩，减少文件的体积，从而减少传输耗时。</p>\n<a id=\"more\"></a>\n<p>在Windows下我们通常使用rar或zip进行压缩解压的操作，但是像rar这种软件实际是收费的，所以在Linux下使用有些不太实际。</p>\n<p>Linux下有三种主流常用的解压压缩软件可选:</p>\n<ul>\n<li><p>gzip (GNUzip)</p>\n</li>\n<li><p>bz2 (bzip2)</p>\n</li>\n<li><p>xz (xzutils)</p>\n</li>\n</ul>\n<p>三个软件的参数相同，只是命令不同:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> gzip [参数] &lt;文件名&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> bzip2 [参数] &lt;文件名&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> xz [参数] &lt;文件名&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可选参数</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:center\">参数名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td style=\"text-align:center\">-d</td>\n<td>解压</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\">-k</td>\n<td>压缩时不删除源文件</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\">-r</td>\n<td>递归查找目录下的文件，并且压缩</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\">-v</td>\n<td>显示详细信息</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\">-t</td>\n<td>测试压缩包是否完整</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\">-l</td>\n<td>显示压缩包信息</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\">-c</td>\n<td>写入标准输出，保持原始文件不变</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\">-1~9</td>\n<td>压缩等级</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例:</strong></p>\n<blockquote>\n<p>压缩test.txt，并删除.</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> gzip test.txt</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>压缩test.txt，不删除原文件，并且显示信息.</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> gzip -vk test.txt</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以最高压缩test.txt和test2.txt，不删除原文件，显示信息，并把压缩文件写为test.gz</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> gzip -9cvk test.txt test2.txt &gt; test.gz</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>解压test.gz</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> gzip -d test.gz</span><br></pre></td></tr></table></figure>\n<hr>\n<p>介绍完上面的几种压缩软件，下面介绍一个打包软件<strong>tar</strong></p>\n<p>我们常常可以看见**.tar.xz这种文件，它就是用tar打包，再用xz进行压缩的文件了，下面直接看示例你就会了。</p>\n<h2 id=\"压缩\"><a href=\"#压缩\" class=\"headerlink\" title=\"压缩\"></a>压缩</h2><p>这里注意第一个参数，它们分别代表使用什么压缩软件。</p>\n<blockquote>\n<p>bz2<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> tar -jcvf test.tar.bz test/</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>xz<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> tar -Jcvf test.tar.xz test/</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>gzip<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> tar -zcvf test.tar.gz test/</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h2><p>只需要看文件名的后缀，然后把参数c改为x即可.x代表解压.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> tar -Jxvf test.tar.xz test/</span><br></pre></td></tr></table></figure>\n<hr>\n","site":{"data":{}},"excerpt":"<p>当我们需要传输数据时，如果是直接对文件进行传输，若数据较大，则传输时间会很长。我们可以将文件进行压缩，减少文件的体积，从而减少传输耗时。</p>","more":"<p>在Windows下我们通常使用rar或zip进行压缩解压的操作，但是像rar这种软件实际是收费的，所以在Linux下使用有些不太实际。</p>\n<p>Linux下有三种主流常用的解压压缩软件可选:</p>\n<ul>\n<li><p>gzip (GNUzip)</p>\n</li>\n<li><p>bz2 (bzip2)</p>\n</li>\n<li><p>xz (xzutils)</p>\n</li>\n</ul>\n<p>三个软件的参数相同，只是命令不同:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> gzip [参数] &lt;文件名&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> bzip2 [参数] &lt;文件名&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> xz [参数] &lt;文件名&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可选参数</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:center\">参数名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td style=\"text-align:center\">-d</td>\n<td>解压</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\">-k</td>\n<td>压缩时不删除源文件</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\">-r</td>\n<td>递归查找目录下的文件，并且压缩</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\">-v</td>\n<td>显示详细信息</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\">-t</td>\n<td>测试压缩包是否完整</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\">-l</td>\n<td>显示压缩包信息</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\">-c</td>\n<td>写入标准输出，保持原始文件不变</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\">-1~9</td>\n<td>压缩等级</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例:</strong></p>\n<blockquote>\n<p>压缩test.txt，并删除.</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> gzip test.txt</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>压缩test.txt，不删除原文件，并且显示信息.</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> gzip -vk test.txt</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以最高压缩test.txt和test2.txt，不删除原文件，显示信息，并把压缩文件写为test.gz</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> gzip -9cvk test.txt test2.txt &gt; test.gz</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>解压test.gz</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> gzip -d test.gz</span><br></pre></td></tr></table></figure>\n<hr>\n<p>介绍完上面的几种压缩软件，下面介绍一个打包软件<strong>tar</strong></p>\n<p>我们常常可以看见**.tar.xz这种文件，它就是用tar打包，再用xz进行压缩的文件了，下面直接看示例你就会了。</p>\n<h2 id=\"压缩\"><a href=\"#压缩\" class=\"headerlink\" title=\"压缩\"></a>压缩</h2><p>这里注意第一个参数，它们分别代表使用什么压缩软件。</p>\n<blockquote>\n<p>bz2<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> tar -jcvf test.tar.bz test/</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>xz<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> tar -Jcvf test.tar.xz test/</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>gzip<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> tar -zcvf test.tar.gz test/</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h2><p>只需要看文件名的后缀，然后把参数c改为x即可.x代表解压.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> tar -Jxvf test.tar.xz test/</span><br></pre></td></tr></table></figure>\n<hr>"},{"title":"Linux-文件和目录操作命令-1","copyright":true,"date":"2019-06-16T07:56:11.000Z","_content":"\n# 2.1 pwd命令\n\n  `print working diretory`\n\n  查看当前路径使用`pwd`命令\n\n  例子:\n\n  ~~~shell\n  [evanmeek@EvanLinux ~]$ pwd\n  ~~~\n\n  输出结果\n\n  ~~~Shell\n  /home/evanmeek\n  ~~~\n\n  |选项|说明|\n  |:------:|:--:|\n  |-L|显示当前目录的逻辑路径(忽略软链接文件)|\n  |-P|显示当前目录的物理路径(若有软链接则显示源文件地址)|\n\n  所谓的软链接相当于快捷方式，例如`~/test.txt`是`/test.txt`的软链接，那么我们操作`~/test.txt`等同于操作`/test.txt`，详细的软链接将会在后面的`ln`命令讲解。\n\n# 2.2 cd 切换目录\n\n  `change directory`\n\n  进入某个目录使用`cd`命令\n\n  例子:\n\n  ~~~shell\n  [evanmeek@EvanLinux ~]$ pwd\n  [evanmeek@EvanLinux ~]$ cd /etc/sysctl.d/\n  [evanmeek@EvanLinux /etc/sysctl.d/]$ pwd\n  ~~~\n\n  输出结果\n\n  ~~~\n  /home/evanmeek/\n  /etc/sysctl.d/\n  ~~~\n  \n  |选项|说明|\n  |:------:|:--:|\n  |-P|进入目录的物理路径|\n  |-L|进入目录的逻辑路径|\n  |-|进入上次的目录|\n  |~|进入系统环境变量的`HOME`目录路径，即当前登录用户的家目录`|\n  |..|进入父目录|\n\n  `cd` 命令如果不带任何选项和路径的话，会进入当前登录用户的家目录.\n\n  例子:\n\n  ~~~Shell\n  [evanmeek@EvanLinux ~]$ cd Desktop\n  [evanmeek@EvanLinux ~/Desktop]$ pwd\n  [evanmeek@EvanLinux ~]$ cd -\n  [evanmeek@EvanLinux ~]$ pwd\n  [evanmeek@EvanLinux ~]$ cd /etc/systemd/\n  [evanmeek@EvanLinux /etc/systemd/]$ pwd\n  [evanmeek@EvanLinux /etc/systemd/]$ cd ..\n  [evanmeek@EvanLinux /etc/]$ pwd\n  ~~~\n\n  输出结果\n\n  ~~~shell\n  ~/Desktop/\n  ~\n  /etc/systemd/\n  /etc/\n  ~~~\n\n# 2.3 tree以树形结构显示目录下的内容\n\n  树形结构可以很清晰的显示出目录的父子级关系。\n\n  例子:\n\n  ~~~\n  [evanmeek@EvanLinux ~/test]$ tree -L 1\n  ~~~\n\n  输出结果\n\n  ~~~\n  .\n  ├── dir1\n  │   ├── dir1_1\n  │   └── dir2_2\n  └── dir2\n      ├── dir1_1\n      └── dir2_2\n\n  6 directories, 0 files\n  ~~~\n\n  |选项|说明|\n  |:--:|:--:|\n  |-a|显示所有文件包括隐藏文件|\n  |-d|只显示目录`!`|\n  |-f|显示每个文件的绝对路径|\n  |-i|不显示树枝|\n  |-L levelNum|显示遍历目录的层级，levelNum为层级(数字)|\n  |-F|显示时根据不同文件类型在文件名结尾处显示不同的符号|\n\n  例子:\n\n  显示隐藏文件 \n  ~~~\n  #假设此目录下有隐藏文件\n  [evanmeek@EvanLinux ~/tmp]$ tree -a\n  ~~~\n\n  输出结果\n\n  ~~~\n  .\n  ├── dir1\n  │   ├── dir1_1\n  │   └── dir2_2\n  ├── dir2\n  │   ├── dir1_1\n  │   └── dir2_2\n  ├── .file1\n  └── .file2\n\n  6 directories, 2 files\n  ~~~\n\n  例子:\n\n  显示1级层文件完整路径，并不显示树枝\n  ~~~\n  [evanmeek@EvanLinux ~/tmp]$ tree -L 1 -fi .\n  ~~~\n\n  输出结果\n\n  ~~~\n  .\n  ./dir1\n  ./dir2\n  ~~~\n\n# 2.4 mkdir创建目录\n","source":"_posts/Linux-文件和目录操作命令-1.md","raw":"---\ntitle: Linux-文件和目录操作命令-1\ncopyright: true\ndate: 2019-06-16 15:56:11\ncategories: Linux系列\ntags:\n  - Linux\n---\n\n# 2.1 pwd命令\n\n  `print working diretory`\n\n  查看当前路径使用`pwd`命令\n\n  例子:\n\n  ~~~shell\n  [evanmeek@EvanLinux ~]$ pwd\n  ~~~\n\n  输出结果\n\n  ~~~Shell\n  /home/evanmeek\n  ~~~\n\n  |选项|说明|\n  |:------:|:--:|\n  |-L|显示当前目录的逻辑路径(忽略软链接文件)|\n  |-P|显示当前目录的物理路径(若有软链接则显示源文件地址)|\n\n  所谓的软链接相当于快捷方式，例如`~/test.txt`是`/test.txt`的软链接，那么我们操作`~/test.txt`等同于操作`/test.txt`，详细的软链接将会在后面的`ln`命令讲解。\n\n# 2.2 cd 切换目录\n\n  `change directory`\n\n  进入某个目录使用`cd`命令\n\n  例子:\n\n  ~~~shell\n  [evanmeek@EvanLinux ~]$ pwd\n  [evanmeek@EvanLinux ~]$ cd /etc/sysctl.d/\n  [evanmeek@EvanLinux /etc/sysctl.d/]$ pwd\n  ~~~\n\n  输出结果\n\n  ~~~\n  /home/evanmeek/\n  /etc/sysctl.d/\n  ~~~\n  \n  |选项|说明|\n  |:------:|:--:|\n  |-P|进入目录的物理路径|\n  |-L|进入目录的逻辑路径|\n  |-|进入上次的目录|\n  |~|进入系统环境变量的`HOME`目录路径，即当前登录用户的家目录`|\n  |..|进入父目录|\n\n  `cd` 命令如果不带任何选项和路径的话，会进入当前登录用户的家目录.\n\n  例子:\n\n  ~~~Shell\n  [evanmeek@EvanLinux ~]$ cd Desktop\n  [evanmeek@EvanLinux ~/Desktop]$ pwd\n  [evanmeek@EvanLinux ~]$ cd -\n  [evanmeek@EvanLinux ~]$ pwd\n  [evanmeek@EvanLinux ~]$ cd /etc/systemd/\n  [evanmeek@EvanLinux /etc/systemd/]$ pwd\n  [evanmeek@EvanLinux /etc/systemd/]$ cd ..\n  [evanmeek@EvanLinux /etc/]$ pwd\n  ~~~\n\n  输出结果\n\n  ~~~shell\n  ~/Desktop/\n  ~\n  /etc/systemd/\n  /etc/\n  ~~~\n\n# 2.3 tree以树形结构显示目录下的内容\n\n  树形结构可以很清晰的显示出目录的父子级关系。\n\n  例子:\n\n  ~~~\n  [evanmeek@EvanLinux ~/test]$ tree -L 1\n  ~~~\n\n  输出结果\n\n  ~~~\n  .\n  ├── dir1\n  │   ├── dir1_1\n  │   └── dir2_2\n  └── dir2\n      ├── dir1_1\n      └── dir2_2\n\n  6 directories, 0 files\n  ~~~\n\n  |选项|说明|\n  |:--:|:--:|\n  |-a|显示所有文件包括隐藏文件|\n  |-d|只显示目录`!`|\n  |-f|显示每个文件的绝对路径|\n  |-i|不显示树枝|\n  |-L levelNum|显示遍历目录的层级，levelNum为层级(数字)|\n  |-F|显示时根据不同文件类型在文件名结尾处显示不同的符号|\n\n  例子:\n\n  显示隐藏文件 \n  ~~~\n  #假设此目录下有隐藏文件\n  [evanmeek@EvanLinux ~/tmp]$ tree -a\n  ~~~\n\n  输出结果\n\n  ~~~\n  .\n  ├── dir1\n  │   ├── dir1_1\n  │   └── dir2_2\n  ├── dir2\n  │   ├── dir1_1\n  │   └── dir2_2\n  ├── .file1\n  └── .file2\n\n  6 directories, 2 files\n  ~~~\n\n  例子:\n\n  显示1级层文件完整路径，并不显示树枝\n  ~~~\n  [evanmeek@EvanLinux ~/tmp]$ tree -L 1 -fi .\n  ~~~\n\n  输出结果\n\n  ~~~\n  .\n  ./dir1\n  ./dir2\n  ~~~\n\n# 2.4 mkdir创建目录\n","slug":"Linux-文件和目录操作命令-1","published":1,"updated":"2019-06-16T17:09:00.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uz9z001aoumsuarjyyta","content":"<h1 id=\"2-1-pwd命令\"><a href=\"#2-1-pwd命令\" class=\"headerlink\" title=\"2.1 pwd命令\"></a>2.1 pwd命令</h1><p>  <code>print working diretory</code></p>\n<p>  查看当前路径使用<code>pwd</code>命令</p>\n<p>  例子:</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[evanmeek@EvanLinux ~]$ pwd</span><br></pre></td></tr></table></figure>\n<p>  输出结果</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/evanmeek</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">选项</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-L</td>\n<td style=\"text-align:center\">显示当前目录的逻辑路径(忽略软链接文件)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-P</td>\n<td style=\"text-align:center\">显示当前目录的物理路径(若有软链接则显示源文件地址)</td>\n</tr>\n</tbody>\n</table>\n<p>  所谓的软链接相当于快捷方式，例如<code>~/test.txt</code>是<code>/test.txt</code>的软链接，那么我们操作<code>~/test.txt</code>等同于操作<code>/test.txt</code>，详细的软链接将会在后面的<code>ln</code>命令讲解。</p>\n<h1 id=\"2-2-cd-切换目录\"><a href=\"#2-2-cd-切换目录\" class=\"headerlink\" title=\"2.2 cd 切换目录\"></a>2.2 cd 切换目录</h1><p>  <code>change directory</code></p>\n<p>  进入某个目录使用<code>cd</code>命令</p>\n<p>  例子:</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[evanmeek@EvanLinux ~]$ pwd</span><br><span class=\"line\">[evanmeek@EvanLinux ~]$ cd /etc/sysctl.d/</span><br><span class=\"line\">[evanmeek@EvanLinux /etc/sysctl.d/]$ pwd</span><br></pre></td></tr></table></figure>\n<p>  输出结果</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/evanmeek/</span><br><span class=\"line\">/etc/sysctl.d/</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">选项</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-P</td>\n<td style=\"text-align:center\">进入目录的物理路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-L</td>\n<td style=\"text-align:center\">进入目录的逻辑路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">进入上次的目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">~</td>\n<td style=\"text-align:center\">进入系统环境变量的<code>HOME</code>目录路径，即当前登录用户的家目录`</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">进入父目录</td>\n</tr>\n</tbody>\n</table>\n<p>  <code>cd</code> 命令如果不带任何选项和路径的话，会进入当前登录用户的家目录.</p>\n<p>  例子:</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[evanmeek@EvanLinux ~]$ cd Desktop</span><br><span class=\"line\">[evanmeek@EvanLinux ~/Desktop]$ pwd</span><br><span class=\"line\">[evanmeek@EvanLinux ~]$ cd -</span><br><span class=\"line\">[evanmeek@EvanLinux ~]$ pwd</span><br><span class=\"line\">[evanmeek@EvanLinux ~]$ cd /etc/systemd/</span><br><span class=\"line\">[evanmeek@EvanLinux /etc/systemd/]$ pwd</span><br><span class=\"line\">[evanmeek@EvanLinux /etc/systemd/]$ cd ..</span><br><span class=\"line\">[evanmeek@EvanLinux /etc/]$ pwd</span><br></pre></td></tr></table></figure>\n<p>  输出结果</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/Desktop/</span><br><span class=\"line\">~</span><br><span class=\"line\">/etc/systemd/</span><br><span class=\"line\">/etc/</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-3-tree以树形结构显示目录下的内容\"><a href=\"#2-3-tree以树形结构显示目录下的内容\" class=\"headerlink\" title=\"2.3 tree以树形结构显示目录下的内容\"></a>2.3 tree以树形结构显示目录下的内容</h1><p>  树形结构可以很清晰的显示出目录的父子级关系。</p>\n<p>  例子:</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[evanmeek@EvanLinux ~/test]$ tree -L 1</span><br></pre></td></tr></table></figure>\n<p>  输出结果</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── dir1</span><br><span class=\"line\">│   ├── dir1_1</span><br><span class=\"line\">│   └── dir2_2</span><br><span class=\"line\">└── dir2</span><br><span class=\"line\">    ├── dir1_1</span><br><span class=\"line\">    └── dir2_2</span><br><span class=\"line\"></span><br><span class=\"line\">6 directories, 0 files</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">选项</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-a</td>\n<td style=\"text-align:center\">显示所有文件包括隐藏文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-d</td>\n<td style=\"text-align:center\">只显示目录<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-f</td>\n<td style=\"text-align:center\">显示每个文件的绝对路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-i</td>\n<td style=\"text-align:center\">不显示树枝</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-L levelNum</td>\n<td style=\"text-align:center\">显示遍历目录的层级，levelNum为层级(数字)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-F</td>\n<td style=\"text-align:center\">显示时根据不同文件类型在文件名结尾处显示不同的符号</td>\n</tr>\n</tbody>\n</table>\n<p>  例子:</p>\n<p>  显示隐藏文件<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#假设此目录下有隐藏文件</span><br><span class=\"line\">[evanmeek@EvanLinux ~/tmp]$ tree -a</span><br></pre></td></tr></table></figure></p>\n<p>  输出结果</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── dir1</span><br><span class=\"line\">│   ├── dir1_1</span><br><span class=\"line\">│   └── dir2_2</span><br><span class=\"line\">├── dir2</span><br><span class=\"line\">│   ├── dir1_1</span><br><span class=\"line\">│   └── dir2_2</span><br><span class=\"line\">├── .file1</span><br><span class=\"line\">└── .file2</span><br><span class=\"line\"></span><br><span class=\"line\">6 directories, 2 files</span><br></pre></td></tr></table></figure>\n<p>  例子:</p>\n<p>  显示1级层文件完整路径，并不显示树枝<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[evanmeek@EvanLinux ~/tmp]$ tree -L 1 -fi .</span><br></pre></td></tr></table></figure></p>\n<p>  输出结果</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">./dir1</span><br><span class=\"line\">./dir2</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-4-mkdir创建目录\"><a href=\"#2-4-mkdir创建目录\" class=\"headerlink\" title=\"2.4 mkdir创建目录\"></a>2.4 mkdir创建目录</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"2-1-pwd命令\"><a href=\"#2-1-pwd命令\" class=\"headerlink\" title=\"2.1 pwd命令\"></a>2.1 pwd命令</h1><p>  <code>print working diretory</code></p>\n<p>  查看当前路径使用<code>pwd</code>命令</p>\n<p>  例子:</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[evanmeek@EvanLinux ~]$ pwd</span><br></pre></td></tr></table></figure>\n<p>  输出结果</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/evanmeek</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">选项</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-L</td>\n<td style=\"text-align:center\">显示当前目录的逻辑路径(忽略软链接文件)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-P</td>\n<td style=\"text-align:center\">显示当前目录的物理路径(若有软链接则显示源文件地址)</td>\n</tr>\n</tbody>\n</table>\n<p>  所谓的软链接相当于快捷方式，例如<code>~/test.txt</code>是<code>/test.txt</code>的软链接，那么我们操作<code>~/test.txt</code>等同于操作<code>/test.txt</code>，详细的软链接将会在后面的<code>ln</code>命令讲解。</p>\n<h1 id=\"2-2-cd-切换目录\"><a href=\"#2-2-cd-切换目录\" class=\"headerlink\" title=\"2.2 cd 切换目录\"></a>2.2 cd 切换目录</h1><p>  <code>change directory</code></p>\n<p>  进入某个目录使用<code>cd</code>命令</p>\n<p>  例子:</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[evanmeek@EvanLinux ~]$ pwd</span><br><span class=\"line\">[evanmeek@EvanLinux ~]$ cd /etc/sysctl.d/</span><br><span class=\"line\">[evanmeek@EvanLinux /etc/sysctl.d/]$ pwd</span><br></pre></td></tr></table></figure>\n<p>  输出结果</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/evanmeek/</span><br><span class=\"line\">/etc/sysctl.d/</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">选项</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-P</td>\n<td style=\"text-align:center\">进入目录的物理路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-L</td>\n<td style=\"text-align:center\">进入目录的逻辑路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">进入上次的目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">~</td>\n<td style=\"text-align:center\">进入系统环境变量的<code>HOME</code>目录路径，即当前登录用户的家目录`</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">进入父目录</td>\n</tr>\n</tbody>\n</table>\n<p>  <code>cd</code> 命令如果不带任何选项和路径的话，会进入当前登录用户的家目录.</p>\n<p>  例子:</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[evanmeek@EvanLinux ~]$ cd Desktop</span><br><span class=\"line\">[evanmeek@EvanLinux ~/Desktop]$ pwd</span><br><span class=\"line\">[evanmeek@EvanLinux ~]$ cd -</span><br><span class=\"line\">[evanmeek@EvanLinux ~]$ pwd</span><br><span class=\"line\">[evanmeek@EvanLinux ~]$ cd /etc/systemd/</span><br><span class=\"line\">[evanmeek@EvanLinux /etc/systemd/]$ pwd</span><br><span class=\"line\">[evanmeek@EvanLinux /etc/systemd/]$ cd ..</span><br><span class=\"line\">[evanmeek@EvanLinux /etc/]$ pwd</span><br></pre></td></tr></table></figure>\n<p>  输出结果</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/Desktop/</span><br><span class=\"line\">~</span><br><span class=\"line\">/etc/systemd/</span><br><span class=\"line\">/etc/</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-3-tree以树形结构显示目录下的内容\"><a href=\"#2-3-tree以树形结构显示目录下的内容\" class=\"headerlink\" title=\"2.3 tree以树形结构显示目录下的内容\"></a>2.3 tree以树形结构显示目录下的内容</h1><p>  树形结构可以很清晰的显示出目录的父子级关系。</p>\n<p>  例子:</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[evanmeek@EvanLinux ~/test]$ tree -L 1</span><br></pre></td></tr></table></figure>\n<p>  输出结果</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── dir1</span><br><span class=\"line\">│   ├── dir1_1</span><br><span class=\"line\">│   └── dir2_2</span><br><span class=\"line\">└── dir2</span><br><span class=\"line\">    ├── dir1_1</span><br><span class=\"line\">    └── dir2_2</span><br><span class=\"line\"></span><br><span class=\"line\">6 directories, 0 files</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">选项</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-a</td>\n<td style=\"text-align:center\">显示所有文件包括隐藏文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-d</td>\n<td style=\"text-align:center\">只显示目录<code>!</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-f</td>\n<td style=\"text-align:center\">显示每个文件的绝对路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-i</td>\n<td style=\"text-align:center\">不显示树枝</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-L levelNum</td>\n<td style=\"text-align:center\">显示遍历目录的层级，levelNum为层级(数字)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-F</td>\n<td style=\"text-align:center\">显示时根据不同文件类型在文件名结尾处显示不同的符号</td>\n</tr>\n</tbody>\n</table>\n<p>  例子:</p>\n<p>  显示隐藏文件<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#假设此目录下有隐藏文件</span><br><span class=\"line\">[evanmeek@EvanLinux ~/tmp]$ tree -a</span><br></pre></td></tr></table></figure></p>\n<p>  输出结果</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── dir1</span><br><span class=\"line\">│   ├── dir1_1</span><br><span class=\"line\">│   └── dir2_2</span><br><span class=\"line\">├── dir2</span><br><span class=\"line\">│   ├── dir1_1</span><br><span class=\"line\">│   └── dir2_2</span><br><span class=\"line\">├── .file1</span><br><span class=\"line\">└── .file2</span><br><span class=\"line\"></span><br><span class=\"line\">6 directories, 2 files</span><br></pre></td></tr></table></figure>\n<p>  例子:</p>\n<p>  显示1级层文件完整路径，并不显示树枝<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[evanmeek@EvanLinux ~/tmp]$ tree -L 1 -fi .</span><br></pre></td></tr></table></figure></p>\n<p>  输出结果</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">./dir1</span><br><span class=\"line\">./dir2</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-4-mkdir创建目录\"><a href=\"#2-4-mkdir创建目录\" class=\"headerlink\" title=\"2.4 mkdir创建目录\"></a>2.4 mkdir创建目录</h1>"},{"title":"fctix5安装与配置","copyright":true,"date":"2019-06-13T18:11:41.000Z","_content":"\n某天下午，我在Telegram群组里受人安利Fcitx5,今晚正好有空，所以就安装了个试试，还挺好的。\n\n<!--more-->\n\n![演示](fcitx5安装与配置/输入.gif)\n\n所需安装的软件包:\n  - fcitx5-git 输入法基础框架主程序\n  - fcitx5-chinese-addons-git 简体中文输入的支持，云拼音\n  - fcitx5-gtk-git gtk 程序的支持\n  - fcitx5-qt4-git qt4 的支持\n  - fcitx5-qt5-git qt5 的支持\n可能还需要：\n  - kcm-fcitx5-git 如果你用的是 KDE ，请装这个\n  - fcitx5-rime-git 繁體中文輸入 RIME 中州韻輸入法引擎\n\n如果你是KDE桌面环境可以直接使用kcm-fcitx5-git配置输入法:\n\n![kcm](fcitx5安装与配置/kcm.png)\n\n否则将改配置文件`~/.config/fcitx5/profile`\n\n~~~\n[Groups/0]\n# Group Name\nName=Default\n# Layout\nDefault Layout=us\n# Default Input Method\nDefaultIM=pinyin\n\n[Groups/0/Items/0]\n# Name\nName=keyboard-us\n# Layout\nLayout=\n\n[Groups/0/Items/1]\n# Name\nName=pinyin\n# Layout\nLayout=\n\n[GroupOrder]\n0=Default\n~~~\n\n__若没有`fcitx5`这个目录，则先打开一次fcitx5，再关闭，因为fcitx5关闭时会覆盖此文件。__\n\n由于fcitx5不能自动启动，我们需要添加环境变量\n\n将如下内容添加到`~/.xprofile`\n\n~~~\nfcitx5 &\n~~~\n\n然后再将如下内容添加到~/.pam_environment`，没有则创建\n\n~~~\nGTK_IM_MODULE=fcitx5\nXMODIFIERS=@im=fcitx\nQT_IM_MODULE=fcitx5\n~~~\n\nKDE用户可以直接在`系统设置模块-自动启动`设置\n\n默认的皮肤很丑，我们可以使用这个[fcitx5-simple-theme](https://github.com/iovxw/fcitx5-simple-theme)\n\n然后你就可以把fcitx4给删了...\n\n\n\n","source":"_posts/fcitx5安装与配置.md","raw":"---\ntitle: fctix5安装与配置\ncopyright: true\ndate: 2019-06-14 02:11:41\ncategories: 折腾日记\ntags:\n  - fcitx5\n---\n\n某天下午，我在Telegram群组里受人安利Fcitx5,今晚正好有空，所以就安装了个试试，还挺好的。\n\n<!--more-->\n\n![演示](fcitx5安装与配置/输入.gif)\n\n所需安装的软件包:\n  - fcitx5-git 输入法基础框架主程序\n  - fcitx5-chinese-addons-git 简体中文输入的支持，云拼音\n  - fcitx5-gtk-git gtk 程序的支持\n  - fcitx5-qt4-git qt4 的支持\n  - fcitx5-qt5-git qt5 的支持\n可能还需要：\n  - kcm-fcitx5-git 如果你用的是 KDE ，请装这个\n  - fcitx5-rime-git 繁體中文輸入 RIME 中州韻輸入法引擎\n\n如果你是KDE桌面环境可以直接使用kcm-fcitx5-git配置输入法:\n\n![kcm](fcitx5安装与配置/kcm.png)\n\n否则将改配置文件`~/.config/fcitx5/profile`\n\n~~~\n[Groups/0]\n# Group Name\nName=Default\n# Layout\nDefault Layout=us\n# Default Input Method\nDefaultIM=pinyin\n\n[Groups/0/Items/0]\n# Name\nName=keyboard-us\n# Layout\nLayout=\n\n[Groups/0/Items/1]\n# Name\nName=pinyin\n# Layout\nLayout=\n\n[GroupOrder]\n0=Default\n~~~\n\n__若没有`fcitx5`这个目录，则先打开一次fcitx5，再关闭，因为fcitx5关闭时会覆盖此文件。__\n\n由于fcitx5不能自动启动，我们需要添加环境变量\n\n将如下内容添加到`~/.xprofile`\n\n~~~\nfcitx5 &\n~~~\n\n然后再将如下内容添加到~/.pam_environment`，没有则创建\n\n~~~\nGTK_IM_MODULE=fcitx5\nXMODIFIERS=@im=fcitx\nQT_IM_MODULE=fcitx5\n~~~\n\nKDE用户可以直接在`系统设置模块-自动启动`设置\n\n默认的皮肤很丑，我们可以使用这个[fcitx5-simple-theme](https://github.com/iovxw/fcitx5-simple-theme)\n\n然后你就可以把fcitx4给删了...\n\n\n\n","slug":"fcitx5安装与配置","published":1,"updated":"2019-06-16T17:09:00.783Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uza0001doums6nlz2w4w","content":"<p>某天下午，我在Telegram群组里受人安利Fcitx5,今晚正好有空，所以就安装了个试试，还挺好的。</p>\n<a id=\"more\"></a>\n<p><img src=\"/2019/06/14/fcitx5安装与配置/输入.gif\" alt=\"演示\"></p>\n<p>所需安装的软件包:</p>\n<ul>\n<li>fcitx5-git 输入法基础框架主程序</li>\n<li>fcitx5-chinese-addons-git 简体中文输入的支持，云拼音</li>\n<li>fcitx5-gtk-git gtk 程序的支持</li>\n<li>fcitx5-qt4-git qt4 的支持</li>\n<li>fcitx5-qt5-git qt5 的支持<br>可能还需要：</li>\n<li>kcm-fcitx5-git 如果你用的是 KDE ，请装这个</li>\n<li>fcitx5-rime-git 繁體中文輸入 RIME 中州韻輸入法引擎</li>\n</ul>\n<p>如果你是KDE桌面环境可以直接使用kcm-fcitx5-git配置输入法:</p>\n<p><img src=\"/2019/06/14/fcitx5安装与配置/kcm.png\" alt=\"kcm\"></p>\n<p>否则将改配置文件<code>~/.config/fcitx5/profile</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Groups/0]</span><br><span class=\"line\"># Group Name</span><br><span class=\"line\">Name=Default</span><br><span class=\"line\"># Layout</span><br><span class=\"line\">Default Layout=us</span><br><span class=\"line\"># Default Input Method</span><br><span class=\"line\">DefaultIM=pinyin</span><br><span class=\"line\"></span><br><span class=\"line\">[Groups/0/Items/0]</span><br><span class=\"line\"># Name</span><br><span class=\"line\">Name=keyboard-us</span><br><span class=\"line\"># Layout</span><br><span class=\"line\">Layout=</span><br><span class=\"line\"></span><br><span class=\"line\">[Groups/0/Items/1]</span><br><span class=\"line\"># Name</span><br><span class=\"line\">Name=pinyin</span><br><span class=\"line\"># Layout</span><br><span class=\"line\">Layout=</span><br><span class=\"line\"></span><br><span class=\"line\">[GroupOrder]</span><br><span class=\"line\">0=Default</span><br></pre></td></tr></table></figure>\n<p><strong>若没有<code>fcitx5</code>这个目录，则先打开一次fcitx5，再关闭，因为fcitx5关闭时会覆盖此文件。</strong></p>\n<p>由于fcitx5不能自动启动，我们需要添加环境变量</p>\n<p>将如下内容添加到<code>~/.xprofile</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fcitx5 &amp;</span><br></pre></td></tr></table></figure>\n<p>然后再将如下内容添加到~/.pam_environment`，没有则创建</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GTK_IM_MODULE=fcitx5</span><br><span class=\"line\">XMODIFIERS=@im=fcitx</span><br><span class=\"line\">QT_IM_MODULE=fcitx5</span><br></pre></td></tr></table></figure>\n<p>KDE用户可以直接在<code>系统设置模块-自动启动</code>设置</p>\n<p>默认的皮肤很丑，我们可以使用这个<a href=\"https://github.com/iovxw/fcitx5-simple-theme\" target=\"_blank\" rel=\"noopener\">fcitx5-simple-theme</a></p>\n<p>然后你就可以把fcitx4给删了…</p>\n","site":{"data":{}},"excerpt":"<p>某天下午，我在Telegram群组里受人安利Fcitx5,今晚正好有空，所以就安装了个试试，还挺好的。</p>","more":"<p><img src=\"/2019/06/14/fcitx5安装与配置/输入.gif\" alt=\"演示\"></p>\n<p>所需安装的软件包:</p>\n<ul>\n<li>fcitx5-git 输入法基础框架主程序</li>\n<li>fcitx5-chinese-addons-git 简体中文输入的支持，云拼音</li>\n<li>fcitx5-gtk-git gtk 程序的支持</li>\n<li>fcitx5-qt4-git qt4 的支持</li>\n<li>fcitx5-qt5-git qt5 的支持<br>可能还需要：</li>\n<li>kcm-fcitx5-git 如果你用的是 KDE ，请装这个</li>\n<li>fcitx5-rime-git 繁體中文輸入 RIME 中州韻輸入法引擎</li>\n</ul>\n<p>如果你是KDE桌面环境可以直接使用kcm-fcitx5-git配置输入法:</p>\n<p><img src=\"/2019/06/14/fcitx5安装与配置/kcm.png\" alt=\"kcm\"></p>\n<p>否则将改配置文件<code>~/.config/fcitx5/profile</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Groups/0]</span><br><span class=\"line\"># Group Name</span><br><span class=\"line\">Name=Default</span><br><span class=\"line\"># Layout</span><br><span class=\"line\">Default Layout=us</span><br><span class=\"line\"># Default Input Method</span><br><span class=\"line\">DefaultIM=pinyin</span><br><span class=\"line\"></span><br><span class=\"line\">[Groups/0/Items/0]</span><br><span class=\"line\"># Name</span><br><span class=\"line\">Name=keyboard-us</span><br><span class=\"line\"># Layout</span><br><span class=\"line\">Layout=</span><br><span class=\"line\"></span><br><span class=\"line\">[Groups/0/Items/1]</span><br><span class=\"line\"># Name</span><br><span class=\"line\">Name=pinyin</span><br><span class=\"line\"># Layout</span><br><span class=\"line\">Layout=</span><br><span class=\"line\"></span><br><span class=\"line\">[GroupOrder]</span><br><span class=\"line\">0=Default</span><br></pre></td></tr></table></figure>\n<p><strong>若没有<code>fcitx5</code>这个目录，则先打开一次fcitx5，再关闭，因为fcitx5关闭时会覆盖此文件。</strong></p>\n<p>由于fcitx5不能自动启动，我们需要添加环境变量</p>\n<p>将如下内容添加到<code>~/.xprofile</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fcitx5 &amp;</span><br></pre></td></tr></table></figure>\n<p>然后再将如下内容添加到~/.pam_environment`，没有则创建</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GTK_IM_MODULE=fcitx5</span><br><span class=\"line\">XMODIFIERS=@im=fcitx</span><br><span class=\"line\">QT_IM_MODULE=fcitx5</span><br></pre></td></tr></table></figure>\n<p>KDE用户可以直接在<code>系统设置模块-自动启动</code>设置</p>\n<p>默认的皮肤很丑，我们可以使用这个<a href=\"https://github.com/iovxw/fcitx5-simple-theme\" target=\"_blank\" rel=\"noopener\">fcitx5-simple-theme</a></p>\n<p>然后你就可以把fcitx4给删了…</p>"},{"title":"hexo+next插入网易云音乐","date":"2019-04-30T12:05:20.000Z","copyright":true,"_content":"\n让大爷们在阅读博客时能优哉游哉的听着歌看文章。\n\n<!--more-->\n\n# 获取外链\n\n打开[网易云音乐](https://music.163.com)官网\n\n找到你喜欢的音乐，可以看到有一个生成外链播放器的超链接，点击即可。\n\n![01](hexo-next插入网易云音乐/01.png)\n\n可以设置是否自动播放和尺寸，然后把代码复制下来看如何插入外链吧!\n\n# 插入外链\n\n**如果是插入到文章内，直接把外链放文章里面即可，Markdown是支持的.**\n\n**如果是想插入到侧边栏**\n\n需要编辑next/layout/_macro/sidebar.swig文件\n\n此时我们就需要使用开发者工具插入到自己合适的位置下\n\n![插哪](hexo-next插入网易云音乐/插哪.png)\n\n可以看到size-overview这个div包含了很多div,你需要在sidebar.swig文件内找到这一关键词，把外链加进去即可。\n\n---","source":"_posts/hexo-next插入网易云音乐.md","raw":"---\ntitle: hexo+next插入网易云音乐\ndate: 2019-04-30 20:05:20\ncategories: 折腾记录\ntags: \n  - hexo\n  - 网易云音乐\ncopyright: true\n---\n\n让大爷们在阅读博客时能优哉游哉的听着歌看文章。\n\n<!--more-->\n\n# 获取外链\n\n打开[网易云音乐](https://music.163.com)官网\n\n找到你喜欢的音乐，可以看到有一个生成外链播放器的超链接，点击即可。\n\n![01](hexo-next插入网易云音乐/01.png)\n\n可以设置是否自动播放和尺寸，然后把代码复制下来看如何插入外链吧!\n\n# 插入外链\n\n**如果是插入到文章内，直接把外链放文章里面即可，Markdown是支持的.**\n\n**如果是想插入到侧边栏**\n\n需要编辑next/layout/_macro/sidebar.swig文件\n\n此时我们就需要使用开发者工具插入到自己合适的位置下\n\n![插哪](hexo-next插入网易云音乐/插哪.png)\n\n可以看到size-overview这个div包含了很多div,你需要在sidebar.swig文件内找到这一关键词，把外链加进去即可。\n\n---","slug":"hexo-next插入网易云音乐","published":1,"updated":"2019-06-16T17:09:00.787Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uza1001houmsxjlt95dx","content":"<p>让大爷们在阅读博客时能优哉游哉的听着歌看文章。</p>\n<a id=\"more\"></a>\n<h1 id=\"获取外链\"><a href=\"#获取外链\" class=\"headerlink\" title=\"获取外链\"></a>获取外链</h1><p>打开<a href=\"https://music.163.com\" target=\"_blank\" rel=\"noopener\">网易云音乐</a>官网</p>\n<p>找到你喜欢的音乐，可以看到有一个生成外链播放器的超链接，点击即可。</p>\n<p><img src=\"/2019/04/30/hexo-next插入网易云音乐/01.png\" alt=\"01\"></p>\n<p>可以设置是否自动播放和尺寸，然后把代码复制下来看如何插入外链吧!</p>\n<h1 id=\"插入外链\"><a href=\"#插入外链\" class=\"headerlink\" title=\"插入外链\"></a>插入外链</h1><p><strong>如果是插入到文章内，直接把外链放文章里面即可，Markdown是支持的.</strong></p>\n<p><strong>如果是想插入到侧边栏</strong></p>\n<p>需要编辑next/layout/_macro/sidebar.swig文件</p>\n<p>此时我们就需要使用开发者工具插入到自己合适的位置下</p>\n<p><img src=\"/2019/04/30/hexo-next插入网易云音乐/插哪.png\" alt=\"插哪\"></p>\n<p>可以看到size-overview这个div包含了很多div,你需要在sidebar.swig文件内找到这一关键词，把外链加进去即可。</p>\n<hr>\n","site":{"data":{}},"excerpt":"<p>让大爷们在阅读博客时能优哉游哉的听着歌看文章。</p>","more":"<h1 id=\"获取外链\"><a href=\"#获取外链\" class=\"headerlink\" title=\"获取外链\"></a>获取外链</h1><p>打开<a href=\"https://music.163.com\" target=\"_blank\" rel=\"noopener\">网易云音乐</a>官网</p>\n<p>找到你喜欢的音乐，可以看到有一个生成外链播放器的超链接，点击即可。</p>\n<p><img src=\"/2019/04/30/hexo-next插入网易云音乐/01.png\" alt=\"01\"></p>\n<p>可以设置是否自动播放和尺寸，然后把代码复制下来看如何插入外链吧!</p>\n<h1 id=\"插入外链\"><a href=\"#插入外链\" class=\"headerlink\" title=\"插入外链\"></a>插入外链</h1><p><strong>如果是插入到文章内，直接把外链放文章里面即可，Markdown是支持的.</strong></p>\n<p><strong>如果是想插入到侧边栏</strong></p>\n<p>需要编辑next/layout/_macro/sidebar.swig文件</p>\n<p>此时我们就需要使用开发者工具插入到自己合适的位置下</p>\n<p><img src=\"/2019/04/30/hexo-next插入网易云音乐/插哪.png\" alt=\"插哪\"></p>\n<p>可以看到size-overview这个div包含了很多div,你需要在sidebar.swig文件内找到这一关键词，把外链加进去即可。</p>\n<hr>"},{"title":"hexo博客文章插入图片","date":"2019-04-29T07:15:29.000Z","copyright":true,"_content":"\n# 前言\n\n在撰写博客文章时，我们会向文章插入一些图片，但是hexo本身要插入图片比较麻烦，这边就可以使用hexo的一款插件，它可以让我们插入图片非常简单。\n\n<!--more-->\n\n# 如何安装\n\n安装此插件很简单，你只需要在你的hexo目录下执行如下命令:\n\n~~~shell\n$ npm install hexo-asset-image --save\n~~~\n\n如果安装速度很慢可以把npm源改为国内源。\n\n[点击打开npm源改为国内源的方法](https://evanmeek.github.io/2019/04/23/ManjaroLinux%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/)\n\n在设置镜像源->npm国内源下\n\n# 如何使用\n\n## 第一步\n首先，我们得先设置主目录(博客目录)下的 **_config.yml** 文件.\n\n找到 **post_asset_folder:** 项，将其修改为 **true**\n\n## 第二步\n\n使用也十分简单，hexo-asset-image可以时hexo在创建文章时自动在文章保存目录下创建一个同名的目录。\n\n然后我们就可以把要插入的图片放入其目录，在文章中使用Markdown的插入图片语法即可。\n\n# 栗子\n\n~~~shell\n$ hexo n \"test\"\n$ mv test.jpg source/_posts/test\n~~~\n\n插入图片\n\n~~~\n![图片alt](图片地址)\n\n# ![test](./test/test.jpng)\n~~~\n\n---","source":"_posts/hexo博客文章插入图片.md","raw":"---\ntitle: hexo博客文章插入图片\ndate: 2019-04-29 15:15:29\ncategories: 折腾记录\ncopyright: true\ntags:\n  - hexo\n---\n\n# 前言\n\n在撰写博客文章时，我们会向文章插入一些图片，但是hexo本身要插入图片比较麻烦，这边就可以使用hexo的一款插件，它可以让我们插入图片非常简单。\n\n<!--more-->\n\n# 如何安装\n\n安装此插件很简单，你只需要在你的hexo目录下执行如下命令:\n\n~~~shell\n$ npm install hexo-asset-image --save\n~~~\n\n如果安装速度很慢可以把npm源改为国内源。\n\n[点击打开npm源改为国内源的方法](https://evanmeek.github.io/2019/04/23/ManjaroLinux%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/)\n\n在设置镜像源->npm国内源下\n\n# 如何使用\n\n## 第一步\n首先，我们得先设置主目录(博客目录)下的 **_config.yml** 文件.\n\n找到 **post_asset_folder:** 项，将其修改为 **true**\n\n## 第二步\n\n使用也十分简单，hexo-asset-image可以时hexo在创建文章时自动在文章保存目录下创建一个同名的目录。\n\n然后我们就可以把要插入的图片放入其目录，在文章中使用Markdown的插入图片语法即可。\n\n# 栗子\n\n~~~shell\n$ hexo n \"test\"\n$ mv test.jpg source/_posts/test\n~~~\n\n插入图片\n\n~~~\n![图片alt](图片地址)\n\n# ![test](./test/test.jpng)\n~~~\n\n---","slug":"hexo博客文章插入图片","published":1,"updated":"2019-06-16T17:09:00.787Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uza2001loums6kk2m0qa","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在撰写博客文章时，我们会向文章插入一些图片，但是hexo本身要插入图片比较麻烦，这边就可以使用hexo的一款插件，它可以让我们插入图片非常简单。</p>\n<a id=\"more\"></a>\n<h1 id=\"如何安装\"><a href=\"#如何安装\" class=\"headerlink\" title=\"如何安装\"></a>如何安装</h1><p>安装此插件很简单，你只需要在你的hexo目录下执行如下命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>\n<p>如果安装速度很慢可以把npm源改为国内源。</p>\n<p><a href=\"https://evanmeek.github.io/2019/04/23/ManjaroLinux%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/\">点击打开npm源改为国内源的方法</a></p>\n<p>在设置镜像源-&gt;npm国内源下</p>\n<h1 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h1><h2 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h2><p>首先，我们得先设置主目录(博客目录)下的 <strong>_config.yml</strong> 文件.</p>\n<p>找到 <strong>post_asset_folder:</strong> 项，将其修改为 <strong>true</strong></p>\n<h2 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h2><p>使用也十分简单，hexo-asset-image可以时hexo在创建文章时自动在文章保存目录下创建一个同名的目录。</p>\n<p>然后我们就可以把要插入的图片放入其目录，在文章中使用Markdown的插入图片语法即可。</p>\n<h1 id=\"栗子\"><a href=\"#栗子\" class=\"headerlink\" title=\"栗子\"></a>栗子</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> hexo n \"test\"</span><br><span class=\"line\"><span class=\"meta\">$</span> mv test.jpg source/_posts/test</span><br></pre></td></tr></table></figure>\n<p>插入图片</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![图片alt](图片地址)</span><br><span class=\"line\"></span><br><span class=\"line\"># ![test](./test/test.jpng)</span><br></pre></td></tr></table></figure>\n<hr>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在撰写博客文章时，我们会向文章插入一些图片，但是hexo本身要插入图片比较麻烦，这边就可以使用hexo的一款插件，它可以让我们插入图片非常简单。</p>","more":"<h1 id=\"如何安装\"><a href=\"#如何安装\" class=\"headerlink\" title=\"如何安装\"></a>如何安装</h1><p>安装此插件很简单，你只需要在你的hexo目录下执行如下命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>\n<p>如果安装速度很慢可以把npm源改为国内源。</p>\n<p><a href=\"https://evanmeek.github.io/2019/04/23/ManjaroLinux%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/\">点击打开npm源改为国内源的方法</a></p>\n<p>在设置镜像源-&gt;npm国内源下</p>\n<h1 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h1><h2 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h2><p>首先，我们得先设置主目录(博客目录)下的 <strong>_config.yml</strong> 文件.</p>\n<p>找到 <strong>post_asset_folder:</strong> 项，将其修改为 <strong>true</strong></p>\n<h2 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h2><p>使用也十分简单，hexo-asset-image可以时hexo在创建文章时自动在文章保存目录下创建一个同名的目录。</p>\n<p>然后我们就可以把要插入的图片放入其目录，在文章中使用Markdown的插入图片语法即可。</p>\n<h1 id=\"栗子\"><a href=\"#栗子\" class=\"headerlink\" title=\"栗子\"></a>栗子</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> hexo n \"test\"</span><br><span class=\"line\"><span class=\"meta\">$</span> mv test.jpg source/_posts/test</span><br></pre></td></tr></table></figure>\n<p>插入图片</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![图片alt](图片地址)</span><br><span class=\"line\"></span><br><span class=\"line\"># ![test](./test/test.jpng)</span><br></pre></td></tr></table></figure>\n<hr>"},{"title":"ManjaroLinux的安装过程","date":"2019-04-23T08:37:18.000Z","copyright":"truu","_content":"\n![桌面](ManjaroLinux的安装过程/桌面.png)\n\n## 获取镜像\nManjaroLinux官方提供了多个桌面环境的镜像，分别是:\n- XFCE \n\n特点\n\n> 系统资源低耗，快速\n\n- KDE\n\n特点\n\n> 高可定制化，消耗系统资源相比XFCE要大，开机时内存占用大概500MB+\n\n- GNOME\n\n特点\n\n> 简单易用，可定制化，美化较为简单，内存占用大\n\n并且ManjaroLinux在国内有4个镜像源可选，分别是:\n- [清华大学](https://mirrors.tuna.tsinghua.edu.cn/manjaro-cd/)\n- [中科大](http://mirrors.ustc.edu.cn/manjaro-cd/)\n- [华为](https://mirrors.huaweicloud.com/manjaro-cd/)\n- [浙江大学](http://mirrors.zju.edu.cn/manjaro/)\n\n我们也可以直接使用官方的镜像源获取镜像[Manjaro](https://manjaro.org/get-manjaro/)\n\n选择好自己要使用的桌面环境就可以开始制作启动盘了。\n\n## 制作启动盘\n\n**Windows:**\n\n推荐使用[Rufus](https://github.com/pbatard/rufus/releases/download/v3.5/rufus-3.5.exe)进行制作启动盘。\n\n下载好后直接选择镜像和要进行制作的U盘，选择开始。\n\n**开始时会让你勾选制作方式请选择dd模式**\n\n---\n\n**Linux:**\n\n只需要执行这几条命令\n\n~~~shell\n$ sudo lsblk #列出系统上的所有磁盘\n~~~\n\n找到大小磁盘大小跟你U盘差不多的那个磁盘名，一般来说都是**sdb或sda**\n\n如果看到你的U盘对应的MOUNTPOINT有内容，就代表目前磁盘是被挂在了的，你就需要先取消挂载.\n\n~~~shell\n$ sudo umount /dev/sda* #这里的sda是你U盘的磁盘名，\n~~~\n\n取消挂载之后就可以进行格式化了.\n\n~~~shell\n$ sudo mkfs.vfat /dev/sda #注意这里没有*，并且同上一样sda是你的磁盘名.\n~~~\n\n格式化完成后，进入到你下载的镜像目录下，开始进行制作启动盘.\n\n~~~shell\n$ sudo dd bs=4M if=你的iso镜像路径 of=/dev/sda\n~~~\n\n如果终端内有一些返回信息，大概是xxMB/s这样的，就代表制作完成，可以关机已U盘启动了。\n\n## 开始安装\n\n**最好是在网络稳定的环境下进行**\n\n### 第一步\n\n如果启动盘顺利制作成功，并且设置BISO为以U盘启动，你将会看到:\n\n![安装选择界面](ManjaroLinux的安装过程/安装选择界面.png)\n\n**keytable**————设置键盘布局\n\n通常默认即可\n\n**lang**————设置语言\n\n设置为zh_CN，代表汉语\n\n**driver**————设置使用的驱动是开源的还是不开源的\n\n笔记本双显卡，想省电可以用free。\n\n台式机单显卡，推荐nofree。\n\n**Boot**————选择这个就开始安装了\n\n### 第二步\n\n等待一会就会进入Manjaro的live系统(临时系统，可以用于修复系统或体验系统)\n\n![开始安装-01](ManjaroLinux的安装过程/开始安装.png)\n\n这个就是欢迎页面了，包含了些Manjaro的使用文档，支持，参加项目等等。\n\n标题栏的左边有个下拉栏，可以选择语言，然后点击Lanunch installer或者开始安装即可。\n\n点击后还可以设置一次语言，默认为中文了\n\n然后就设置位置，用于设置时区的，我们选择Asia-Shanghai，如果有联网通常会自动选择。\n\n下一步就是设置键盘布局，直接默认就好，有特殊需求请自行折腾。\n\n再下一步就是分区了，这一步是挺重要的，请认真看。\n\n默认情况下有两种选项:\n\n**抹除磁盘**\n\n将磁盘全部数据清除，分区是Manjaro自动帮你分配的.\n\n这里可以主要到有两个选项，Swap(no Hibernate)和(witch Hibernate)，它们的区别分别是，交换空间是否用于休眠功能。\n\n**手动分区**\n\n选择手动分区之后，你将看到:\n\n![分区](ManjaroLinux的安装过程/分区.png)\n\n如果你是单硬盘(也就是只有一个硬盘,mdzz)\n\n那比较简单(就算有多个也没啥)\n\n点击新建分区表，会让你选择创建哪种，默认第一种即可（新手都推荐MBR，我不是歧视...)\n\n然后就可以看到有一个空闲空间，选中它，然后可以看到**创建**按钮可以点击了\n\n然后你就点击吧...\n\n你就可以看到创建分区的窗口，我们要创建的分区是**根目录,主目录，引导**\n\n> 引导的挂载点: /boot/efi\n\n记得标记点为:boot 和 esp\n\n> 根目录的挂载点: /\n\n记得标记点为:root\n\n> 主目录的挂载点: /home\n\n![分区标识](ManjaroLinux的安装过程/分区标识.png)\n\n如果是多硬盘，在存储器那里选择另一块磁盘，把主目录安装在那。\n\n要注意的是主目录要选择扩展分区。\n\n下一步就是设置一些用户信息啊，密码啊什么的，自己看着来，这里写几点不要做的事。\n\n- 用户名首字母不要大写\n\n- 密码不要太简单\n\n下一步摘要可以看到一些信息，你看你自己的分区有没有搞错，看不懂的话直接下一步吧。。。\n\n![摘要](ManjaroLinux的安装过程/摘要.png)\n\n静静等待吧..安装好后会提示你重启，你也可以再玩一下。。不过一般是等不及直接重启看新系统了。\n\n## 设置镜像源\n\n选择一个好的源是使用Linux体验是否良好的一个重要因素。\n\n### 官方软件包源\n\n~~~shell\n$ sudo pacman-mirrors -i -c China -m rank\n$ sudo pacman -Syu\n~~~\n\n随便选一个就好，推荐中科大的(USTC).\n### Aur软件包源\n\n~~~shell\n$ sudo vim /etc/pacman.conf #不一定要使用vim，你可以使用其他编辑器，如果没有默认安装vim可以用vi\n\n$ sudo pacman -Syu\n~~~\n\n在最后一行输入:\n\n~~~\n[archlinuxcn]\nServer = https://mirrors.ustc.edu.cn/archlinuxcn/$arch\n~~~\n\n安装签名\n\n~~~shell\n$ sudo pacman -S archlinuxcn-keyring\n~~~\n\n### npm国内源\n\n首先你得先下载npm和nodejs\n\n~~~shell\n$ sudo pacman -S npm nodejs\n~~~\n\n打开终端输入:\n\n~~~\n$ npm config set registry https://registry.npm.taobao.org\n~~~\n\n测试是否成功:\n\n~~~\n$ npm config get registry\n~~~\n\n如果看到上面这个链接就对了\n\n### pip国内源\n\n修改~/.pip/pip.conf\n\n(没有则创建)\n\n修改为:\n~~~\n[global]\nindex-url = https://pypi.tuna.tsinghua.edu.cn/simple\n[install]\ntrusted-host=mirrors.aliyun.com\n~~~\n\n你也可以使用其他的源\n\n[清华](https://pypi.tuna.tsinghua.edu.cn/simple)\n\n[阿里云](http://mirrors.aliyun.com/pypi/simple/)\n\n[中国科技大学](https://pypi.mirrors.ustc.edu.cn/simple/)\n\n[豆瓣](http://pypi.douban.com/simple/)\n\n## 安装软件\n\n首先安装yay，它可以像使用pacman一样安装aur里面的软件，aur即第三方软件库\n\nInstall Yay\n\n~~~shell\n$ sudo pacman -S yay\n~~~\n\n安装Vim，VSCode，CLion，IDEA，网易云，搜狗输入法，Chrome，微信，OracleJDK8\n\nInstall Vim\n\n~~~shell\n$ sudo pacman -S Vim\n~~~\n\nInstall VSCode\n\n~~~shell\n$ sudo pacman -S visual-studio-code-bin #pacman用的是vscode的二进制\n~~~\n\nInstall OracleJDK8\n\n~~~shell\n$ yay -S jdk8 #这里就是由第三方打包了的\n~~~\n\nInstall 搜狗输入法\n\n~~~shell\n$ sudo pacman -S fcitx-im fcitx-configtool fcitx-sogoupinyin\n~~~\n\n再编辑配置文件~/.xprofile(若没有创建即可)\n\n修改为:\n\n~~~\nexport GTK_IM_MODULE=fcitx\n\nexport QT_IM_MODULE=fcitx\n\nexport XMODIFIERS=\"@im=fcitx\"\n~~~\n\n注销后就能使用搜狗输入法了\n\nInstall IDEA\n\n~~~shell\n$ yay -S intellij-idea-community-edition #社区版 IDEA\n$ yay -S intellij-idea-ultimate-edition #付费版 IDEA\n~~~\n\nInstall CLion\n\n~~~shell\n$ yay -S CLion\n~~~\n\nInstall 网易云音乐\n\n~~~shell\n$ sudo pacman -S netease-cloud-music  \n~~~\n\nInstall Chrome\n\n~~~shell\n$ sudo pacman -S google-chrome\n~~~\n\n这样就能完成基本的日常使用啦~\n\n## 使用体验总结\n\n稀稀算来，我用Linux也有一年多了，中间尝试了Ubuntu-16.04,18.04 Deepin-15.6->15.9.4 LinuxMint17 ArchLinux \n\n最终还是选择了Manjaro-kde\n\n非常建议配置不是太差的同学可以用下kde桌面，相比gnome可定制化更强（gnome更简单)，并且我感觉kde比gnome流畅些，也要比dde流畅。\n\n这个总结也没有太完善，以后还会开篇新文章写的，最后秀图。\n\n![Manjaro安装过程编写文章时截图](ManjaroLinux的安装过程/编辑文章时截图.png)\n\n---","source":"_posts/ManjaroLinux的安装过程.md","raw":"---\ntitle: 'ManjaroLinux的安装过程'\ndate: 2019-04-23 16:37:18\ncategories: 学习笔记\ntags:\n  - Linux\n  - 折腾\n  - 软件使用\ncopyright: truu\n---\n\n![桌面](ManjaroLinux的安装过程/桌面.png)\n\n## 获取镜像\nManjaroLinux官方提供了多个桌面环境的镜像，分别是:\n- XFCE \n\n特点\n\n> 系统资源低耗，快速\n\n- KDE\n\n特点\n\n> 高可定制化，消耗系统资源相比XFCE要大，开机时内存占用大概500MB+\n\n- GNOME\n\n特点\n\n> 简单易用，可定制化，美化较为简单，内存占用大\n\n并且ManjaroLinux在国内有4个镜像源可选，分别是:\n- [清华大学](https://mirrors.tuna.tsinghua.edu.cn/manjaro-cd/)\n- [中科大](http://mirrors.ustc.edu.cn/manjaro-cd/)\n- [华为](https://mirrors.huaweicloud.com/manjaro-cd/)\n- [浙江大学](http://mirrors.zju.edu.cn/manjaro/)\n\n我们也可以直接使用官方的镜像源获取镜像[Manjaro](https://manjaro.org/get-manjaro/)\n\n选择好自己要使用的桌面环境就可以开始制作启动盘了。\n\n## 制作启动盘\n\n**Windows:**\n\n推荐使用[Rufus](https://github.com/pbatard/rufus/releases/download/v3.5/rufus-3.5.exe)进行制作启动盘。\n\n下载好后直接选择镜像和要进行制作的U盘，选择开始。\n\n**开始时会让你勾选制作方式请选择dd模式**\n\n---\n\n**Linux:**\n\n只需要执行这几条命令\n\n~~~shell\n$ sudo lsblk #列出系统上的所有磁盘\n~~~\n\n找到大小磁盘大小跟你U盘差不多的那个磁盘名，一般来说都是**sdb或sda**\n\n如果看到你的U盘对应的MOUNTPOINT有内容，就代表目前磁盘是被挂在了的，你就需要先取消挂载.\n\n~~~shell\n$ sudo umount /dev/sda* #这里的sda是你U盘的磁盘名，\n~~~\n\n取消挂载之后就可以进行格式化了.\n\n~~~shell\n$ sudo mkfs.vfat /dev/sda #注意这里没有*，并且同上一样sda是你的磁盘名.\n~~~\n\n格式化完成后，进入到你下载的镜像目录下，开始进行制作启动盘.\n\n~~~shell\n$ sudo dd bs=4M if=你的iso镜像路径 of=/dev/sda\n~~~\n\n如果终端内有一些返回信息，大概是xxMB/s这样的，就代表制作完成，可以关机已U盘启动了。\n\n## 开始安装\n\n**最好是在网络稳定的环境下进行**\n\n### 第一步\n\n如果启动盘顺利制作成功，并且设置BISO为以U盘启动，你将会看到:\n\n![安装选择界面](ManjaroLinux的安装过程/安装选择界面.png)\n\n**keytable**————设置键盘布局\n\n通常默认即可\n\n**lang**————设置语言\n\n设置为zh_CN，代表汉语\n\n**driver**————设置使用的驱动是开源的还是不开源的\n\n笔记本双显卡，想省电可以用free。\n\n台式机单显卡，推荐nofree。\n\n**Boot**————选择这个就开始安装了\n\n### 第二步\n\n等待一会就会进入Manjaro的live系统(临时系统，可以用于修复系统或体验系统)\n\n![开始安装-01](ManjaroLinux的安装过程/开始安装.png)\n\n这个就是欢迎页面了，包含了些Manjaro的使用文档，支持，参加项目等等。\n\n标题栏的左边有个下拉栏，可以选择语言，然后点击Lanunch installer或者开始安装即可。\n\n点击后还可以设置一次语言，默认为中文了\n\n然后就设置位置，用于设置时区的，我们选择Asia-Shanghai，如果有联网通常会自动选择。\n\n下一步就是设置键盘布局，直接默认就好，有特殊需求请自行折腾。\n\n再下一步就是分区了，这一步是挺重要的，请认真看。\n\n默认情况下有两种选项:\n\n**抹除磁盘**\n\n将磁盘全部数据清除，分区是Manjaro自动帮你分配的.\n\n这里可以主要到有两个选项，Swap(no Hibernate)和(witch Hibernate)，它们的区别分别是，交换空间是否用于休眠功能。\n\n**手动分区**\n\n选择手动分区之后，你将看到:\n\n![分区](ManjaroLinux的安装过程/分区.png)\n\n如果你是单硬盘(也就是只有一个硬盘,mdzz)\n\n那比较简单(就算有多个也没啥)\n\n点击新建分区表，会让你选择创建哪种，默认第一种即可（新手都推荐MBR，我不是歧视...)\n\n然后就可以看到有一个空闲空间，选中它，然后可以看到**创建**按钮可以点击了\n\n然后你就点击吧...\n\n你就可以看到创建分区的窗口，我们要创建的分区是**根目录,主目录，引导**\n\n> 引导的挂载点: /boot/efi\n\n记得标记点为:boot 和 esp\n\n> 根目录的挂载点: /\n\n记得标记点为:root\n\n> 主目录的挂载点: /home\n\n![分区标识](ManjaroLinux的安装过程/分区标识.png)\n\n如果是多硬盘，在存储器那里选择另一块磁盘，把主目录安装在那。\n\n要注意的是主目录要选择扩展分区。\n\n下一步就是设置一些用户信息啊，密码啊什么的，自己看着来，这里写几点不要做的事。\n\n- 用户名首字母不要大写\n\n- 密码不要太简单\n\n下一步摘要可以看到一些信息，你看你自己的分区有没有搞错，看不懂的话直接下一步吧。。。\n\n![摘要](ManjaroLinux的安装过程/摘要.png)\n\n静静等待吧..安装好后会提示你重启，你也可以再玩一下。。不过一般是等不及直接重启看新系统了。\n\n## 设置镜像源\n\n选择一个好的源是使用Linux体验是否良好的一个重要因素。\n\n### 官方软件包源\n\n~~~shell\n$ sudo pacman-mirrors -i -c China -m rank\n$ sudo pacman -Syu\n~~~\n\n随便选一个就好，推荐中科大的(USTC).\n### Aur软件包源\n\n~~~shell\n$ sudo vim /etc/pacman.conf #不一定要使用vim，你可以使用其他编辑器，如果没有默认安装vim可以用vi\n\n$ sudo pacman -Syu\n~~~\n\n在最后一行输入:\n\n~~~\n[archlinuxcn]\nServer = https://mirrors.ustc.edu.cn/archlinuxcn/$arch\n~~~\n\n安装签名\n\n~~~shell\n$ sudo pacman -S archlinuxcn-keyring\n~~~\n\n### npm国内源\n\n首先你得先下载npm和nodejs\n\n~~~shell\n$ sudo pacman -S npm nodejs\n~~~\n\n打开终端输入:\n\n~~~\n$ npm config set registry https://registry.npm.taobao.org\n~~~\n\n测试是否成功:\n\n~~~\n$ npm config get registry\n~~~\n\n如果看到上面这个链接就对了\n\n### pip国内源\n\n修改~/.pip/pip.conf\n\n(没有则创建)\n\n修改为:\n~~~\n[global]\nindex-url = https://pypi.tuna.tsinghua.edu.cn/simple\n[install]\ntrusted-host=mirrors.aliyun.com\n~~~\n\n你也可以使用其他的源\n\n[清华](https://pypi.tuna.tsinghua.edu.cn/simple)\n\n[阿里云](http://mirrors.aliyun.com/pypi/simple/)\n\n[中国科技大学](https://pypi.mirrors.ustc.edu.cn/simple/)\n\n[豆瓣](http://pypi.douban.com/simple/)\n\n## 安装软件\n\n首先安装yay，它可以像使用pacman一样安装aur里面的软件，aur即第三方软件库\n\nInstall Yay\n\n~~~shell\n$ sudo pacman -S yay\n~~~\n\n安装Vim，VSCode，CLion，IDEA，网易云，搜狗输入法，Chrome，微信，OracleJDK8\n\nInstall Vim\n\n~~~shell\n$ sudo pacman -S Vim\n~~~\n\nInstall VSCode\n\n~~~shell\n$ sudo pacman -S visual-studio-code-bin #pacman用的是vscode的二进制\n~~~\n\nInstall OracleJDK8\n\n~~~shell\n$ yay -S jdk8 #这里就是由第三方打包了的\n~~~\n\nInstall 搜狗输入法\n\n~~~shell\n$ sudo pacman -S fcitx-im fcitx-configtool fcitx-sogoupinyin\n~~~\n\n再编辑配置文件~/.xprofile(若没有创建即可)\n\n修改为:\n\n~~~\nexport GTK_IM_MODULE=fcitx\n\nexport QT_IM_MODULE=fcitx\n\nexport XMODIFIERS=\"@im=fcitx\"\n~~~\n\n注销后就能使用搜狗输入法了\n\nInstall IDEA\n\n~~~shell\n$ yay -S intellij-idea-community-edition #社区版 IDEA\n$ yay -S intellij-idea-ultimate-edition #付费版 IDEA\n~~~\n\nInstall CLion\n\n~~~shell\n$ yay -S CLion\n~~~\n\nInstall 网易云音乐\n\n~~~shell\n$ sudo pacman -S netease-cloud-music  \n~~~\n\nInstall Chrome\n\n~~~shell\n$ sudo pacman -S google-chrome\n~~~\n\n这样就能完成基本的日常使用啦~\n\n## 使用体验总结\n\n稀稀算来，我用Linux也有一年多了，中间尝试了Ubuntu-16.04,18.04 Deepin-15.6->15.9.4 LinuxMint17 ArchLinux \n\n最终还是选择了Manjaro-kde\n\n非常建议配置不是太差的同学可以用下kde桌面，相比gnome可定制化更强（gnome更简单)，并且我感觉kde比gnome流畅些，也要比dde流畅。\n\n这个总结也没有太完善，以后还会开篇新文章写的，最后秀图。\n\n![Manjaro安装过程编写文章时截图](ManjaroLinux的安装过程/编辑文章时截图.png)\n\n---","slug":"ManjaroLinux的安装过程","published":1,"updated":"2019-06-16T17:09:00.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uza3001poums1xjklqsf","content":"<p><img src=\"/2019/04/23/ManjaroLinux的安装过程/桌面.png\" alt=\"桌面\"></p>\n<h2 id=\"获取镜像\"><a href=\"#获取镜像\" class=\"headerlink\" title=\"获取镜像\"></a>获取镜像</h2><p>ManjaroLinux官方提供了多个桌面环境的镜像，分别是:</p>\n<ul>\n<li>XFCE </li>\n</ul>\n<p>特点</p>\n<blockquote>\n<p>系统资源低耗，快速</p>\n</blockquote>\n<ul>\n<li>KDE</li>\n</ul>\n<p>特点</p>\n<blockquote>\n<p>高可定制化，消耗系统资源相比XFCE要大，开机时内存占用大概500MB+</p>\n</blockquote>\n<ul>\n<li>GNOME</li>\n</ul>\n<p>特点</p>\n<blockquote>\n<p>简单易用，可定制化，美化较为简单，内存占用大</p>\n</blockquote>\n<p>并且ManjaroLinux在国内有4个镜像源可选，分别是:</p>\n<ul>\n<li><a href=\"https://mirrors.tuna.tsinghua.edu.cn/manjaro-cd/\" target=\"_blank\" rel=\"noopener\">清华大学</a></li>\n<li><a href=\"http://mirrors.ustc.edu.cn/manjaro-cd/\" target=\"_blank\" rel=\"noopener\">中科大</a></li>\n<li><a href=\"https://mirrors.huaweicloud.com/manjaro-cd/\" target=\"_blank\" rel=\"noopener\">华为</a></li>\n<li><a href=\"http://mirrors.zju.edu.cn/manjaro/\" target=\"_blank\" rel=\"noopener\">浙江大学</a></li>\n</ul>\n<p>我们也可以直接使用官方的镜像源获取镜像<a href=\"https://manjaro.org/get-manjaro/\" target=\"_blank\" rel=\"noopener\">Manjaro</a></p>\n<p>选择好自己要使用的桌面环境就可以开始制作启动盘了。</p>\n<h2 id=\"制作启动盘\"><a href=\"#制作启动盘\" class=\"headerlink\" title=\"制作启动盘\"></a>制作启动盘</h2><p><strong>Windows:</strong></p>\n<p>推荐使用<a href=\"https://github.com/pbatard/rufus/releases/download/v3.5/rufus-3.5.exe\" target=\"_blank\" rel=\"noopener\">Rufus</a>进行制作启动盘。</p>\n<p>下载好后直接选择镜像和要进行制作的U盘，选择开始。</p>\n<p><strong>开始时会让你勾选制作方式请选择dd模式</strong></p>\n<hr>\n<p><strong>Linux:</strong></p>\n<p>只需要执行这几条命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo lsblk #列出系统上的所有磁盘</span><br></pre></td></tr></table></figure>\n<p>找到大小磁盘大小跟你U盘差不多的那个磁盘名，一般来说都是<strong>sdb或sda</strong></p>\n<p>如果看到你的U盘对应的MOUNTPOINT有内容，就代表目前磁盘是被挂在了的，你就需要先取消挂载.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo umount /dev/sda* #这里的sda是你U盘的磁盘名，</span><br></pre></td></tr></table></figure>\n<p>取消挂载之后就可以进行格式化了.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo mkfs.vfat /dev/sda #注意这里没有*，并且同上一样sda是你的磁盘名.</span><br></pre></td></tr></table></figure>\n<p>格式化完成后，进入到你下载的镜像目录下，开始进行制作启动盘.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo dd bs=4M if=你的iso镜像路径 of=/dev/sda</span><br></pre></td></tr></table></figure>\n<p>如果终端内有一些返回信息，大概是xxMB/s这样的，就代表制作完成，可以关机已U盘启动了。</p>\n<h2 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h2><p><strong>最好是在网络稳定的环境下进行</strong></p>\n<h3 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h3><p>如果启动盘顺利制作成功，并且设置BISO为以U盘启动，你将会看到:</p>\n<p><img src=\"/2019/04/23/ManjaroLinux的安装过程/安装选择界面.png\" alt=\"安装选择界面\"></p>\n<p><strong>keytable</strong>————设置键盘布局</p>\n<p>通常默认即可</p>\n<p><strong>lang</strong>————设置语言</p>\n<p>设置为zh_CN，代表汉语</p>\n<p><strong>driver</strong>————设置使用的驱动是开源的还是不开源的</p>\n<p>笔记本双显卡，想省电可以用free。</p>\n<p>台式机单显卡，推荐nofree。</p>\n<p><strong>Boot</strong>————选择这个就开始安装了</p>\n<h3 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h3><p>等待一会就会进入Manjaro的live系统(临时系统，可以用于修复系统或体验系统)</p>\n<p><img src=\"/2019/04/23/ManjaroLinux的安装过程/开始安装.png\" alt=\"开始安装-01\"></p>\n<p>这个就是欢迎页面了，包含了些Manjaro的使用文档，支持，参加项目等等。</p>\n<p>标题栏的左边有个下拉栏，可以选择语言，然后点击Lanunch installer或者开始安装即可。</p>\n<p>点击后还可以设置一次语言，默认为中文了</p>\n<p>然后就设置位置，用于设置时区的，我们选择Asia-Shanghai，如果有联网通常会自动选择。</p>\n<p>下一步就是设置键盘布局，直接默认就好，有特殊需求请自行折腾。</p>\n<p>再下一步就是分区了，这一步是挺重要的，请认真看。</p>\n<p>默认情况下有两种选项:</p>\n<p><strong>抹除磁盘</strong></p>\n<p>将磁盘全部数据清除，分区是Manjaro自动帮你分配的.</p>\n<p>这里可以主要到有两个选项，Swap(no Hibernate)和(witch Hibernate)，它们的区别分别是，交换空间是否用于休眠功能。</p>\n<p><strong>手动分区</strong></p>\n<p>选择手动分区之后，你将看到:</p>\n<p><img src=\"/2019/04/23/ManjaroLinux的安装过程/分区.png\" alt=\"分区\"></p>\n<p>如果你是单硬盘(也就是只有一个硬盘,mdzz)</p>\n<p>那比较简单(就算有多个也没啥)</p>\n<p>点击新建分区表，会让你选择创建哪种，默认第一种即可（新手都推荐MBR，我不是歧视…)</p>\n<p>然后就可以看到有一个空闲空间，选中它，然后可以看到<strong>创建</strong>按钮可以点击了</p>\n<p>然后你就点击吧…</p>\n<p>你就可以看到创建分区的窗口，我们要创建的分区是<strong>根目录,主目录，引导</strong></p>\n<blockquote>\n<p>引导的挂载点: /boot/efi</p>\n</blockquote>\n<p>记得标记点为:boot 和 esp</p>\n<blockquote>\n<p>根目录的挂载点: /</p>\n</blockquote>\n<p>记得标记点为:root</p>\n<blockquote>\n<p>主目录的挂载点: /home</p>\n</blockquote>\n<p><img src=\"/2019/04/23/ManjaroLinux的安装过程/分区标识.png\" alt=\"分区标识\"></p>\n<p>如果是多硬盘，在存储器那里选择另一块磁盘，把主目录安装在那。</p>\n<p>要注意的是主目录要选择扩展分区。</p>\n<p>下一步就是设置一些用户信息啊，密码啊什么的，自己看着来，这里写几点不要做的事。</p>\n<ul>\n<li><p>用户名首字母不要大写</p>\n</li>\n<li><p>密码不要太简单</p>\n</li>\n</ul>\n<p>下一步摘要可以看到一些信息，你看你自己的分区有没有搞错，看不懂的话直接下一步吧。。。</p>\n<p><img src=\"/2019/04/23/ManjaroLinux的安装过程/摘要.png\" alt=\"摘要\"></p>\n<p>静静等待吧..安装好后会提示你重启，你也可以再玩一下。。不过一般是等不及直接重启看新系统了。</p>\n<h2 id=\"设置镜像源\"><a href=\"#设置镜像源\" class=\"headerlink\" title=\"设置镜像源\"></a>设置镜像源</h2><p>选择一个好的源是使用Linux体验是否良好的一个重要因素。</p>\n<h3 id=\"官方软件包源\"><a href=\"#官方软件包源\" class=\"headerlink\" title=\"官方软件包源\"></a>官方软件包源</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo pacman-mirrors -i -c China -m rank</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo pacman -Syu</span><br></pre></td></tr></table></figure>\n<p>随便选一个就好，推荐中科大的(USTC).</p>\n<h3 id=\"Aur软件包源\"><a href=\"#Aur软件包源\" class=\"headerlink\" title=\"Aur软件包源\"></a>Aur软件包源</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo vim /etc/pacman.conf #不一定要使用vim，你可以使用其他编辑器，如果没有默认安装vim可以用vi</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span> sudo pacman -Syu</span><br></pre></td></tr></table></figure>\n<p>在最后一行输入:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[archlinuxcn]</span><br><span class=\"line\">Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch</span><br></pre></td></tr></table></figure>\n<p>安装签名</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure>\n<h3 id=\"npm国内源\"><a href=\"#npm国内源\" class=\"headerlink\" title=\"npm国内源\"></a>npm国内源</h3><p>首先你得先下载npm和nodejs</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo pacman -S npm nodejs</span><br></pre></td></tr></table></figure>\n<p>打开终端输入:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>测试是否成功:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm config get registry</span><br></pre></td></tr></table></figure>\n<p>如果看到上面这个链接就对了</p>\n<h3 id=\"pip国内源\"><a href=\"#pip国内源\" class=\"headerlink\" title=\"pip国内源\"></a>pip国内源</h3><p>修改~/.pip/pip.conf</p>\n<p>(没有则创建)</p>\n<p>修改为:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[global]</span><br><span class=\"line\">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class=\"line\">[install]</span><br><span class=\"line\">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure></p>\n<p>你也可以使用其他的源</p>\n<p><a href=\"https://pypi.tuna.tsinghua.edu.cn/simple\" target=\"_blank\" rel=\"noopener\">清华</a></p>\n<p><a href=\"http://mirrors.aliyun.com/pypi/simple/\" target=\"_blank\" rel=\"noopener\">阿里云</a></p>\n<p><a href=\"https://pypi.mirrors.ustc.edu.cn/simple/\" target=\"_blank\" rel=\"noopener\">中国科技大学</a></p>\n<p><a href=\"http://pypi.douban.com/simple/\" target=\"_blank\" rel=\"noopener\">豆瓣</a></p>\n<h2 id=\"安装软件\"><a href=\"#安装软件\" class=\"headerlink\" title=\"安装软件\"></a>安装软件</h2><p>首先安装yay，它可以像使用pacman一样安装aur里面的软件，aur即第三方软件库</p>\n<p>Install Yay</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo pacman -S yay</span><br></pre></td></tr></table></figure>\n<p>安装Vim，VSCode，CLion，IDEA，网易云，搜狗输入法，Chrome，微信，OracleJDK8</p>\n<p>Install Vim</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo pacman -S Vim</span><br></pre></td></tr></table></figure>\n<p>Install VSCode</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo pacman -S visual-studio-code-bin #pacman用的是vscode的二进制</span><br></pre></td></tr></table></figure>\n<p>Install OracleJDK8</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> yay -S jdk8 #这里就是由第三方打包了的</span><br></pre></td></tr></table></figure>\n<p>Install 搜狗输入法</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo pacman -S fcitx-im fcitx-configtool fcitx-sogoupinyin</span><br></pre></td></tr></table></figure>\n<p>再编辑配置文件~/.xprofile(若没有创建即可)</p>\n<p>修改为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export GTK_IM_MODULE=fcitx</span><br><span class=\"line\"></span><br><span class=\"line\">export QT_IM_MODULE=fcitx</span><br><span class=\"line\"></span><br><span class=\"line\">export XMODIFIERS=&quot;@im=fcitx&quot;</span><br></pre></td></tr></table></figure>\n<p>注销后就能使用搜狗输入法了</p>\n<p>Install IDEA</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> yay -S intellij-idea-community-edition #社区版 IDEA</span><br><span class=\"line\"><span class=\"meta\">$</span> yay -S intellij-idea-ultimate-edition #付费版 IDEA</span><br></pre></td></tr></table></figure>\n<p>Install CLion</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> yay -S CLion</span><br></pre></td></tr></table></figure>\n<p>Install 网易云音乐</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo pacman -S netease-cloud-music</span><br></pre></td></tr></table></figure>\n<p>Install Chrome</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo pacman -S google-chrome</span><br></pre></td></tr></table></figure>\n<p>这样就能完成基本的日常使用啦~</p>\n<h2 id=\"使用体验总结\"><a href=\"#使用体验总结\" class=\"headerlink\" title=\"使用体验总结\"></a>使用体验总结</h2><p>稀稀算来，我用Linux也有一年多了，中间尝试了Ubuntu-16.04,18.04 Deepin-15.6-&gt;15.9.4 LinuxMint17 ArchLinux </p>\n<p>最终还是选择了Manjaro-kde</p>\n<p>非常建议配置不是太差的同学可以用下kde桌面，相比gnome可定制化更强（gnome更简单)，并且我感觉kde比gnome流畅些，也要比dde流畅。</p>\n<p>这个总结也没有太完善，以后还会开篇新文章写的，最后秀图。</p>\n<p><img src=\"/2019/04/23/ManjaroLinux的安装过程/编辑文章时截图.png\" alt=\"Manjaro安装过程编写文章时截图\"></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/2019/04/23/ManjaroLinux的安装过程/桌面.png\" alt=\"桌面\"></p>\n<h2 id=\"获取镜像\"><a href=\"#获取镜像\" class=\"headerlink\" title=\"获取镜像\"></a>获取镜像</h2><p>ManjaroLinux官方提供了多个桌面环境的镜像，分别是:</p>\n<ul>\n<li>XFCE </li>\n</ul>\n<p>特点</p>\n<blockquote>\n<p>系统资源低耗，快速</p>\n</blockquote>\n<ul>\n<li>KDE</li>\n</ul>\n<p>特点</p>\n<blockquote>\n<p>高可定制化，消耗系统资源相比XFCE要大，开机时内存占用大概500MB+</p>\n</blockquote>\n<ul>\n<li>GNOME</li>\n</ul>\n<p>特点</p>\n<blockquote>\n<p>简单易用，可定制化，美化较为简单，内存占用大</p>\n</blockquote>\n<p>并且ManjaroLinux在国内有4个镜像源可选，分别是:</p>\n<ul>\n<li><a href=\"https://mirrors.tuna.tsinghua.edu.cn/manjaro-cd/\" target=\"_blank\" rel=\"noopener\">清华大学</a></li>\n<li><a href=\"http://mirrors.ustc.edu.cn/manjaro-cd/\" target=\"_blank\" rel=\"noopener\">中科大</a></li>\n<li><a href=\"https://mirrors.huaweicloud.com/manjaro-cd/\" target=\"_blank\" rel=\"noopener\">华为</a></li>\n<li><a href=\"http://mirrors.zju.edu.cn/manjaro/\" target=\"_blank\" rel=\"noopener\">浙江大学</a></li>\n</ul>\n<p>我们也可以直接使用官方的镜像源获取镜像<a href=\"https://manjaro.org/get-manjaro/\" target=\"_blank\" rel=\"noopener\">Manjaro</a></p>\n<p>选择好自己要使用的桌面环境就可以开始制作启动盘了。</p>\n<h2 id=\"制作启动盘\"><a href=\"#制作启动盘\" class=\"headerlink\" title=\"制作启动盘\"></a>制作启动盘</h2><p><strong>Windows:</strong></p>\n<p>推荐使用<a href=\"https://github.com/pbatard/rufus/releases/download/v3.5/rufus-3.5.exe\" target=\"_blank\" rel=\"noopener\">Rufus</a>进行制作启动盘。</p>\n<p>下载好后直接选择镜像和要进行制作的U盘，选择开始。</p>\n<p><strong>开始时会让你勾选制作方式请选择dd模式</strong></p>\n<hr>\n<p><strong>Linux:</strong></p>\n<p>只需要执行这几条命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo lsblk #列出系统上的所有磁盘</span><br></pre></td></tr></table></figure>\n<p>找到大小磁盘大小跟你U盘差不多的那个磁盘名，一般来说都是<strong>sdb或sda</strong></p>\n<p>如果看到你的U盘对应的MOUNTPOINT有内容，就代表目前磁盘是被挂在了的，你就需要先取消挂载.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo umount /dev/sda* #这里的sda是你U盘的磁盘名，</span><br></pre></td></tr></table></figure>\n<p>取消挂载之后就可以进行格式化了.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo mkfs.vfat /dev/sda #注意这里没有*，并且同上一样sda是你的磁盘名.</span><br></pre></td></tr></table></figure>\n<p>格式化完成后，进入到你下载的镜像目录下，开始进行制作启动盘.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo dd bs=4M if=你的iso镜像路径 of=/dev/sda</span><br></pre></td></tr></table></figure>\n<p>如果终端内有一些返回信息，大概是xxMB/s这样的，就代表制作完成，可以关机已U盘启动了。</p>\n<h2 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h2><p><strong>最好是在网络稳定的环境下进行</strong></p>\n<h3 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h3><p>如果启动盘顺利制作成功，并且设置BISO为以U盘启动，你将会看到:</p>\n<p><img src=\"/2019/04/23/ManjaroLinux的安装过程/安装选择界面.png\" alt=\"安装选择界面\"></p>\n<p><strong>keytable</strong>————设置键盘布局</p>\n<p>通常默认即可</p>\n<p><strong>lang</strong>————设置语言</p>\n<p>设置为zh_CN，代表汉语</p>\n<p><strong>driver</strong>————设置使用的驱动是开源的还是不开源的</p>\n<p>笔记本双显卡，想省电可以用free。</p>\n<p>台式机单显卡，推荐nofree。</p>\n<p><strong>Boot</strong>————选择这个就开始安装了</p>\n<h3 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h3><p>等待一会就会进入Manjaro的live系统(临时系统，可以用于修复系统或体验系统)</p>\n<p><img src=\"/2019/04/23/ManjaroLinux的安装过程/开始安装.png\" alt=\"开始安装-01\"></p>\n<p>这个就是欢迎页面了，包含了些Manjaro的使用文档，支持，参加项目等等。</p>\n<p>标题栏的左边有个下拉栏，可以选择语言，然后点击Lanunch installer或者开始安装即可。</p>\n<p>点击后还可以设置一次语言，默认为中文了</p>\n<p>然后就设置位置，用于设置时区的，我们选择Asia-Shanghai，如果有联网通常会自动选择。</p>\n<p>下一步就是设置键盘布局，直接默认就好，有特殊需求请自行折腾。</p>\n<p>再下一步就是分区了，这一步是挺重要的，请认真看。</p>\n<p>默认情况下有两种选项:</p>\n<p><strong>抹除磁盘</strong></p>\n<p>将磁盘全部数据清除，分区是Manjaro自动帮你分配的.</p>\n<p>这里可以主要到有两个选项，Swap(no Hibernate)和(witch Hibernate)，它们的区别分别是，交换空间是否用于休眠功能。</p>\n<p><strong>手动分区</strong></p>\n<p>选择手动分区之后，你将看到:</p>\n<p><img src=\"/2019/04/23/ManjaroLinux的安装过程/分区.png\" alt=\"分区\"></p>\n<p>如果你是单硬盘(也就是只有一个硬盘,mdzz)</p>\n<p>那比较简单(就算有多个也没啥)</p>\n<p>点击新建分区表，会让你选择创建哪种，默认第一种即可（新手都推荐MBR，我不是歧视…)</p>\n<p>然后就可以看到有一个空闲空间，选中它，然后可以看到<strong>创建</strong>按钮可以点击了</p>\n<p>然后你就点击吧…</p>\n<p>你就可以看到创建分区的窗口，我们要创建的分区是<strong>根目录,主目录，引导</strong></p>\n<blockquote>\n<p>引导的挂载点: /boot/efi</p>\n</blockquote>\n<p>记得标记点为:boot 和 esp</p>\n<blockquote>\n<p>根目录的挂载点: /</p>\n</blockquote>\n<p>记得标记点为:root</p>\n<blockquote>\n<p>主目录的挂载点: /home</p>\n</blockquote>\n<p><img src=\"/2019/04/23/ManjaroLinux的安装过程/分区标识.png\" alt=\"分区标识\"></p>\n<p>如果是多硬盘，在存储器那里选择另一块磁盘，把主目录安装在那。</p>\n<p>要注意的是主目录要选择扩展分区。</p>\n<p>下一步就是设置一些用户信息啊，密码啊什么的，自己看着来，这里写几点不要做的事。</p>\n<ul>\n<li><p>用户名首字母不要大写</p>\n</li>\n<li><p>密码不要太简单</p>\n</li>\n</ul>\n<p>下一步摘要可以看到一些信息，你看你自己的分区有没有搞错，看不懂的话直接下一步吧。。。</p>\n<p><img src=\"/2019/04/23/ManjaroLinux的安装过程/摘要.png\" alt=\"摘要\"></p>\n<p>静静等待吧..安装好后会提示你重启，你也可以再玩一下。。不过一般是等不及直接重启看新系统了。</p>\n<h2 id=\"设置镜像源\"><a href=\"#设置镜像源\" class=\"headerlink\" title=\"设置镜像源\"></a>设置镜像源</h2><p>选择一个好的源是使用Linux体验是否良好的一个重要因素。</p>\n<h3 id=\"官方软件包源\"><a href=\"#官方软件包源\" class=\"headerlink\" title=\"官方软件包源\"></a>官方软件包源</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo pacman-mirrors -i -c China -m rank</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo pacman -Syu</span><br></pre></td></tr></table></figure>\n<p>随便选一个就好，推荐中科大的(USTC).</p>\n<h3 id=\"Aur软件包源\"><a href=\"#Aur软件包源\" class=\"headerlink\" title=\"Aur软件包源\"></a>Aur软件包源</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo vim /etc/pacman.conf #不一定要使用vim，你可以使用其他编辑器，如果没有默认安装vim可以用vi</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span> sudo pacman -Syu</span><br></pre></td></tr></table></figure>\n<p>在最后一行输入:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[archlinuxcn]</span><br><span class=\"line\">Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch</span><br></pre></td></tr></table></figure>\n<p>安装签名</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure>\n<h3 id=\"npm国内源\"><a href=\"#npm国内源\" class=\"headerlink\" title=\"npm国内源\"></a>npm国内源</h3><p>首先你得先下载npm和nodejs</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo pacman -S npm nodejs</span><br></pre></td></tr></table></figure>\n<p>打开终端输入:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>测试是否成功:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm config get registry</span><br></pre></td></tr></table></figure>\n<p>如果看到上面这个链接就对了</p>\n<h3 id=\"pip国内源\"><a href=\"#pip国内源\" class=\"headerlink\" title=\"pip国内源\"></a>pip国内源</h3><p>修改~/.pip/pip.conf</p>\n<p>(没有则创建)</p>\n<p>修改为:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[global]</span><br><span class=\"line\">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class=\"line\">[install]</span><br><span class=\"line\">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure></p>\n<p>你也可以使用其他的源</p>\n<p><a href=\"https://pypi.tuna.tsinghua.edu.cn/simple\" target=\"_blank\" rel=\"noopener\">清华</a></p>\n<p><a href=\"http://mirrors.aliyun.com/pypi/simple/\" target=\"_blank\" rel=\"noopener\">阿里云</a></p>\n<p><a href=\"https://pypi.mirrors.ustc.edu.cn/simple/\" target=\"_blank\" rel=\"noopener\">中国科技大学</a></p>\n<p><a href=\"http://pypi.douban.com/simple/\" target=\"_blank\" rel=\"noopener\">豆瓣</a></p>\n<h2 id=\"安装软件\"><a href=\"#安装软件\" class=\"headerlink\" title=\"安装软件\"></a>安装软件</h2><p>首先安装yay，它可以像使用pacman一样安装aur里面的软件，aur即第三方软件库</p>\n<p>Install Yay</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo pacman -S yay</span><br></pre></td></tr></table></figure>\n<p>安装Vim，VSCode，CLion，IDEA，网易云，搜狗输入法，Chrome，微信，OracleJDK8</p>\n<p>Install Vim</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo pacman -S Vim</span><br></pre></td></tr></table></figure>\n<p>Install VSCode</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo pacman -S visual-studio-code-bin #pacman用的是vscode的二进制</span><br></pre></td></tr></table></figure>\n<p>Install OracleJDK8</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> yay -S jdk8 #这里就是由第三方打包了的</span><br></pre></td></tr></table></figure>\n<p>Install 搜狗输入法</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo pacman -S fcitx-im fcitx-configtool fcitx-sogoupinyin</span><br></pre></td></tr></table></figure>\n<p>再编辑配置文件~/.xprofile(若没有创建即可)</p>\n<p>修改为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export GTK_IM_MODULE=fcitx</span><br><span class=\"line\"></span><br><span class=\"line\">export QT_IM_MODULE=fcitx</span><br><span class=\"line\"></span><br><span class=\"line\">export XMODIFIERS=&quot;@im=fcitx&quot;</span><br></pre></td></tr></table></figure>\n<p>注销后就能使用搜狗输入法了</p>\n<p>Install IDEA</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> yay -S intellij-idea-community-edition #社区版 IDEA</span><br><span class=\"line\"><span class=\"meta\">$</span> yay -S intellij-idea-ultimate-edition #付费版 IDEA</span><br></pre></td></tr></table></figure>\n<p>Install CLion</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> yay -S CLion</span><br></pre></td></tr></table></figure>\n<p>Install 网易云音乐</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo pacman -S netease-cloud-music</span><br></pre></td></tr></table></figure>\n<p>Install Chrome</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo pacman -S google-chrome</span><br></pre></td></tr></table></figure>\n<p>这样就能完成基本的日常使用啦~</p>\n<h2 id=\"使用体验总结\"><a href=\"#使用体验总结\" class=\"headerlink\" title=\"使用体验总结\"></a>使用体验总结</h2><p>稀稀算来，我用Linux也有一年多了，中间尝试了Ubuntu-16.04,18.04 Deepin-15.6-&gt;15.9.4 LinuxMint17 ArchLinux </p>\n<p>最终还是选择了Manjaro-kde</p>\n<p>非常建议配置不是太差的同学可以用下kde桌面，相比gnome可定制化更强（gnome更简单)，并且我感觉kde比gnome流畅些，也要比dde流畅。</p>\n<p>这个总结也没有太完善，以后还会开篇新文章写的，最后秀图。</p>\n<p><img src=\"/2019/04/23/ManjaroLinux的安装过程/编辑文章时截图.png\" alt=\"Manjaro安装过程编写文章时截图\"></p>\n<hr>\n"},{"title":"如何用hexo+github-pages搭建博客","date":"2019-04-29T14:56:54.000Z","copyright":true,"_content":"\n成功搭建博客之后，想让一起学习的小伙伴也学习搭建一下，所以就有了此篇文章.\n\n<!--more-->\n\n![逆光](如何用hexo-github-pages搭建博客/逆光.jpg)\n\n# 为何选择hexo\n\n- hexo博客框架的网上资料较多，技术较为成熟.\n\n- hexo使用Makrdown进行渲染.\n\n- hexo只需几步就可部署博客.\n\n- hexo具有丰富的主题/插件可选.\n\n# 安装hexo\n\n## 安装Nodejs,Git\n\n要安装hexo必须得安装Nodejs和Git，这里只提供GNU/Linux的过程。\n\n大部分发行版自带Git,Nodejs只需要一条命令:\n\n**apt**\n\n~~~shell\n$ sudo apt install nodejs npm\n~~~\n\n**pacman**\n\n~~~shell\n$ sudo pacman -S nodejs npm\n~~~\n## 配置Nodejs\n\n**安装完成Nodejs和Git后还需要设置npm的软件源.**\n\n在任意目录下执行如下命令:\n\n~~~shell\n$ npm config set registry https://registry.npm.taobao.org\n~~~\n\n执行如下命令测试是否设置成功(若范围淘宝的npm镜像源地址则成功):\n\n~~~shell\n$ npm config get registry\n~~~\n\n## 配置Git\n\n### **注册Github**\n\n[注册Github](https://github.com/join)\n\n### **创建仓库**\n\n[创建Github仓库](https://github.com/new)\n\n注意: 仓库名必须是**name.github.io**\n\n例如我的 evanmeek.github.io\n\n![创建Github仓库](如何用hexo-github-pages搭建博客/创建仓库.png)\n\n\n需要设置两点:\n\n- Git身份标识\n\n~~~shell\n$ git config --global user.email \"你的邮箱\"\n$ git config --global user.name \"你的名字\"\n~~~\n\n推荐把邮箱和名字设置为Github上的邮箱和名字相同\n\n\n- SSH密钥\n\n如果是第一次使用Git，那么默认是没有SSH密钥的，执行如下命令查看:\n\n~~~shell\n$ ls ~/.ssh\n~~~\n\n若没有则创建新的密钥\n\n~~~shell\n$ ssh-keygen -t rsa -C \"你的邮箱\"\n~~~\n\n创建密钥时会提示你输入一个密码，这样在用这里密钥时就需要输入密码，若不需要直接一路回车吧。\n\n创建完成后，你会在~/.ssh内看到两个文件\n\n![ssh目录](如何用hexo-github-pages搭建博客/ssh目录.png)\n\n分别是私钥(id_rsa),公钥(id_rsa.pub)\n\n下一步则是需要在Github中添加刚刚生成的密钥\n\n首先登陆Github,打开设置.\n\n如图所示：\n\n![登陆Github](如何用hexo-github-pages搭建博客/打开设置.png)\n\n下一步找到SSH选项\n\n如图所示：\n\n![设置SSH](如何用hexo-github-pages搭建博客/设置SSH.png)\n\n下一步导入公钥\n\n![导入密钥](如何用hexo-github-pages搭建博客/导入密钥.png)\n\n复制公钥的内容复制到key文本框内，Title随便写一个，可以写你的设备名\n\n~~~shell\n$ cat ~/.ssh/id_rsa.pub\n~~~\n\n## 安装hexo\n\n前面安装完Nodejs和Git之后可以通过一条命令安装hexo\n\n**要使用sudo提权**\n\n执行如下命令:\n\n~~~shell\n$ npm install -g hexo-cli\n~~~\n\n看到Done!之后则为安装成功.\n\n# 开始搭建\n\n## 初始化hexo博客\n\n使用如下命令初始化博客\n\n~~~shell\n$ hexo init <目录>\n~~~\n\n![hexoinit](如何用hexo-github-pages搭建博客/hexoinit.png)\n\n初始化完成之后目录结构大概是这样的:\n\n~~~\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n~~~\n\n下面分别讲下这些文件或目录分别存放了些什么。\n\n主配置文件: **_config.yml**\n\n> 主要用于博客的配置信息，后面还会在themes里看到_config.yml，和这个不同，我们只要记住这个是博客的主配置文件.\n\n插件信息: **package.json**\n\n> 包含了当前hexo博客中安装了哪些插件.\n\n模板目录: **scaffolds/**\n\n> 里面包含了可定制的模板文件，在创建或生成新的博文时就会按照这里的模板进行渲染.\n\n资源目录: **source/**\n\n> 在这里包含了你的一些资源文件，例如文章源码，图片等，要注意的是_posts目录并不会在生成渲染时并不会被拷贝到public目录下.\n\n主题目录: **themes/**\n\n> 主题目录，所有的主题都丢在这里。\n\n---\n\n## 生成博客\n\n执行如下命令创建一篇博文:\n\n~~~shell\n$ hexo n \"文章名\"\n~~~\n\nhexo会在source/_posts目录下创建一个markdown文档，这样就可以开始编写了!\n\n这一步用于生成静态文件(就是把md转为html的操作)\n\n**要在网站目录(就是初始化的目录下)下执行**\n\n~~~shell\n$ hexo generate\n~~~\n\n这个命令可以简化，并且还可以带两个参数\n\n简化+参数:\n~~~shell\n$ hexo g -d # 生成+部署(也就是推送到github pages去了，你们先不要执行这一步)\n\n$ hexo g -w # 可以监视有哪些文件被生成了\n~~~\n\n---\n\n# 配置hexo\n\n这里的user.email和user.name可以不是Github的邮箱或名字，但推荐设置为Github相同.\n\n下面配置hexo，对于hexo的修改，可以通过_config.yml文件修改大多数设置。\n\n找到deploy项\n\n修改为:\n\n![deploy](如何用hexo-github-pages搭建博客/deploy.png)\n\n**type为git不能为大写**\n\n\n\n---\n\n## 部署博客\n\n部署博客这里只讲两种，分别是通过Git推送到远程代码托管中心(Github)和本地部署\n\n**本地部署**\n\n\n执行如下命令:\n~~~shell\n$ npm install hexo-deployer-git --save\n~~~\n\n~~~shell\n$ hexo s\n~~~\n\n执行完后可以通过localhost:4000进行[查看](localhost:4000).\n\n![本地部署](如何用hexo-github-pages搭建博客/本地部署.png)\n\n**部署到Github**\n\n~~~shell\n$ hexo d\n~~~\n\n这样就可以部署到Github了，通过https://你的Github用户名.github.io访问\n\n# 寻找主题\n\n[Hexo主题](https://hexo.io/themes/)\n\n把主题clone到博客目录的themes下，并且修改博客目录下的文件_config.yml的theme项为主题名称，重新生成就可以了。\n\n# 使用体验\n\n还是有一些坑要踩的，如有问题，联系邮箱the_lty_mail@foxmail.com\n\n---","source":"_posts/如何用hexo-github-pages搭建博客.md","raw":"---\ntitle: 如何用hexo+github-pages搭建博客\ndate: 2019-04-29 22:56:54\ncategories: 折腾记录\ntags:\n - hexo\n - 博客\ncopyright: true\n---\n\n成功搭建博客之后，想让一起学习的小伙伴也学习搭建一下，所以就有了此篇文章.\n\n<!--more-->\n\n![逆光](如何用hexo-github-pages搭建博客/逆光.jpg)\n\n# 为何选择hexo\n\n- hexo博客框架的网上资料较多，技术较为成熟.\n\n- hexo使用Makrdown进行渲染.\n\n- hexo只需几步就可部署博客.\n\n- hexo具有丰富的主题/插件可选.\n\n# 安装hexo\n\n## 安装Nodejs,Git\n\n要安装hexo必须得安装Nodejs和Git，这里只提供GNU/Linux的过程。\n\n大部分发行版自带Git,Nodejs只需要一条命令:\n\n**apt**\n\n~~~shell\n$ sudo apt install nodejs npm\n~~~\n\n**pacman**\n\n~~~shell\n$ sudo pacman -S nodejs npm\n~~~\n## 配置Nodejs\n\n**安装完成Nodejs和Git后还需要设置npm的软件源.**\n\n在任意目录下执行如下命令:\n\n~~~shell\n$ npm config set registry https://registry.npm.taobao.org\n~~~\n\n执行如下命令测试是否设置成功(若范围淘宝的npm镜像源地址则成功):\n\n~~~shell\n$ npm config get registry\n~~~\n\n## 配置Git\n\n### **注册Github**\n\n[注册Github](https://github.com/join)\n\n### **创建仓库**\n\n[创建Github仓库](https://github.com/new)\n\n注意: 仓库名必须是**name.github.io**\n\n例如我的 evanmeek.github.io\n\n![创建Github仓库](如何用hexo-github-pages搭建博客/创建仓库.png)\n\n\n需要设置两点:\n\n- Git身份标识\n\n~~~shell\n$ git config --global user.email \"你的邮箱\"\n$ git config --global user.name \"你的名字\"\n~~~\n\n推荐把邮箱和名字设置为Github上的邮箱和名字相同\n\n\n- SSH密钥\n\n如果是第一次使用Git，那么默认是没有SSH密钥的，执行如下命令查看:\n\n~~~shell\n$ ls ~/.ssh\n~~~\n\n若没有则创建新的密钥\n\n~~~shell\n$ ssh-keygen -t rsa -C \"你的邮箱\"\n~~~\n\n创建密钥时会提示你输入一个密码，这样在用这里密钥时就需要输入密码，若不需要直接一路回车吧。\n\n创建完成后，你会在~/.ssh内看到两个文件\n\n![ssh目录](如何用hexo-github-pages搭建博客/ssh目录.png)\n\n分别是私钥(id_rsa),公钥(id_rsa.pub)\n\n下一步则是需要在Github中添加刚刚生成的密钥\n\n首先登陆Github,打开设置.\n\n如图所示：\n\n![登陆Github](如何用hexo-github-pages搭建博客/打开设置.png)\n\n下一步找到SSH选项\n\n如图所示：\n\n![设置SSH](如何用hexo-github-pages搭建博客/设置SSH.png)\n\n下一步导入公钥\n\n![导入密钥](如何用hexo-github-pages搭建博客/导入密钥.png)\n\n复制公钥的内容复制到key文本框内，Title随便写一个，可以写你的设备名\n\n~~~shell\n$ cat ~/.ssh/id_rsa.pub\n~~~\n\n## 安装hexo\n\n前面安装完Nodejs和Git之后可以通过一条命令安装hexo\n\n**要使用sudo提权**\n\n执行如下命令:\n\n~~~shell\n$ npm install -g hexo-cli\n~~~\n\n看到Done!之后则为安装成功.\n\n# 开始搭建\n\n## 初始化hexo博客\n\n使用如下命令初始化博客\n\n~~~shell\n$ hexo init <目录>\n~~~\n\n![hexoinit](如何用hexo-github-pages搭建博客/hexoinit.png)\n\n初始化完成之后目录结构大概是这样的:\n\n~~~\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n~~~\n\n下面分别讲下这些文件或目录分别存放了些什么。\n\n主配置文件: **_config.yml**\n\n> 主要用于博客的配置信息，后面还会在themes里看到_config.yml，和这个不同，我们只要记住这个是博客的主配置文件.\n\n插件信息: **package.json**\n\n> 包含了当前hexo博客中安装了哪些插件.\n\n模板目录: **scaffolds/**\n\n> 里面包含了可定制的模板文件，在创建或生成新的博文时就会按照这里的模板进行渲染.\n\n资源目录: **source/**\n\n> 在这里包含了你的一些资源文件，例如文章源码，图片等，要注意的是_posts目录并不会在生成渲染时并不会被拷贝到public目录下.\n\n主题目录: **themes/**\n\n> 主题目录，所有的主题都丢在这里。\n\n---\n\n## 生成博客\n\n执行如下命令创建一篇博文:\n\n~~~shell\n$ hexo n \"文章名\"\n~~~\n\nhexo会在source/_posts目录下创建一个markdown文档，这样就可以开始编写了!\n\n这一步用于生成静态文件(就是把md转为html的操作)\n\n**要在网站目录(就是初始化的目录下)下执行**\n\n~~~shell\n$ hexo generate\n~~~\n\n这个命令可以简化，并且还可以带两个参数\n\n简化+参数:\n~~~shell\n$ hexo g -d # 生成+部署(也就是推送到github pages去了，你们先不要执行这一步)\n\n$ hexo g -w # 可以监视有哪些文件被生成了\n~~~\n\n---\n\n# 配置hexo\n\n这里的user.email和user.name可以不是Github的邮箱或名字，但推荐设置为Github相同.\n\n下面配置hexo，对于hexo的修改，可以通过_config.yml文件修改大多数设置。\n\n找到deploy项\n\n修改为:\n\n![deploy](如何用hexo-github-pages搭建博客/deploy.png)\n\n**type为git不能为大写**\n\n\n\n---\n\n## 部署博客\n\n部署博客这里只讲两种，分别是通过Git推送到远程代码托管中心(Github)和本地部署\n\n**本地部署**\n\n\n执行如下命令:\n~~~shell\n$ npm install hexo-deployer-git --save\n~~~\n\n~~~shell\n$ hexo s\n~~~\n\n执行完后可以通过localhost:4000进行[查看](localhost:4000).\n\n![本地部署](如何用hexo-github-pages搭建博客/本地部署.png)\n\n**部署到Github**\n\n~~~shell\n$ hexo d\n~~~\n\n这样就可以部署到Github了，通过https://你的Github用户名.github.io访问\n\n# 寻找主题\n\n[Hexo主题](https://hexo.io/themes/)\n\n把主题clone到博客目录的themes下，并且修改博客目录下的文件_config.yml的theme项为主题名称，重新生成就可以了。\n\n# 使用体验\n\n还是有一些坑要踩的，如有问题，联系邮箱the_lty_mail@foxmail.com\n\n---","slug":"如何用hexo-github-pages搭建博客","published":1,"updated":"2019-06-16T17:09:00.787Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uza4001toums2t67cctc","content":"<p>成功搭建博客之后，想让一起学习的小伙伴也学习搭建一下，所以就有了此篇文章.</p>\n<a id=\"more\"></a>\n<p><img src=\"/2019/04/29/如何用hexo-github-pages搭建博客/逆光.jpg\" alt=\"逆光\"></p>\n<h1 id=\"为何选择hexo\"><a href=\"#为何选择hexo\" class=\"headerlink\" title=\"为何选择hexo\"></a>为何选择hexo</h1><ul>\n<li><p>hexo博客框架的网上资料较多，技术较为成熟.</p>\n</li>\n<li><p>hexo使用Makrdown进行渲染.</p>\n</li>\n<li><p>hexo只需几步就可部署博客.</p>\n</li>\n<li><p>hexo具有丰富的主题/插件可选.</p>\n</li>\n</ul>\n<h1 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h1><h2 id=\"安装Nodejs-Git\"><a href=\"#安装Nodejs-Git\" class=\"headerlink\" title=\"安装Nodejs,Git\"></a>安装Nodejs,Git</h2><p>要安装hexo必须得安装Nodejs和Git，这里只提供GNU/Linux的过程。</p>\n<p>大部分发行版自带Git,Nodejs只需要一条命令:</p>\n<p><strong>apt</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo apt install nodejs npm</span><br></pre></td></tr></table></figure>\n<p><strong>pacman</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo pacman -S nodejs npm</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置Nodejs\"><a href=\"#配置Nodejs\" class=\"headerlink\" title=\"配置Nodejs\"></a>配置Nodejs</h2><p><strong>安装完成Nodejs和Git后还需要设置npm的软件源.</strong></p>\n<p>在任意目录下执行如下命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>执行如下命令测试是否设置成功(若范围淘宝的npm镜像源地址则成功):</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> npm config get registry</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置Git\"><a href=\"#配置Git\" class=\"headerlink\" title=\"配置Git\"></a>配置Git</h2><h3 id=\"注册Github\"><a href=\"#注册Github\" class=\"headerlink\" title=\"注册Github\"></a><strong>注册Github</strong></h3><p><a href=\"https://github.com/join\" target=\"_blank\" rel=\"noopener\">注册Github</a></p>\n<h3 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a><strong>创建仓库</strong></h3><p><a href=\"https://github.com/new\" target=\"_blank\" rel=\"noopener\">创建Github仓库</a></p>\n<p>注意: 仓库名必须是<strong>name.github.io</strong></p>\n<p>例如我的 evanmeek.github.io</p>\n<p><img src=\"/2019/04/29/如何用hexo-github-pages搭建博客/创建仓库.png\" alt=\"创建Github仓库\"></p>\n<p>需要设置两点:</p>\n<ul>\n<li>Git身份标识</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git config --global user.email \"你的邮箱\"</span><br><span class=\"line\"><span class=\"meta\">$</span> git config --global user.name \"你的名字\"</span><br></pre></td></tr></table></figure>\n<p>推荐把邮箱和名字设置为Github上的邮箱和名字相同</p>\n<ul>\n<li>SSH密钥</li>\n</ul>\n<p>如果是第一次使用Git，那么默认是没有SSH密钥的，执行如下命令查看:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> ls ~/.ssh</span><br></pre></td></tr></table></figure>\n<p>若没有则创建新的密钥</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> ssh-keygen -t rsa -C \"你的邮箱\"</span><br></pre></td></tr></table></figure>\n<p>创建密钥时会提示你输入一个密码，这样在用这里密钥时就需要输入密码，若不需要直接一路回车吧。</p>\n<p>创建完成后，你会在~/.ssh内看到两个文件</p>\n<p><img src=\"/2019/04/29/如何用hexo-github-pages搭建博客/ssh目录.png\" alt=\"ssh目录\"></p>\n<p>分别是私钥(id_rsa),公钥(id_rsa.pub)</p>\n<p>下一步则是需要在Github中添加刚刚生成的密钥</p>\n<p>首先登陆Github,打开设置.</p>\n<p>如图所示：</p>\n<p><img src=\"/2019/04/29/如何用hexo-github-pages搭建博客/打开设置.png\" alt=\"登陆Github\"></p>\n<p>下一步找到SSH选项</p>\n<p>如图所示：</p>\n<p><img src=\"/2019/04/29/如何用hexo-github-pages搭建博客/设置SSH.png\" alt=\"设置SSH\"></p>\n<p>下一步导入公钥</p>\n<p><img src=\"/2019/04/29/如何用hexo-github-pages搭建博客/导入密钥.png\" alt=\"导入密钥\"></p>\n<p>复制公钥的内容复制到key文本框内，Title随便写一个，可以写你的设备名</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装hexo-1\"><a href=\"#安装hexo-1\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><p>前面安装完Nodejs和Git之后可以通过一条命令安装hexo</p>\n<p><strong>要使用sudo提权</strong></p>\n<p>执行如下命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>看到Done!之后则为安装成功.</p>\n<h1 id=\"开始搭建\"><a href=\"#开始搭建\" class=\"headerlink\" title=\"开始搭建\"></a>开始搭建</h1><h2 id=\"初始化hexo博客\"><a href=\"#初始化hexo博客\" class=\"headerlink\" title=\"初始化hexo博客\"></a>初始化hexo博客</h2><p>使用如下命令初始化博客</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> hexo init &lt;目录&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/04/29/如何用hexo-github-pages搭建博客/hexoinit.png\" alt=\"hexoinit\"></p>\n<p>初始化完成之后目录结构大概是这样的:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n<p>下面分别讲下这些文件或目录分别存放了些什么。</p>\n<p>主配置文件: <strong>_config.yml</strong></p>\n<blockquote>\n<p>主要用于博客的配置信息，后面还会在themes里看到_config.yml，和这个不同，我们只要记住这个是博客的主配置文件.</p>\n</blockquote>\n<p>插件信息: <strong>package.json</strong></p>\n<blockquote>\n<p>包含了当前hexo博客中安装了哪些插件.</p>\n</blockquote>\n<p>模板目录: <strong>scaffolds/</strong></p>\n<blockquote>\n<p>里面包含了可定制的模板文件，在创建或生成新的博文时就会按照这里的模板进行渲染.</p>\n</blockquote>\n<p>资源目录: <strong>source/</strong></p>\n<blockquote>\n<p>在这里包含了你的一些资源文件，例如文章源码，图片等，要注意的是_posts目录并不会在生成渲染时并不会被拷贝到public目录下.</p>\n</blockquote>\n<p>主题目录: <strong>themes/</strong></p>\n<blockquote>\n<p>主题目录，所有的主题都丢在这里。</p>\n</blockquote>\n<hr>\n<h2 id=\"生成博客\"><a href=\"#生成博客\" class=\"headerlink\" title=\"生成博客\"></a>生成博客</h2><p>执行如下命令创建一篇博文:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> hexo n \"文章名\"</span><br></pre></td></tr></table></figure>\n<p>hexo会在source/_posts目录下创建一个markdown文档，这样就可以开始编写了!</p>\n<p>这一步用于生成静态文件(就是把md转为html的操作)</p>\n<p><strong>要在网站目录(就是初始化的目录下)下执行</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> hexo generate</span><br></pre></td></tr></table></figure>\n<p>这个命令可以简化，并且还可以带两个参数</p>\n<p>简化+参数:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> hexo g -d # 生成+部署(也就是推送到github pages去了，你们先不要执行这一步)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span> hexo g -w # 可以监视有哪些文件被生成了</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"配置hexo\"><a href=\"#配置hexo\" class=\"headerlink\" title=\"配置hexo\"></a>配置hexo</h1><p>这里的user.email和user.name可以不是Github的邮箱或名字，但推荐设置为Github相同.</p>\n<p>下面配置hexo，对于hexo的修改，可以通过_config.yml文件修改大多数设置。</p>\n<p>找到deploy项</p>\n<p>修改为:</p>\n<p><img src=\"/2019/04/29/如何用hexo-github-pages搭建博客/deploy.png\" alt=\"deploy\"></p>\n<p><strong>type为git不能为大写</strong></p>\n<hr>\n<h2 id=\"部署博客\"><a href=\"#部署博客\" class=\"headerlink\" title=\"部署博客\"></a>部署博客</h2><p>部署博客这里只讲两种，分别是通过Git推送到远程代码托管中心(Github)和本地部署</p>\n<p><strong>本地部署</strong></p>\n<p>执行如下命令:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> hexo s</span><br></pre></td></tr></table></figure>\n<p>执行完后可以通过localhost:4000进行<a href=\"localhost:4000\" target=\"_blank\" rel=\"noopener\">查看</a>.</p>\n<p><img src=\"/2019/04/29/如何用hexo-github-pages搭建博客/本地部署.png\" alt=\"本地部署\"></p>\n<p><strong>部署到Github</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> hexo d</span><br></pre></td></tr></table></figure>\n<p>这样就可以部署到Github了，通过https://你的Github用户名.github.io访问</p>\n<h1 id=\"寻找主题\"><a href=\"#寻找主题\" class=\"headerlink\" title=\"寻找主题\"></a>寻找主题</h1><p><a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">Hexo主题</a></p>\n<p>把主题clone到博客目录的themes下，并且修改博客目录下的文件_config.yml的theme项为主题名称，重新生成就可以了。</p>\n<h1 id=\"使用体验\"><a href=\"#使用体验\" class=\"headerlink\" title=\"使用体验\"></a>使用体验</h1><p>还是有一些坑要踩的，如有问题，联系邮箱<a href=\"mailto:the_lty_mail@foxmail.com\" target=\"_blank\" rel=\"noopener\">the_lty_mail@foxmail.com</a></p>\n<hr>\n","site":{"data":{}},"excerpt":"<p>成功搭建博客之后，想让一起学习的小伙伴也学习搭建一下，所以就有了此篇文章.</p>","more":"<p><img src=\"/2019/04/29/如何用hexo-github-pages搭建博客/逆光.jpg\" alt=\"逆光\"></p>\n<h1 id=\"为何选择hexo\"><a href=\"#为何选择hexo\" class=\"headerlink\" title=\"为何选择hexo\"></a>为何选择hexo</h1><ul>\n<li><p>hexo博客框架的网上资料较多，技术较为成熟.</p>\n</li>\n<li><p>hexo使用Makrdown进行渲染.</p>\n</li>\n<li><p>hexo只需几步就可部署博客.</p>\n</li>\n<li><p>hexo具有丰富的主题/插件可选.</p>\n</li>\n</ul>\n<h1 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h1><h2 id=\"安装Nodejs-Git\"><a href=\"#安装Nodejs-Git\" class=\"headerlink\" title=\"安装Nodejs,Git\"></a>安装Nodejs,Git</h2><p>要安装hexo必须得安装Nodejs和Git，这里只提供GNU/Linux的过程。</p>\n<p>大部分发行版自带Git,Nodejs只需要一条命令:</p>\n<p><strong>apt</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo apt install nodejs npm</span><br></pre></td></tr></table></figure>\n<p><strong>pacman</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo pacman -S nodejs npm</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置Nodejs\"><a href=\"#配置Nodejs\" class=\"headerlink\" title=\"配置Nodejs\"></a>配置Nodejs</h2><p><strong>安装完成Nodejs和Git后还需要设置npm的软件源.</strong></p>\n<p>在任意目录下执行如下命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>执行如下命令测试是否设置成功(若范围淘宝的npm镜像源地址则成功):</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> npm config get registry</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置Git\"><a href=\"#配置Git\" class=\"headerlink\" title=\"配置Git\"></a>配置Git</h2><h3 id=\"注册Github\"><a href=\"#注册Github\" class=\"headerlink\" title=\"注册Github\"></a><strong>注册Github</strong></h3><p><a href=\"https://github.com/join\" target=\"_blank\" rel=\"noopener\">注册Github</a></p>\n<h3 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a><strong>创建仓库</strong></h3><p><a href=\"https://github.com/new\" target=\"_blank\" rel=\"noopener\">创建Github仓库</a></p>\n<p>注意: 仓库名必须是<strong>name.github.io</strong></p>\n<p>例如我的 evanmeek.github.io</p>\n<p><img src=\"/2019/04/29/如何用hexo-github-pages搭建博客/创建仓库.png\" alt=\"创建Github仓库\"></p>\n<p>需要设置两点:</p>\n<ul>\n<li>Git身份标识</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git config --global user.email \"你的邮箱\"</span><br><span class=\"line\"><span class=\"meta\">$</span> git config --global user.name \"你的名字\"</span><br></pre></td></tr></table></figure>\n<p>推荐把邮箱和名字设置为Github上的邮箱和名字相同</p>\n<ul>\n<li>SSH密钥</li>\n</ul>\n<p>如果是第一次使用Git，那么默认是没有SSH密钥的，执行如下命令查看:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> ls ~/.ssh</span><br></pre></td></tr></table></figure>\n<p>若没有则创建新的密钥</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> ssh-keygen -t rsa -C \"你的邮箱\"</span><br></pre></td></tr></table></figure>\n<p>创建密钥时会提示你输入一个密码，这样在用这里密钥时就需要输入密码，若不需要直接一路回车吧。</p>\n<p>创建完成后，你会在~/.ssh内看到两个文件</p>\n<p><img src=\"/2019/04/29/如何用hexo-github-pages搭建博客/ssh目录.png\" alt=\"ssh目录\"></p>\n<p>分别是私钥(id_rsa),公钥(id_rsa.pub)</p>\n<p>下一步则是需要在Github中添加刚刚生成的密钥</p>\n<p>首先登陆Github,打开设置.</p>\n<p>如图所示：</p>\n<p><img src=\"/2019/04/29/如何用hexo-github-pages搭建博客/打开设置.png\" alt=\"登陆Github\"></p>\n<p>下一步找到SSH选项</p>\n<p>如图所示：</p>\n<p><img src=\"/2019/04/29/如何用hexo-github-pages搭建博客/设置SSH.png\" alt=\"设置SSH\"></p>\n<p>下一步导入公钥</p>\n<p><img src=\"/2019/04/29/如何用hexo-github-pages搭建博客/导入密钥.png\" alt=\"导入密钥\"></p>\n<p>复制公钥的内容复制到key文本框内，Title随便写一个，可以写你的设备名</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装hexo-1\"><a href=\"#安装hexo-1\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><p>前面安装完Nodejs和Git之后可以通过一条命令安装hexo</p>\n<p><strong>要使用sudo提权</strong></p>\n<p>执行如下命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>看到Done!之后则为安装成功.</p>\n<h1 id=\"开始搭建\"><a href=\"#开始搭建\" class=\"headerlink\" title=\"开始搭建\"></a>开始搭建</h1><h2 id=\"初始化hexo博客\"><a href=\"#初始化hexo博客\" class=\"headerlink\" title=\"初始化hexo博客\"></a>初始化hexo博客</h2><p>使用如下命令初始化博客</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> hexo init &lt;目录&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/04/29/如何用hexo-github-pages搭建博客/hexoinit.png\" alt=\"hexoinit\"></p>\n<p>初始化完成之后目录结构大概是这样的:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n<p>下面分别讲下这些文件或目录分别存放了些什么。</p>\n<p>主配置文件: <strong>_config.yml</strong></p>\n<blockquote>\n<p>主要用于博客的配置信息，后面还会在themes里看到_config.yml，和这个不同，我们只要记住这个是博客的主配置文件.</p>\n</blockquote>\n<p>插件信息: <strong>package.json</strong></p>\n<blockquote>\n<p>包含了当前hexo博客中安装了哪些插件.</p>\n</blockquote>\n<p>模板目录: <strong>scaffolds/</strong></p>\n<blockquote>\n<p>里面包含了可定制的模板文件，在创建或生成新的博文时就会按照这里的模板进行渲染.</p>\n</blockquote>\n<p>资源目录: <strong>source/</strong></p>\n<blockquote>\n<p>在这里包含了你的一些资源文件，例如文章源码，图片等，要注意的是_posts目录并不会在生成渲染时并不会被拷贝到public目录下.</p>\n</blockquote>\n<p>主题目录: <strong>themes/</strong></p>\n<blockquote>\n<p>主题目录，所有的主题都丢在这里。</p>\n</blockquote>\n<hr>\n<h2 id=\"生成博客\"><a href=\"#生成博客\" class=\"headerlink\" title=\"生成博客\"></a>生成博客</h2><p>执行如下命令创建一篇博文:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> hexo n \"文章名\"</span><br></pre></td></tr></table></figure>\n<p>hexo会在source/_posts目录下创建一个markdown文档，这样就可以开始编写了!</p>\n<p>这一步用于生成静态文件(就是把md转为html的操作)</p>\n<p><strong>要在网站目录(就是初始化的目录下)下执行</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> hexo generate</span><br></pre></td></tr></table></figure>\n<p>这个命令可以简化，并且还可以带两个参数</p>\n<p>简化+参数:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> hexo g -d # 生成+部署(也就是推送到github pages去了，你们先不要执行这一步)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span> hexo g -w # 可以监视有哪些文件被生成了</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"配置hexo\"><a href=\"#配置hexo\" class=\"headerlink\" title=\"配置hexo\"></a>配置hexo</h1><p>这里的user.email和user.name可以不是Github的邮箱或名字，但推荐设置为Github相同.</p>\n<p>下面配置hexo，对于hexo的修改，可以通过_config.yml文件修改大多数设置。</p>\n<p>找到deploy项</p>\n<p>修改为:</p>\n<p><img src=\"/2019/04/29/如何用hexo-github-pages搭建博客/deploy.png\" alt=\"deploy\"></p>\n<p><strong>type为git不能为大写</strong></p>\n<hr>\n<h2 id=\"部署博客\"><a href=\"#部署博客\" class=\"headerlink\" title=\"部署博客\"></a>部署博客</h2><p>部署博客这里只讲两种，分别是通过Git推送到远程代码托管中心(Github)和本地部署</p>\n<p><strong>本地部署</strong></p>\n<p>执行如下命令:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> hexo s</span><br></pre></td></tr></table></figure>\n<p>执行完后可以通过localhost:4000进行<a href=\"localhost:4000\" target=\"_blank\" rel=\"noopener\">查看</a>.</p>\n<p><img src=\"/2019/04/29/如何用hexo-github-pages搭建博客/本地部署.png\" alt=\"本地部署\"></p>\n<p><strong>部署到Github</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> hexo d</span><br></pre></td></tr></table></figure>\n<p>这样就可以部署到Github了，通过https://你的Github用户名.github.io访问</p>\n<h1 id=\"寻找主题\"><a href=\"#寻找主题\" class=\"headerlink\" title=\"寻找主题\"></a>寻找主题</h1><p><a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">Hexo主题</a></p>\n<p>把主题clone到博客目录的themes下，并且修改博客目录下的文件_config.yml的theme项为主题名称，重新生成就可以了。</p>\n<h1 id=\"使用体验\"><a href=\"#使用体验\" class=\"headerlink\" title=\"使用体验\"></a>使用体验</h1><p>还是有一些坑要踩的，如有问题，联系邮箱<a href=\"mailto:the_lty_mail@foxmail.com\" target=\"_blank\" rel=\"noopener\">the_lty_mail@foxmail.com</a></p>\n<hr>"},{"title":"如何自学编程?","copyright":true,"date":"2019-05-23T14:19:59.000Z","_content":"\n前几日，我在Telegram上创建了个Linux的讨论群组反响挺好，不过都是各大高校或者已在工作的大佬们入群。\n\n今天舍友请邀家做客，吃完饭我们在操场上散步，我脱了鞋，走了几圈想到，\n\n为什么不把我身边的同学们集合起来创建一个讨论群组，回到宿舍我便创建了群组，由于每个人能力有限，不是谁都可以翻墙的，所以我就用微信群作为讨论的地方。\n\n<!--more-->\n\n# 0x0 制定目标\n\n这个目标最好是十分远大的，并且必须是准确的。\n\n例如你说你要赚很多钱，但是你并不知道你要怎样做才能赚很多钱，你可以想，你要赚很多钱，通过卖保险...然后开始学习销售方面的才能。\n\n制定目标是最重要的，你可以花几天的时间去想这件事，因为，一旦下定目标，你就需要全力以赴奔向它。\n\n# 0x1 选择方向\n\n你可能需要面对的是该学什么，我是推荐前期选一门比较热门的编程语言开始学习，在学习过程中多了解软件开发这个世界，你自然会有很多选择。\n\n当然，我这里是推荐学习C++，虽然它曾经被我的偶像`Linus Torvalds`臭骂一顿，但由于要考试，再加上这门语言的语法非常灵活，极具智慧的初学者可以有很多种`hack`玩法。\n\n# 0x2 学习过程\n\n在你选定你要学习的目标后，你必须有一个正确的学习心态和学习方法，我这里只提我自己的学习心态和学习方法。\n\n## 0x21学习心态\n我对编程是随和的，我可以从中获得快乐，快乐至上才是最重要的，你需要尝试用代码来使你快乐，可以把一些你感兴趣事物与代码结合，我相信你会爱上编程的。\n\n## 0x22学习方法\n\n`不要问，去调试，去反编译`\n\n这句话虽说有些偏执，但确实很有效，很多时候答案不是靠别人，而是要靠你自己研究出来的，一套好教材提供的学习线路基本都是环环相扣，甚至可以跳节选学，倘若你是一步一步学习的，那么你遇到的问题肯定可以从你所学的知识获得解答。\n\n`多写代码，多讨论，尝试新想法`\n\n多写代码是必须的，你可能会说，我很菜，我都不知道写什么代码，我怎么办。我推荐你抄代码，抄别人的代码，看别人是怎么写的，你就抄下来，尝试理解。倘若抄得很吃力，我建议你换个选择，倘若在抄代码过程中，能大概理解其运作方式，你可以与群组的人们进行讨论，这样既可以自己学习也可以让别人学习。\n\n多讨论，上面很多次提到讨论，事实上，讨论就是十分重要的，你可以在讨论时获取到大量知识，若你感兴趣完全可以研究别人所提到的技术，再回头进行讨论，技术提升就是这么来的。\n\n尝试新想法，往往一个程序，可以有很多种写法，你可以尝试着思考如何用更简短或者更易懂的方式重写一遍，使得程序更健壮和执行速度更快。\n\n# 0x3 充分利用互联网\n\n虽说我国的互联网事实上是局域网，但是也不影响我们小白进行学习，网上的优质教程有特别多，而且大多是免费的。\n\n不仅仅是从互联网上获取教程，互联网上可以说是什么都有，你想要的一切只有你找不到的，没有不存在的，有兴趣的可以百度搜索一下`原子弹制作从入门到精通`。这边推荐一个更好的利用搜索引擎的文章[点击访问](https://www.zhihu.com/question/23622803)\n\n# 0x4 读书\n\n在学习的过程中，我们可能会遇到很多坑，在很多书籍中讲的很明白、透彻，所以阅读技术类书籍是能大大提高我们水平的，但有个缺点，不是谁都能读完一本书。\n\n推荐书籍以后会写。\n\n\n# 0x5 推荐学习\n\n[C++视频教程](https://www.bilibili.com/video/av41559729)\n\n[C++书籍](http://bestcbooks.com/recommended-cpp-books/)\n\n[Git视频教程](https://www.bilibili.com/video/av24736323)\n\n# 0x6 其他\n\n如果你是Windows系统，那么推荐[Visual Studio](https://visualstudio.microsoft.com/zh-hans/?rr=https%3A%2F%2Fwww.microsoft.com%2Fzh-hk%2F)作为你的编程工具。\n\n如果你是Linux系统，那么推荐[CLion](https://www.jetbrains.com/clion/download/download-thanks.html)作为你的编程工具。\n\n如果你是OS X系统，抱歉没用过苹果系统，应该是Xcode。\n\n推荐学习资源:[点击访问](https://www.codedream.xin/archives/learning-material-list)\n\n# 0x7 讨论群组\n\n![群组](如何自学编程/群组.png)\n\n\n\n\n\n\n\n\n\n","source":"_posts/如何自学编程.md","raw":"---\ntitle: 如何自学编程?\ncopyright: true\ndate: 2019-05-23 22:19:59\ncategories: 个人感想\ntags:\n - 个人感想\n---\n\n前几日，我在Telegram上创建了个Linux的讨论群组反响挺好，不过都是各大高校或者已在工作的大佬们入群。\n\n今天舍友请邀家做客，吃完饭我们在操场上散步，我脱了鞋，走了几圈想到，\n\n为什么不把我身边的同学们集合起来创建一个讨论群组，回到宿舍我便创建了群组，由于每个人能力有限，不是谁都可以翻墙的，所以我就用微信群作为讨论的地方。\n\n<!--more-->\n\n# 0x0 制定目标\n\n这个目标最好是十分远大的，并且必须是准确的。\n\n例如你说你要赚很多钱，但是你并不知道你要怎样做才能赚很多钱，你可以想，你要赚很多钱，通过卖保险...然后开始学习销售方面的才能。\n\n制定目标是最重要的，你可以花几天的时间去想这件事，因为，一旦下定目标，你就需要全力以赴奔向它。\n\n# 0x1 选择方向\n\n你可能需要面对的是该学什么，我是推荐前期选一门比较热门的编程语言开始学习，在学习过程中多了解软件开发这个世界，你自然会有很多选择。\n\n当然，我这里是推荐学习C++，虽然它曾经被我的偶像`Linus Torvalds`臭骂一顿，但由于要考试，再加上这门语言的语法非常灵活，极具智慧的初学者可以有很多种`hack`玩法。\n\n# 0x2 学习过程\n\n在你选定你要学习的目标后，你必须有一个正确的学习心态和学习方法，我这里只提我自己的学习心态和学习方法。\n\n## 0x21学习心态\n我对编程是随和的，我可以从中获得快乐，快乐至上才是最重要的，你需要尝试用代码来使你快乐，可以把一些你感兴趣事物与代码结合，我相信你会爱上编程的。\n\n## 0x22学习方法\n\n`不要问，去调试，去反编译`\n\n这句话虽说有些偏执，但确实很有效，很多时候答案不是靠别人，而是要靠你自己研究出来的，一套好教材提供的学习线路基本都是环环相扣，甚至可以跳节选学，倘若你是一步一步学习的，那么你遇到的问题肯定可以从你所学的知识获得解答。\n\n`多写代码，多讨论，尝试新想法`\n\n多写代码是必须的，你可能会说，我很菜，我都不知道写什么代码，我怎么办。我推荐你抄代码，抄别人的代码，看别人是怎么写的，你就抄下来，尝试理解。倘若抄得很吃力，我建议你换个选择，倘若在抄代码过程中，能大概理解其运作方式，你可以与群组的人们进行讨论，这样既可以自己学习也可以让别人学习。\n\n多讨论，上面很多次提到讨论，事实上，讨论就是十分重要的，你可以在讨论时获取到大量知识，若你感兴趣完全可以研究别人所提到的技术，再回头进行讨论，技术提升就是这么来的。\n\n尝试新想法，往往一个程序，可以有很多种写法，你可以尝试着思考如何用更简短或者更易懂的方式重写一遍，使得程序更健壮和执行速度更快。\n\n# 0x3 充分利用互联网\n\n虽说我国的互联网事实上是局域网，但是也不影响我们小白进行学习，网上的优质教程有特别多，而且大多是免费的。\n\n不仅仅是从互联网上获取教程，互联网上可以说是什么都有，你想要的一切只有你找不到的，没有不存在的，有兴趣的可以百度搜索一下`原子弹制作从入门到精通`。这边推荐一个更好的利用搜索引擎的文章[点击访问](https://www.zhihu.com/question/23622803)\n\n# 0x4 读书\n\n在学习的过程中，我们可能会遇到很多坑，在很多书籍中讲的很明白、透彻，所以阅读技术类书籍是能大大提高我们水平的，但有个缺点，不是谁都能读完一本书。\n\n推荐书籍以后会写。\n\n\n# 0x5 推荐学习\n\n[C++视频教程](https://www.bilibili.com/video/av41559729)\n\n[C++书籍](http://bestcbooks.com/recommended-cpp-books/)\n\n[Git视频教程](https://www.bilibili.com/video/av24736323)\n\n# 0x6 其他\n\n如果你是Windows系统，那么推荐[Visual Studio](https://visualstudio.microsoft.com/zh-hans/?rr=https%3A%2F%2Fwww.microsoft.com%2Fzh-hk%2F)作为你的编程工具。\n\n如果你是Linux系统，那么推荐[CLion](https://www.jetbrains.com/clion/download/download-thanks.html)作为你的编程工具。\n\n如果你是OS X系统，抱歉没用过苹果系统，应该是Xcode。\n\n推荐学习资源:[点击访问](https://www.codedream.xin/archives/learning-material-list)\n\n# 0x7 讨论群组\n\n![群组](如何自学编程/群组.png)\n\n\n\n\n\n\n\n\n\n","slug":"如何自学编程","published":1,"updated":"2019-06-16T17:09:00.793Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uza5001xoumsnhkxxnki","content":"<p>前几日，我在Telegram上创建了个Linux的讨论群组反响挺好，不过都是各大高校或者已在工作的大佬们入群。</p>\n<p>今天舍友请邀家做客，吃完饭我们在操场上散步，我脱了鞋，走了几圈想到，</p>\n<p>为什么不把我身边的同学们集合起来创建一个讨论群组，回到宿舍我便创建了群组，由于每个人能力有限，不是谁都可以翻墙的，所以我就用微信群作为讨论的地方。</p>\n<a id=\"more\"></a>\n<h1 id=\"0x0-制定目标\"><a href=\"#0x0-制定目标\" class=\"headerlink\" title=\"0x0 制定目标\"></a>0x0 制定目标</h1><p>这个目标最好是十分远大的，并且必须是准确的。</p>\n<p>例如你说你要赚很多钱，但是你并不知道你要怎样做才能赚很多钱，你可以想，你要赚很多钱，通过卖保险…然后开始学习销售方面的才能。</p>\n<p>制定目标是最重要的，你可以花几天的时间去想这件事，因为，一旦下定目标，你就需要全力以赴奔向它。</p>\n<h1 id=\"0x1-选择方向\"><a href=\"#0x1-选择方向\" class=\"headerlink\" title=\"0x1 选择方向\"></a>0x1 选择方向</h1><p>你可能需要面对的是该学什么，我是推荐前期选一门比较热门的编程语言开始学习，在学习过程中多了解软件开发这个世界，你自然会有很多选择。</p>\n<p>当然，我这里是推荐学习C++，虽然它曾经被我的偶像<code>Linus Torvalds</code>臭骂一顿，但由于要考试，再加上这门语言的语法非常灵活，极具智慧的初学者可以有很多种<code>hack</code>玩法。</p>\n<h1 id=\"0x2-学习过程\"><a href=\"#0x2-学习过程\" class=\"headerlink\" title=\"0x2 学习过程\"></a>0x2 学习过程</h1><p>在你选定你要学习的目标后，你必须有一个正确的学习心态和学习方法，我这里只提我自己的学习心态和学习方法。</p>\n<h2 id=\"0x21学习心态\"><a href=\"#0x21学习心态\" class=\"headerlink\" title=\"0x21学习心态\"></a>0x21学习心态</h2><p>我对编程是随和的，我可以从中获得快乐，快乐至上才是最重要的，你需要尝试用代码来使你快乐，可以把一些你感兴趣事物与代码结合，我相信你会爱上编程的。</p>\n<h2 id=\"0x22学习方法\"><a href=\"#0x22学习方法\" class=\"headerlink\" title=\"0x22学习方法\"></a>0x22学习方法</h2><p><code>不要问，去调试，去反编译</code></p>\n<p>这句话虽说有些偏执，但确实很有效，很多时候答案不是靠别人，而是要靠你自己研究出来的，一套好教材提供的学习线路基本都是环环相扣，甚至可以跳节选学，倘若你是一步一步学习的，那么你遇到的问题肯定可以从你所学的知识获得解答。</p>\n<p><code>多写代码，多讨论，尝试新想法</code></p>\n<p>多写代码是必须的，你可能会说，我很菜，我都不知道写什么代码，我怎么办。我推荐你抄代码，抄别人的代码，看别人是怎么写的，你就抄下来，尝试理解。倘若抄得很吃力，我建议你换个选择，倘若在抄代码过程中，能大概理解其运作方式，你可以与群组的人们进行讨论，这样既可以自己学习也可以让别人学习。</p>\n<p>多讨论，上面很多次提到讨论，事实上，讨论就是十分重要的，你可以在讨论时获取到大量知识，若你感兴趣完全可以研究别人所提到的技术，再回头进行讨论，技术提升就是这么来的。</p>\n<p>尝试新想法，往往一个程序，可以有很多种写法，你可以尝试着思考如何用更简短或者更易懂的方式重写一遍，使得程序更健壮和执行速度更快。</p>\n<h1 id=\"0x3-充分利用互联网\"><a href=\"#0x3-充分利用互联网\" class=\"headerlink\" title=\"0x3 充分利用互联网\"></a>0x3 充分利用互联网</h1><p>虽说我国的互联网事实上是局域网，但是也不影响我们小白进行学习，网上的优质教程有特别多，而且大多是免费的。</p>\n<p>不仅仅是从互联网上获取教程，互联网上可以说是什么都有，你想要的一切只有你找不到的，没有不存在的，有兴趣的可以百度搜索一下<code>原子弹制作从入门到精通</code>。这边推荐一个更好的利用搜索引擎的文章<a href=\"https://www.zhihu.com/question/23622803\" target=\"_blank\" rel=\"noopener\">点击访问</a></p>\n<h1 id=\"0x4-读书\"><a href=\"#0x4-读书\" class=\"headerlink\" title=\"0x4 读书\"></a>0x4 读书</h1><p>在学习的过程中，我们可能会遇到很多坑，在很多书籍中讲的很明白、透彻，所以阅读技术类书籍是能大大提高我们水平的，但有个缺点，不是谁都能读完一本书。</p>\n<p>推荐书籍以后会写。</p>\n<h1 id=\"0x5-推荐学习\"><a href=\"#0x5-推荐学习\" class=\"headerlink\" title=\"0x5 推荐学习\"></a>0x5 推荐学习</h1><p><a href=\"https://www.bilibili.com/video/av41559729\" target=\"_blank\" rel=\"noopener\">C++视频教程</a></p>\n<p><a href=\"http://bestcbooks.com/recommended-cpp-books/\" target=\"_blank\" rel=\"noopener\">C++书籍</a></p>\n<p><a href=\"https://www.bilibili.com/video/av24736323\" target=\"_blank\" rel=\"noopener\">Git视频教程</a></p>\n<h1 id=\"0x6-其他\"><a href=\"#0x6-其他\" class=\"headerlink\" title=\"0x6 其他\"></a>0x6 其他</h1><p>如果你是Windows系统，那么推荐<a href=\"https://visualstudio.microsoft.com/zh-hans/?rr=https%3A%2F%2Fwww.microsoft.com%2Fzh-hk%2F\" target=\"_blank\" rel=\"noopener\">Visual Studio</a>作为你的编程工具。</p>\n<p>如果你是Linux系统，那么推荐<a href=\"https://www.jetbrains.com/clion/download/download-thanks.html\" target=\"_blank\" rel=\"noopener\">CLion</a>作为你的编程工具。</p>\n<p>如果你是OS X系统，抱歉没用过苹果系统，应该是Xcode。</p>\n<p>推荐学习资源:<a href=\"https://www.codedream.xin/archives/learning-material-list\" target=\"_blank\" rel=\"noopener\">点击访问</a></p>\n<h1 id=\"0x7-讨论群组\"><a href=\"#0x7-讨论群组\" class=\"headerlink\" title=\"0x7 讨论群组\"></a>0x7 讨论群组</h1><p><img src=\"/2019/05/23/如何自学编程/群组.png\" alt=\"群组\"></p>\n","site":{"data":{}},"excerpt":"<p>前几日，我在Telegram上创建了个Linux的讨论群组反响挺好，不过都是各大高校或者已在工作的大佬们入群。</p>\n<p>今天舍友请邀家做客，吃完饭我们在操场上散步，我脱了鞋，走了几圈想到，</p>\n<p>为什么不把我身边的同学们集合起来创建一个讨论群组，回到宿舍我便创建了群组，由于每个人能力有限，不是谁都可以翻墙的，所以我就用微信群作为讨论的地方。</p>","more":"<h1 id=\"0x0-制定目标\"><a href=\"#0x0-制定目标\" class=\"headerlink\" title=\"0x0 制定目标\"></a>0x0 制定目标</h1><p>这个目标最好是十分远大的，并且必须是准确的。</p>\n<p>例如你说你要赚很多钱，但是你并不知道你要怎样做才能赚很多钱，你可以想，你要赚很多钱，通过卖保险…然后开始学习销售方面的才能。</p>\n<p>制定目标是最重要的，你可以花几天的时间去想这件事，因为，一旦下定目标，你就需要全力以赴奔向它。</p>\n<h1 id=\"0x1-选择方向\"><a href=\"#0x1-选择方向\" class=\"headerlink\" title=\"0x1 选择方向\"></a>0x1 选择方向</h1><p>你可能需要面对的是该学什么，我是推荐前期选一门比较热门的编程语言开始学习，在学习过程中多了解软件开发这个世界，你自然会有很多选择。</p>\n<p>当然，我这里是推荐学习C++，虽然它曾经被我的偶像<code>Linus Torvalds</code>臭骂一顿，但由于要考试，再加上这门语言的语法非常灵活，极具智慧的初学者可以有很多种<code>hack</code>玩法。</p>\n<h1 id=\"0x2-学习过程\"><a href=\"#0x2-学习过程\" class=\"headerlink\" title=\"0x2 学习过程\"></a>0x2 学习过程</h1><p>在你选定你要学习的目标后，你必须有一个正确的学习心态和学习方法，我这里只提我自己的学习心态和学习方法。</p>\n<h2 id=\"0x21学习心态\"><a href=\"#0x21学习心态\" class=\"headerlink\" title=\"0x21学习心态\"></a>0x21学习心态</h2><p>我对编程是随和的，我可以从中获得快乐，快乐至上才是最重要的，你需要尝试用代码来使你快乐，可以把一些你感兴趣事物与代码结合，我相信你会爱上编程的。</p>\n<h2 id=\"0x22学习方法\"><a href=\"#0x22学习方法\" class=\"headerlink\" title=\"0x22学习方法\"></a>0x22学习方法</h2><p><code>不要问，去调试，去反编译</code></p>\n<p>这句话虽说有些偏执，但确实很有效，很多时候答案不是靠别人，而是要靠你自己研究出来的，一套好教材提供的学习线路基本都是环环相扣，甚至可以跳节选学，倘若你是一步一步学习的，那么你遇到的问题肯定可以从你所学的知识获得解答。</p>\n<p><code>多写代码，多讨论，尝试新想法</code></p>\n<p>多写代码是必须的，你可能会说，我很菜，我都不知道写什么代码，我怎么办。我推荐你抄代码，抄别人的代码，看别人是怎么写的，你就抄下来，尝试理解。倘若抄得很吃力，我建议你换个选择，倘若在抄代码过程中，能大概理解其运作方式，你可以与群组的人们进行讨论，这样既可以自己学习也可以让别人学习。</p>\n<p>多讨论，上面很多次提到讨论，事实上，讨论就是十分重要的，你可以在讨论时获取到大量知识，若你感兴趣完全可以研究别人所提到的技术，再回头进行讨论，技术提升就是这么来的。</p>\n<p>尝试新想法，往往一个程序，可以有很多种写法，你可以尝试着思考如何用更简短或者更易懂的方式重写一遍，使得程序更健壮和执行速度更快。</p>\n<h1 id=\"0x3-充分利用互联网\"><a href=\"#0x3-充分利用互联网\" class=\"headerlink\" title=\"0x3 充分利用互联网\"></a>0x3 充分利用互联网</h1><p>虽说我国的互联网事实上是局域网，但是也不影响我们小白进行学习，网上的优质教程有特别多，而且大多是免费的。</p>\n<p>不仅仅是从互联网上获取教程，互联网上可以说是什么都有，你想要的一切只有你找不到的，没有不存在的，有兴趣的可以百度搜索一下<code>原子弹制作从入门到精通</code>。这边推荐一个更好的利用搜索引擎的文章<a href=\"https://www.zhihu.com/question/23622803\" target=\"_blank\" rel=\"noopener\">点击访问</a></p>\n<h1 id=\"0x4-读书\"><a href=\"#0x4-读书\" class=\"headerlink\" title=\"0x4 读书\"></a>0x4 读书</h1><p>在学习的过程中，我们可能会遇到很多坑，在很多书籍中讲的很明白、透彻，所以阅读技术类书籍是能大大提高我们水平的，但有个缺点，不是谁都能读完一本书。</p>\n<p>推荐书籍以后会写。</p>\n<h1 id=\"0x5-推荐学习\"><a href=\"#0x5-推荐学习\" class=\"headerlink\" title=\"0x5 推荐学习\"></a>0x5 推荐学习</h1><p><a href=\"https://www.bilibili.com/video/av41559729\" target=\"_blank\" rel=\"noopener\">C++视频教程</a></p>\n<p><a href=\"http://bestcbooks.com/recommended-cpp-books/\" target=\"_blank\" rel=\"noopener\">C++书籍</a></p>\n<p><a href=\"https://www.bilibili.com/video/av24736323\" target=\"_blank\" rel=\"noopener\">Git视频教程</a></p>\n<h1 id=\"0x6-其他\"><a href=\"#0x6-其他\" class=\"headerlink\" title=\"0x6 其他\"></a>0x6 其他</h1><p>如果你是Windows系统，那么推荐<a href=\"https://visualstudio.microsoft.com/zh-hans/?rr=https%3A%2F%2Fwww.microsoft.com%2Fzh-hk%2F\" target=\"_blank\" rel=\"noopener\">Visual Studio</a>作为你的编程工具。</p>\n<p>如果你是Linux系统，那么推荐<a href=\"https://www.jetbrains.com/clion/download/download-thanks.html\" target=\"_blank\" rel=\"noopener\">CLion</a>作为你的编程工具。</p>\n<p>如果你是OS X系统，抱歉没用过苹果系统，应该是Xcode。</p>\n<p>推荐学习资源:<a href=\"https://www.codedream.xin/archives/learning-material-list\" target=\"_blank\" rel=\"noopener\">点击访问</a></p>\n<h1 id=\"0x7-讨论群组\"><a href=\"#0x7-讨论群组\" class=\"headerlink\" title=\"0x7 讨论群组\"></a>0x7 讨论群组</h1><p><img src=\"/2019/05/23/如何自学编程/群组.png\" alt=\"群组\"></p>"},{"title":"C++函数探幽","date":"2019-04-23T22:38:43.000Z","copyright":true,"_content":"<!--\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=544070223&auto=1&height=66\"></iframe>\n-->\n<!--more-->\n\n**本章内容**\n- 内联函数\n- 引用变量\n- 如何按引用传递函数参数\n- 默认参数\n- 函数重载\n- 函数模板\n- 函数模板具体化\n\n本章是介绍C++在C基础上新增的特性，是进入C++领域重要的一步．\n\n---\n\n## C++内联函数\n\n> ### **说明**\n\n内联函数是C++为提高程序运行速度所做出的一项改进．常规函数和内联函数之间的主要区别不在于编写方式，而在于C++编译器如何将它们组合到程序中．要了解内联函数与常规函数之间的区别，必须深入到程序内部．\n\n那么，我们现在就深入到程序内部．\n\n首先我们知道，编译器会把我们的源代码编译成可执行程序－－－－由一组机器语言组成．\n\n当我们运行它时，操作系统将这些指令载入到计算机内存中，因此每条指令都有特定的内存地址．随后计算机将会逐步执行这些指令．\n\n执行到函数调用指令时，程序将在函数调用后立即存储该指令的内存地址，并将函数参数复制到堆栈，跳到标记函数起点的内存单元，执行函数代码，然后跳回到被保存的指令处．\n\n那么，来回跳跃并记录跳跃位置意味着以前使用函数时，需要一定的开销．\n\n\n**所以**\n\nC++内联函数就提供了另一种选择．内联函数的编译代码与其他程序代码＂内联＂(结合/融合)起来．\n\n相当于编译器将使用相应的函数代码替换函数调用．\n\n对于内联代码，程序就不用像常规函数那样跳转，只需要将函数定义时的代码复制一份到函数调用时的位置，直接执行即可，这样将会省去函数调用时，疯狂跳转，标记的开销．\n\n**但是**\n\n虽说这样在某种程度上速度确实要快，但是也是有代价的，例如，程序在N个地方调用同一个内联函数，那么改程序将包含该函数代码的10个副本．这样就会有更大的内存开销，虽然运行速度比常规函数的调用快．\n\n**结论**\n\n我们应该在不同的场景选择不同编写函数的方式．如果执行函数代码的时间比处理函数调用机制的时间长，则节省时间只占整个过程的很小一部分，如果代码执行时间短，则内联函数的调用就可以节省非内联函数调用时间的大部分时间．\n\n另一方面，由于整个过程相当快，因此就算节省了该过程的大部分时间，但节省时间的绝对值并不大．\n\n_除非_　:该函数被经常调用\n\n> ### **使用**\n\n使用内联函数只需要做到以下两点即可：\n\n- 在函数声明前加上关键字**inline**;\n\n- 在函数定义前加上关键字**inline**;\n\n通常的写法是省略原型，将整个定义(函数头和所有的函数代码)放在本应提供原型的地方．\n\n**可能遇到的问题**\n\n在我们编写函数为内联函数时，编译器不一定满足这种要求．\n\n- 编译器认为该函数过大或识别到函数调用了自己 ***(内联函数不能递归)*** .\n\n- 有些编译器没有启动或实现这种特性．\n\n> ### **案例**\n\n~~~C++\n\n#include <iostream>\n\nusing namespace std;\n\ninline double square(double x) { return x * x; }\n\nint main() {\n    double a(2.0), b(5.0), c(0);\n    cout << \"此时a=\" << a << \"\\tb=\" << b << \" \\tc=\" << c << endl;\n    square(a);\n    b = square(b);\n    c = square(7 + 1);\n    cout << \"此时a=\" << a << \"\\tb=\" << b << \"\\tc=\" << c << endl;\n    return 0;\n}\n\n~~~\n\n该程序的输出为:\n\n~~~\n此时a=2\tb=5\tc=0\n此时a=4\tb=25\tc=64\n~~~\n\n看到上面这个例子，自然就知道不管是内联函数还是常规函数，都是按值传递参数的．\n\n也就是说，例如 c=square(7+1) 这段代码调用square函数时将会先计算7+1的值再传递给形参x，这就是按值传递.\n\n**这使得C++的内联功能远远胜过C语言的宏定义**\n\n__尽管程序没有提供单独的函数原型，但C++的原型特征仍在起作用，因为首次函数出现时是定义函数那么就会充当函数原型.__\n\n__这也就意味着，如果给square()传递int或long类型的值，程序将回自动进行强制类型转换为double类型再把值复制给形参__\n\n### 内联与宏\n\ninline是C++新增的特性.\n\nC语言使用预处理语句#define来提供宏－－内联代码的原始实现．\n\n例如下面这个例子.\n\n~~~C\n#define SQUARE(X) X*X\n\na = SQUARE(2.0);\nb = SQUARE(3.2++);\nc = SQUARE(1+2.3);\n~~~\n\n上述示例只有第一个调用才能正常工作，因为C语言的宏定义不是按值传递的．\n\n---\n\n## 引用变量\n\n引用变量是C++新增的一种复合类型.\n\n引用是为已定义的变量创建了一个别名．\n\n例如，将变量a作为b的引用，则不管是使用a还是b都可以表示该变量，因为它们的内存块相同.\n\n引用变量通常的使用场景是作为函数的形参．\n\n通过将引用变量作为参数，那么函数将使用原始数据，而不是使用其副本．这样除了指针外引用也可以作为处理大型数据结构的一种途径．\n\n---\n\n### 创建引用变量\n\nC++使用 **&** 用于声明引用，但是它还有另外一个作用：地址运算符。\n\n当&为声明引用时可有这样的一个例子:\n\n~~~C++\nint a;\nint & b = a;\n~~~\n\n是否感觉跟指针有点相像呢？\n\n是的，它们确实有点相似，就像声明中double*是指指向double类型的指针，而int&是指指向int的引用。\n\n上面的例子：引用声明允许将a和b互换————它们指向相同的值和内存单元。\n\n下面再看一个例子，你将懂得C++中使用&时引用和地址运算符的区别。\n\n~~~C++\n#include <iostream>\n\nusing namespace std;\n\nint main(){\n\tint a=1;\n\tint & b = a;\n\n\tcout<<\"a:\"<<a<<endl;\n\tcout<<\"b:\"<<b<<endl;\n\n\tb = 2;\n\n\tcout<<\"a:\"<<a<<endl;\n\tcout<<\"b:\"<<b<<endl;\n\n        cout<<\"a-address:\"<<&a<<endl;\n        cout<<\"b-address:\"<<&b<<endl;\n\treturn 0;\n}\n~~~\n\n输出结果为:\n\n~~~\na:1\nb:1\na:2\nb:2\na-address:0x7ffdd4c4ae74\nb-address:0x7ffdd4c4ae74\n~~~\n\n首先我们声明定义了两个变量，一个是a，一个是b，b是指向int类型a变量的引用，所以它们的值和内存单元相同。\n\n然后b被重新赋值，也就是修改它内存单元的值，相应的与它在同块内存单元的a值也随之变化。\n\n再然后，我们输出的不是a和b的值了而是输出它们的地址:\n\n~~~C++\ncout<<\"a-address:\"<<&a<<endl;\n~~~\n\n此时的&代表的就是地址运算符。\n\n经过上面的一些小例子，读者们可能认为C++中&为引用的作用时与指针完全一样啊，但他们还是有些不同的，下面将指出有何不同。\n\n~~~C++\n#include <iostream>\n\nusing namespace std;\n\nint main(){\n\tint a,*p;\n\tint b,*p2(&b);\n\t*p = a;\n\treturn 0;\n}\n~~~\n\n上述代码是可以编译通过的。\n\n**指针在声明时编译器允许不为其进行初始化值**\n\n~~~C++\n#include <iostream>\n\nusing namespace std;\n\nint main(){\n    int a,&b;\n    b = a;\n    return 0;\n}\n~~~\n\n如果代码是这样，那么则编译不通过。\n\n**我们可以把引用看成cosnt指针**，因为const指针是必须在创建时进行初始化，一旦于某个变量关联起来，则只能与此变量进行操作。\n\n也就是说：\n\n~~~C++\nint a,&b(a);\n~~~\n\n**仅在表示上等同于**\n\n~~~C++\nint a;\nconst int *p(&a);\n~~~\n\n上面提到“仅在表示上等同于“为什么呢，请看下面的例子。\n\n~~~C++\n#include <iostream>\n\nusing namespace std;\n\nint main(){\n\tint a(10),&b(a);\n\tcout<<\"a:\"<<a<<endl;\n\tcout<<\"b:\"<<b<<endl;\n\tint c(20);\n\tb = c;\n\tcout<<\"c:\"<<c<<endl;\n\tcout<<\"a:\"<<a<<endl;\n\tcout<<\"b:\"<<b<<endl;\n\treturn 0;\n}\n~~~\n\n输出结果为:\n\n~~~\na:10\nb:10\nc:20\na:20\nb:20\n~~~\n\n可以看到最初b引用的是a，但随后b作为c的引用：\n\n~~~C++\nb = c;\n~~~\n\n**这就根const指针不同了，因为引用是可以改变引用的对象的，而const指针是不能改变指向的对象的.**\n\n我们仔细研究上面的代码可以发现，因为b的引用对象变化，使得b原先引用对象的值也随之发生了变化，这是由于b和a的地址相同，而该地址与c的地址不同。由于b是a的别名，因此上述赋值语句等效于:\n\n~~~C++\na = c;\n~~~\n\n也就是说，这意味着”将c变量的值赋给a变量“。\n\n简而言之，**可以通过初始化声明来设置引用，但不能通过赋值来设置。**\n\n下面有一段有趣的代码，你们可以看看。\n\n~~~C++\nint a(10);\nint *p =&a;\nint &b = *p;\nint c(20);\n*p = &c;\n~~~\n\n上述代码首先是指针p指向的a，而b引用*p(相当于引用a),而后面指针p改变了指向的对象，但是b依然是引用a的。\n\n### 将\n","source":"_posts/C-函数探幽.md","raw":"---\ntitle: C++函数探幽\ndate: 2019-04-24 06:38:43\ncategories: 学习笔记\ntags:\n  - C++\n  - 编程\ncopyright: true\n---\n<!--\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=544070223&auto=1&height=66\"></iframe>\n-->\n<!--more-->\n\n**本章内容**\n- 内联函数\n- 引用变量\n- 如何按引用传递函数参数\n- 默认参数\n- 函数重载\n- 函数模板\n- 函数模板具体化\n\n本章是介绍C++在C基础上新增的特性，是进入C++领域重要的一步．\n\n---\n\n## C++内联函数\n\n> ### **说明**\n\n内联函数是C++为提高程序运行速度所做出的一项改进．常规函数和内联函数之间的主要区别不在于编写方式，而在于C++编译器如何将它们组合到程序中．要了解内联函数与常规函数之间的区别，必须深入到程序内部．\n\n那么，我们现在就深入到程序内部．\n\n首先我们知道，编译器会把我们的源代码编译成可执行程序－－－－由一组机器语言组成．\n\n当我们运行它时，操作系统将这些指令载入到计算机内存中，因此每条指令都有特定的内存地址．随后计算机将会逐步执行这些指令．\n\n执行到函数调用指令时，程序将在函数调用后立即存储该指令的内存地址，并将函数参数复制到堆栈，跳到标记函数起点的内存单元，执行函数代码，然后跳回到被保存的指令处．\n\n那么，来回跳跃并记录跳跃位置意味着以前使用函数时，需要一定的开销．\n\n\n**所以**\n\nC++内联函数就提供了另一种选择．内联函数的编译代码与其他程序代码＂内联＂(结合/融合)起来．\n\n相当于编译器将使用相应的函数代码替换函数调用．\n\n对于内联代码，程序就不用像常规函数那样跳转，只需要将函数定义时的代码复制一份到函数调用时的位置，直接执行即可，这样将会省去函数调用时，疯狂跳转，标记的开销．\n\n**但是**\n\n虽说这样在某种程度上速度确实要快，但是也是有代价的，例如，程序在N个地方调用同一个内联函数，那么改程序将包含该函数代码的10个副本．这样就会有更大的内存开销，虽然运行速度比常规函数的调用快．\n\n**结论**\n\n我们应该在不同的场景选择不同编写函数的方式．如果执行函数代码的时间比处理函数调用机制的时间长，则节省时间只占整个过程的很小一部分，如果代码执行时间短，则内联函数的调用就可以节省非内联函数调用时间的大部分时间．\n\n另一方面，由于整个过程相当快，因此就算节省了该过程的大部分时间，但节省时间的绝对值并不大．\n\n_除非_　:该函数被经常调用\n\n> ### **使用**\n\n使用内联函数只需要做到以下两点即可：\n\n- 在函数声明前加上关键字**inline**;\n\n- 在函数定义前加上关键字**inline**;\n\n通常的写法是省略原型，将整个定义(函数头和所有的函数代码)放在本应提供原型的地方．\n\n**可能遇到的问题**\n\n在我们编写函数为内联函数时，编译器不一定满足这种要求．\n\n- 编译器认为该函数过大或识别到函数调用了自己 ***(内联函数不能递归)*** .\n\n- 有些编译器没有启动或实现这种特性．\n\n> ### **案例**\n\n~~~C++\n\n#include <iostream>\n\nusing namespace std;\n\ninline double square(double x) { return x * x; }\n\nint main() {\n    double a(2.0), b(5.0), c(0);\n    cout << \"此时a=\" << a << \"\\tb=\" << b << \" \\tc=\" << c << endl;\n    square(a);\n    b = square(b);\n    c = square(7 + 1);\n    cout << \"此时a=\" << a << \"\\tb=\" << b << \"\\tc=\" << c << endl;\n    return 0;\n}\n\n~~~\n\n该程序的输出为:\n\n~~~\n此时a=2\tb=5\tc=0\n此时a=4\tb=25\tc=64\n~~~\n\n看到上面这个例子，自然就知道不管是内联函数还是常规函数，都是按值传递参数的．\n\n也就是说，例如 c=square(7+1) 这段代码调用square函数时将会先计算7+1的值再传递给形参x，这就是按值传递.\n\n**这使得C++的内联功能远远胜过C语言的宏定义**\n\n__尽管程序没有提供单独的函数原型，但C++的原型特征仍在起作用，因为首次函数出现时是定义函数那么就会充当函数原型.__\n\n__这也就意味着，如果给square()传递int或long类型的值，程序将回自动进行强制类型转换为double类型再把值复制给形参__\n\n### 内联与宏\n\ninline是C++新增的特性.\n\nC语言使用预处理语句#define来提供宏－－内联代码的原始实现．\n\n例如下面这个例子.\n\n~~~C\n#define SQUARE(X) X*X\n\na = SQUARE(2.0);\nb = SQUARE(3.2++);\nc = SQUARE(1+2.3);\n~~~\n\n上述示例只有第一个调用才能正常工作，因为C语言的宏定义不是按值传递的．\n\n---\n\n## 引用变量\n\n引用变量是C++新增的一种复合类型.\n\n引用是为已定义的变量创建了一个别名．\n\n例如，将变量a作为b的引用，则不管是使用a还是b都可以表示该变量，因为它们的内存块相同.\n\n引用变量通常的使用场景是作为函数的形参．\n\n通过将引用变量作为参数，那么函数将使用原始数据，而不是使用其副本．这样除了指针外引用也可以作为处理大型数据结构的一种途径．\n\n---\n\n### 创建引用变量\n\nC++使用 **&** 用于声明引用，但是它还有另外一个作用：地址运算符。\n\n当&为声明引用时可有这样的一个例子:\n\n~~~C++\nint a;\nint & b = a;\n~~~\n\n是否感觉跟指针有点相像呢？\n\n是的，它们确实有点相似，就像声明中double*是指指向double类型的指针，而int&是指指向int的引用。\n\n上面的例子：引用声明允许将a和b互换————它们指向相同的值和内存单元。\n\n下面再看一个例子，你将懂得C++中使用&时引用和地址运算符的区别。\n\n~~~C++\n#include <iostream>\n\nusing namespace std;\n\nint main(){\n\tint a=1;\n\tint & b = a;\n\n\tcout<<\"a:\"<<a<<endl;\n\tcout<<\"b:\"<<b<<endl;\n\n\tb = 2;\n\n\tcout<<\"a:\"<<a<<endl;\n\tcout<<\"b:\"<<b<<endl;\n\n        cout<<\"a-address:\"<<&a<<endl;\n        cout<<\"b-address:\"<<&b<<endl;\n\treturn 0;\n}\n~~~\n\n输出结果为:\n\n~~~\na:1\nb:1\na:2\nb:2\na-address:0x7ffdd4c4ae74\nb-address:0x7ffdd4c4ae74\n~~~\n\n首先我们声明定义了两个变量，一个是a，一个是b，b是指向int类型a变量的引用，所以它们的值和内存单元相同。\n\n然后b被重新赋值，也就是修改它内存单元的值，相应的与它在同块内存单元的a值也随之变化。\n\n再然后，我们输出的不是a和b的值了而是输出它们的地址:\n\n~~~C++\ncout<<\"a-address:\"<<&a<<endl;\n~~~\n\n此时的&代表的就是地址运算符。\n\n经过上面的一些小例子，读者们可能认为C++中&为引用的作用时与指针完全一样啊，但他们还是有些不同的，下面将指出有何不同。\n\n~~~C++\n#include <iostream>\n\nusing namespace std;\n\nint main(){\n\tint a,*p;\n\tint b,*p2(&b);\n\t*p = a;\n\treturn 0;\n}\n~~~\n\n上述代码是可以编译通过的。\n\n**指针在声明时编译器允许不为其进行初始化值**\n\n~~~C++\n#include <iostream>\n\nusing namespace std;\n\nint main(){\n    int a,&b;\n    b = a;\n    return 0;\n}\n~~~\n\n如果代码是这样，那么则编译不通过。\n\n**我们可以把引用看成cosnt指针**，因为const指针是必须在创建时进行初始化，一旦于某个变量关联起来，则只能与此变量进行操作。\n\n也就是说：\n\n~~~C++\nint a,&b(a);\n~~~\n\n**仅在表示上等同于**\n\n~~~C++\nint a;\nconst int *p(&a);\n~~~\n\n上面提到“仅在表示上等同于“为什么呢，请看下面的例子。\n\n~~~C++\n#include <iostream>\n\nusing namespace std;\n\nint main(){\n\tint a(10),&b(a);\n\tcout<<\"a:\"<<a<<endl;\n\tcout<<\"b:\"<<b<<endl;\n\tint c(20);\n\tb = c;\n\tcout<<\"c:\"<<c<<endl;\n\tcout<<\"a:\"<<a<<endl;\n\tcout<<\"b:\"<<b<<endl;\n\treturn 0;\n}\n~~~\n\n输出结果为:\n\n~~~\na:10\nb:10\nc:20\na:20\nb:20\n~~~\n\n可以看到最初b引用的是a，但随后b作为c的引用：\n\n~~~C++\nb = c;\n~~~\n\n**这就根const指针不同了，因为引用是可以改变引用的对象的，而const指针是不能改变指向的对象的.**\n\n我们仔细研究上面的代码可以发现，因为b的引用对象变化，使得b原先引用对象的值也随之发生了变化，这是由于b和a的地址相同，而该地址与c的地址不同。由于b是a的别名，因此上述赋值语句等效于:\n\n~~~C++\na = c;\n~~~\n\n也就是说，这意味着”将c变量的值赋给a变量“。\n\n简而言之，**可以通过初始化声明来设置引用，但不能通过赋值来设置。**\n\n下面有一段有趣的代码，你们可以看看。\n\n~~~C++\nint a(10);\nint *p =&a;\nint &b = *p;\nint c(20);\n*p = &c;\n~~~\n\n上述代码首先是指针p指向的a，而b引用*p(相当于引用a),而后面指针p改变了指向的对象，但是b依然是引用a的。\n\n### 将\n","slug":"C-函数探幽","published":1,"updated":"2019-06-16T17:09:00.773Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uzeh003moumspdibu229","content":"<!--\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=544070223&auto=1&height=66\"></iframe>\n-->\n<a id=\"more\"></a>\n<p><strong>本章内容</strong></p>\n<ul>\n<li>内联函数</li>\n<li>引用变量</li>\n<li>如何按引用传递函数参数</li>\n<li>默认参数</li>\n<li>函数重载</li>\n<li>函数模板</li>\n<li>函数模板具体化</li>\n</ul>\n<p>本章是介绍C++在C基础上新增的特性，是进入C++领域重要的一步．</p>\n<hr>\n<h2 id=\"C-内联函数\"><a href=\"#C-内联函数\" class=\"headerlink\" title=\"C++内联函数\"></a>C++内联函数</h2><blockquote>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a><strong>说明</strong></h3></blockquote>\n<p>内联函数是C++为提高程序运行速度所做出的一项改进．常规函数和内联函数之间的主要区别不在于编写方式，而在于C++编译器如何将它们组合到程序中．要了解内联函数与常规函数之间的区别，必须深入到程序内部．</p>\n<p>那么，我们现在就深入到程序内部．</p>\n<p>首先我们知道，编译器会把我们的源代码编译成可执行程序－－－－由一组机器语言组成．</p>\n<p>当我们运行它时，操作系统将这些指令载入到计算机内存中，因此每条指令都有特定的内存地址．随后计算机将会逐步执行这些指令．</p>\n<p>执行到函数调用指令时，程序将在函数调用后立即存储该指令的内存地址，并将函数参数复制到堆栈，跳到标记函数起点的内存单元，执行函数代码，然后跳回到被保存的指令处．</p>\n<p>那么，来回跳跃并记录跳跃位置意味着以前使用函数时，需要一定的开销．</p>\n<p><strong>所以</strong></p>\n<p>C++内联函数就提供了另一种选择．内联函数的编译代码与其他程序代码＂内联＂(结合/融合)起来．</p>\n<p>相当于编译器将使用相应的函数代码替换函数调用．</p>\n<p>对于内联代码，程序就不用像常规函数那样跳转，只需要将函数定义时的代码复制一份到函数调用时的位置，直接执行即可，这样将会省去函数调用时，疯狂跳转，标记的开销．</p>\n<p><strong>但是</strong></p>\n<p>虽说这样在某种程度上速度确实要快，但是也是有代价的，例如，程序在N个地方调用同一个内联函数，那么改程序将包含该函数代码的10个副本．这样就会有更大的内存开销，虽然运行速度比常规函数的调用快．</p>\n<p><strong>结论</strong></p>\n<p>我们应该在不同的场景选择不同编写函数的方式．如果执行函数代码的时间比处理函数调用机制的时间长，则节省时间只占整个过程的很小一部分，如果代码执行时间短，则内联函数的调用就可以节省非内联函数调用时间的大部分时间．</p>\n<p>另一方面，由于整个过程相当快，因此就算节省了该过程的大部分时间，但节省时间的绝对值并不大．</p>\n<p>_除非_　:该函数被经常调用</p>\n<blockquote>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a><strong>使用</strong></h3></blockquote>\n<p>使用内联函数只需要做到以下两点即可：</p>\n<ul>\n<li><p>在函数声明前加上关键字<strong>inline</strong>;</p>\n</li>\n<li><p>在函数定义前加上关键字<strong>inline</strong>;</p>\n</li>\n</ul>\n<p>通常的写法是省略原型，将整个定义(函数头和所有的函数代码)放在本应提供原型的地方．</p>\n<p><strong>可能遇到的问题</strong></p>\n<p>在我们编写函数为内联函数时，编译器不一定满足这种要求．</p>\n<ul>\n<li><p>编译器认为该函数过大或识别到函数调用了自己 <strong><em>(内联函数不能递归)</em></strong> .</p>\n</li>\n<li><p>有些编译器没有启动或实现这种特性．</p>\n</li>\n</ul>\n<blockquote>\n<h3 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a><strong>案例</strong></h3></blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">double</span> <span class=\"title\">square</span><span class=\"params\">(<span class=\"keyword\">double</span> x)</span> </span>&#123; <span class=\"keyword\">return</span> x * x; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    double a(2.0), b(5.0), c(0);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"此时a=\"</span> &lt;&lt; a &lt;&lt; <span class=\"string\">\"\\tb=\"</span> &lt;&lt; b &lt;&lt; <span class=\"string\">\" \\tc=\"</span> &lt;&lt; c &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    square(a);</span><br><span class=\"line\">    b = square(b);</span><br><span class=\"line\">    c = square(<span class=\"number\">7</span> + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"此时a=\"</span> &lt;&lt; a &lt;&lt; <span class=\"string\">\"\\tb=\"</span> &lt;&lt; b &lt;&lt; <span class=\"string\">\"\\tc=\"</span> &lt;&lt; c &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该程序的输出为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此时a=2\tb=5\tc=0</span><br><span class=\"line\">此时a=4\tb=25\tc=64</span><br></pre></td></tr></table></figure>\n<p>看到上面这个例子，自然就知道不管是内联函数还是常规函数，都是按值传递参数的．</p>\n<p>也就是说，例如 c=square(7+1) 这段代码调用square函数时将会先计算7+1的值再传递给形参x，这就是按值传递.</p>\n<p><strong>这使得C++的内联功能远远胜过C语言的宏定义</strong></p>\n<p><strong>尽管程序没有提供单独的函数原型，但C++的原型特征仍在起作用，因为首次函数出现时是定义函数那么就会充当函数原型.</strong></p>\n<p><strong>这也就意味着，如果给square()传递int或long类型的值，程序将回自动进行强制类型转换为double类型再把值复制给形参</strong></p>\n<h3 id=\"内联与宏\"><a href=\"#内联与宏\" class=\"headerlink\" title=\"内联与宏\"></a>内联与宏</h3><p>inline是C++新增的特性.</p>\n<p>C语言使用预处理语句#define来提供宏－－内联代码的原始实现．</p>\n<p>例如下面这个例子.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SQUARE(X) X*X</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = SQUARE(<span class=\"number\">2.0</span>);</span><br><span class=\"line\">b = SQUARE(<span class=\"number\">3.2</span>++);</span><br><span class=\"line\">c = SQUARE(<span class=\"number\">1</span>+<span class=\"number\">2.3</span>);</span><br></pre></td></tr></table></figure>\n<p>上述示例只有第一个调用才能正常工作，因为C语言的宏定义不是按值传递的．</p>\n<hr>\n<h2 id=\"引用变量\"><a href=\"#引用变量\" class=\"headerlink\" title=\"引用变量\"></a>引用变量</h2><p>引用变量是C++新增的一种复合类型.</p>\n<p>引用是为已定义的变量创建了一个别名．</p>\n<p>例如，将变量a作为b的引用，则不管是使用a还是b都可以表示该变量，因为它们的内存块相同.</p>\n<p>引用变量通常的使用场景是作为函数的形参．</p>\n<p>通过将引用变量作为参数，那么函数将使用原始数据，而不是使用其副本．这样除了指针外引用也可以作为处理大型数据结构的一种途径．</p>\n<hr>\n<h3 id=\"创建引用变量\"><a href=\"#创建引用变量\" class=\"headerlink\" title=\"创建引用变量\"></a>创建引用变量</h3><p>C++使用 <strong>&amp;</strong> 用于声明引用，但是它还有另外一个作用：地址运算符。</p>\n<p>当&amp;为声明引用时可有这样的一个例子:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a;</span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp; b = a;</span><br></pre></td></tr></table></figure>\n<p>是否感觉跟指针有点相像呢？</p>\n<p>是的，它们确实有点相似，就像声明中double*是指指向double类型的指针，而int&amp;是指指向int的引用。</p>\n<p>上面的例子：引用声明允许将a和b互换————它们指向相同的值和内存单元。</p>\n<p>下面再看一个例子，你将懂得C++中使用&amp;时引用和地址运算符的区别。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> &amp; b = a;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"a:\"</span>&lt;&lt;a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"b:\"</span>&lt;&lt;b&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tb = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"a:\"</span>&lt;&lt;a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"b:\"</span>&lt;&lt;b&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"a-address:\"</span>&lt;&lt;&amp;a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"b-address:\"</span>&lt;&lt;&amp;b&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a:1</span><br><span class=\"line\">b:1</span><br><span class=\"line\">a:2</span><br><span class=\"line\">b:2</span><br><span class=\"line\">a-address:0x7ffdd4c4ae74</span><br><span class=\"line\">b-address:0x7ffdd4c4ae74</span><br></pre></td></tr></table></figure>\n<p>首先我们声明定义了两个变量，一个是a，一个是b，b是指向int类型a变量的引用，所以它们的值和内存单元相同。</p>\n<p>然后b被重新赋值，也就是修改它内存单元的值，相应的与它在同块内存单元的a值也随之变化。</p>\n<p>再然后，我们输出的不是a和b的值了而是输出它们的地址:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"a-address:\"</span>&lt;&lt;&amp;a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<p>此时的&amp;代表的就是地址运算符。</p>\n<p>经过上面的一些小例子，读者们可能认为C++中&amp;为引用的作用时与指针完全一样啊，但他们还是有些不同的，下面将指出有何不同。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a,*p;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b,*p2(&amp;b);</span><br><span class=\"line\">\t*p = a;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码是可以编译通过的。</p>\n<p><strong>指针在声明时编译器允许不为其进行初始化值</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a,&amp;b;</span><br><span class=\"line\">    b = a;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果代码是这样，那么则编译不通过。</p>\n<p><strong>我们可以把引用看成cosnt指针</strong>，因为const指针是必须在创建时进行初始化，一旦于某个变量关联起来，则只能与此变量进行操作。</p>\n<p>也就是说：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a,&amp;b(a);</span><br></pre></td></tr></table></figure>\n<p><strong>仅在表示上等同于</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> *<span class=\"title\">p</span><span class=\"params\">(&amp;a)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>上面提到“仅在表示上等同于“为什么呢，请看下面的例子。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tint a(10),&amp;b(a);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"a:\"</span>&lt;&lt;a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"b:\"</span>&lt;&lt;b&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">c</span><span class=\"params\">(<span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\">\tb = c;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"c:\"</span>&lt;&lt;c&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"a:\"</span>&lt;&lt;a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"b:\"</span>&lt;&lt;b&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a:10</span><br><span class=\"line\">b:10</span><br><span class=\"line\">c:20</span><br><span class=\"line\">a:20</span><br><span class=\"line\">b:20</span><br></pre></td></tr></table></figure>\n<p>可以看到最初b引用的是a，但随后b作为c的引用：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = c;</span><br></pre></td></tr></table></figure>\n<p><strong>这就根const指针不同了，因为引用是可以改变引用的对象的，而const指针是不能改变指向的对象的.</strong></p>\n<p>我们仔细研究上面的代码可以发现，因为b的引用对象变化，使得b原先引用对象的值也随之发生了变化，这是由于b和a的地址相同，而该地址与c的地址不同。由于b是a的别名，因此上述赋值语句等效于:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = c;</span><br></pre></td></tr></table></figure>\n<p>也就是说，这意味着”将c变量的值赋给a变量“。</p>\n<p>简而言之，<strong>可以通过初始化声明来设置引用，但不能通过赋值来设置。</strong></p>\n<p>下面有一段有趣的代码，你们可以看看。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">a</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *p =&amp;a;</span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;b = *p;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">c</span><span class=\"params\">(<span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\">*p = &amp;c;</span><br></pre></td></tr></table></figure>\n<p>上述代码首先是指针p指向的a，而b引用*p(相当于引用a),而后面指针p改变了指向的对象，但是b依然是引用a的。</p>\n<h3 id=\"将\"><a href=\"#将\" class=\"headerlink\" title=\"将\"></a>将</h3>","site":{"data":{}},"excerpt":"<!--\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=544070223&auto=1&height=66\"></iframe>\n-->","more":"<p><strong>本章内容</strong></p>\n<ul>\n<li>内联函数</li>\n<li>引用变量</li>\n<li>如何按引用传递函数参数</li>\n<li>默认参数</li>\n<li>函数重载</li>\n<li>函数模板</li>\n<li>函数模板具体化</li>\n</ul>\n<p>本章是介绍C++在C基础上新增的特性，是进入C++领域重要的一步．</p>\n<hr>\n<h2 id=\"C-内联函数\"><a href=\"#C-内联函数\" class=\"headerlink\" title=\"C++内联函数\"></a>C++内联函数</h2><blockquote>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a><strong>说明</strong></h3></blockquote>\n<p>内联函数是C++为提高程序运行速度所做出的一项改进．常规函数和内联函数之间的主要区别不在于编写方式，而在于C++编译器如何将它们组合到程序中．要了解内联函数与常规函数之间的区别，必须深入到程序内部．</p>\n<p>那么，我们现在就深入到程序内部．</p>\n<p>首先我们知道，编译器会把我们的源代码编译成可执行程序－－－－由一组机器语言组成．</p>\n<p>当我们运行它时，操作系统将这些指令载入到计算机内存中，因此每条指令都有特定的内存地址．随后计算机将会逐步执行这些指令．</p>\n<p>执行到函数调用指令时，程序将在函数调用后立即存储该指令的内存地址，并将函数参数复制到堆栈，跳到标记函数起点的内存单元，执行函数代码，然后跳回到被保存的指令处．</p>\n<p>那么，来回跳跃并记录跳跃位置意味着以前使用函数时，需要一定的开销．</p>\n<p><strong>所以</strong></p>\n<p>C++内联函数就提供了另一种选择．内联函数的编译代码与其他程序代码＂内联＂(结合/融合)起来．</p>\n<p>相当于编译器将使用相应的函数代码替换函数调用．</p>\n<p>对于内联代码，程序就不用像常规函数那样跳转，只需要将函数定义时的代码复制一份到函数调用时的位置，直接执行即可，这样将会省去函数调用时，疯狂跳转，标记的开销．</p>\n<p><strong>但是</strong></p>\n<p>虽说这样在某种程度上速度确实要快，但是也是有代价的，例如，程序在N个地方调用同一个内联函数，那么改程序将包含该函数代码的10个副本．这样就会有更大的内存开销，虽然运行速度比常规函数的调用快．</p>\n<p><strong>结论</strong></p>\n<p>我们应该在不同的场景选择不同编写函数的方式．如果执行函数代码的时间比处理函数调用机制的时间长，则节省时间只占整个过程的很小一部分，如果代码执行时间短，则内联函数的调用就可以节省非内联函数调用时间的大部分时间．</p>\n<p>另一方面，由于整个过程相当快，因此就算节省了该过程的大部分时间，但节省时间的绝对值并不大．</p>\n<p>_除非_　:该函数被经常调用</p>\n<blockquote>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a><strong>使用</strong></h3></blockquote>\n<p>使用内联函数只需要做到以下两点即可：</p>\n<ul>\n<li><p>在函数声明前加上关键字<strong>inline</strong>;</p>\n</li>\n<li><p>在函数定义前加上关键字<strong>inline</strong>;</p>\n</li>\n</ul>\n<p>通常的写法是省略原型，将整个定义(函数头和所有的函数代码)放在本应提供原型的地方．</p>\n<p><strong>可能遇到的问题</strong></p>\n<p>在我们编写函数为内联函数时，编译器不一定满足这种要求．</p>\n<ul>\n<li><p>编译器认为该函数过大或识别到函数调用了自己 <strong><em>(内联函数不能递归)</em></strong> .</p>\n</li>\n<li><p>有些编译器没有启动或实现这种特性．</p>\n</li>\n</ul>\n<blockquote>\n<h3 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a><strong>案例</strong></h3></blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">double</span> <span class=\"title\">square</span><span class=\"params\">(<span class=\"keyword\">double</span> x)</span> </span>&#123; <span class=\"keyword\">return</span> x * x; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    double a(2.0), b(5.0), c(0);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"此时a=\"</span> &lt;&lt; a &lt;&lt; <span class=\"string\">\"\\tb=\"</span> &lt;&lt; b &lt;&lt; <span class=\"string\">\" \\tc=\"</span> &lt;&lt; c &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    square(a);</span><br><span class=\"line\">    b = square(b);</span><br><span class=\"line\">    c = square(<span class=\"number\">7</span> + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"此时a=\"</span> &lt;&lt; a &lt;&lt; <span class=\"string\">\"\\tb=\"</span> &lt;&lt; b &lt;&lt; <span class=\"string\">\"\\tc=\"</span> &lt;&lt; c &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该程序的输出为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此时a=2\tb=5\tc=0</span><br><span class=\"line\">此时a=4\tb=25\tc=64</span><br></pre></td></tr></table></figure>\n<p>看到上面这个例子，自然就知道不管是内联函数还是常规函数，都是按值传递参数的．</p>\n<p>也就是说，例如 c=square(7+1) 这段代码调用square函数时将会先计算7+1的值再传递给形参x，这就是按值传递.</p>\n<p><strong>这使得C++的内联功能远远胜过C语言的宏定义</strong></p>\n<p><strong>尽管程序没有提供单独的函数原型，但C++的原型特征仍在起作用，因为首次函数出现时是定义函数那么就会充当函数原型.</strong></p>\n<p><strong>这也就意味着，如果给square()传递int或long类型的值，程序将回自动进行强制类型转换为double类型再把值复制给形参</strong></p>\n<h3 id=\"内联与宏\"><a href=\"#内联与宏\" class=\"headerlink\" title=\"内联与宏\"></a>内联与宏</h3><p>inline是C++新增的特性.</p>\n<p>C语言使用预处理语句#define来提供宏－－内联代码的原始实现．</p>\n<p>例如下面这个例子.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SQUARE(X) X*X</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = SQUARE(<span class=\"number\">2.0</span>);</span><br><span class=\"line\">b = SQUARE(<span class=\"number\">3.2</span>++);</span><br><span class=\"line\">c = SQUARE(<span class=\"number\">1</span>+<span class=\"number\">2.3</span>);</span><br></pre></td></tr></table></figure>\n<p>上述示例只有第一个调用才能正常工作，因为C语言的宏定义不是按值传递的．</p>\n<hr>\n<h2 id=\"引用变量\"><a href=\"#引用变量\" class=\"headerlink\" title=\"引用变量\"></a>引用变量</h2><p>引用变量是C++新增的一种复合类型.</p>\n<p>引用是为已定义的变量创建了一个别名．</p>\n<p>例如，将变量a作为b的引用，则不管是使用a还是b都可以表示该变量，因为它们的内存块相同.</p>\n<p>引用变量通常的使用场景是作为函数的形参．</p>\n<p>通过将引用变量作为参数，那么函数将使用原始数据，而不是使用其副本．这样除了指针外引用也可以作为处理大型数据结构的一种途径．</p>\n<hr>\n<h3 id=\"创建引用变量\"><a href=\"#创建引用变量\" class=\"headerlink\" title=\"创建引用变量\"></a>创建引用变量</h3><p>C++使用 <strong>&amp;</strong> 用于声明引用，但是它还有另外一个作用：地址运算符。</p>\n<p>当&amp;为声明引用时可有这样的一个例子:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a;</span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp; b = a;</span><br></pre></td></tr></table></figure>\n<p>是否感觉跟指针有点相像呢？</p>\n<p>是的，它们确实有点相似，就像声明中double*是指指向double类型的指针，而int&amp;是指指向int的引用。</p>\n<p>上面的例子：引用声明允许将a和b互换————它们指向相同的值和内存单元。</p>\n<p>下面再看一个例子，你将懂得C++中使用&amp;时引用和地址运算符的区别。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> &amp; b = a;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"a:\"</span>&lt;&lt;a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"b:\"</span>&lt;&lt;b&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tb = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"a:\"</span>&lt;&lt;a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"b:\"</span>&lt;&lt;b&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"a-address:\"</span>&lt;&lt;&amp;a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"b-address:\"</span>&lt;&lt;&amp;b&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a:1</span><br><span class=\"line\">b:1</span><br><span class=\"line\">a:2</span><br><span class=\"line\">b:2</span><br><span class=\"line\">a-address:0x7ffdd4c4ae74</span><br><span class=\"line\">b-address:0x7ffdd4c4ae74</span><br></pre></td></tr></table></figure>\n<p>首先我们声明定义了两个变量，一个是a，一个是b，b是指向int类型a变量的引用，所以它们的值和内存单元相同。</p>\n<p>然后b被重新赋值，也就是修改它内存单元的值，相应的与它在同块内存单元的a值也随之变化。</p>\n<p>再然后，我们输出的不是a和b的值了而是输出它们的地址:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"a-address:\"</span>&lt;&lt;&amp;a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<p>此时的&amp;代表的就是地址运算符。</p>\n<p>经过上面的一些小例子，读者们可能认为C++中&amp;为引用的作用时与指针完全一样啊，但他们还是有些不同的，下面将指出有何不同。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a,*p;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b,*p2(&amp;b);</span><br><span class=\"line\">\t*p = a;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码是可以编译通过的。</p>\n<p><strong>指针在声明时编译器允许不为其进行初始化值</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a,&amp;b;</span><br><span class=\"line\">    b = a;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果代码是这样，那么则编译不通过。</p>\n<p><strong>我们可以把引用看成cosnt指针</strong>，因为const指针是必须在创建时进行初始化，一旦于某个变量关联起来，则只能与此变量进行操作。</p>\n<p>也就是说：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a,&amp;b(a);</span><br></pre></td></tr></table></figure>\n<p><strong>仅在表示上等同于</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> *<span class=\"title\">p</span><span class=\"params\">(&amp;a)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>上面提到“仅在表示上等同于“为什么呢，请看下面的例子。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tint a(10),&amp;b(a);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"a:\"</span>&lt;&lt;a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"b:\"</span>&lt;&lt;b&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">c</span><span class=\"params\">(<span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\">\tb = c;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"c:\"</span>&lt;&lt;c&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"a:\"</span>&lt;&lt;a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"b:\"</span>&lt;&lt;b&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a:10</span><br><span class=\"line\">b:10</span><br><span class=\"line\">c:20</span><br><span class=\"line\">a:20</span><br><span class=\"line\">b:20</span><br></pre></td></tr></table></figure>\n<p>可以看到最初b引用的是a，但随后b作为c的引用：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = c;</span><br></pre></td></tr></table></figure>\n<p><strong>这就根const指针不同了，因为引用是可以改变引用的对象的，而const指针是不能改变指向的对象的.</strong></p>\n<p>我们仔细研究上面的代码可以发现，因为b的引用对象变化，使得b原先引用对象的值也随之发生了变化，这是由于b和a的地址相同，而该地址与c的地址不同。由于b是a的别名，因此上述赋值语句等效于:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = c;</span><br></pre></td></tr></table></figure>\n<p>也就是说，这意味着”将c变量的值赋给a变量“。</p>\n<p>简而言之，<strong>可以通过初始化声明来设置引用，但不能通过赋值来设置。</strong></p>\n<p>下面有一段有趣的代码，你们可以看看。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">a</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *p =&amp;a;</span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;b = *p;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">c</span><span class=\"params\">(<span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\">*p = &amp;c;</span><br></pre></td></tr></table></figure>\n<p>上述代码首先是指针p指向的a，而b引用*p(相当于引用a),而后面指针p改变了指向的对象，但是b依然是引用a的。</p>\n<h3 id=\"将\"><a href=\"#将\" class=\"headerlink\" title=\"将\"></a>将</h3>"},{"title":"C++的命名空间与作用域","copyright":true,"date":"2019-05-30T07:42:43.000Z","_content":"\n本篇文章将会详细的讲解在使用C++时一些关于作用域的易错点，以及在各模块之间有同名冲突问题要如何利用命名空间解决．\n\n<!--more-->\n\n# **命名空间**\n\n> 也称为名字空间，可以解决多模块同名冲突的问题\n\n## **命名空间的作用**\n\n在日后的开发工作中，总是团队开发，那么可能会因为个人习惯问题，造成对左值命名相同．那么在使用两个不同的库时，可能会有两个相同的对象，那么就会出现命名冲突．\n\n解决这种冲突的方法就是在定义时加上前缀，在使用时指定命名空间的作用域即可，这就是命名空间．\n\n## **定义命名空间**\n\n定义命名空间很简单只需要使用`namespace`关键字即可\n\n我们可以定义一个命名空间将自己的类，函数或对象包括起来:\n\n~~~C++\nnamespace myspace{\n    class Test{\n    public:\n      int a;\n      Test(int a):this->a(a){}\n    };\n    Test t(10);\n}\n\nint main(){\n  using namespace myspace;\n\n  Test t(20);\n  cout<<t.a<<endl;\n}\n~~~\n\n与类的成员类似，这些对象，函数，类，被称为名字空间的成员．\n\n## **using声明**\n\n> using namespace `命名空间名`;\n\n在前面的内容中，已经不知不觉地使用上了名字空间，例如:\n\n~~~C++\nusing namespace std;\ncout<<\"hello\"<<endl;\n~~~\n\nusing声明语句告诉编译器可以尝试者从std命名空间内查找cout和endl.\n\n## **using指令**\n\n倘若我们只需要使用`std`命名空间中的`cout`和`endl`成员，那么可以通过using指令指定待使用的命名空间的成员.\n\n~~~C++\nusing std::cout;\nusing std::endl;\ncout<<\"hello\"<<endl;\n~~~\n\nusing指明会明确的告诉编译器，将使用到std命名空间中cout和endl，这样就不需要编译器依次查找了，效率会提高一点.\n\n## **命名空间的别名**\n\n如果命名空间都有相同的名称了，我们还可以对它设置一个别名，用于区分.\n\n~~~C++\nnamespace myStd = std;\n\nmyStd::cout<<\"hello\"<<myStd::endl;\n~~~\n\n其中`myStd`作为`std`命名空间的别名．\n\n# **作用域**\n\n> 可以简称为`域`,是指对象的可见性问题\n\nC++目前支持3种作用域:\n  \n  - 局部作用域(local scope);\n  \n  - 名字作用域(namespace scope);\n\n  - 类域(calss scope);\n\n## **局部作用域**\n\n在每段语句块都包含一个局部的作用域，在这个语句块中声明的对象仅在当前语句块内部起作用．\n\n例如，函数体，循环体都是局部作用域:\n\n~~~C++\nvoid foo(){\n  int a(10);\n}\n//error a超过了作用域，访问不到foo()函数内部的a变量\ncout<<a<<endl;\n~~~\n\n~~~C++\nfor(int i=0;i<100;i++){\n  cout<<i<<endl;\n}\n//error i超过了for的作用域，i是for的局部变量\ncout<<i<<endl;\n~~~\n\n**提示:在Visual C++6.0中上述代码将i输出不会报错，因为它没有遵循该项C++标准，但在VC2003和Dev-C++中都会报错.**\n\n下面再看一个case语句块的作用域\n\n~~~C++\nint choose(-1);\ncin>>choose;\nswitch(choose){\n  case 0:\n    string str;\n    break;\n  case 1:\n    //error:重定义了str\n    string str;\n    break;\n}\n~~~\n\n若不用`{}`将代码括起来，那么就会出现重定义的错误，因为在同一个作用域下定义了两个string str变量，正确的代码如下:\n\n~~~C++\nint choose(-1);\ncin>>choose;\nswitch(choose){\n  case 0:\n  {\n    string str;\n    break;\n  }\n  case 1:\n  {\n    //error:重定义了str\n    string str;\n    break;\n  }\n}\n~~~\n\n我们通过加上`{}`使得给每个case块加上了不同的作用域，也就解决了重定义的问题．\n\n## **函数的作用域**\n\n函数体和上面提到的作用域一样，在函数体内声明的变量，只能在函数体内访问．\n\n函数体内部包括花括号内的代码以及函数的形参列表，它们都受函数的作用域限制．\n\n~~~C++\nvoid foo(int i){\n  //正常访问i变量\n  cout<<i<<endl;\n}\n//error 未声明i变量\ncout<<i<<endl;\n~~~\n\n当函数之间互相调用也是有单独的作用域的，例如递归代码，注意观察i的值，每次调用自身时i的值都是不同的\n\n~~~C++\nvoid foo(int i){\n  cout<<i<<endl;\n  if(i>0){\n    foo(i/2);\n  }\n}\n~~~\n\n\n# **局部变量的存储类型**\n\n你可能听说过:自动存储类型，静态存储类型，但是你听过`寄存器存储类型`么?\n\n不同的存储类型，决定了C++编译器存储这些属性的空间和方式.\n\n## **自动存储类型**\n\n在默认情况下，我们定义的变量就属于自动存储类型\n\n~~~C++\nvoid foo(){\n  int a(10);\n  cout<<a<<endl;\n}\n~~~\n\n在foo()函数体执行完毕后`a`变量将会自动释放，我们也可以换种写法:\n\n~~~C++\nvoid foo(){\n  auto int a(10);\n  cout<<a<<endl;\n}\n~~~\n这样做只不过为了显式的说明这个是个自动存储类型的变量\n\n我们还可以使用类函数观测自动存储类型的销毁时间:\n\n~~~C++\n#include <iostream>\n\nusing namespace std;\n\nclass Test {\npublic:\n    int a;\n\n    Test(int a);\n\n    ~Test();\n};\n\nTest::Test(int a) : a(a) {\n    cout << \"创建[\" << this << \"]\" << endl;\n}\n\nTest::~Test() {\n    cout << \"销毁[\" << this << \"]\" << endl;\n}\n\nint main() {\n    Test t(10);\n    Test t1(20);\n    return 0;\n}\n~~~\n\n输出结果\n\n~~~\n创建[0x7fff82f501c0]\n创建[0x7fff82f501c4]\n销毁[0x7fff82f501c4]\n销毁[0x7fff82f501c0]\n\nProcess finished with exit code 0\n~~~\n\n以上代码就可观测到自动存储类型变量的自动销毁过程．\n\n**注意，由于自动存储类型变量会自动销毁，所以我们不要保存自动存储类型变量的地址，因为在对象销毁后，它不再具有我们程序赋予它的意义．**\n\n~~~C++\nvoid *foo(){\n  auto Test t(10);\n  return &t;\n}\n~~~\n\n## **寄存器存储类型**\n\n寄存器存储类型继承于C语言，我们在对这种类型的变量进行存储数据时程序将会从寄存器中获取，而非内存，这样可以提高效率，这常常用于被频繁使用的变量．\n\n~~~C++\nvoid foo(){\n    for (register int i = 0; i < 10000; ++i) {\n        cout<<i<<endl;\n    }\n}\n~~~\n\n虽说C++继承了C语言的寄存器存储类型这一特性，但我们对一个变量加上`register`仅仅只能说是一种期望，因为有些编译器可能不会理会我们，编译器可能更清楚，如何处理这个变量更加高效．\n\n## **静态存储类型**\n\n静态存储变量特殊在于:它超出局部作用域的时候，却依然不会被销毁．\n\n请看下面的代码:\n\n~~~C++\n#include <iostream>\n\nusing namespace std;\n\nclass Test {\n    int _a;\npublic:\n    Test(int a) : _a(a) {\n        cout << \"创建[\" << this << \"]\" << endl;\n    }\n\n    ~Test() {\n        cout << \"销毁[\" << this << \"]\" << endl;\n    }\n};\n\nvoid foo() {\n    //静态变量\n    static Test t(10);\n    cout << \"t对象已销毁\" << endl;\n}\n\nint main() {\n    //调用第一次\n    foo();\n    //调用第二次\n    foo();\n    return 0;\n}\n~~~\n\n输出结果:\n\n~~~\n创建[0x5645e7afa19c]\nt对象已销毁\nt对象已销毁\n销毁[0x5645e7afa19c]\n~~~\n\n可以看到，我们调用了两次foo()函数，也就是创建了两次Test对象，但是最终输出的结果却只是创建了一次和销毁了一次，也就说的那个程序执行完第一次foo()函数后，静态变量`t`依然存在!\n\n**常见用法**\n\n程序员们偶尔会利用static的特性，让静态变量存储一些历史数据，不需要每次都销毁的数据.\n\n~~~C++\n#include <iostream>\n\nusing namespace std;\n\nvoid foo() {\n    static int i(0);\n    i++;\n    cout << \"第\" << i << \"次调用foo()\" << endl;\n}\n\nint main() {\n    for (int i = 0; i < 3; ++i) {\n        foo();\n    }\n    return 0;\n}\n~~~\n\n输出结果\n\n~~~\n第1次调用foo()\n第2次调用foo()\n第3次调用foo()\n\nProcess finished with exit code 0\n~~~\n\n今天就先写到这里，继续学习了.\n\n# **命名空间域**\n\n## **全局域**\n\n~~~C++\n//全局作用域下的varA\nint varA=100;\nvoid foo1(){\n    varA++;\n}\nvoid foo2(){\n    int varA=200;\n    ::varA++;\n    //输出内部作用域的varA\n    cout<<varA<<endl;\n    //输出全局作用域的varA\n    cout<<::varA<<endl;\n}\nint main() {\n    foo1();\n    foo2();\n    return 0;\n}\n~~~\n\n输出结果\n\n~~~\n200\n102\n\nProcess finished with exit code 0\n~~~\n\n最外层的varA为全局作用域的变量，当内部作用域出现相同的变量名时，那么外层的变量将会被隐藏。\n\n我们使用域操作符\"::\"来显式的指定作用域。\n\n\n\n","source":"_posts/C-的命名空间与作用域.md","raw":"---\ntitle: C++的命名空间与作用域\ncopyright: true\ndate: 2019-05-30 15:42:43\ncategories: 学习笔记\ntags:\n  - C++\n---\n\n本篇文章将会详细的讲解在使用C++时一些关于作用域的易错点，以及在各模块之间有同名冲突问题要如何利用命名空间解决．\n\n<!--more-->\n\n# **命名空间**\n\n> 也称为名字空间，可以解决多模块同名冲突的问题\n\n## **命名空间的作用**\n\n在日后的开发工作中，总是团队开发，那么可能会因为个人习惯问题，造成对左值命名相同．那么在使用两个不同的库时，可能会有两个相同的对象，那么就会出现命名冲突．\n\n解决这种冲突的方法就是在定义时加上前缀，在使用时指定命名空间的作用域即可，这就是命名空间．\n\n## **定义命名空间**\n\n定义命名空间很简单只需要使用`namespace`关键字即可\n\n我们可以定义一个命名空间将自己的类，函数或对象包括起来:\n\n~~~C++\nnamespace myspace{\n    class Test{\n    public:\n      int a;\n      Test(int a):this->a(a){}\n    };\n    Test t(10);\n}\n\nint main(){\n  using namespace myspace;\n\n  Test t(20);\n  cout<<t.a<<endl;\n}\n~~~\n\n与类的成员类似，这些对象，函数，类，被称为名字空间的成员．\n\n## **using声明**\n\n> using namespace `命名空间名`;\n\n在前面的内容中，已经不知不觉地使用上了名字空间，例如:\n\n~~~C++\nusing namespace std;\ncout<<\"hello\"<<endl;\n~~~\n\nusing声明语句告诉编译器可以尝试者从std命名空间内查找cout和endl.\n\n## **using指令**\n\n倘若我们只需要使用`std`命名空间中的`cout`和`endl`成员，那么可以通过using指令指定待使用的命名空间的成员.\n\n~~~C++\nusing std::cout;\nusing std::endl;\ncout<<\"hello\"<<endl;\n~~~\n\nusing指明会明确的告诉编译器，将使用到std命名空间中cout和endl，这样就不需要编译器依次查找了，效率会提高一点.\n\n## **命名空间的别名**\n\n如果命名空间都有相同的名称了，我们还可以对它设置一个别名，用于区分.\n\n~~~C++\nnamespace myStd = std;\n\nmyStd::cout<<\"hello\"<<myStd::endl;\n~~~\n\n其中`myStd`作为`std`命名空间的别名．\n\n# **作用域**\n\n> 可以简称为`域`,是指对象的可见性问题\n\nC++目前支持3种作用域:\n  \n  - 局部作用域(local scope);\n  \n  - 名字作用域(namespace scope);\n\n  - 类域(calss scope);\n\n## **局部作用域**\n\n在每段语句块都包含一个局部的作用域，在这个语句块中声明的对象仅在当前语句块内部起作用．\n\n例如，函数体，循环体都是局部作用域:\n\n~~~C++\nvoid foo(){\n  int a(10);\n}\n//error a超过了作用域，访问不到foo()函数内部的a变量\ncout<<a<<endl;\n~~~\n\n~~~C++\nfor(int i=0;i<100;i++){\n  cout<<i<<endl;\n}\n//error i超过了for的作用域，i是for的局部变量\ncout<<i<<endl;\n~~~\n\n**提示:在Visual C++6.0中上述代码将i输出不会报错，因为它没有遵循该项C++标准，但在VC2003和Dev-C++中都会报错.**\n\n下面再看一个case语句块的作用域\n\n~~~C++\nint choose(-1);\ncin>>choose;\nswitch(choose){\n  case 0:\n    string str;\n    break;\n  case 1:\n    //error:重定义了str\n    string str;\n    break;\n}\n~~~\n\n若不用`{}`将代码括起来，那么就会出现重定义的错误，因为在同一个作用域下定义了两个string str变量，正确的代码如下:\n\n~~~C++\nint choose(-1);\ncin>>choose;\nswitch(choose){\n  case 0:\n  {\n    string str;\n    break;\n  }\n  case 1:\n  {\n    //error:重定义了str\n    string str;\n    break;\n  }\n}\n~~~\n\n我们通过加上`{}`使得给每个case块加上了不同的作用域，也就解决了重定义的问题．\n\n## **函数的作用域**\n\n函数体和上面提到的作用域一样，在函数体内声明的变量，只能在函数体内访问．\n\n函数体内部包括花括号内的代码以及函数的形参列表，它们都受函数的作用域限制．\n\n~~~C++\nvoid foo(int i){\n  //正常访问i变量\n  cout<<i<<endl;\n}\n//error 未声明i变量\ncout<<i<<endl;\n~~~\n\n当函数之间互相调用也是有单独的作用域的，例如递归代码，注意观察i的值，每次调用自身时i的值都是不同的\n\n~~~C++\nvoid foo(int i){\n  cout<<i<<endl;\n  if(i>0){\n    foo(i/2);\n  }\n}\n~~~\n\n\n# **局部变量的存储类型**\n\n你可能听说过:自动存储类型，静态存储类型，但是你听过`寄存器存储类型`么?\n\n不同的存储类型，决定了C++编译器存储这些属性的空间和方式.\n\n## **自动存储类型**\n\n在默认情况下，我们定义的变量就属于自动存储类型\n\n~~~C++\nvoid foo(){\n  int a(10);\n  cout<<a<<endl;\n}\n~~~\n\n在foo()函数体执行完毕后`a`变量将会自动释放，我们也可以换种写法:\n\n~~~C++\nvoid foo(){\n  auto int a(10);\n  cout<<a<<endl;\n}\n~~~\n这样做只不过为了显式的说明这个是个自动存储类型的变量\n\n我们还可以使用类函数观测自动存储类型的销毁时间:\n\n~~~C++\n#include <iostream>\n\nusing namespace std;\n\nclass Test {\npublic:\n    int a;\n\n    Test(int a);\n\n    ~Test();\n};\n\nTest::Test(int a) : a(a) {\n    cout << \"创建[\" << this << \"]\" << endl;\n}\n\nTest::~Test() {\n    cout << \"销毁[\" << this << \"]\" << endl;\n}\n\nint main() {\n    Test t(10);\n    Test t1(20);\n    return 0;\n}\n~~~\n\n输出结果\n\n~~~\n创建[0x7fff82f501c0]\n创建[0x7fff82f501c4]\n销毁[0x7fff82f501c4]\n销毁[0x7fff82f501c0]\n\nProcess finished with exit code 0\n~~~\n\n以上代码就可观测到自动存储类型变量的自动销毁过程．\n\n**注意，由于自动存储类型变量会自动销毁，所以我们不要保存自动存储类型变量的地址，因为在对象销毁后，它不再具有我们程序赋予它的意义．**\n\n~~~C++\nvoid *foo(){\n  auto Test t(10);\n  return &t;\n}\n~~~\n\n## **寄存器存储类型**\n\n寄存器存储类型继承于C语言，我们在对这种类型的变量进行存储数据时程序将会从寄存器中获取，而非内存，这样可以提高效率，这常常用于被频繁使用的变量．\n\n~~~C++\nvoid foo(){\n    for (register int i = 0; i < 10000; ++i) {\n        cout<<i<<endl;\n    }\n}\n~~~\n\n虽说C++继承了C语言的寄存器存储类型这一特性，但我们对一个变量加上`register`仅仅只能说是一种期望，因为有些编译器可能不会理会我们，编译器可能更清楚，如何处理这个变量更加高效．\n\n## **静态存储类型**\n\n静态存储变量特殊在于:它超出局部作用域的时候，却依然不会被销毁．\n\n请看下面的代码:\n\n~~~C++\n#include <iostream>\n\nusing namespace std;\n\nclass Test {\n    int _a;\npublic:\n    Test(int a) : _a(a) {\n        cout << \"创建[\" << this << \"]\" << endl;\n    }\n\n    ~Test() {\n        cout << \"销毁[\" << this << \"]\" << endl;\n    }\n};\n\nvoid foo() {\n    //静态变量\n    static Test t(10);\n    cout << \"t对象已销毁\" << endl;\n}\n\nint main() {\n    //调用第一次\n    foo();\n    //调用第二次\n    foo();\n    return 0;\n}\n~~~\n\n输出结果:\n\n~~~\n创建[0x5645e7afa19c]\nt对象已销毁\nt对象已销毁\n销毁[0x5645e7afa19c]\n~~~\n\n可以看到，我们调用了两次foo()函数，也就是创建了两次Test对象，但是最终输出的结果却只是创建了一次和销毁了一次，也就说的那个程序执行完第一次foo()函数后，静态变量`t`依然存在!\n\n**常见用法**\n\n程序员们偶尔会利用static的特性，让静态变量存储一些历史数据，不需要每次都销毁的数据.\n\n~~~C++\n#include <iostream>\n\nusing namespace std;\n\nvoid foo() {\n    static int i(0);\n    i++;\n    cout << \"第\" << i << \"次调用foo()\" << endl;\n}\n\nint main() {\n    for (int i = 0; i < 3; ++i) {\n        foo();\n    }\n    return 0;\n}\n~~~\n\n输出结果\n\n~~~\n第1次调用foo()\n第2次调用foo()\n第3次调用foo()\n\nProcess finished with exit code 0\n~~~\n\n今天就先写到这里，继续学习了.\n\n# **命名空间域**\n\n## **全局域**\n\n~~~C++\n//全局作用域下的varA\nint varA=100;\nvoid foo1(){\n    varA++;\n}\nvoid foo2(){\n    int varA=200;\n    ::varA++;\n    //输出内部作用域的varA\n    cout<<varA<<endl;\n    //输出全局作用域的varA\n    cout<<::varA<<endl;\n}\nint main() {\n    foo1();\n    foo2();\n    return 0;\n}\n~~~\n\n输出结果\n\n~~~\n200\n102\n\nProcess finished with exit code 0\n~~~\n\n最外层的varA为全局作用域的变量，当内部作用域出现相同的变量名时，那么外层的变量将会被隐藏。\n\n我们使用域操作符\"::\"来显式的指定作用域。\n\n\n\n","slug":"C-的命名空间与作用域","published":1,"updated":"2019-06-16T17:09:00.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uzei003ooumssciuvbmi","content":"<p>本篇文章将会详细的讲解在使用C++时一些关于作用域的易错点，以及在各模块之间有同名冲突问题要如何利用命名空间解决．</p>\n<a id=\"more\"></a>\n<h1 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a><strong>命名空间</strong></h1><blockquote>\n<p>也称为名字空间，可以解决多模块同名冲突的问题</p>\n</blockquote>\n<h2 id=\"命名空间的作用\"><a href=\"#命名空间的作用\" class=\"headerlink\" title=\"命名空间的作用\"></a><strong>命名空间的作用</strong></h2><p>在日后的开发工作中，总是团队开发，那么可能会因为个人习惯问题，造成对左值命名相同．那么在使用两个不同的库时，可能会有两个相同的对象，那么就会出现命名冲突．</p>\n<p>解决这种冲突的方法就是在定义时加上前缀，在使用时指定命名空间的作用域即可，这就是命名空间．</p>\n<h2 id=\"定义命名空间\"><a href=\"#定义命名空间\" class=\"headerlink\" title=\"定义命名空间\"></a><strong>定义命名空间</strong></h2><p>定义命名空间很简单只需要使用<code>namespace</code>关键字即可</p>\n<p>我们可以定义一个命名空间将自己的类，函数或对象包括起来:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> myspace&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">      Test(<span class=\"keyword\">int</span> a):<span class=\"keyword\">this</span>-&gt;a(a)&#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"function\">Test <span class=\"title\">t</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> myspace;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\">Test <span class=\"title\">t</span><span class=\"params\">(<span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;t.a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>与类的成员类似，这些对象，函数，类，被称为名字空间的成员．</p>\n<h2 id=\"using声明\"><a href=\"#using声明\" class=\"headerlink\" title=\"using声明\"></a><strong>using声明</strong></h2><blockquote>\n<p>using namespace <code>命名空间名</code>;</p>\n</blockquote>\n<p>在前面的内容中，已经不知不觉地使用上了名字空间，例如:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"hello\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<p>using声明语句告诉编译器可以尝试者从std命名空间内查找cout和endl.</p>\n<h2 id=\"using指令\"><a href=\"#using指令\" class=\"headerlink\" title=\"using指令\"></a><strong>using指令</strong></h2><p>倘若我们只需要使用<code>std</code>命名空间中的<code>cout</code>和<code>endl</code>成员，那么可以通过using指令指定待使用的命名空间的成员.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"hello\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<p>using指明会明确的告诉编译器，将使用到std命名空间中cout和endl，这样就不需要编译器依次查找了，效率会提高一点.</p>\n<h2 id=\"命名空间的别名\"><a href=\"#命名空间的别名\" class=\"headerlink\" title=\"命名空间的别名\"></a><strong>命名空间的别名</strong></h2><p>如果命名空间都有相同的名称了，我们还可以对它设置一个别名，用于区分.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> myStd = <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">myStd::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"hello\"</span>&lt;&lt;myStd::<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<p>其中<code>myStd</code>作为<code>std</code>命名空间的别名．</p>\n<h1 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a><strong>作用域</strong></h1><blockquote>\n<p>可以简称为<code>域</code>,是指对象的可见性问题</p>\n</blockquote>\n<p>C++目前支持3种作用域:</p>\n<ul>\n<li><p>局部作用域(local scope);</p>\n</li>\n<li><p>名字作用域(namespace scope);</p>\n</li>\n<li><p>类域(calss scope);</p>\n</li>\n</ul>\n<h2 id=\"局部作用域\"><a href=\"#局部作用域\" class=\"headerlink\" title=\"局部作用域\"></a><strong>局部作用域</strong></h2><p>在每段语句块都包含一个局部的作用域，在这个语句块中声明的对象仅在当前语句块内部起作用．</p>\n<p>例如，函数体，循环体都是局部作用域:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">a</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//error a超过了作用域，访问不到foo()函数内部的a变量</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100</span>;i++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;i&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//error i超过了for的作用域，i是for的局部变量</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;i&lt;&lt;<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>提示:在Visual C++6.0中上述代码将i输出不会报错，因为它没有遵循该项C++标准，但在VC2003和Dev-C++中都会报错.</strong></p>\n<p>下面再看一个case语句块的作用域</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">choose</span><span class=\"params\">(<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\"><span class=\"built_in\">cin</span>&gt;&gt;choose;</span><br><span class=\"line\"><span class=\"keyword\">switch</span>(choose)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">    <span class=\"built_in\">string</span> str;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    <span class=\"comment\">//error:重定义了str</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> str;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>若不用<code>{}</code>将代码括起来，那么就会出现重定义的错误，因为在同一个作用域下定义了两个string str变量，正确的代码如下:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">choose</span><span class=\"params\">(<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\"><span class=\"built_in\">cin</span>&gt;&gt;choose;</span><br><span class=\"line\"><span class=\"keyword\">switch</span>(choose)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> str;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">//error:重定义了str</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> str;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们通过加上<code>{}</code>使得给每个case块加上了不同的作用域，也就解决了重定义的问题．</p>\n<h2 id=\"函数的作用域\"><a href=\"#函数的作用域\" class=\"headerlink\" title=\"函数的作用域\"></a><strong>函数的作用域</strong></h2><p>函数体和上面提到的作用域一样，在函数体内声明的变量，只能在函数体内访问．</p>\n<p>函数体内部包括花括号内的代码以及函数的形参列表，它们都受函数的作用域限制．</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//正常访问i变量</span></span><br><span class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;i&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//error 未声明i变量</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;i&lt;&lt;<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<p>当函数之间互相调用也是有单独的作用域的，例如递归代码，注意观察i的值，每次调用自身时i的值都是不同的</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;i&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(i&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    foo(i/<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"局部变量的存储类型\"><a href=\"#局部变量的存储类型\" class=\"headerlink\" title=\"局部变量的存储类型\"></a><strong>局部变量的存储类型</strong></h1><p>你可能听说过:自动存储类型，静态存储类型，但是你听过<code>寄存器存储类型</code>么?</p>\n<p>不同的存储类型，决定了C++编译器存储这些属性的空间和方式.</p>\n<h2 id=\"自动存储类型\"><a href=\"#自动存储类型\" class=\"headerlink\" title=\"自动存储类型\"></a><strong>自动存储类型</strong></h2><p>在默认情况下，我们定义的变量就属于自动存储类型</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">a</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在foo()函数体执行完毕后<code>a</code>变量将会自动释放，我们也可以换种写法:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"keyword\">int</span> <span class=\"title\">a</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样做只不过为了显式的说明这个是个自动存储类型的变量</p>\n<p>我们还可以使用类函数观测自动存储类型的销毁时间:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a;</span><br><span class=\"line\"></span><br><span class=\"line\">    Test(<span class=\"keyword\">int</span> a);</span><br><span class=\"line\"></span><br><span class=\"line\">    ~Test();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Test::Test(<span class=\"keyword\">int</span> a) : a(a) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"创建[\"</span> &lt;&lt; <span class=\"keyword\">this</span> &lt;&lt; <span class=\"string\">\"]\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Test::~Test() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"销毁[\"</span> &lt;&lt; <span class=\"keyword\">this</span> &lt;&lt; <span class=\"string\">\"]\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Test <span class=\"title\">t</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Test <span class=\"title\">t1</span><span class=\"params\">(<span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建[0x7fff82f501c0]</span><br><span class=\"line\">创建[0x7fff82f501c4]</span><br><span class=\"line\">销毁[0x7fff82f501c4]</span><br><span class=\"line\">销毁[0x7fff82f501c0]</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n<p>以上代码就可观测到自动存储类型变量的自动销毁过程．</p>\n<p><strong>注意，由于自动存储类型变量会自动销毁，所以我们不要保存自动存储类型变量的地址，因为在对象销毁后，它不再具有我们程序赋予它的意义．</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">auto</span> Test <span class=\"title\">t</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"寄存器存储类型\"><a href=\"#寄存器存储类型\" class=\"headerlink\" title=\"寄存器存储类型\"></a><strong>寄存器存储类型</strong></h2><p>寄存器存储类型继承于C语言，我们在对这种类型的变量进行存储数据时程序将会从寄存器中获取，而非内存，这样可以提高效率，这常常用于被频繁使用的变量．</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; ++i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;i&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>虽说C++继承了C语言的寄存器存储类型这一特性，但我们对一个变量加上<code>register</code>仅仅只能说是一种期望，因为有些编译器可能不会理会我们，编译器可能更清楚，如何处理这个变量更加高效．</p>\n<h2 id=\"静态存储类型\"><a href=\"#静态存储类型\" class=\"headerlink\" title=\"静态存储类型\"></a><strong>静态存储类型</strong></h2><p>静态存储变量特殊在于:它超出局部作用域的时候，却依然不会被销毁．</p>\n<p>请看下面的代码:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> _a;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Test(<span class=\"keyword\">int</span> a) : _a(a) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"创建[\"</span> &lt;&lt; <span class=\"keyword\">this</span> &lt;&lt; <span class=\"string\">\"]\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~Test() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"销毁[\"</span> &lt;&lt; <span class=\"keyword\">this</span> &lt;&lt; <span class=\"string\">\"]\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//静态变量</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Test <span class=\"title\">t</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"t对象已销毁\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//调用第一次</span></span><br><span class=\"line\">    foo();</span><br><span class=\"line\">    <span class=\"comment\">//调用第二次</span></span><br><span class=\"line\">    foo();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建[0x5645e7afa19c]</span><br><span class=\"line\">t对象已销毁</span><br><span class=\"line\">t对象已销毁</span><br><span class=\"line\">销毁[0x5645e7afa19c]</span><br></pre></td></tr></table></figure>\n<p>可以看到，我们调用了两次foo()函数，也就是创建了两次Test对象，但是最终输出的结果却只是创建了一次和销毁了一次，也就说的那个程序执行完第一次foo()函数后，静态变量<code>t</code>依然存在!</p>\n<p><strong>常见用法</strong></p>\n<p>程序员们偶尔会利用static的特性，让静态变量存储一些历史数据，不需要每次都销毁的数据.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">i</span><span class=\"params\">(<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"第\"</span> &lt;&lt; i &lt;&lt; <span class=\"string\">\"次调用foo()\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; ++i) &#123;</span><br><span class=\"line\">        foo();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第1次调用foo()</span><br><span class=\"line\">第2次调用foo()</span><br><span class=\"line\">第3次调用foo()</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n<p>今天就先写到这里，继续学习了.</p>\n<h1 id=\"命名空间域\"><a href=\"#命名空间域\" class=\"headerlink\" title=\"命名空间域\"></a><strong>命名空间域</strong></h1><h2 id=\"全局域\"><a href=\"#全局域\" class=\"headerlink\" title=\"全局域\"></a><strong>全局域</strong></h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//全局作用域下的varA</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> varA=<span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    varA++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> varA=<span class=\"number\">200</span>;</span><br><span class=\"line\">    ::varA++;</span><br><span class=\"line\">    <span class=\"comment\">//输出内部作用域的varA</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;varA&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"comment\">//输出全局作用域的varA</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;::varA&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    foo1();</span><br><span class=\"line\">    foo2();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">200</span><br><span class=\"line\">102</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n<p>最外层的varA为全局作用域的变量，当内部作用域出现相同的变量名时，那么外层的变量将会被隐藏。</p>\n<p>我们使用域操作符”::”来显式的指定作用域。</p>\n","site":{"data":{}},"excerpt":"<p>本篇文章将会详细的讲解在使用C++时一些关于作用域的易错点，以及在各模块之间有同名冲突问题要如何利用命名空间解决．</p>","more":"<h1 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a><strong>命名空间</strong></h1><blockquote>\n<p>也称为名字空间，可以解决多模块同名冲突的问题</p>\n</blockquote>\n<h2 id=\"命名空间的作用\"><a href=\"#命名空间的作用\" class=\"headerlink\" title=\"命名空间的作用\"></a><strong>命名空间的作用</strong></h2><p>在日后的开发工作中，总是团队开发，那么可能会因为个人习惯问题，造成对左值命名相同．那么在使用两个不同的库时，可能会有两个相同的对象，那么就会出现命名冲突．</p>\n<p>解决这种冲突的方法就是在定义时加上前缀，在使用时指定命名空间的作用域即可，这就是命名空间．</p>\n<h2 id=\"定义命名空间\"><a href=\"#定义命名空间\" class=\"headerlink\" title=\"定义命名空间\"></a><strong>定义命名空间</strong></h2><p>定义命名空间很简单只需要使用<code>namespace</code>关键字即可</p>\n<p>我们可以定义一个命名空间将自己的类，函数或对象包括起来:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> myspace&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">      Test(<span class=\"keyword\">int</span> a):<span class=\"keyword\">this</span>-&gt;a(a)&#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"function\">Test <span class=\"title\">t</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> myspace;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\">Test <span class=\"title\">t</span><span class=\"params\">(<span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;t.a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>与类的成员类似，这些对象，函数，类，被称为名字空间的成员．</p>\n<h2 id=\"using声明\"><a href=\"#using声明\" class=\"headerlink\" title=\"using声明\"></a><strong>using声明</strong></h2><blockquote>\n<p>using namespace <code>命名空间名</code>;</p>\n</blockquote>\n<p>在前面的内容中，已经不知不觉地使用上了名字空间，例如:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"hello\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<p>using声明语句告诉编译器可以尝试者从std命名空间内查找cout和endl.</p>\n<h2 id=\"using指令\"><a href=\"#using指令\" class=\"headerlink\" title=\"using指令\"></a><strong>using指令</strong></h2><p>倘若我们只需要使用<code>std</code>命名空间中的<code>cout</code>和<code>endl</code>成员，那么可以通过using指令指定待使用的命名空间的成员.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"hello\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<p>using指明会明确的告诉编译器，将使用到std命名空间中cout和endl，这样就不需要编译器依次查找了，效率会提高一点.</p>\n<h2 id=\"命名空间的别名\"><a href=\"#命名空间的别名\" class=\"headerlink\" title=\"命名空间的别名\"></a><strong>命名空间的别名</strong></h2><p>如果命名空间都有相同的名称了，我们还可以对它设置一个别名，用于区分.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> myStd = <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">myStd::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"hello\"</span>&lt;&lt;myStd::<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<p>其中<code>myStd</code>作为<code>std</code>命名空间的别名．</p>\n<h1 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a><strong>作用域</strong></h1><blockquote>\n<p>可以简称为<code>域</code>,是指对象的可见性问题</p>\n</blockquote>\n<p>C++目前支持3种作用域:</p>\n<ul>\n<li><p>局部作用域(local scope);</p>\n</li>\n<li><p>名字作用域(namespace scope);</p>\n</li>\n<li><p>类域(calss scope);</p>\n</li>\n</ul>\n<h2 id=\"局部作用域\"><a href=\"#局部作用域\" class=\"headerlink\" title=\"局部作用域\"></a><strong>局部作用域</strong></h2><p>在每段语句块都包含一个局部的作用域，在这个语句块中声明的对象仅在当前语句块内部起作用．</p>\n<p>例如，函数体，循环体都是局部作用域:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">a</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//error a超过了作用域，访问不到foo()函数内部的a变量</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100</span>;i++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;i&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//error i超过了for的作用域，i是for的局部变量</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;i&lt;&lt;<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>提示:在Visual C++6.0中上述代码将i输出不会报错，因为它没有遵循该项C++标准，但在VC2003和Dev-C++中都会报错.</strong></p>\n<p>下面再看一个case语句块的作用域</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">choose</span><span class=\"params\">(<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\"><span class=\"built_in\">cin</span>&gt;&gt;choose;</span><br><span class=\"line\"><span class=\"keyword\">switch</span>(choose)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">    <span class=\"built_in\">string</span> str;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    <span class=\"comment\">//error:重定义了str</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> str;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>若不用<code>{}</code>将代码括起来，那么就会出现重定义的错误，因为在同一个作用域下定义了两个string str变量，正确的代码如下:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">choose</span><span class=\"params\">(<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\"><span class=\"built_in\">cin</span>&gt;&gt;choose;</span><br><span class=\"line\"><span class=\"keyword\">switch</span>(choose)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> str;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">//error:重定义了str</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> str;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们通过加上<code>{}</code>使得给每个case块加上了不同的作用域，也就解决了重定义的问题．</p>\n<h2 id=\"函数的作用域\"><a href=\"#函数的作用域\" class=\"headerlink\" title=\"函数的作用域\"></a><strong>函数的作用域</strong></h2><p>函数体和上面提到的作用域一样，在函数体内声明的变量，只能在函数体内访问．</p>\n<p>函数体内部包括花括号内的代码以及函数的形参列表，它们都受函数的作用域限制．</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//正常访问i变量</span></span><br><span class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;i&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//error 未声明i变量</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;i&lt;&lt;<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<p>当函数之间互相调用也是有单独的作用域的，例如递归代码，注意观察i的值，每次调用自身时i的值都是不同的</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;i&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(i&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    foo(i/<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"局部变量的存储类型\"><a href=\"#局部变量的存储类型\" class=\"headerlink\" title=\"局部变量的存储类型\"></a><strong>局部变量的存储类型</strong></h1><p>你可能听说过:自动存储类型，静态存储类型，但是你听过<code>寄存器存储类型</code>么?</p>\n<p>不同的存储类型，决定了C++编译器存储这些属性的空间和方式.</p>\n<h2 id=\"自动存储类型\"><a href=\"#自动存储类型\" class=\"headerlink\" title=\"自动存储类型\"></a><strong>自动存储类型</strong></h2><p>在默认情况下，我们定义的变量就属于自动存储类型</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">a</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在foo()函数体执行完毕后<code>a</code>变量将会自动释放，我们也可以换种写法:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"keyword\">int</span> <span class=\"title\">a</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样做只不过为了显式的说明这个是个自动存储类型的变量</p>\n<p>我们还可以使用类函数观测自动存储类型的销毁时间:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a;</span><br><span class=\"line\"></span><br><span class=\"line\">    Test(<span class=\"keyword\">int</span> a);</span><br><span class=\"line\"></span><br><span class=\"line\">    ~Test();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Test::Test(<span class=\"keyword\">int</span> a) : a(a) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"创建[\"</span> &lt;&lt; <span class=\"keyword\">this</span> &lt;&lt; <span class=\"string\">\"]\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Test::~Test() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"销毁[\"</span> &lt;&lt; <span class=\"keyword\">this</span> &lt;&lt; <span class=\"string\">\"]\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Test <span class=\"title\">t</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Test <span class=\"title\">t1</span><span class=\"params\">(<span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建[0x7fff82f501c0]</span><br><span class=\"line\">创建[0x7fff82f501c4]</span><br><span class=\"line\">销毁[0x7fff82f501c4]</span><br><span class=\"line\">销毁[0x7fff82f501c0]</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n<p>以上代码就可观测到自动存储类型变量的自动销毁过程．</p>\n<p><strong>注意，由于自动存储类型变量会自动销毁，所以我们不要保存自动存储类型变量的地址，因为在对象销毁后，它不再具有我们程序赋予它的意义．</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">auto</span> Test <span class=\"title\">t</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"寄存器存储类型\"><a href=\"#寄存器存储类型\" class=\"headerlink\" title=\"寄存器存储类型\"></a><strong>寄存器存储类型</strong></h2><p>寄存器存储类型继承于C语言，我们在对这种类型的变量进行存储数据时程序将会从寄存器中获取，而非内存，这样可以提高效率，这常常用于被频繁使用的变量．</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; ++i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;i&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>虽说C++继承了C语言的寄存器存储类型这一特性，但我们对一个变量加上<code>register</code>仅仅只能说是一种期望，因为有些编译器可能不会理会我们，编译器可能更清楚，如何处理这个变量更加高效．</p>\n<h2 id=\"静态存储类型\"><a href=\"#静态存储类型\" class=\"headerlink\" title=\"静态存储类型\"></a><strong>静态存储类型</strong></h2><p>静态存储变量特殊在于:它超出局部作用域的时候，却依然不会被销毁．</p>\n<p>请看下面的代码:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> _a;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Test(<span class=\"keyword\">int</span> a) : _a(a) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"创建[\"</span> &lt;&lt; <span class=\"keyword\">this</span> &lt;&lt; <span class=\"string\">\"]\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~Test() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"销毁[\"</span> &lt;&lt; <span class=\"keyword\">this</span> &lt;&lt; <span class=\"string\">\"]\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//静态变量</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Test <span class=\"title\">t</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"t对象已销毁\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//调用第一次</span></span><br><span class=\"line\">    foo();</span><br><span class=\"line\">    <span class=\"comment\">//调用第二次</span></span><br><span class=\"line\">    foo();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建[0x5645e7afa19c]</span><br><span class=\"line\">t对象已销毁</span><br><span class=\"line\">t对象已销毁</span><br><span class=\"line\">销毁[0x5645e7afa19c]</span><br></pre></td></tr></table></figure>\n<p>可以看到，我们调用了两次foo()函数，也就是创建了两次Test对象，但是最终输出的结果却只是创建了一次和销毁了一次，也就说的那个程序执行完第一次foo()函数后，静态变量<code>t</code>依然存在!</p>\n<p><strong>常见用法</strong></p>\n<p>程序员们偶尔会利用static的特性，让静态变量存储一些历史数据，不需要每次都销毁的数据.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">i</span><span class=\"params\">(<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"第\"</span> &lt;&lt; i &lt;&lt; <span class=\"string\">\"次调用foo()\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; ++i) &#123;</span><br><span class=\"line\">        foo();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第1次调用foo()</span><br><span class=\"line\">第2次调用foo()</span><br><span class=\"line\">第3次调用foo()</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n<p>今天就先写到这里，继续学习了.</p>\n<h1 id=\"命名空间域\"><a href=\"#命名空间域\" class=\"headerlink\" title=\"命名空间域\"></a><strong>命名空间域</strong></h1><h2 id=\"全局域\"><a href=\"#全局域\" class=\"headerlink\" title=\"全局域\"></a><strong>全局域</strong></h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//全局作用域下的varA</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> varA=<span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    varA++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> varA=<span class=\"number\">200</span>;</span><br><span class=\"line\">    ::varA++;</span><br><span class=\"line\">    <span class=\"comment\">//输出内部作用域的varA</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;varA&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"comment\">//输出全局作用域的varA</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;::varA&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    foo1();</span><br><span class=\"line\">    foo2();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">200</span><br><span class=\"line\">102</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n<p>最外层的varA为全局作用域的变量，当内部作用域出现相同的变量名时，那么外层的变量将会被隐藏。</p>\n<p>我们使用域操作符”::”来显式的指定作用域。</p>"},{"title":"C++读写文件","copyright":true,"date":"2019-05-22T03:20:45.000Z","_content":"\n一些简单的读写文件的操作。\n\n<!--more-->\n\n**本篇文章使用C++```fstream```头文件提供的库函数进行读写操作**\n\n\n> 请引入#include \\<fstream\\>进行下面的操作。\n\n# **写入**\n\n写入文件步骤如下:\n\n1. 实例化ofstream对象，或者fstream对象.\n\n    > ofstream ofs;\n2. 打开文件流\n    \n    > ofs.open(const std::string &__s,ios_base::open__mode=ios_base::out);\n\n3. 写入文件\n\n    > ofs<<;\n\n4. 关闭文件流\n\n    > ofs.close();\n\n**注意打开文件流函数的参数分别为`路径`和`打开方式`.**\n\n常用的打开方式如下:\n\n|模式标识|适用对象|描述|\n|:-:|:-----:|:-:|\n|ios::int|ifstream,fstream|打开输入,默认用于`ifstream`和`fstream`|\n|ios::out|ofstream,fstream|打开输出，默认用于`ofstream`和`fstream`|\n|ios::trunc|ofstream|打开输入，默认用户`ofstream`|\n|ios::ate|ifstream|打开并且在打开后将文件指针指向文件末尾，若文件不存在，则出错|\n|ios::app|ostream,fstream|打开输出，并且将数据输出至文件末尾，相当与追加|\n|iso::binary|ifstream,ofstream,fstream|以二进制的方式打开文件，进行输入或输出|\n\n以上所有的打开方式可以通过或`|`运算符进行联合使用，例如:\n\n~~~C++\n//以二进制的方式打开输出\nofstream ofs(path,ios::out|ios::binary);\n~~~\n\n**不管是读取操作还是写入操作，只要涉及打开文件函数的调用，我们都需要在使用完之后对文件进行一个关闭的操作**\n\n好的，下面可以看例子了，我们将写入一些数据到一个文件内。\n\n## **以文本写入**\n\n> 下面将读取两种不同类型的文件以作为案例进行讲解。\n\n~~~C++\n/**\n * 写入文件\n * @param path 文件路径\n * @param context 内容\n */\nvoid writeFile(string path,string context){\n    //实例化写入对象\n    ofstream ofs;\n    //打开输出\n    ofs.open(path,ios::out);\n    //向文件写入数据\n    ofs<<context<<endl;\n    //关闭输出\n    ofs.close();\n}\n\nint main(){\n    //调用\n    writeFile(\"./test.txt\",\"测试\");\n}\n~~~\n\n这样我们就将`测试`这个段文本信息，写入到当前目录下`test.txt`文件内了.\n\n## **以二进制文件写入**\n\n\n以二进制文件方式写入，C++提供了`write()`库函数,它的函数原型是:\n\n> `write(const _CharT* __s, streamsize __n);`\n\n其要求地一个参数为字符型指针，第二个参数为最大写入字符数大小。\n\n~~~C++\nclass Student {\nprivate:\n    char name[64];\n    int age;\npublic:\n    Student(char name[64], int age) {\n        for (int i = 0; i < sizeof(name); ++i)\n            this->name[i] = name[i];\n        this->age = age;\n    }\n};`\n/**\n * 写入二进制文件\n * @param path \n */\nvoid writeFileByBinary(string path) {\n    //创建输出流对象，并且指定路径和文件打开方式\n    ofstream ofs(path, ios::out | ios::binary);\n    Student *student = new Student(\"张三\", 18);\n\n    //写入文件\n    ofs.write((const char *) student, sizeof(Student));\n\n    ofs.close();\n\n    delete (student);\n}\nint main(){\n    writeFileByBinary(\"student.bin\");\n}\n~~~\n\n这里我们将类成员属性的值以二进制的方式写入进一个文件内。\n\n最终文件内的内容人类是看不大懂的。\n\n![二进制写](C-读写文件/二进制文件.png)\n\n**注意:以二进制方式写入文件,那么需要以二进制的方式读取文件，不然读出的数据将是乱码.**\n\n# **读取**\n\n> 下面将读取两种不同类型的文件以作为案例进行讲解。\n\n## **以文本文件读取**\n\n读取有很多种方式，下面将会演示三种，分别是:\n\n- 逐行读取\n\n- 逐词读取\n\n- 逐字符读取\n\n---\n\n### **逐字符读取(不推荐)**\n\n**逐字符读取：通过输入流读取单个字符，再将读取到的字符存入容器中。因为是单个字符读取，所以效率较低。**\n\n~~~C++\n/**\n * 逐字符读取\n * @param path 路径\n */\nvoid readFile04(string path) {\n    //实例化读取操作对象\n    ifstream ifs;\n    //打开文件\n    ifs.open(path, ios::in);\n    //数据存储变量\n    char cbuffer;\n    //逐字符读取，并且将读取的内容复制给c,不再进行读的条件是当读取的字符为EOF，代表文件的结尾.\n    while ((cbuffer = ifs.get()) != EOF) {\n        cout << cbuffer << endl;\n    }\n    //关闭文件\n    ifs.close();\n}\n~~~\n\n```EOF```代表文件的末尾，它是一个宏，逐字符读取的条件为，若遇到文件末尾，也就代表读取完成。\n\n### **逐行读取(有两种方式，但都是逐行读取)**\n\n第一种：\n\n~~~C++\n/**\n * 逐行读取\n * @param path 路径\n */\nvoid readFile02(string path) {\n    //实例化\n    fstream fs;\n    //打开文件\n    fs.open(path, ios::in);\n    //用字符数组进行缓存\n    char buffer[1024] = {0};\n    //逐行进行读取，getline(存储读取到的字符的字符数组,最大读取字符数)\n    while (fs.getline(buffer, sizeof(buffer))) {\n        cout << buffer << endl;\n    }\n    //关闭文件\n    fs.close();\n}\n~~~\n\n使用`字符数组`作为数据存储容器，用`fstream`对象的`getline()`函数调用，第一个参数为:存储读取到的数据的容器，第二个参数为最大读取数量，这里使用`sizeof()`是为了不出现数据过大，从而使得字符数组不够大，引发数组越界。\n\n第二种:\n\n~~~C++\n/**\n * 逐行读取\n * @param path 路径\n */\nvoid readFile03(string path) {\n    //实例化读取操作对象\n    ifstream ifs;\n    //打开文件\n    ifs.open(path, ios::in);\n    //数据存储容器\n    string buffer;\n    //使用全局函数getline(输入流，可存储的容器)进行逐行读取\n    while (getline(ifs, buffer)) {\n        cout << buffer << endl;\n    }\n    //关闭文件\n    ifs.close();\n}\n~~~\n\n与第一种方法相似，只不过是将数据存储容器更换为了string类型，但是使用的是全局函数`getline(输入对象,数据存储容器)`,它的第一个参数为：输入对象，也就是我们的读取对象，getline会把数据读入至制定的输入流内，再通过输入流存储至容器。\n\n### **逐词读取(以空格区分)**\n\n逐词读取，将会已空格进行区分每个词汇，再读取。\n\n~~~C++\n/**\n * 逐词读取文件\n * @param path 文件路径\n */\nvoid readFile01(string path) {\n    //实例化读取文件对象\n    ifstream ifs;\n    //打开文件\n    ifs.open(path, ios::in);\n    //判断文件是否能打开\n    if (!ifs.is_open()) {\n        cout << \"文件打开失败!\" << endl;\n        return;\n    }\n    //字符数组缓存\n    char buffer[1024] = {0};\n    //将读取的数据放入缓存区\n    while (ifs >> buffer)\n        cout << buffer << endl;\n    //关闭文件\n    ifs.close();\n}\n~~~\n\n这里多了一个判断文件是否能打开的操作，这样可以防止，路径出错使得程序出错。\n\n这种逐词读取的方式是`读取对象`通过`右移运算符`把读取的数据存入容器之中，但是是以空格区分每个词汇。\n\n## **以二进制的方式读取**\n\n前面我们使用了二进制的方式写入文件，那么被写入的文件就会变成二进制文件，这种文件需要使用二进制读取才能将内容正确的读取，下面看一个简单的例子。\n\n\n~~~C++\n/**\n * 以二进制的方式读取文件\n * @param path 路径\n */\nvoid readFileByBinary(string path) {\n    //创建输入流对象，并且指定路径和文件打开方式\n    ifstream ifs(path, ios::in | ios::binary);\n    char * c = new char[64];\n    ifs.read(c, sizeof(c));\n    cout<<c<<endl;\n}\nint main(){\n    readFileByBinary(\"Student.smi\");\n}\n~~~\n\n输出结果:\n\n~~~\n张三\n\nProcess finished with exit code 0\n~~~\n\n这里我们将`Student.smi`这个文件用二进制的方式读取，那么就能正确的将文件内容获取，但如果我们以二进制的方式读取一个文本文件，将会出现一些我们不想要的结果。\n\n# **总结**\n\n读取文件创建`ifstream`对象,写入文件创建`ofstream`对象，`fstream`对象既可以读又可以写。\n\n操作文件得先`打开文件`\n\n操作文件完毕得`关闭文件`\n\n二进制文件读取需要读取二进制格式的文件\n","source":"_posts/C-读写文件.md","raw":"---\ntitle: C++读写文件\ncopyright: true\ndate: 2019-05-22 11:20:45\ncategories: 学习笔记\ntags:\n - C++\n---\n\n一些简单的读写文件的操作。\n\n<!--more-->\n\n**本篇文章使用C++```fstream```头文件提供的库函数进行读写操作**\n\n\n> 请引入#include \\<fstream\\>进行下面的操作。\n\n# **写入**\n\n写入文件步骤如下:\n\n1. 实例化ofstream对象，或者fstream对象.\n\n    > ofstream ofs;\n2. 打开文件流\n    \n    > ofs.open(const std::string &__s,ios_base::open__mode=ios_base::out);\n\n3. 写入文件\n\n    > ofs<<;\n\n4. 关闭文件流\n\n    > ofs.close();\n\n**注意打开文件流函数的参数分别为`路径`和`打开方式`.**\n\n常用的打开方式如下:\n\n|模式标识|适用对象|描述|\n|:-:|:-----:|:-:|\n|ios::int|ifstream,fstream|打开输入,默认用于`ifstream`和`fstream`|\n|ios::out|ofstream,fstream|打开输出，默认用于`ofstream`和`fstream`|\n|ios::trunc|ofstream|打开输入，默认用户`ofstream`|\n|ios::ate|ifstream|打开并且在打开后将文件指针指向文件末尾，若文件不存在，则出错|\n|ios::app|ostream,fstream|打开输出，并且将数据输出至文件末尾，相当与追加|\n|iso::binary|ifstream,ofstream,fstream|以二进制的方式打开文件，进行输入或输出|\n\n以上所有的打开方式可以通过或`|`运算符进行联合使用，例如:\n\n~~~C++\n//以二进制的方式打开输出\nofstream ofs(path,ios::out|ios::binary);\n~~~\n\n**不管是读取操作还是写入操作，只要涉及打开文件函数的调用，我们都需要在使用完之后对文件进行一个关闭的操作**\n\n好的，下面可以看例子了，我们将写入一些数据到一个文件内。\n\n## **以文本写入**\n\n> 下面将读取两种不同类型的文件以作为案例进行讲解。\n\n~~~C++\n/**\n * 写入文件\n * @param path 文件路径\n * @param context 内容\n */\nvoid writeFile(string path,string context){\n    //实例化写入对象\n    ofstream ofs;\n    //打开输出\n    ofs.open(path,ios::out);\n    //向文件写入数据\n    ofs<<context<<endl;\n    //关闭输出\n    ofs.close();\n}\n\nint main(){\n    //调用\n    writeFile(\"./test.txt\",\"测试\");\n}\n~~~\n\n这样我们就将`测试`这个段文本信息，写入到当前目录下`test.txt`文件内了.\n\n## **以二进制文件写入**\n\n\n以二进制文件方式写入，C++提供了`write()`库函数,它的函数原型是:\n\n> `write(const _CharT* __s, streamsize __n);`\n\n其要求地一个参数为字符型指针，第二个参数为最大写入字符数大小。\n\n~~~C++\nclass Student {\nprivate:\n    char name[64];\n    int age;\npublic:\n    Student(char name[64], int age) {\n        for (int i = 0; i < sizeof(name); ++i)\n            this->name[i] = name[i];\n        this->age = age;\n    }\n};`\n/**\n * 写入二进制文件\n * @param path \n */\nvoid writeFileByBinary(string path) {\n    //创建输出流对象，并且指定路径和文件打开方式\n    ofstream ofs(path, ios::out | ios::binary);\n    Student *student = new Student(\"张三\", 18);\n\n    //写入文件\n    ofs.write((const char *) student, sizeof(Student));\n\n    ofs.close();\n\n    delete (student);\n}\nint main(){\n    writeFileByBinary(\"student.bin\");\n}\n~~~\n\n这里我们将类成员属性的值以二进制的方式写入进一个文件内。\n\n最终文件内的内容人类是看不大懂的。\n\n![二进制写](C-读写文件/二进制文件.png)\n\n**注意:以二进制方式写入文件,那么需要以二进制的方式读取文件，不然读出的数据将是乱码.**\n\n# **读取**\n\n> 下面将读取两种不同类型的文件以作为案例进行讲解。\n\n## **以文本文件读取**\n\n读取有很多种方式，下面将会演示三种，分别是:\n\n- 逐行读取\n\n- 逐词读取\n\n- 逐字符读取\n\n---\n\n### **逐字符读取(不推荐)**\n\n**逐字符读取：通过输入流读取单个字符，再将读取到的字符存入容器中。因为是单个字符读取，所以效率较低。**\n\n~~~C++\n/**\n * 逐字符读取\n * @param path 路径\n */\nvoid readFile04(string path) {\n    //实例化读取操作对象\n    ifstream ifs;\n    //打开文件\n    ifs.open(path, ios::in);\n    //数据存储变量\n    char cbuffer;\n    //逐字符读取，并且将读取的内容复制给c,不再进行读的条件是当读取的字符为EOF，代表文件的结尾.\n    while ((cbuffer = ifs.get()) != EOF) {\n        cout << cbuffer << endl;\n    }\n    //关闭文件\n    ifs.close();\n}\n~~~\n\n```EOF```代表文件的末尾，它是一个宏，逐字符读取的条件为，若遇到文件末尾，也就代表读取完成。\n\n### **逐行读取(有两种方式，但都是逐行读取)**\n\n第一种：\n\n~~~C++\n/**\n * 逐行读取\n * @param path 路径\n */\nvoid readFile02(string path) {\n    //实例化\n    fstream fs;\n    //打开文件\n    fs.open(path, ios::in);\n    //用字符数组进行缓存\n    char buffer[1024] = {0};\n    //逐行进行读取，getline(存储读取到的字符的字符数组,最大读取字符数)\n    while (fs.getline(buffer, sizeof(buffer))) {\n        cout << buffer << endl;\n    }\n    //关闭文件\n    fs.close();\n}\n~~~\n\n使用`字符数组`作为数据存储容器，用`fstream`对象的`getline()`函数调用，第一个参数为:存储读取到的数据的容器，第二个参数为最大读取数量，这里使用`sizeof()`是为了不出现数据过大，从而使得字符数组不够大，引发数组越界。\n\n第二种:\n\n~~~C++\n/**\n * 逐行读取\n * @param path 路径\n */\nvoid readFile03(string path) {\n    //实例化读取操作对象\n    ifstream ifs;\n    //打开文件\n    ifs.open(path, ios::in);\n    //数据存储容器\n    string buffer;\n    //使用全局函数getline(输入流，可存储的容器)进行逐行读取\n    while (getline(ifs, buffer)) {\n        cout << buffer << endl;\n    }\n    //关闭文件\n    ifs.close();\n}\n~~~\n\n与第一种方法相似，只不过是将数据存储容器更换为了string类型，但是使用的是全局函数`getline(输入对象,数据存储容器)`,它的第一个参数为：输入对象，也就是我们的读取对象，getline会把数据读入至制定的输入流内，再通过输入流存储至容器。\n\n### **逐词读取(以空格区分)**\n\n逐词读取，将会已空格进行区分每个词汇，再读取。\n\n~~~C++\n/**\n * 逐词读取文件\n * @param path 文件路径\n */\nvoid readFile01(string path) {\n    //实例化读取文件对象\n    ifstream ifs;\n    //打开文件\n    ifs.open(path, ios::in);\n    //判断文件是否能打开\n    if (!ifs.is_open()) {\n        cout << \"文件打开失败!\" << endl;\n        return;\n    }\n    //字符数组缓存\n    char buffer[1024] = {0};\n    //将读取的数据放入缓存区\n    while (ifs >> buffer)\n        cout << buffer << endl;\n    //关闭文件\n    ifs.close();\n}\n~~~\n\n这里多了一个判断文件是否能打开的操作，这样可以防止，路径出错使得程序出错。\n\n这种逐词读取的方式是`读取对象`通过`右移运算符`把读取的数据存入容器之中，但是是以空格区分每个词汇。\n\n## **以二进制的方式读取**\n\n前面我们使用了二进制的方式写入文件，那么被写入的文件就会变成二进制文件，这种文件需要使用二进制读取才能将内容正确的读取，下面看一个简单的例子。\n\n\n~~~C++\n/**\n * 以二进制的方式读取文件\n * @param path 路径\n */\nvoid readFileByBinary(string path) {\n    //创建输入流对象，并且指定路径和文件打开方式\n    ifstream ifs(path, ios::in | ios::binary);\n    char * c = new char[64];\n    ifs.read(c, sizeof(c));\n    cout<<c<<endl;\n}\nint main(){\n    readFileByBinary(\"Student.smi\");\n}\n~~~\n\n输出结果:\n\n~~~\n张三\n\nProcess finished with exit code 0\n~~~\n\n这里我们将`Student.smi`这个文件用二进制的方式读取，那么就能正确的将文件内容获取，但如果我们以二进制的方式读取一个文本文件，将会出现一些我们不想要的结果。\n\n# **总结**\n\n读取文件创建`ifstream`对象,写入文件创建`ofstream`对象，`fstream`对象既可以读又可以写。\n\n操作文件得先`打开文件`\n\n操作文件完毕得`关闭文件`\n\n二进制文件读取需要读取二进制格式的文件\n","slug":"C-读写文件","published":1,"updated":"2019-06-16T17:09:00.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uzek003roumsi7magp5a","content":"<p>一些简单的读写文件的操作。</p>\n<a id=\"more\"></a>\n<p><strong>本篇文章使用C++<code>fstream</code>头文件提供的库函数进行读写操作</strong></p>\n<blockquote>\n<p>请引入#include \\&lt;fstream>进行下面的操作。</p>\n</blockquote>\n<h1 id=\"写入\"><a href=\"#写入\" class=\"headerlink\" title=\"写入\"></a><strong>写入</strong></h1><p>写入文件步骤如下:</p>\n<ol>\n<li><p>实例化ofstream对象，或者fstream对象.</p>\n<blockquote>\n<p>ofstream ofs;</p>\n</blockquote>\n</li>\n<li><p>打开文件流</p>\n<blockquote>\n<p>ofs.open(const std::string &amp;<strong>s,ios_base::open</strong>mode=ios_base::out);</p>\n</blockquote>\n</li>\n<li><p>写入文件</p>\n<blockquote>\n<p>ofs&lt;&lt;;</p>\n</blockquote>\n</li>\n<li><p>关闭文件流</p>\n<blockquote>\n<p>ofs.close();</p>\n</blockquote>\n</li>\n</ol>\n<p><strong>注意打开文件流函数的参数分别为<code>路径</code>和<code>打开方式</code>.</strong></p>\n<p>常用的打开方式如下:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">模式标识</th>\n<th style=\"text-align:center\">适用对象</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">ios::int</td>\n<td style=\"text-align:center\">ifstream,fstream</td>\n<td style=\"text-align:center\">打开输入,默认用于<code>ifstream</code>和<code>fstream</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ios::out</td>\n<td style=\"text-align:center\">ofstream,fstream</td>\n<td style=\"text-align:center\">打开输出，默认用于<code>ofstream</code>和<code>fstream</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ios::trunc</td>\n<td style=\"text-align:center\">ofstream</td>\n<td style=\"text-align:center\">打开输入，默认用户<code>ofstream</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ios::ate</td>\n<td style=\"text-align:center\">ifstream</td>\n<td style=\"text-align:center\">打开并且在打开后将文件指针指向文件末尾，若文件不存在，则出错</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ios::app</td>\n<td style=\"text-align:center\">ostream,fstream</td>\n<td style=\"text-align:center\">打开输出，并且将数据输出至文件末尾，相当与追加</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">iso::binary</td>\n<td style=\"text-align:center\">ifstream,ofstream,fstream</td>\n<td style=\"text-align:center\">以二进制的方式打开文件，进行输入或输出</td>\n</tr>\n</tbody>\n</table>\n<p>以上所有的打开方式可以通过或<code>|</code>运算符进行联合使用，例如:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//以二进制的方式打开输出</span></span><br><span class=\"line\"><span class=\"function\">ofstream <span class=\"title\">ofs</span><span class=\"params\">(path,ios::out|ios::binary)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong>不管是读取操作还是写入操作，只要涉及打开文件函数的调用，我们都需要在使用完之后对文件进行一个关闭的操作</strong></p>\n<p>好的，下面可以看例子了，我们将写入一些数据到一个文件内。</p>\n<h2 id=\"以文本写入\"><a href=\"#以文本写入\" class=\"headerlink\" title=\"以文本写入\"></a><strong>以文本写入</strong></h2><blockquote>\n<p>下面将读取两种不同类型的文件以作为案例进行讲解。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 写入文件</span></span><br><span class=\"line\"><span class=\"comment\"> * @param path 文件路径</span></span><br><span class=\"line\"><span class=\"comment\"> * @param context 内容</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">writeFile</span><span class=\"params\">(<span class=\"built_in\">string</span> path,<span class=\"built_in\">string</span> context)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实例化写入对象</span></span><br><span class=\"line\">    ofstream ofs;</span><br><span class=\"line\">    <span class=\"comment\">//打开输出</span></span><br><span class=\"line\">    ofs.open(path,ios::out);</span><br><span class=\"line\">    <span class=\"comment\">//向文件写入数据</span></span><br><span class=\"line\">    ofs&lt;&lt;context&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"comment\">//关闭输出</span></span><br><span class=\"line\">    ofs.close();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//调用</span></span><br><span class=\"line\">    writeFile(<span class=\"string\">\"./test.txt\"</span>,<span class=\"string\">\"测试\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样我们就将<code>测试</code>这个段文本信息，写入到当前目录下<code>test.txt</code>文件内了.</p>\n<h2 id=\"以二进制文件写入\"><a href=\"#以二进制文件写入\" class=\"headerlink\" title=\"以二进制文件写入\"></a><strong>以二进制文件写入</strong></h2><p>以二进制文件方式写入，C++提供了<code>write()</code>库函数,它的函数原型是:</p>\n<blockquote>\n<p><code>write(const _CharT* __s, streamsize __n);</code></p>\n</blockquote>\n<p>其要求地一个参数为字符型指针，第二个参数为最大写入字符数大小。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">64</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Student(<span class=\"keyword\">char</span> name[<span class=\"number\">64</span>], <span class=\"keyword\">int</span> age) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">sizeof</span>(name); ++i)</span><br><span class=\"line\">            <span class=\"keyword\">this</span>-&gt;name[i] = name[i];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;`</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 写入二进制文件</span></span><br><span class=\"line\"><span class=\"comment\"> * @param path </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">writeFileByBinary</span><span class=\"params\">(<span class=\"built_in\">string</span> path)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建输出流对象，并且指定路径和文件打开方式</span></span><br><span class=\"line\">    <span class=\"function\">ofstream <span class=\"title\">ofs</span><span class=\"params\">(path, ios::out | ios::binary)</span></span>;</span><br><span class=\"line\">    Student *student = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"张三\"</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//写入文件</span></span><br><span class=\"line\">    ofs.write((<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *) student, <span class=\"keyword\">sizeof</span>(Student));</span><br><span class=\"line\"></span><br><span class=\"line\">    ofs.close();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> (student);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    writeFileByBinary(<span class=\"string\">\"student.bin\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我们将类成员属性的值以二进制的方式写入进一个文件内。</p>\n<p>最终文件内的内容人类是看不大懂的。</p>\n<p><img src=\"/2019/05/22/C-读写文件/二进制文件.png\" alt=\"二进制写\"></p>\n<p><strong>注意:以二进制方式写入文件,那么需要以二进制的方式读取文件，不然读出的数据将是乱码.</strong></p>\n<h1 id=\"读取\"><a href=\"#读取\" class=\"headerlink\" title=\"读取\"></a><strong>读取</strong></h1><blockquote>\n<p>下面将读取两种不同类型的文件以作为案例进行讲解。</p>\n</blockquote>\n<h2 id=\"以文本文件读取\"><a href=\"#以文本文件读取\" class=\"headerlink\" title=\"以文本文件读取\"></a><strong>以文本文件读取</strong></h2><p>读取有很多种方式，下面将会演示三种，分别是:</p>\n<ul>\n<li><p>逐行读取</p>\n</li>\n<li><p>逐词读取</p>\n</li>\n<li><p>逐字符读取</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"逐字符读取-不推荐\"><a href=\"#逐字符读取-不推荐\" class=\"headerlink\" title=\"逐字符读取(不推荐)\"></a><strong>逐字符读取(不推荐)</strong></h3><p><strong>逐字符读取：通过输入流读取单个字符，再将读取到的字符存入容器中。因为是单个字符读取，所以效率较低。</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 逐字符读取</span></span><br><span class=\"line\"><span class=\"comment\"> * @param path 路径</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">readFile04</span><span class=\"params\">(<span class=\"built_in\">string</span> path)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实例化读取操作对象</span></span><br><span class=\"line\">    ifstream ifs;</span><br><span class=\"line\">    <span class=\"comment\">//打开文件</span></span><br><span class=\"line\">    ifs.open(path, ios::in);</span><br><span class=\"line\">    <span class=\"comment\">//数据存储变量</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> cbuffer;</span><br><span class=\"line\">    <span class=\"comment\">//逐字符读取，并且将读取的内容复制给c,不再进行读的条件是当读取的字符为EOF，代表文件的结尾.</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((cbuffer = ifs.get()) != EOF) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; cbuffer &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//关闭文件</span></span><br><span class=\"line\">    ifs.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>EOF</code>代表文件的末尾，它是一个宏，逐字符读取的条件为，若遇到文件末尾，也就代表读取完成。</p>\n<h3 id=\"逐行读取-有两种方式，但都是逐行读取\"><a href=\"#逐行读取-有两种方式，但都是逐行读取\" class=\"headerlink\" title=\"逐行读取(有两种方式，但都是逐行读取)\"></a><strong>逐行读取(有两种方式，但都是逐行读取)</strong></h3><p>第一种：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 逐行读取</span></span><br><span class=\"line\"><span class=\"comment\"> * @param path 路径</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">readFile02</span><span class=\"params\">(<span class=\"built_in\">string</span> path)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实例化</span></span><br><span class=\"line\">    fstream fs;</span><br><span class=\"line\">    <span class=\"comment\">//打开文件</span></span><br><span class=\"line\">    fs.open(path, ios::in);</span><br><span class=\"line\">    <span class=\"comment\">//用字符数组进行缓存</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> buffer[<span class=\"number\">1024</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//逐行进行读取，getline(存储读取到的字符的字符数组,最大读取字符数)</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fs.getline(buffer, <span class=\"keyword\">sizeof</span>(buffer))) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; buffer &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//关闭文件</span></span><br><span class=\"line\">    fs.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用<code>字符数组</code>作为数据存储容器，用<code>fstream</code>对象的<code>getline()</code>函数调用，第一个参数为:存储读取到的数据的容器，第二个参数为最大读取数量，这里使用<code>sizeof()</code>是为了不出现数据过大，从而使得字符数组不够大，引发数组越界。</p>\n<p>第二种:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 逐行读取</span></span><br><span class=\"line\"><span class=\"comment\"> * @param path 路径</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">readFile03</span><span class=\"params\">(<span class=\"built_in\">string</span> path)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实例化读取操作对象</span></span><br><span class=\"line\">    ifstream ifs;</span><br><span class=\"line\">    <span class=\"comment\">//打开文件</span></span><br><span class=\"line\">    ifs.open(path, ios::in);</span><br><span class=\"line\">    <span class=\"comment\">//数据存储容器</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> buffer;</span><br><span class=\"line\">    <span class=\"comment\">//使用全局函数getline(输入流，可存储的容器)进行逐行读取</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (getline(ifs, buffer)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; buffer &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//关闭文件</span></span><br><span class=\"line\">    ifs.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>与第一种方法相似，只不过是将数据存储容器更换为了string类型，但是使用的是全局函数<code>getline(输入对象,数据存储容器)</code>,它的第一个参数为：输入对象，也就是我们的读取对象，getline会把数据读入至制定的输入流内，再通过输入流存储至容器。</p>\n<h3 id=\"逐词读取-以空格区分\"><a href=\"#逐词读取-以空格区分\" class=\"headerlink\" title=\"逐词读取(以空格区分)\"></a><strong>逐词读取(以空格区分)</strong></h3><p>逐词读取，将会已空格进行区分每个词汇，再读取。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 逐词读取文件</span></span><br><span class=\"line\"><span class=\"comment\"> * @param path 文件路径</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">readFile01</span><span class=\"params\">(<span class=\"built_in\">string</span> path)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实例化读取文件对象</span></span><br><span class=\"line\">    ifstream ifs;</span><br><span class=\"line\">    <span class=\"comment\">//打开文件</span></span><br><span class=\"line\">    ifs.open(path, ios::in);</span><br><span class=\"line\">    <span class=\"comment\">//判断文件是否能打开</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ifs.is_open()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"文件打开失败!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//字符数组缓存</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> buffer[<span class=\"number\">1024</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//将读取的数据放入缓存区</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ifs &gt;&gt; buffer)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; buffer &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"comment\">//关闭文件</span></span><br><span class=\"line\">    ifs.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里多了一个判断文件是否能打开的操作，这样可以防止，路径出错使得程序出错。</p>\n<p>这种逐词读取的方式是<code>读取对象</code>通过<code>右移运算符</code>把读取的数据存入容器之中，但是是以空格区分每个词汇。</p>\n<h2 id=\"以二进制的方式读取\"><a href=\"#以二进制的方式读取\" class=\"headerlink\" title=\"以二进制的方式读取\"></a><strong>以二进制的方式读取</strong></h2><p>前面我们使用了二进制的方式写入文件，那么被写入的文件就会变成二进制文件，这种文件需要使用二进制读取才能将内容正确的读取，下面看一个简单的例子。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 以二进制的方式读取文件</span></span><br><span class=\"line\"><span class=\"comment\"> * @param path 路径</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">readFileByBinary</span><span class=\"params\">(<span class=\"built_in\">string</span> path)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建输入流对象，并且指定路径和文件打开方式</span></span><br><span class=\"line\">    <span class=\"function\">ifstream <span class=\"title\">ifs</span><span class=\"params\">(path, ios::in | ios::binary)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> * c = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">64</span>];</span><br><span class=\"line\">    ifs.read(c, <span class=\"keyword\">sizeof</span>(c));</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;c&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    readFileByBinary(<span class=\"string\">\"Student.smi\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">张三</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n<p>这里我们将<code>Student.smi</code>这个文件用二进制的方式读取，那么就能正确的将文件内容获取，但如果我们以二进制的方式读取一个文本文件，将会出现一些我们不想要的结果。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h1><p>读取文件创建<code>ifstream</code>对象,写入文件创建<code>ofstream</code>对象，<code>fstream</code>对象既可以读又可以写。</p>\n<p>操作文件得先<code>打开文件</code></p>\n<p>操作文件完毕得<code>关闭文件</code></p>\n<p>二进制文件读取需要读取二进制格式的文件</p>\n","site":{"data":{}},"excerpt":"<p>一些简单的读写文件的操作。</p>","more":"<p><strong>本篇文章使用C++<code>fstream</code>头文件提供的库函数进行读写操作</strong></p>\n<blockquote>\n<p>请引入#include \\&lt;fstream>进行下面的操作。</p>\n</blockquote>\n<h1 id=\"写入\"><a href=\"#写入\" class=\"headerlink\" title=\"写入\"></a><strong>写入</strong></h1><p>写入文件步骤如下:</p>\n<ol>\n<li><p>实例化ofstream对象，或者fstream对象.</p>\n<blockquote>\n<p>ofstream ofs;</p>\n</blockquote>\n</li>\n<li><p>打开文件流</p>\n<blockquote>\n<p>ofs.open(const std::string &amp;<strong>s,ios_base::open</strong>mode=ios_base::out);</p>\n</blockquote>\n</li>\n<li><p>写入文件</p>\n<blockquote>\n<p>ofs&lt;&lt;;</p>\n</blockquote>\n</li>\n<li><p>关闭文件流</p>\n<blockquote>\n<p>ofs.close();</p>\n</blockquote>\n</li>\n</ol>\n<p><strong>注意打开文件流函数的参数分别为<code>路径</code>和<code>打开方式</code>.</strong></p>\n<p>常用的打开方式如下:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">模式标识</th>\n<th style=\"text-align:center\">适用对象</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">ios::int</td>\n<td style=\"text-align:center\">ifstream,fstream</td>\n<td style=\"text-align:center\">打开输入,默认用于<code>ifstream</code>和<code>fstream</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ios::out</td>\n<td style=\"text-align:center\">ofstream,fstream</td>\n<td style=\"text-align:center\">打开输出，默认用于<code>ofstream</code>和<code>fstream</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ios::trunc</td>\n<td style=\"text-align:center\">ofstream</td>\n<td style=\"text-align:center\">打开输入，默认用户<code>ofstream</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ios::ate</td>\n<td style=\"text-align:center\">ifstream</td>\n<td style=\"text-align:center\">打开并且在打开后将文件指针指向文件末尾，若文件不存在，则出错</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ios::app</td>\n<td style=\"text-align:center\">ostream,fstream</td>\n<td style=\"text-align:center\">打开输出，并且将数据输出至文件末尾，相当与追加</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">iso::binary</td>\n<td style=\"text-align:center\">ifstream,ofstream,fstream</td>\n<td style=\"text-align:center\">以二进制的方式打开文件，进行输入或输出</td>\n</tr>\n</tbody>\n</table>\n<p>以上所有的打开方式可以通过或<code>|</code>运算符进行联合使用，例如:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//以二进制的方式打开输出</span></span><br><span class=\"line\"><span class=\"function\">ofstream <span class=\"title\">ofs</span><span class=\"params\">(path,ios::out|ios::binary)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong>不管是读取操作还是写入操作，只要涉及打开文件函数的调用，我们都需要在使用完之后对文件进行一个关闭的操作</strong></p>\n<p>好的，下面可以看例子了，我们将写入一些数据到一个文件内。</p>\n<h2 id=\"以文本写入\"><a href=\"#以文本写入\" class=\"headerlink\" title=\"以文本写入\"></a><strong>以文本写入</strong></h2><blockquote>\n<p>下面将读取两种不同类型的文件以作为案例进行讲解。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 写入文件</span></span><br><span class=\"line\"><span class=\"comment\"> * @param path 文件路径</span></span><br><span class=\"line\"><span class=\"comment\"> * @param context 内容</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">writeFile</span><span class=\"params\">(<span class=\"built_in\">string</span> path,<span class=\"built_in\">string</span> context)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实例化写入对象</span></span><br><span class=\"line\">    ofstream ofs;</span><br><span class=\"line\">    <span class=\"comment\">//打开输出</span></span><br><span class=\"line\">    ofs.open(path,ios::out);</span><br><span class=\"line\">    <span class=\"comment\">//向文件写入数据</span></span><br><span class=\"line\">    ofs&lt;&lt;context&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"comment\">//关闭输出</span></span><br><span class=\"line\">    ofs.close();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//调用</span></span><br><span class=\"line\">    writeFile(<span class=\"string\">\"./test.txt\"</span>,<span class=\"string\">\"测试\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样我们就将<code>测试</code>这个段文本信息，写入到当前目录下<code>test.txt</code>文件内了.</p>\n<h2 id=\"以二进制文件写入\"><a href=\"#以二进制文件写入\" class=\"headerlink\" title=\"以二进制文件写入\"></a><strong>以二进制文件写入</strong></h2><p>以二进制文件方式写入，C++提供了<code>write()</code>库函数,它的函数原型是:</p>\n<blockquote>\n<p><code>write(const _CharT* __s, streamsize __n);</code></p>\n</blockquote>\n<p>其要求地一个参数为字符型指针，第二个参数为最大写入字符数大小。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">64</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Student(<span class=\"keyword\">char</span> name[<span class=\"number\">64</span>], <span class=\"keyword\">int</span> age) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">sizeof</span>(name); ++i)</span><br><span class=\"line\">            <span class=\"keyword\">this</span>-&gt;name[i] = name[i];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;`</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 写入二进制文件</span></span><br><span class=\"line\"><span class=\"comment\"> * @param path </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">writeFileByBinary</span><span class=\"params\">(<span class=\"built_in\">string</span> path)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建输出流对象，并且指定路径和文件打开方式</span></span><br><span class=\"line\">    <span class=\"function\">ofstream <span class=\"title\">ofs</span><span class=\"params\">(path, ios::out | ios::binary)</span></span>;</span><br><span class=\"line\">    Student *student = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"张三\"</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//写入文件</span></span><br><span class=\"line\">    ofs.write((<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *) student, <span class=\"keyword\">sizeof</span>(Student));</span><br><span class=\"line\"></span><br><span class=\"line\">    ofs.close();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> (student);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    writeFileByBinary(<span class=\"string\">\"student.bin\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我们将类成员属性的值以二进制的方式写入进一个文件内。</p>\n<p>最终文件内的内容人类是看不大懂的。</p>\n<p><img src=\"/2019/05/22/C-读写文件/二进制文件.png\" alt=\"二进制写\"></p>\n<p><strong>注意:以二进制方式写入文件,那么需要以二进制的方式读取文件，不然读出的数据将是乱码.</strong></p>\n<h1 id=\"读取\"><a href=\"#读取\" class=\"headerlink\" title=\"读取\"></a><strong>读取</strong></h1><blockquote>\n<p>下面将读取两种不同类型的文件以作为案例进行讲解。</p>\n</blockquote>\n<h2 id=\"以文本文件读取\"><a href=\"#以文本文件读取\" class=\"headerlink\" title=\"以文本文件读取\"></a><strong>以文本文件读取</strong></h2><p>读取有很多种方式，下面将会演示三种，分别是:</p>\n<ul>\n<li><p>逐行读取</p>\n</li>\n<li><p>逐词读取</p>\n</li>\n<li><p>逐字符读取</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"逐字符读取-不推荐\"><a href=\"#逐字符读取-不推荐\" class=\"headerlink\" title=\"逐字符读取(不推荐)\"></a><strong>逐字符读取(不推荐)</strong></h3><p><strong>逐字符读取：通过输入流读取单个字符，再将读取到的字符存入容器中。因为是单个字符读取，所以效率较低。</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 逐字符读取</span></span><br><span class=\"line\"><span class=\"comment\"> * @param path 路径</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">readFile04</span><span class=\"params\">(<span class=\"built_in\">string</span> path)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实例化读取操作对象</span></span><br><span class=\"line\">    ifstream ifs;</span><br><span class=\"line\">    <span class=\"comment\">//打开文件</span></span><br><span class=\"line\">    ifs.open(path, ios::in);</span><br><span class=\"line\">    <span class=\"comment\">//数据存储变量</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> cbuffer;</span><br><span class=\"line\">    <span class=\"comment\">//逐字符读取，并且将读取的内容复制给c,不再进行读的条件是当读取的字符为EOF，代表文件的结尾.</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((cbuffer = ifs.get()) != EOF) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; cbuffer &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//关闭文件</span></span><br><span class=\"line\">    ifs.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>EOF</code>代表文件的末尾，它是一个宏，逐字符读取的条件为，若遇到文件末尾，也就代表读取完成。</p>\n<h3 id=\"逐行读取-有两种方式，但都是逐行读取\"><a href=\"#逐行读取-有两种方式，但都是逐行读取\" class=\"headerlink\" title=\"逐行读取(有两种方式，但都是逐行读取)\"></a><strong>逐行读取(有两种方式，但都是逐行读取)</strong></h3><p>第一种：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 逐行读取</span></span><br><span class=\"line\"><span class=\"comment\"> * @param path 路径</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">readFile02</span><span class=\"params\">(<span class=\"built_in\">string</span> path)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实例化</span></span><br><span class=\"line\">    fstream fs;</span><br><span class=\"line\">    <span class=\"comment\">//打开文件</span></span><br><span class=\"line\">    fs.open(path, ios::in);</span><br><span class=\"line\">    <span class=\"comment\">//用字符数组进行缓存</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> buffer[<span class=\"number\">1024</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//逐行进行读取，getline(存储读取到的字符的字符数组,最大读取字符数)</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fs.getline(buffer, <span class=\"keyword\">sizeof</span>(buffer))) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; buffer &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//关闭文件</span></span><br><span class=\"line\">    fs.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用<code>字符数组</code>作为数据存储容器，用<code>fstream</code>对象的<code>getline()</code>函数调用，第一个参数为:存储读取到的数据的容器，第二个参数为最大读取数量，这里使用<code>sizeof()</code>是为了不出现数据过大，从而使得字符数组不够大，引发数组越界。</p>\n<p>第二种:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 逐行读取</span></span><br><span class=\"line\"><span class=\"comment\"> * @param path 路径</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">readFile03</span><span class=\"params\">(<span class=\"built_in\">string</span> path)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实例化读取操作对象</span></span><br><span class=\"line\">    ifstream ifs;</span><br><span class=\"line\">    <span class=\"comment\">//打开文件</span></span><br><span class=\"line\">    ifs.open(path, ios::in);</span><br><span class=\"line\">    <span class=\"comment\">//数据存储容器</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> buffer;</span><br><span class=\"line\">    <span class=\"comment\">//使用全局函数getline(输入流，可存储的容器)进行逐行读取</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (getline(ifs, buffer)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; buffer &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//关闭文件</span></span><br><span class=\"line\">    ifs.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>与第一种方法相似，只不过是将数据存储容器更换为了string类型，但是使用的是全局函数<code>getline(输入对象,数据存储容器)</code>,它的第一个参数为：输入对象，也就是我们的读取对象，getline会把数据读入至制定的输入流内，再通过输入流存储至容器。</p>\n<h3 id=\"逐词读取-以空格区分\"><a href=\"#逐词读取-以空格区分\" class=\"headerlink\" title=\"逐词读取(以空格区分)\"></a><strong>逐词读取(以空格区分)</strong></h3><p>逐词读取，将会已空格进行区分每个词汇，再读取。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 逐词读取文件</span></span><br><span class=\"line\"><span class=\"comment\"> * @param path 文件路径</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">readFile01</span><span class=\"params\">(<span class=\"built_in\">string</span> path)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实例化读取文件对象</span></span><br><span class=\"line\">    ifstream ifs;</span><br><span class=\"line\">    <span class=\"comment\">//打开文件</span></span><br><span class=\"line\">    ifs.open(path, ios::in);</span><br><span class=\"line\">    <span class=\"comment\">//判断文件是否能打开</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ifs.is_open()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"文件打开失败!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//字符数组缓存</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> buffer[<span class=\"number\">1024</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//将读取的数据放入缓存区</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ifs &gt;&gt; buffer)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; buffer &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"comment\">//关闭文件</span></span><br><span class=\"line\">    ifs.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里多了一个判断文件是否能打开的操作，这样可以防止，路径出错使得程序出错。</p>\n<p>这种逐词读取的方式是<code>读取对象</code>通过<code>右移运算符</code>把读取的数据存入容器之中，但是是以空格区分每个词汇。</p>\n<h2 id=\"以二进制的方式读取\"><a href=\"#以二进制的方式读取\" class=\"headerlink\" title=\"以二进制的方式读取\"></a><strong>以二进制的方式读取</strong></h2><p>前面我们使用了二进制的方式写入文件，那么被写入的文件就会变成二进制文件，这种文件需要使用二进制读取才能将内容正确的读取，下面看一个简单的例子。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 以二进制的方式读取文件</span></span><br><span class=\"line\"><span class=\"comment\"> * @param path 路径</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">readFileByBinary</span><span class=\"params\">(<span class=\"built_in\">string</span> path)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建输入流对象，并且指定路径和文件打开方式</span></span><br><span class=\"line\">    <span class=\"function\">ifstream <span class=\"title\">ifs</span><span class=\"params\">(path, ios::in | ios::binary)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> * c = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">64</span>];</span><br><span class=\"line\">    ifs.read(c, <span class=\"keyword\">sizeof</span>(c));</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;c&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    readFileByBinary(<span class=\"string\">\"Student.smi\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">张三</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n<p>这里我们将<code>Student.smi</code>这个文件用二进制的方式读取，那么就能正确的将文件内容获取，但如果我们以二进制的方式读取一个文本文件，将会出现一些我们不想要的结果。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h1><p>读取文件创建<code>ifstream</code>对象,写入文件创建<code>ofstream</code>对象，<code>fstream</code>对象既可以读又可以写。</p>\n<p>操作文件得先<code>打开文件</code></p>\n<p>操作文件完毕得<code>关闭文件</code></p>\n<p>二进制文件读取需要读取二进制格式的文件</p>"},{"title":"我的Linux之路","copyright":true,"date":"2019-05-14T16:04:56.000Z","_content":"\n这篇是我2019-5-12发表在Deepin论坛的文章，感觉可以记录下，让更多人了解我的Linux之路和我对Linux桌面的一些看法.\n\n<!--more-->\n\n先说说一些题外话\n\n\n我是在2018年的某月(具体哪天忘了)知道了Ubuntu这个系统，也是我第一个听说过的Linux系统，然后我就不知道怎么了，就尝试去安装了，安装之前计算机对我来说就只是台”游戏机“。\n\n\n第一次安装很神奇，居然成功了，但有个问题。笔电盖上屏幕后打开，会出现无法恢复的问题，而且无法解决，我当时根本Linux下的显卡驱动是什么，然后我还是继续用着..因为我没有钱买百度云会员重新下载win10镜像(穷学生)... 并且在我使用ubuntu的时候，我还一长段时间不能使用无线网络，那是因为我在笔记本有个按键，可以快速关闭无线网卡，但是按下这个快捷键Ubuntu没有给任何提示，只有无线网络无法使用。。。\n\n\n我便忍了，中间一直认为是我没有装驱动，因为我在找前面提到的笔电盖屏不恢复的解决方案时，增加了\"驱动\" 这个关键词的经验(最终还是没搞好)，我就以为还是驱动问题，网上大量的搜索相关解决方案，然后我就学会了apt包管理器的基本使用方法...还了解了vim nano 这些编辑器，但无线网络这个问题还是没解决...后来是怎么解决的呢?           某一天下午，我在图书馆，用电脑在看编程的视频教程，然后不小心按了我上面所提到的开关无线网卡的按键，然后我就可以使用Wifi了....\n\n\n好了，这是我使用Ubuntu的一些小事迹，下面要讲Deepin了，毕竟是我使用时长最长的Linux发行版。\n\n\n身为一个Linux新手，在使用Linux之后，会到处找资料，当然也会看到各种 \"xxx可能是最好的Linux发行版\"，各种论坛上也会讨论不同的发行版的区别，此时还没到Deepin，我发现了 Linux Mint，当时很多人叫它绿薄荷，我便安装了，说实话，我觉得Linux Mint很丑，但是很多人说它是目前Linux受欢迎度排行最高的发行版，而且又是基于Ubuntu的，安装也很方便，我便安装了Linux Mint，关于Linux Mint的回忆，我记不太清了，主要是我用的时间太短，安装好了后，去找Mint的QQ群，都寥寥无几，我便开始了我的下一段Linux旅程。\n\n\n终于到Deepin了，具体是怎么知道Deepin的我已经忘记了！，可能是因为从Mint到Deepin的过渡太轻松了吧，使我没有什么深(zao)刻(gao)的记(ti)忆(yan)，我只记得，安装Deepin太简单，只需要选择语言，简单分下区，直接点击安装，稍微等待下就可用了。在Deepin下使用的太欢快了，每天都熬夜折腾自己的系统，当时看到Deepin的招聘要求是：对Linux有充满信仰的狂热，不敲代码睡不着。 我当时的情况就是这样的，并且我还一度想着以后一定要进深度公司做程序员(后来发现自己是个菜逼)。\n\n\n自从我使用了Deepin，我便天天给身边的朋友安利Deepin，不过他们好像都不怎么看得起Deepin，但在我心中Deepin就是那种闪耀般的存在。后来，我老爸的老旧笔记本跑win7有点吃不消了，他主要是写文档和看视频，我又给他的电脑安装了Deepin 15.6，目前(2019-5-12)也还在使用，很赞!\n\n\n下面要吹下Deepin了，国内常用软件兼容的非常好!这个要大大的赞，并且Deepin自带的软件都非常易用+实用，如果你不使用QQ或者微信那没什么... 毛玻璃效果非常漂亮，社区还是挺活跃的。\n\n\n说下Deepin的缺点(个人体验): 耗电，不太可客制化(可能是我太菜)，软件旧(个人体验）\n\n我从Deepin15.6一直用到15.9.3中间出现了很多问题（但都是小问题），随着个人技术的增长和论坛的帮助基本都是能解决，但还是有两点无法解决的，在我个人笔记本上:会偶尔卡死，真死的那种。无法睡眠。\n\n\n我一直期待着15.10能将我上面提到的两个问题解决，但是并没有解决，而且标题栏变得更大了，我忍不了了，我的笔记本是13.3寸的。标题栏真的又肥又大，实在影响美观，再加上我的那些问题又无法得到解决，我就尝试了一下一直被大家所提到的Arch Linux，不过我不是直接使用的Arch Linux，我是使用的它的衍生版:Manjaro Linux，首先是它安装方便，其次是各大论坛呼声挺高的，我便直接跳过了Arch直接使用Manjaro，之前在虚拟机装了遍Arch，跑的dde。\n\n\n下面便是Manjaro篇了，我选择的是KDE桌面，因为当时社区里上很多人说KDE非常可定制化，我使用了Manjaro Linux了，使用体验非常好!可以说是Very Good了!\n\n\n解决了上面提到的所有问题，并且电脑还省电多了...并且在KDE下感觉比DDE丝滑一点点，不知道是不是错觉，并且电脑发热量也比DDE要低，关键是Pacman和Aur实在是太好用了，虽然debian系的软件是最多的，但是安装不一定比Pacman要方便，我在Manjaro官方软件源下找不到的软件，Aur里有，而且基本很少出现依赖问题，除了卸载的时候，会提示依赖问题，但是安装时不会。\n\n\n但也不是说Manjaro就没问题了，比如QQ就不怎么样，虽然是使用的Deepin打包的，但我的还是有些问题，使用体验上没有Deepin好，微信等软件倒是没问题。\n\n\n总的来说，如果你是新手或者说不愿意折腾操作系统，但又想使用Linux系统，Deepin是你最好的选择(个人看法)，如果你折腾或了解更多的Linux知识，推荐Arch系的发行版。\n","source":"_posts/我的Linux之路.md","raw":"---\ntitle: 我的Linux之路\ncopyright: true\ndate: 2019-05-15 00:04:56\ncategories: 个人感想\ntags:\n - Linux\n---\n\n这篇是我2019-5-12发表在Deepin论坛的文章，感觉可以记录下，让更多人了解我的Linux之路和我对Linux桌面的一些看法.\n\n<!--more-->\n\n先说说一些题外话\n\n\n我是在2018年的某月(具体哪天忘了)知道了Ubuntu这个系统，也是我第一个听说过的Linux系统，然后我就不知道怎么了，就尝试去安装了，安装之前计算机对我来说就只是台”游戏机“。\n\n\n第一次安装很神奇，居然成功了，但有个问题。笔电盖上屏幕后打开，会出现无法恢复的问题，而且无法解决，我当时根本Linux下的显卡驱动是什么，然后我还是继续用着..因为我没有钱买百度云会员重新下载win10镜像(穷学生)... 并且在我使用ubuntu的时候，我还一长段时间不能使用无线网络，那是因为我在笔记本有个按键，可以快速关闭无线网卡，但是按下这个快捷键Ubuntu没有给任何提示，只有无线网络无法使用。。。\n\n\n我便忍了，中间一直认为是我没有装驱动，因为我在找前面提到的笔电盖屏不恢复的解决方案时，增加了\"驱动\" 这个关键词的经验(最终还是没搞好)，我就以为还是驱动问题，网上大量的搜索相关解决方案，然后我就学会了apt包管理器的基本使用方法...还了解了vim nano 这些编辑器，但无线网络这个问题还是没解决...后来是怎么解决的呢?           某一天下午，我在图书馆，用电脑在看编程的视频教程，然后不小心按了我上面所提到的开关无线网卡的按键，然后我就可以使用Wifi了....\n\n\n好了，这是我使用Ubuntu的一些小事迹，下面要讲Deepin了，毕竟是我使用时长最长的Linux发行版。\n\n\n身为一个Linux新手，在使用Linux之后，会到处找资料，当然也会看到各种 \"xxx可能是最好的Linux发行版\"，各种论坛上也会讨论不同的发行版的区别，此时还没到Deepin，我发现了 Linux Mint，当时很多人叫它绿薄荷，我便安装了，说实话，我觉得Linux Mint很丑，但是很多人说它是目前Linux受欢迎度排行最高的发行版，而且又是基于Ubuntu的，安装也很方便，我便安装了Linux Mint，关于Linux Mint的回忆，我记不太清了，主要是我用的时间太短，安装好了后，去找Mint的QQ群，都寥寥无几，我便开始了我的下一段Linux旅程。\n\n\n终于到Deepin了，具体是怎么知道Deepin的我已经忘记了！，可能是因为从Mint到Deepin的过渡太轻松了吧，使我没有什么深(zao)刻(gao)的记(ti)忆(yan)，我只记得，安装Deepin太简单，只需要选择语言，简单分下区，直接点击安装，稍微等待下就可用了。在Deepin下使用的太欢快了，每天都熬夜折腾自己的系统，当时看到Deepin的招聘要求是：对Linux有充满信仰的狂热，不敲代码睡不着。 我当时的情况就是这样的，并且我还一度想着以后一定要进深度公司做程序员(后来发现自己是个菜逼)。\n\n\n自从我使用了Deepin，我便天天给身边的朋友安利Deepin，不过他们好像都不怎么看得起Deepin，但在我心中Deepin就是那种闪耀般的存在。后来，我老爸的老旧笔记本跑win7有点吃不消了，他主要是写文档和看视频，我又给他的电脑安装了Deepin 15.6，目前(2019-5-12)也还在使用，很赞!\n\n\n下面要吹下Deepin了，国内常用软件兼容的非常好!这个要大大的赞，并且Deepin自带的软件都非常易用+实用，如果你不使用QQ或者微信那没什么... 毛玻璃效果非常漂亮，社区还是挺活跃的。\n\n\n说下Deepin的缺点(个人体验): 耗电，不太可客制化(可能是我太菜)，软件旧(个人体验）\n\n我从Deepin15.6一直用到15.9.3中间出现了很多问题（但都是小问题），随着个人技术的增长和论坛的帮助基本都是能解决，但还是有两点无法解决的，在我个人笔记本上:会偶尔卡死，真死的那种。无法睡眠。\n\n\n我一直期待着15.10能将我上面提到的两个问题解决，但是并没有解决，而且标题栏变得更大了，我忍不了了，我的笔记本是13.3寸的。标题栏真的又肥又大，实在影响美观，再加上我的那些问题又无法得到解决，我就尝试了一下一直被大家所提到的Arch Linux，不过我不是直接使用的Arch Linux，我是使用的它的衍生版:Manjaro Linux，首先是它安装方便，其次是各大论坛呼声挺高的，我便直接跳过了Arch直接使用Manjaro，之前在虚拟机装了遍Arch，跑的dde。\n\n\n下面便是Manjaro篇了，我选择的是KDE桌面，因为当时社区里上很多人说KDE非常可定制化，我使用了Manjaro Linux了，使用体验非常好!可以说是Very Good了!\n\n\n解决了上面提到的所有问题，并且电脑还省电多了...并且在KDE下感觉比DDE丝滑一点点，不知道是不是错觉，并且电脑发热量也比DDE要低，关键是Pacman和Aur实在是太好用了，虽然debian系的软件是最多的，但是安装不一定比Pacman要方便，我在Manjaro官方软件源下找不到的软件，Aur里有，而且基本很少出现依赖问题，除了卸载的时候，会提示依赖问题，但是安装时不会。\n\n\n但也不是说Manjaro就没问题了，比如QQ就不怎么样，虽然是使用的Deepin打包的，但我的还是有些问题，使用体验上没有Deepin好，微信等软件倒是没问题。\n\n\n总的来说，如果你是新手或者说不愿意折腾操作系统，但又想使用Linux系统，Deepin是你最好的选择(个人看法)，如果你折腾或了解更多的Linux知识，推荐Arch系的发行版。\n","slug":"我的Linux之路","published":1,"updated":"2019-06-16T17:09:00.793Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uzel003toumsnvwel8ag","content":"<p>这篇是我2019-5-12发表在Deepin论坛的文章，感觉可以记录下，让更多人了解我的Linux之路和我对Linux桌面的一些看法.</p>\n<a id=\"more\"></a>\n<p>先说说一些题外话</p>\n<p>我是在2018年的某月(具体哪天忘了)知道了Ubuntu这个系统，也是我第一个听说过的Linux系统，然后我就不知道怎么了，就尝试去安装了，安装之前计算机对我来说就只是台”游戏机“。</p>\n<p>第一次安装很神奇，居然成功了，但有个问题。笔电盖上屏幕后打开，会出现无法恢复的问题，而且无法解决，我当时根本Linux下的显卡驱动是什么，然后我还是继续用着..因为我没有钱买百度云会员重新下载win10镜像(穷学生)… 并且在我使用ubuntu的时候，我还一长段时间不能使用无线网络，那是因为我在笔记本有个按键，可以快速关闭无线网卡，但是按下这个快捷键Ubuntu没有给任何提示，只有无线网络无法使用。。。</p>\n<p>我便忍了，中间一直认为是我没有装驱动，因为我在找前面提到的笔电盖屏不恢复的解决方案时，增加了”驱动” 这个关键词的经验(最终还是没搞好)，我就以为还是驱动问题，网上大量的搜索相关解决方案，然后我就学会了apt包管理器的基本使用方法…还了解了vim nano 这些编辑器，但无线网络这个问题还是没解决…后来是怎么解决的呢?           某一天下午，我在图书馆，用电脑在看编程的视频教程，然后不小心按了我上面所提到的开关无线网卡的按键，然后我就可以使用Wifi了….</p>\n<p>好了，这是我使用Ubuntu的一些小事迹，下面要讲Deepin了，毕竟是我使用时长最长的Linux发行版。</p>\n<p>身为一个Linux新手，在使用Linux之后，会到处找资料，当然也会看到各种 “xxx可能是最好的Linux发行版”，各种论坛上也会讨论不同的发行版的区别，此时还没到Deepin，我发现了 Linux Mint，当时很多人叫它绿薄荷，我便安装了，说实话，我觉得Linux Mint很丑，但是很多人说它是目前Linux受欢迎度排行最高的发行版，而且又是基于Ubuntu的，安装也很方便，我便安装了Linux Mint，关于Linux Mint的回忆，我记不太清了，主要是我用的时间太短，安装好了后，去找Mint的QQ群，都寥寥无几，我便开始了我的下一段Linux旅程。</p>\n<p>终于到Deepin了，具体是怎么知道Deepin的我已经忘记了！，可能是因为从Mint到Deepin的过渡太轻松了吧，使我没有什么深(zao)刻(gao)的记(ti)忆(yan)，我只记得，安装Deepin太简单，只需要选择语言，简单分下区，直接点击安装，稍微等待下就可用了。在Deepin下使用的太欢快了，每天都熬夜折腾自己的系统，当时看到Deepin的招聘要求是：对Linux有充满信仰的狂热，不敲代码睡不着。 我当时的情况就是这样的，并且我还一度想着以后一定要进深度公司做程序员(后来发现自己是个菜逼)。</p>\n<p>自从我使用了Deepin，我便天天给身边的朋友安利Deepin，不过他们好像都不怎么看得起Deepin，但在我心中Deepin就是那种闪耀般的存在。后来，我老爸的老旧笔记本跑win7有点吃不消了，他主要是写文档和看视频，我又给他的电脑安装了Deepin 15.6，目前(2019-5-12)也还在使用，很赞!</p>\n<p>下面要吹下Deepin了，国内常用软件兼容的非常好!这个要大大的赞，并且Deepin自带的软件都非常易用+实用，如果你不使用QQ或者微信那没什么… 毛玻璃效果非常漂亮，社区还是挺活跃的。</p>\n<p>说下Deepin的缺点(个人体验): 耗电，不太可客制化(可能是我太菜)，软件旧(个人体验）</p>\n<p>我从Deepin15.6一直用到15.9.3中间出现了很多问题（但都是小问题），随着个人技术的增长和论坛的帮助基本都是能解决，但还是有两点无法解决的，在我个人笔记本上:会偶尔卡死，真死的那种。无法睡眠。</p>\n<p>我一直期待着15.10能将我上面提到的两个问题解决，但是并没有解决，而且标题栏变得更大了，我忍不了了，我的笔记本是13.3寸的。标题栏真的又肥又大，实在影响美观，再加上我的那些问题又无法得到解决，我就尝试了一下一直被大家所提到的Arch Linux，不过我不是直接使用的Arch Linux，我是使用的它的衍生版:Manjaro Linux，首先是它安装方便，其次是各大论坛呼声挺高的，我便直接跳过了Arch直接使用Manjaro，之前在虚拟机装了遍Arch，跑的dde。</p>\n<p>下面便是Manjaro篇了，我选择的是KDE桌面，因为当时社区里上很多人说KDE非常可定制化，我使用了Manjaro Linux了，使用体验非常好!可以说是Very Good了!</p>\n<p>解决了上面提到的所有问题，并且电脑还省电多了…并且在KDE下感觉比DDE丝滑一点点，不知道是不是错觉，并且电脑发热量也比DDE要低，关键是Pacman和Aur实在是太好用了，虽然debian系的软件是最多的，但是安装不一定比Pacman要方便，我在Manjaro官方软件源下找不到的软件，Aur里有，而且基本很少出现依赖问题，除了卸载的时候，会提示依赖问题，但是安装时不会。</p>\n<p>但也不是说Manjaro就没问题了，比如QQ就不怎么样，虽然是使用的Deepin打包的，但我的还是有些问题，使用体验上没有Deepin好，微信等软件倒是没问题。</p>\n<p>总的来说，如果你是新手或者说不愿意折腾操作系统，但又想使用Linux系统，Deepin是你最好的选择(个人看法)，如果你折腾或了解更多的Linux知识，推荐Arch系的发行版。</p>\n","site":{"data":{}},"excerpt":"<p>这篇是我2019-5-12发表在Deepin论坛的文章，感觉可以记录下，让更多人了解我的Linux之路和我对Linux桌面的一些看法.</p>","more":"<p>先说说一些题外话</p>\n<p>我是在2018年的某月(具体哪天忘了)知道了Ubuntu这个系统，也是我第一个听说过的Linux系统，然后我就不知道怎么了，就尝试去安装了，安装之前计算机对我来说就只是台”游戏机“。</p>\n<p>第一次安装很神奇，居然成功了，但有个问题。笔电盖上屏幕后打开，会出现无法恢复的问题，而且无法解决，我当时根本Linux下的显卡驱动是什么，然后我还是继续用着..因为我没有钱买百度云会员重新下载win10镜像(穷学生)… 并且在我使用ubuntu的时候，我还一长段时间不能使用无线网络，那是因为我在笔记本有个按键，可以快速关闭无线网卡，但是按下这个快捷键Ubuntu没有给任何提示，只有无线网络无法使用。。。</p>\n<p>我便忍了，中间一直认为是我没有装驱动，因为我在找前面提到的笔电盖屏不恢复的解决方案时，增加了”驱动” 这个关键词的经验(最终还是没搞好)，我就以为还是驱动问题，网上大量的搜索相关解决方案，然后我就学会了apt包管理器的基本使用方法…还了解了vim nano 这些编辑器，但无线网络这个问题还是没解决…后来是怎么解决的呢?           某一天下午，我在图书馆，用电脑在看编程的视频教程，然后不小心按了我上面所提到的开关无线网卡的按键，然后我就可以使用Wifi了….</p>\n<p>好了，这是我使用Ubuntu的一些小事迹，下面要讲Deepin了，毕竟是我使用时长最长的Linux发行版。</p>\n<p>身为一个Linux新手，在使用Linux之后，会到处找资料，当然也会看到各种 “xxx可能是最好的Linux发行版”，各种论坛上也会讨论不同的发行版的区别，此时还没到Deepin，我发现了 Linux Mint，当时很多人叫它绿薄荷，我便安装了，说实话，我觉得Linux Mint很丑，但是很多人说它是目前Linux受欢迎度排行最高的发行版，而且又是基于Ubuntu的，安装也很方便，我便安装了Linux Mint，关于Linux Mint的回忆，我记不太清了，主要是我用的时间太短，安装好了后，去找Mint的QQ群，都寥寥无几，我便开始了我的下一段Linux旅程。</p>\n<p>终于到Deepin了，具体是怎么知道Deepin的我已经忘记了！，可能是因为从Mint到Deepin的过渡太轻松了吧，使我没有什么深(zao)刻(gao)的记(ti)忆(yan)，我只记得，安装Deepin太简单，只需要选择语言，简单分下区，直接点击安装，稍微等待下就可用了。在Deepin下使用的太欢快了，每天都熬夜折腾自己的系统，当时看到Deepin的招聘要求是：对Linux有充满信仰的狂热，不敲代码睡不着。 我当时的情况就是这样的，并且我还一度想着以后一定要进深度公司做程序员(后来发现自己是个菜逼)。</p>\n<p>自从我使用了Deepin，我便天天给身边的朋友安利Deepin，不过他们好像都不怎么看得起Deepin，但在我心中Deepin就是那种闪耀般的存在。后来，我老爸的老旧笔记本跑win7有点吃不消了，他主要是写文档和看视频，我又给他的电脑安装了Deepin 15.6，目前(2019-5-12)也还在使用，很赞!</p>\n<p>下面要吹下Deepin了，国内常用软件兼容的非常好!这个要大大的赞，并且Deepin自带的软件都非常易用+实用，如果你不使用QQ或者微信那没什么… 毛玻璃效果非常漂亮，社区还是挺活跃的。</p>\n<p>说下Deepin的缺点(个人体验): 耗电，不太可客制化(可能是我太菜)，软件旧(个人体验）</p>\n<p>我从Deepin15.6一直用到15.9.3中间出现了很多问题（但都是小问题），随着个人技术的增长和论坛的帮助基本都是能解决，但还是有两点无法解决的，在我个人笔记本上:会偶尔卡死，真死的那种。无法睡眠。</p>\n<p>我一直期待着15.10能将我上面提到的两个问题解决，但是并没有解决，而且标题栏变得更大了，我忍不了了，我的笔记本是13.3寸的。标题栏真的又肥又大，实在影响美观，再加上我的那些问题又无法得到解决，我就尝试了一下一直被大家所提到的Arch Linux，不过我不是直接使用的Arch Linux，我是使用的它的衍生版:Manjaro Linux，首先是它安装方便，其次是各大论坛呼声挺高的，我便直接跳过了Arch直接使用Manjaro，之前在虚拟机装了遍Arch，跑的dde。</p>\n<p>下面便是Manjaro篇了，我选择的是KDE桌面，因为当时社区里上很多人说KDE非常可定制化，我使用了Manjaro Linux了，使用体验非常好!可以说是Very Good了!</p>\n<p>解决了上面提到的所有问题，并且电脑还省电多了…并且在KDE下感觉比DDE丝滑一点点，不知道是不是错觉，并且电脑发热量也比DDE要低，关键是Pacman和Aur实在是太好用了，虽然debian系的软件是最多的，但是安装不一定比Pacman要方便，我在Manjaro官方软件源下找不到的软件，Aur里有，而且基本很少出现依赖问题，除了卸载的时候，会提示依赖问题，但是安装时不会。</p>\n<p>但也不是说Manjaro就没问题了，比如QQ就不怎么样，虽然是使用的Deepin打包的，但我的还是有些问题，使用体验上没有Deepin好，微信等软件倒是没问题。</p>\n<p>总的来说，如果你是新手或者说不愿意折腾操作系统，但又想使用Linux系统，Deepin是你最好的选择(个人看法)，如果你折腾或了解更多的Linux知识，推荐Arch系的发行版。</p>"},{"title":"深拷贝和浅拷贝的区别","copyright":true,"date":"2019-05-14T14:55:24.000Z","_content":"\n虽然网上大家们都说浅拷贝和深拷贝本不是C++原本的概念，根本都是胡乱撤出来的概念，但我感觉还是有必要写这一篇文章，并且以此作为标题。\n\n<!--more-->\n\n# 浅拷贝\n\n我们都知道,C++在实例化一个类对象时，会自动调用它的拷贝构造函数。\n\n**那么浅拷贝就是在你没有创建自定义拷贝构造函数时执行的默认的拷贝构造函数。**\n\n那什么是拷贝构造函数呢?\n\n**拷贝构造函数是将对象的所有属性的值进行拷贝，并且赋值给要拷贝的对象**\n\n下面看个例子:\n\n~~~C++\n#include <iostream>\n\nusing namespace std;\n\nclass Human {\npublic:\n    string name;\n    int age;\n\n    //默认构造函数\n    Human() {\n        cout << \"Human默认构造函数调用.\" << endl;\n    }\n\n    //有参构造函数\n    Human(string f_name, int f_age) {\n        name = f_name;\n        age = f_age;\n        cout << \"Human有参构造函数调用.\" << endl;\n    }\n\n    //析构函数\n    ~Human() {\n        cout << \"Human析构函数调用.\" << endl;\n    }\n};\n\nint main() {\n    Human h1(\"李四\", 18);\n    cout << h1.name << \"的年龄为:\" << h1.age << endl;\n    //浅拷贝，编译器会自动将h1对象属性的值拷贝给h2\n    Human h2(h1);\n    cout << h2.name << \"的年龄为:\" << h2.age << endl;\n    return 0;\n}\n~~~\n\n输出结果为:\n\n~~~\nHuman有参构造函数调用.\n李四的年龄为:18\n李四的年龄为:18\nHuman析构函数调用.\nHuman析构函数调用.\n\nProcess finished with exit code 0\n~~~\n\n根据上面的代码，我们可以看出h1对象所有属性的值都拷贝给了h2对象，但是我们并没有写相关的代码，**这是编译器帮我们实现的，也就是默认的拷贝构造函数，我们就称为浅拷贝。**\n\n浅拷贝的具体代码实现是怎样的呢？请看下面的代码:\n\n~~~C++\n    //默认的拷贝构造函数\n    Human(const Human & h){\n        name = h.name;\n        age = h.age;\n    }\n~~~\n\n可与看出，它只是简单的将对象属性的值，进行拷贝。\n\n大家思考一下，如果对象属性都是普通类型的变量，那么，这个浅拷贝是可以完美的完成这个任务的，但是如果对象属性含有引用变量或指针变量的话，那么这个浅拷贝，是否能正确的执行呢？\n\n答案是否定的，下面看下深拷贝。\n\n\n# 深拷贝\n\n什么是深拷贝?\n\n**深拷贝就是由程序员自定义的拷贝构造函数，并且能够处理浅拷贝所遇到的问题，也就是能够处理当浅拷贝遇到引用变量和指针变量时，无法完美处理的场景.**\n\n下面的代码将体现，浅拷贝在遇到对象属性存在引用和指针变量时可能会出现的错误:\n\n~~~C++\n#include <iostream>\n\nusing namespace std;\n\nclass Human {\npublic:\n    string name;\n    int *age;\n\n    //默认构造函数\n    Human() {\n        cout << \"Human默认构造函数调用.\" << endl;\n    }\n\n    //有参构造函数\n    Human(string f_name, int f_age) {\n        name = f_name;\n        //动态分配内存空间，将age的数据存入堆区\n        age = new int(f_age);\n        cout << \"Human有参构造函数调用.\" << endl;\n    }\n\n    //析构函数\n    ~Human() {\n        //如果age指针变量是空，则释放\n        if(age !=NULL){\n            delete age;\n            //防止指针变量成为野指针\n            age = NULL;\n        }\n        cout << \"Human析构函数调用.\" << endl;\n    }\n};\n\nint main() {\n    Human h1(\"李四\", 18);\n    cout << h1.name << \"的年龄为:\" <<*h1.age << endl;\n    //浅拷贝，编译器会自动将h1对象属性的值拷贝给h2\n    Human h2(h1);\n    cout << h2.name << \"的年龄为:\" <<*h2.age << endl;\n    return 0;\n}\n~~~\n\n输出结果为:\n\n~~~\nfree(): double free detected in tcache 2\nHuman有参构造函数调用.\n李四的年龄为:18\n李四的年龄为:18\nHuman析构函数调用.\n\nProcess finished with exit code 134 (interrupted by signal 6: SIGABRT)\n~~~\n\n通过输出结果，我们发现，程序发生了错误。\n\n因为由于类中有一个指针变量，所以我们编写有参构造函数时，需要将数据以堆的形式存储，并且在编译器调用析构函数时将其释放。\n\n上面提到过，如果程序员没有自定义拷贝构造函数，那么编译器将会自动加上，也就是说，我们要进行拷贝时，程序将会以浅拷贝的方式进行拷贝。\n\n由于是浅拷贝，那么h1对象就会将指针变量age所指向的地址赋值给h2对象的指针变量age，那么它们俩所指向的内存单元是同一个。\n\n然而在h1对象所要执行的操作完成后，就会调用它的析构函数，里面是会释放掉age指针变量，那么也就是说，在h1对象的生命周期内，age指针变量所指向的内存单元的数据已经被释放了，但是当执行到h2的对象的生命周期时，我们再进行释放时，程序自然就会报错。\n\n既然问题找到了，我们就需要进行修改，将这个问题解决。\n\n下面通过深拷贝的方式，让这个bug被修复:\n\n~~~C++\n#include <iostream>\n\nusing namespace std;\n\nclass Human {\npublic:\n    string name;\n    int *age;\n\n    //默认构造函数\n    Human() {\n        cout << \"Human默认构造函数调用.\" << endl;\n    }\n\n    //有参构造函数\n    Human(string f_name, int f_age) {\n        name = f_name;\n        //动态分配内存空间，将age的数据存入堆区\n        age = new int(f_age);\n        cout << \"Human有参构造函数调用.\" << endl;\n    }\n\n    //拷贝构造函数\n    Human(const Human & h){\n        name = h.name;\n        //新开辟内存空间到堆区，存放age所指向的数据。\n        age = new int(*h.age);\n        cout<<\"Human拷贝构造函数调用.\"<<endl;\n    }\n\n    //析构函数\n    ~Human() {\n        //如果age指针变量是空，则释放\n        if(age !=NULL){\n            delete age;\n            //防止指针变量成为野指针\n            age = NULL;\n        }\n        cout << \"Human析构函数调用.\" << endl;\n    }\n};\n\nint main() {\n    Human h1(\"李四\", 18);\n    cout << h1.name << \"的年龄为:\" <<*h1.age << endl;\n    //浅拷贝，编译器会自动将h1对象属性的值拷贝给h2\n    Human h2(h1);\n    cout << h2.name << \"的年龄为:\" <<*h2.age << endl;\n    return 0;\n}\n~~~\n\n输出结果为:\n\n~~~\nHuman有参构造函数调用.\n李四的年龄为:18\nHuman拷贝构造函数调用.\n李四的年龄为:18\nHuman析构函数调用.\nHuman析构函数调用.\n\nProcess finished with exit code 0\n~~~\n\n程序没有报错，说明我们的bug成功解决了。\n\n上面的代码，我们只是自定义了一个拷贝构造函数，也就是深拷贝。\n\n深拷贝的具体实现，就是在拷贝数据时，将数据拷贝到一个新的内存空间，并且这个内存空间是在堆区，这样也就避免了浅拷贝时的问题。\n\n为什么能避免？\n\n原因是：如果通过浅拷贝进行拷贝数据的话，遇到指针或引用变量时，编译器只是将要拷贝的指针变量所指向的内存空间的地址进行拷贝，那么两个对象的指针变量所指向的地址仍然是相同的地址，所以当生命周期走向末尾，调用析构函数，释放内存空间后，再有对已释放的内存空间进行释放内存空间的操作就会引发异常。然而通过深拷贝的方式进行拷贝时，会开辟一个新的内存空间，这样每次释放空间时，则不会造成二次释放同一个空间的异常。\n\n# 两者该如何选择?\n\n**说得绝对点：**\n\n若类含有指针变量时，为了防止出现两个指针指向同一个内存空间，从而引发二次释放同一空间的问题，则需要在拷贝时对相应的指针变量开辟新的空间。\n\n这时需要使用深拷贝。\n\n**说的不那么绝对:**\n\n若类只有一个实例化对象，那么使用浅拷贝也没什么关系，因为无法造成二次释放同一内存空间的问题。\n","source":"_posts/深拷贝和浅拷贝的区别.md","raw":"---\ntitle: 深拷贝和浅拷贝的区别\ncopyright: true\ndate: 2019-05-14 22:55:24\ncategories: 学习笔记\ntags:\n - C++\n - 经典案例\n---\n\n虽然网上大家们都说浅拷贝和深拷贝本不是C++原本的概念，根本都是胡乱撤出来的概念，但我感觉还是有必要写这一篇文章，并且以此作为标题。\n\n<!--more-->\n\n# 浅拷贝\n\n我们都知道,C++在实例化一个类对象时，会自动调用它的拷贝构造函数。\n\n**那么浅拷贝就是在你没有创建自定义拷贝构造函数时执行的默认的拷贝构造函数。**\n\n那什么是拷贝构造函数呢?\n\n**拷贝构造函数是将对象的所有属性的值进行拷贝，并且赋值给要拷贝的对象**\n\n下面看个例子:\n\n~~~C++\n#include <iostream>\n\nusing namespace std;\n\nclass Human {\npublic:\n    string name;\n    int age;\n\n    //默认构造函数\n    Human() {\n        cout << \"Human默认构造函数调用.\" << endl;\n    }\n\n    //有参构造函数\n    Human(string f_name, int f_age) {\n        name = f_name;\n        age = f_age;\n        cout << \"Human有参构造函数调用.\" << endl;\n    }\n\n    //析构函数\n    ~Human() {\n        cout << \"Human析构函数调用.\" << endl;\n    }\n};\n\nint main() {\n    Human h1(\"李四\", 18);\n    cout << h1.name << \"的年龄为:\" << h1.age << endl;\n    //浅拷贝，编译器会自动将h1对象属性的值拷贝给h2\n    Human h2(h1);\n    cout << h2.name << \"的年龄为:\" << h2.age << endl;\n    return 0;\n}\n~~~\n\n输出结果为:\n\n~~~\nHuman有参构造函数调用.\n李四的年龄为:18\n李四的年龄为:18\nHuman析构函数调用.\nHuman析构函数调用.\n\nProcess finished with exit code 0\n~~~\n\n根据上面的代码，我们可以看出h1对象所有属性的值都拷贝给了h2对象，但是我们并没有写相关的代码，**这是编译器帮我们实现的，也就是默认的拷贝构造函数，我们就称为浅拷贝。**\n\n浅拷贝的具体代码实现是怎样的呢？请看下面的代码:\n\n~~~C++\n    //默认的拷贝构造函数\n    Human(const Human & h){\n        name = h.name;\n        age = h.age;\n    }\n~~~\n\n可与看出，它只是简单的将对象属性的值，进行拷贝。\n\n大家思考一下，如果对象属性都是普通类型的变量，那么，这个浅拷贝是可以完美的完成这个任务的，但是如果对象属性含有引用变量或指针变量的话，那么这个浅拷贝，是否能正确的执行呢？\n\n答案是否定的，下面看下深拷贝。\n\n\n# 深拷贝\n\n什么是深拷贝?\n\n**深拷贝就是由程序员自定义的拷贝构造函数，并且能够处理浅拷贝所遇到的问题，也就是能够处理当浅拷贝遇到引用变量和指针变量时，无法完美处理的场景.**\n\n下面的代码将体现，浅拷贝在遇到对象属性存在引用和指针变量时可能会出现的错误:\n\n~~~C++\n#include <iostream>\n\nusing namespace std;\n\nclass Human {\npublic:\n    string name;\n    int *age;\n\n    //默认构造函数\n    Human() {\n        cout << \"Human默认构造函数调用.\" << endl;\n    }\n\n    //有参构造函数\n    Human(string f_name, int f_age) {\n        name = f_name;\n        //动态分配内存空间，将age的数据存入堆区\n        age = new int(f_age);\n        cout << \"Human有参构造函数调用.\" << endl;\n    }\n\n    //析构函数\n    ~Human() {\n        //如果age指针变量是空，则释放\n        if(age !=NULL){\n            delete age;\n            //防止指针变量成为野指针\n            age = NULL;\n        }\n        cout << \"Human析构函数调用.\" << endl;\n    }\n};\n\nint main() {\n    Human h1(\"李四\", 18);\n    cout << h1.name << \"的年龄为:\" <<*h1.age << endl;\n    //浅拷贝，编译器会自动将h1对象属性的值拷贝给h2\n    Human h2(h1);\n    cout << h2.name << \"的年龄为:\" <<*h2.age << endl;\n    return 0;\n}\n~~~\n\n输出结果为:\n\n~~~\nfree(): double free detected in tcache 2\nHuman有参构造函数调用.\n李四的年龄为:18\n李四的年龄为:18\nHuman析构函数调用.\n\nProcess finished with exit code 134 (interrupted by signal 6: SIGABRT)\n~~~\n\n通过输出结果，我们发现，程序发生了错误。\n\n因为由于类中有一个指针变量，所以我们编写有参构造函数时，需要将数据以堆的形式存储，并且在编译器调用析构函数时将其释放。\n\n上面提到过，如果程序员没有自定义拷贝构造函数，那么编译器将会自动加上，也就是说，我们要进行拷贝时，程序将会以浅拷贝的方式进行拷贝。\n\n由于是浅拷贝，那么h1对象就会将指针变量age所指向的地址赋值给h2对象的指针变量age，那么它们俩所指向的内存单元是同一个。\n\n然而在h1对象所要执行的操作完成后，就会调用它的析构函数，里面是会释放掉age指针变量，那么也就是说，在h1对象的生命周期内，age指针变量所指向的内存单元的数据已经被释放了，但是当执行到h2的对象的生命周期时，我们再进行释放时，程序自然就会报错。\n\n既然问题找到了，我们就需要进行修改，将这个问题解决。\n\n下面通过深拷贝的方式，让这个bug被修复:\n\n~~~C++\n#include <iostream>\n\nusing namespace std;\n\nclass Human {\npublic:\n    string name;\n    int *age;\n\n    //默认构造函数\n    Human() {\n        cout << \"Human默认构造函数调用.\" << endl;\n    }\n\n    //有参构造函数\n    Human(string f_name, int f_age) {\n        name = f_name;\n        //动态分配内存空间，将age的数据存入堆区\n        age = new int(f_age);\n        cout << \"Human有参构造函数调用.\" << endl;\n    }\n\n    //拷贝构造函数\n    Human(const Human & h){\n        name = h.name;\n        //新开辟内存空间到堆区，存放age所指向的数据。\n        age = new int(*h.age);\n        cout<<\"Human拷贝构造函数调用.\"<<endl;\n    }\n\n    //析构函数\n    ~Human() {\n        //如果age指针变量是空，则释放\n        if(age !=NULL){\n            delete age;\n            //防止指针变量成为野指针\n            age = NULL;\n        }\n        cout << \"Human析构函数调用.\" << endl;\n    }\n};\n\nint main() {\n    Human h1(\"李四\", 18);\n    cout << h1.name << \"的年龄为:\" <<*h1.age << endl;\n    //浅拷贝，编译器会自动将h1对象属性的值拷贝给h2\n    Human h2(h1);\n    cout << h2.name << \"的年龄为:\" <<*h2.age << endl;\n    return 0;\n}\n~~~\n\n输出结果为:\n\n~~~\nHuman有参构造函数调用.\n李四的年龄为:18\nHuman拷贝构造函数调用.\n李四的年龄为:18\nHuman析构函数调用.\nHuman析构函数调用.\n\nProcess finished with exit code 0\n~~~\n\n程序没有报错，说明我们的bug成功解决了。\n\n上面的代码，我们只是自定义了一个拷贝构造函数，也就是深拷贝。\n\n深拷贝的具体实现，就是在拷贝数据时，将数据拷贝到一个新的内存空间，并且这个内存空间是在堆区，这样也就避免了浅拷贝时的问题。\n\n为什么能避免？\n\n原因是：如果通过浅拷贝进行拷贝数据的话，遇到指针或引用变量时，编译器只是将要拷贝的指针变量所指向的内存空间的地址进行拷贝，那么两个对象的指针变量所指向的地址仍然是相同的地址，所以当生命周期走向末尾，调用析构函数，释放内存空间后，再有对已释放的内存空间进行释放内存空间的操作就会引发异常。然而通过深拷贝的方式进行拷贝时，会开辟一个新的内存空间，这样每次释放空间时，则不会造成二次释放同一个空间的异常。\n\n# 两者该如何选择?\n\n**说得绝对点：**\n\n若类含有指针变量时，为了防止出现两个指针指向同一个内存空间，从而引发二次释放同一空间的问题，则需要在拷贝时对相应的指针变量开辟新的空间。\n\n这时需要使用深拷贝。\n\n**说的不那么绝对:**\n\n若类只有一个实例化对象，那么使用浅拷贝也没什么关系，因为无法造成二次释放同一内存空间的问题。\n","slug":"深拷贝和浅拷贝的区别","published":1,"updated":"2019-06-16T17:09:00.793Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uzem003woumsw9mj73y4","content":"<p>虽然网上大家们都说浅拷贝和深拷贝本不是C++原本的概念，根本都是胡乱撤出来的概念，但我感觉还是有必要写这一篇文章，并且以此作为标题。</p>\n<a id=\"more\"></a>\n<h1 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h1><p>我们都知道,C++在实例化一个类对象时，会自动调用它的拷贝构造函数。</p>\n<p><strong>那么浅拷贝就是在你没有创建自定义拷贝构造函数时执行的默认的拷贝构造函数。</strong></p>\n<p>那什么是拷贝构造函数呢?</p>\n<p><strong>拷贝构造函数是将对象的所有属性的值进行拷贝，并且赋值给要拷贝的对象</strong></p>\n<p>下面看个例子:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Human</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//默认构造函数</span></span><br><span class=\"line\">    Human() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Human默认构造函数调用.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//有参构造函数</span></span><br><span class=\"line\">    Human(<span class=\"built_in\">string</span> f_name, <span class=\"keyword\">int</span> f_age) &#123;</span><br><span class=\"line\">        name = f_name;</span><br><span class=\"line\">        age = f_age;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Human有参构造函数调用.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//析构函数</span></span><br><span class=\"line\">    ~Human() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Human析构函数调用.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Human <span class=\"title\">h1</span><span class=\"params\">(<span class=\"string\">\"李四\"</span>, <span class=\"number\">18</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; h1.name &lt;&lt; <span class=\"string\">\"的年龄为:\"</span> &lt;&lt; h1.age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"comment\">//浅拷贝，编译器会自动将h1对象属性的值拷贝给h2</span></span><br><span class=\"line\">    <span class=\"function\">Human <span class=\"title\">h2</span><span class=\"params\">(h1)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; h2.name &lt;&lt; <span class=\"string\">\"的年龄为:\"</span> &lt;&lt; h2.age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Human有参构造函数调用.</span><br><span class=\"line\">李四的年龄为:18</span><br><span class=\"line\">李四的年龄为:18</span><br><span class=\"line\">Human析构函数调用.</span><br><span class=\"line\">Human析构函数调用.</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n<p>根据上面的代码，我们可以看出h1对象所有属性的值都拷贝给了h2对象，但是我们并没有写相关的代码，<strong>这是编译器帮我们实现的，也就是默认的拷贝构造函数，我们就称为浅拷贝。</strong></p>\n<p>浅拷贝的具体代码实现是怎样的呢？请看下面的代码:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//默认的拷贝构造函数</span></span><br><span class=\"line\">Human(<span class=\"keyword\">const</span> Human &amp; h)&#123;</span><br><span class=\"line\">    name = h.name;</span><br><span class=\"line\">    age = h.age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可与看出，它只是简单的将对象属性的值，进行拷贝。</p>\n<p>大家思考一下，如果对象属性都是普通类型的变量，那么，这个浅拷贝是可以完美的完成这个任务的，但是如果对象属性含有引用变量或指针变量的话，那么这个浅拷贝，是否能正确的执行呢？</p>\n<p>答案是否定的，下面看下深拷贝。</p>\n<h1 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h1><p>什么是深拷贝?</p>\n<p><strong>深拷贝就是由程序员自定义的拷贝构造函数，并且能够处理浅拷贝所遇到的问题，也就是能够处理当浅拷贝遇到引用变量和指针变量时，无法完美处理的场景.</strong></p>\n<p>下面的代码将体现，浅拷贝在遇到对象属性存在引用和指针变量时可能会出现的错误:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Human</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//默认构造函数</span></span><br><span class=\"line\">    Human() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Human默认构造函数调用.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//有参构造函数</span></span><br><span class=\"line\">    Human(<span class=\"built_in\">string</span> f_name, <span class=\"keyword\">int</span> f_age) &#123;</span><br><span class=\"line\">        name = f_name;</span><br><span class=\"line\">        <span class=\"comment\">//动态分配内存空间，将age的数据存入堆区</span></span><br><span class=\"line\">        age = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(f_age);</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Human有参构造函数调用.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//析构函数</span></span><br><span class=\"line\">    ~Human() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果age指针变量是空，则释放</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(age !=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> age;</span><br><span class=\"line\">            <span class=\"comment\">//防止指针变量成为野指针</span></span><br><span class=\"line\">            age = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Human析构函数调用.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Human <span class=\"title\">h1</span><span class=\"params\">(<span class=\"string\">\"李四\"</span>, <span class=\"number\">18</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; h1.name &lt;&lt; <span class=\"string\">\"的年龄为:\"</span> &lt;&lt;*h1.age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"comment\">//浅拷贝，编译器会自动将h1对象属性的值拷贝给h2</span></span><br><span class=\"line\">    <span class=\"function\">Human <span class=\"title\">h2</span><span class=\"params\">(h1)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; h2.name &lt;&lt; <span class=\"string\">\"的年龄为:\"</span> &lt;&lt;*h2.age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free(): double free detected in tcache 2</span><br><span class=\"line\">Human有参构造函数调用.</span><br><span class=\"line\">李四的年龄为:18</span><br><span class=\"line\">李四的年龄为:18</span><br><span class=\"line\">Human析构函数调用.</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 134 (interrupted by signal 6: SIGABRT)</span><br></pre></td></tr></table></figure>\n<p>通过输出结果，我们发现，程序发生了错误。</p>\n<p>因为由于类中有一个指针变量，所以我们编写有参构造函数时，需要将数据以堆的形式存储，并且在编译器调用析构函数时将其释放。</p>\n<p>上面提到过，如果程序员没有自定义拷贝构造函数，那么编译器将会自动加上，也就是说，我们要进行拷贝时，程序将会以浅拷贝的方式进行拷贝。</p>\n<p>由于是浅拷贝，那么h1对象就会将指针变量age所指向的地址赋值给h2对象的指针变量age，那么它们俩所指向的内存单元是同一个。</p>\n<p>然而在h1对象所要执行的操作完成后，就会调用它的析构函数，里面是会释放掉age指针变量，那么也就是说，在h1对象的生命周期内，age指针变量所指向的内存单元的数据已经被释放了，但是当执行到h2的对象的生命周期时，我们再进行释放时，程序自然就会报错。</p>\n<p>既然问题找到了，我们就需要进行修改，将这个问题解决。</p>\n<p>下面通过深拷贝的方式，让这个bug被修复:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Human</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//默认构造函数</span></span><br><span class=\"line\">    Human() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Human默认构造函数调用.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//有参构造函数</span></span><br><span class=\"line\">    Human(<span class=\"built_in\">string</span> f_name, <span class=\"keyword\">int</span> f_age) &#123;</span><br><span class=\"line\">        name = f_name;</span><br><span class=\"line\">        <span class=\"comment\">//动态分配内存空间，将age的数据存入堆区</span></span><br><span class=\"line\">        age = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(f_age);</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Human有参构造函数调用.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//拷贝构造函数</span></span><br><span class=\"line\">    Human(<span class=\"keyword\">const</span> Human &amp; h)&#123;</span><br><span class=\"line\">        name = h.name;</span><br><span class=\"line\">        <span class=\"comment\">//新开辟内存空间到堆区，存放age所指向的数据。</span></span><br><span class=\"line\">        age = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(*h.age);</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Human拷贝构造函数调用.\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//析构函数</span></span><br><span class=\"line\">    ~Human() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果age指针变量是空，则释放</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(age !=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> age;</span><br><span class=\"line\">            <span class=\"comment\">//防止指针变量成为野指针</span></span><br><span class=\"line\">            age = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Human析构函数调用.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Human <span class=\"title\">h1</span><span class=\"params\">(<span class=\"string\">\"李四\"</span>, <span class=\"number\">18</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; h1.name &lt;&lt; <span class=\"string\">\"的年龄为:\"</span> &lt;&lt;*h1.age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"comment\">//浅拷贝，编译器会自动将h1对象属性的值拷贝给h2</span></span><br><span class=\"line\">    <span class=\"function\">Human <span class=\"title\">h2</span><span class=\"params\">(h1)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; h2.name &lt;&lt; <span class=\"string\">\"的年龄为:\"</span> &lt;&lt;*h2.age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Human有参构造函数调用.</span><br><span class=\"line\">李四的年龄为:18</span><br><span class=\"line\">Human拷贝构造函数调用.</span><br><span class=\"line\">李四的年龄为:18</span><br><span class=\"line\">Human析构函数调用.</span><br><span class=\"line\">Human析构函数调用.</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n<p>程序没有报错，说明我们的bug成功解决了。</p>\n<p>上面的代码，我们只是自定义了一个拷贝构造函数，也就是深拷贝。</p>\n<p>深拷贝的具体实现，就是在拷贝数据时，将数据拷贝到一个新的内存空间，并且这个内存空间是在堆区，这样也就避免了浅拷贝时的问题。</p>\n<p>为什么能避免？</p>\n<p>原因是：如果通过浅拷贝进行拷贝数据的话，遇到指针或引用变量时，编译器只是将要拷贝的指针变量所指向的内存空间的地址进行拷贝，那么两个对象的指针变量所指向的地址仍然是相同的地址，所以当生命周期走向末尾，调用析构函数，释放内存空间后，再有对已释放的内存空间进行释放内存空间的操作就会引发异常。然而通过深拷贝的方式进行拷贝时，会开辟一个新的内存空间，这样每次释放空间时，则不会造成二次释放同一个空间的异常。</p>\n<h1 id=\"两者该如何选择\"><a href=\"#两者该如何选择\" class=\"headerlink\" title=\"两者该如何选择?\"></a>两者该如何选择?</h1><p><strong>说得绝对点：</strong></p>\n<p>若类含有指针变量时，为了防止出现两个指针指向同一个内存空间，从而引发二次释放同一空间的问题，则需要在拷贝时对相应的指针变量开辟新的空间。</p>\n<p>这时需要使用深拷贝。</p>\n<p><strong>说的不那么绝对:</strong></p>\n<p>若类只有一个实例化对象，那么使用浅拷贝也没什么关系，因为无法造成二次释放同一内存空间的问题。</p>\n","site":{"data":{}},"excerpt":"<p>虽然网上大家们都说浅拷贝和深拷贝本不是C++原本的概念，根本都是胡乱撤出来的概念，但我感觉还是有必要写这一篇文章，并且以此作为标题。</p>","more":"<h1 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h1><p>我们都知道,C++在实例化一个类对象时，会自动调用它的拷贝构造函数。</p>\n<p><strong>那么浅拷贝就是在你没有创建自定义拷贝构造函数时执行的默认的拷贝构造函数。</strong></p>\n<p>那什么是拷贝构造函数呢?</p>\n<p><strong>拷贝构造函数是将对象的所有属性的值进行拷贝，并且赋值给要拷贝的对象</strong></p>\n<p>下面看个例子:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Human</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//默认构造函数</span></span><br><span class=\"line\">    Human() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Human默认构造函数调用.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//有参构造函数</span></span><br><span class=\"line\">    Human(<span class=\"built_in\">string</span> f_name, <span class=\"keyword\">int</span> f_age) &#123;</span><br><span class=\"line\">        name = f_name;</span><br><span class=\"line\">        age = f_age;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Human有参构造函数调用.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//析构函数</span></span><br><span class=\"line\">    ~Human() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Human析构函数调用.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Human <span class=\"title\">h1</span><span class=\"params\">(<span class=\"string\">\"李四\"</span>, <span class=\"number\">18</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; h1.name &lt;&lt; <span class=\"string\">\"的年龄为:\"</span> &lt;&lt; h1.age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"comment\">//浅拷贝，编译器会自动将h1对象属性的值拷贝给h2</span></span><br><span class=\"line\">    <span class=\"function\">Human <span class=\"title\">h2</span><span class=\"params\">(h1)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; h2.name &lt;&lt; <span class=\"string\">\"的年龄为:\"</span> &lt;&lt; h2.age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Human有参构造函数调用.</span><br><span class=\"line\">李四的年龄为:18</span><br><span class=\"line\">李四的年龄为:18</span><br><span class=\"line\">Human析构函数调用.</span><br><span class=\"line\">Human析构函数调用.</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n<p>根据上面的代码，我们可以看出h1对象所有属性的值都拷贝给了h2对象，但是我们并没有写相关的代码，<strong>这是编译器帮我们实现的，也就是默认的拷贝构造函数，我们就称为浅拷贝。</strong></p>\n<p>浅拷贝的具体代码实现是怎样的呢？请看下面的代码:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//默认的拷贝构造函数</span></span><br><span class=\"line\">Human(<span class=\"keyword\">const</span> Human &amp; h)&#123;</span><br><span class=\"line\">    name = h.name;</span><br><span class=\"line\">    age = h.age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可与看出，它只是简单的将对象属性的值，进行拷贝。</p>\n<p>大家思考一下，如果对象属性都是普通类型的变量，那么，这个浅拷贝是可以完美的完成这个任务的，但是如果对象属性含有引用变量或指针变量的话，那么这个浅拷贝，是否能正确的执行呢？</p>\n<p>答案是否定的，下面看下深拷贝。</p>\n<h1 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h1><p>什么是深拷贝?</p>\n<p><strong>深拷贝就是由程序员自定义的拷贝构造函数，并且能够处理浅拷贝所遇到的问题，也就是能够处理当浅拷贝遇到引用变量和指针变量时，无法完美处理的场景.</strong></p>\n<p>下面的代码将体现，浅拷贝在遇到对象属性存在引用和指针变量时可能会出现的错误:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Human</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//默认构造函数</span></span><br><span class=\"line\">    Human() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Human默认构造函数调用.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//有参构造函数</span></span><br><span class=\"line\">    Human(<span class=\"built_in\">string</span> f_name, <span class=\"keyword\">int</span> f_age) &#123;</span><br><span class=\"line\">        name = f_name;</span><br><span class=\"line\">        <span class=\"comment\">//动态分配内存空间，将age的数据存入堆区</span></span><br><span class=\"line\">        age = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(f_age);</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Human有参构造函数调用.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//析构函数</span></span><br><span class=\"line\">    ~Human() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果age指针变量是空，则释放</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(age !=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> age;</span><br><span class=\"line\">            <span class=\"comment\">//防止指针变量成为野指针</span></span><br><span class=\"line\">            age = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Human析构函数调用.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Human <span class=\"title\">h1</span><span class=\"params\">(<span class=\"string\">\"李四\"</span>, <span class=\"number\">18</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; h1.name &lt;&lt; <span class=\"string\">\"的年龄为:\"</span> &lt;&lt;*h1.age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"comment\">//浅拷贝，编译器会自动将h1对象属性的值拷贝给h2</span></span><br><span class=\"line\">    <span class=\"function\">Human <span class=\"title\">h2</span><span class=\"params\">(h1)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; h2.name &lt;&lt; <span class=\"string\">\"的年龄为:\"</span> &lt;&lt;*h2.age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free(): double free detected in tcache 2</span><br><span class=\"line\">Human有参构造函数调用.</span><br><span class=\"line\">李四的年龄为:18</span><br><span class=\"line\">李四的年龄为:18</span><br><span class=\"line\">Human析构函数调用.</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 134 (interrupted by signal 6: SIGABRT)</span><br></pre></td></tr></table></figure>\n<p>通过输出结果，我们发现，程序发生了错误。</p>\n<p>因为由于类中有一个指针变量，所以我们编写有参构造函数时，需要将数据以堆的形式存储，并且在编译器调用析构函数时将其释放。</p>\n<p>上面提到过，如果程序员没有自定义拷贝构造函数，那么编译器将会自动加上，也就是说，我们要进行拷贝时，程序将会以浅拷贝的方式进行拷贝。</p>\n<p>由于是浅拷贝，那么h1对象就会将指针变量age所指向的地址赋值给h2对象的指针变量age，那么它们俩所指向的内存单元是同一个。</p>\n<p>然而在h1对象所要执行的操作完成后，就会调用它的析构函数，里面是会释放掉age指针变量，那么也就是说，在h1对象的生命周期内，age指针变量所指向的内存单元的数据已经被释放了，但是当执行到h2的对象的生命周期时，我们再进行释放时，程序自然就会报错。</p>\n<p>既然问题找到了，我们就需要进行修改，将这个问题解决。</p>\n<p>下面通过深拷贝的方式，让这个bug被修复:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Human</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//默认构造函数</span></span><br><span class=\"line\">    Human() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Human默认构造函数调用.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//有参构造函数</span></span><br><span class=\"line\">    Human(<span class=\"built_in\">string</span> f_name, <span class=\"keyword\">int</span> f_age) &#123;</span><br><span class=\"line\">        name = f_name;</span><br><span class=\"line\">        <span class=\"comment\">//动态分配内存空间，将age的数据存入堆区</span></span><br><span class=\"line\">        age = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(f_age);</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Human有参构造函数调用.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//拷贝构造函数</span></span><br><span class=\"line\">    Human(<span class=\"keyword\">const</span> Human &amp; h)&#123;</span><br><span class=\"line\">        name = h.name;</span><br><span class=\"line\">        <span class=\"comment\">//新开辟内存空间到堆区，存放age所指向的数据。</span></span><br><span class=\"line\">        age = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(*h.age);</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Human拷贝构造函数调用.\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//析构函数</span></span><br><span class=\"line\">    ~Human() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果age指针变量是空，则释放</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(age !=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> age;</span><br><span class=\"line\">            <span class=\"comment\">//防止指针变量成为野指针</span></span><br><span class=\"line\">            age = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Human析构函数调用.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Human <span class=\"title\">h1</span><span class=\"params\">(<span class=\"string\">\"李四\"</span>, <span class=\"number\">18</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; h1.name &lt;&lt; <span class=\"string\">\"的年龄为:\"</span> &lt;&lt;*h1.age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"comment\">//浅拷贝，编译器会自动将h1对象属性的值拷贝给h2</span></span><br><span class=\"line\">    <span class=\"function\">Human <span class=\"title\">h2</span><span class=\"params\">(h1)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; h2.name &lt;&lt; <span class=\"string\">\"的年龄为:\"</span> &lt;&lt;*h2.age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Human有参构造函数调用.</span><br><span class=\"line\">李四的年龄为:18</span><br><span class=\"line\">Human拷贝构造函数调用.</span><br><span class=\"line\">李四的年龄为:18</span><br><span class=\"line\">Human析构函数调用.</span><br><span class=\"line\">Human析构函数调用.</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n<p>程序没有报错，说明我们的bug成功解决了。</p>\n<p>上面的代码，我们只是自定义了一个拷贝构造函数，也就是深拷贝。</p>\n<p>深拷贝的具体实现，就是在拷贝数据时，将数据拷贝到一个新的内存空间，并且这个内存空间是在堆区，这样也就避免了浅拷贝时的问题。</p>\n<p>为什么能避免？</p>\n<p>原因是：如果通过浅拷贝进行拷贝数据的话，遇到指针或引用变量时，编译器只是将要拷贝的指针变量所指向的内存空间的地址进行拷贝，那么两个对象的指针变量所指向的地址仍然是相同的地址，所以当生命周期走向末尾，调用析构函数，释放内存空间后，再有对已释放的内存空间进行释放内存空间的操作就会引发异常。然而通过深拷贝的方式进行拷贝时，会开辟一个新的内存空间，这样每次释放空间时，则不会造成二次释放同一个空间的异常。</p>\n<h1 id=\"两者该如何选择\"><a href=\"#两者该如何选择\" class=\"headerlink\" title=\"两者该如何选择?\"></a>两者该如何选择?</h1><p><strong>说得绝对点：</strong></p>\n<p>若类含有指针变量时，为了防止出现两个指针指向同一个内存空间，从而引发二次释放同一空间的问题，则需要在拷贝时对相应的指针变量开辟新的空间。</p>\n<p>这时需要使用深拷贝。</p>\n<p><strong>说的不那么绝对:</strong></p>\n<p>若类只有一个实例化对象，那么使用浅拷贝也没什么关系，因为无法造成二次释放同一内存空间的问题。</p>"},{"title":"终端多窗口神器——Screen","date":"2019-05-09T08:56:08.000Z","copyright":true,"_content":"\n曾几何时，在你使用ssh登录到服务器时要做某个需要点时间的操作时感到烦恼。\n\n曾几何时，在你想要在终端进行多窗口控制时，感到十分麻烦。\n\n有了Screen,你就可以获得更好的使用终端多窗口的体验。\n\n<!--more-->\n\n我想你肯定遇到以下几种情况:\n\n- ftp传输\n\n- 系统备份\n\n- 长时间运行任务\n\n好的，以上的这几种情况在你关掉窗口或断开链接时，任务将会被杀死，一切都没了...只能重新来过。\n\n# 凶手 SIGHUP 信号\n\n> 以下资料来自维基百科 \n>> SIGHUP又称为Unix信号，它是Unix、类Unix以及其他POSIX兼容的操作系统种进程间通讯的一种有限制的方式。它是一种异步的通知机制，用来提醒进程一个事件已经发生。当一个信号发送给一个进程，操作系统中断了进程正常的控制流程，此时，任何非原子操作都将被终端。如果进程定义了信号的处理函数，那么它将被执行，否则就执行默认的处理函数。\n\n简单来说呢，这个SIGHUP信号就是Unix信号，它可以通过控制终端以一些特殊的按键发送某些特定的信号，这些信号有特定的功能，不过都是用来处理进程的。\n\n## 发送信号\n\n在一个已运行程序的终端可键入以下组合键从而实现发送某些信号。\n\n- Ctrl-C发送INT信号(SIGINT); 缺省情况下，会导致进程终止。\n\n- Ctrl-Z发送TSTP信号(SIGTSTP); 缺省情况下，会导致进程挂起。\n\n- Ctrl-\\发送QUIT信号(SIGQUIT); 缺省情况下，会导致进程终止并且将内存中的信息存储到硬盘。\n\n## 前因后果\n\n相信大家每次要终止当前正在运行的进程都是键入组合键Ctrl-C，也就是说触发了一个SIGHUP信号————SIGINT，也就导致了进程终止。\n\n**更多有关SIGHUP信号的资料，我会在后面的文章进行更新。**\n\n---\n\n# 开始使用Screen\n\n先简单说说什么是Screen:\n\nScreen是一个可以在多个进程之间多路复用一个物理终端的窗口管理器。(吃不吃惊，居然是个窗口管理器)。\n\nScreen就像tty一样，可以创建多个会话，然而会话还可以创建多个screen窗口，并且每个screen都跟真实SSH/Telnet连接窗口一样。\n\n**1.创建一个screen窗口**\n\n~~~shell\n[evanmeek@Evan-PC]# screen\n~~~\n\n这样就创建了一个可执行shell程序的窗口，若在该窗口种键入exit则退出该窗口，又倘若该窗口是当前会话的唯一窗口，screen则会退出该会话，否则screen将会自动切换到前一个窗口。\n\n**2.创建窗口+执行命令**\n\n~~~shell\n[evanmeek@Evan-PC]# screen vim \n~~~\n\nscreen会先创建一个窗口，并且执行vim命令，若你退出vim，则该窗口也会退出。\n\n**3.一个窗口中再有一个窗口中再有一个窗口中...**\n\n你可以打开一个窗口后再输入命令打开一个窗口，也可以通过组合键C-a c(CTRL+a再按c)，screen会和段话所描述的功能一样。\n\n**4.screen的暂时断开(detach)和重新链接(attach)**\n\n比如在screen窗口下用vim编辑C++源文件\n\n~~~shell\n[evanmeek@Evan-PC]# screen vim test.cpp \n~~~\n\n但写到一半，你发现要修改点东西，但是又不想退出vim编辑器，那么直接键入C-a d，Screen会提示你已挂起(detached).\n\n![挂起提示](终端多窗口神器——Screen/detachedInfo.png)\n\n当你做完其他事你就可以找回该会话，进行重新连接:\n\n找到会话\n\n~~~shell\n[evanmeek@Evan-PC]# screen -ls\nThere are screens on:\n        17944.pts-4.EvanLinux   (Detached)\n        14290.server    (Detached)\n2 Sockets in /run/screens/S-evanmeek.\n~~~\n\n重新连接\n\n~~~shell\n[evanmeek＠Evan-PC]# screen- r 17944\n~~~\n\n这样就可以恢复pts这个会话的窗口了．\n\n---\n\n# 配置你的Screen\n\n前面的几个组合键操作，可以 ，我们总是通过C-a来做开始触发的命令.screen中这个叫做按键绑定，而被绑定的C-a叫做命令字符.\n\n可通过如下键绑定查看所有键绑定．\n\n**C-a ?**\n\n常用的键绑定有：\n\n|键绑定|描述|\n|:---:|:---:|---|\n|C-a ?|显示所有键绑定信息|\n|C-a w|显示所有窗口列表|\n|C-a C-a|切换到之前显示的窗口|\n|C-a c|创建一个新的运行shell的窗口并切换到该窗口|\n|C-a n|切换到下一个窗口|\n|C-a p|切换到前一个窗口|\n|C-a 0~9|切换到0~9窗口|\n|C-a a|发送C-a到当前窗口|\n|C-a d|暂时断开screen会话|\n|C-a k|杀掉当前窗口|\n|C-a [|进入拷贝/回滚模式\n\n我们可以自己设置命令字符，使用C-a ?命令可见， 缺省的命令字符为C-a，而转义字符为a;\n\n![默认的命令字符](终端多窗口神器——Screen/DefalutCommandKey.png);\n\n我们可以修改它，通过如下格式:\n\n**-exy**\n\nx:命令字符\n\ny:转义字符\n\n~~~shell\n[evanmeek@Evan-PC]# screen -e^oo\n~~~\n\n这样原本需要使用Ｃ-a a 执行的操作就需要使用C-o o来执行．\n\n---","source":"_posts/终端多窗口神器——Screen.md","raw":"---\ntitle: 终端多窗口神器——Screen\ndate: 2019-05-09 16:56:08\ncategories: 折腾日记\ntags:\n  - Linux\n  - 软件折腾\ncopyright: true\n---\n\n曾几何时，在你使用ssh登录到服务器时要做某个需要点时间的操作时感到烦恼。\n\n曾几何时，在你想要在终端进行多窗口控制时，感到十分麻烦。\n\n有了Screen,你就可以获得更好的使用终端多窗口的体验。\n\n<!--more-->\n\n我想你肯定遇到以下几种情况:\n\n- ftp传输\n\n- 系统备份\n\n- 长时间运行任务\n\n好的，以上的这几种情况在你关掉窗口或断开链接时，任务将会被杀死，一切都没了...只能重新来过。\n\n# 凶手 SIGHUP 信号\n\n> 以下资料来自维基百科 \n>> SIGHUP又称为Unix信号，它是Unix、类Unix以及其他POSIX兼容的操作系统种进程间通讯的一种有限制的方式。它是一种异步的通知机制，用来提醒进程一个事件已经发生。当一个信号发送给一个进程，操作系统中断了进程正常的控制流程，此时，任何非原子操作都将被终端。如果进程定义了信号的处理函数，那么它将被执行，否则就执行默认的处理函数。\n\n简单来说呢，这个SIGHUP信号就是Unix信号，它可以通过控制终端以一些特殊的按键发送某些特定的信号，这些信号有特定的功能，不过都是用来处理进程的。\n\n## 发送信号\n\n在一个已运行程序的终端可键入以下组合键从而实现发送某些信号。\n\n- Ctrl-C发送INT信号(SIGINT); 缺省情况下，会导致进程终止。\n\n- Ctrl-Z发送TSTP信号(SIGTSTP); 缺省情况下，会导致进程挂起。\n\n- Ctrl-\\发送QUIT信号(SIGQUIT); 缺省情况下，会导致进程终止并且将内存中的信息存储到硬盘。\n\n## 前因后果\n\n相信大家每次要终止当前正在运行的进程都是键入组合键Ctrl-C，也就是说触发了一个SIGHUP信号————SIGINT，也就导致了进程终止。\n\n**更多有关SIGHUP信号的资料，我会在后面的文章进行更新。**\n\n---\n\n# 开始使用Screen\n\n先简单说说什么是Screen:\n\nScreen是一个可以在多个进程之间多路复用一个物理终端的窗口管理器。(吃不吃惊，居然是个窗口管理器)。\n\nScreen就像tty一样，可以创建多个会话，然而会话还可以创建多个screen窗口，并且每个screen都跟真实SSH/Telnet连接窗口一样。\n\n**1.创建一个screen窗口**\n\n~~~shell\n[evanmeek@Evan-PC]# screen\n~~~\n\n这样就创建了一个可执行shell程序的窗口，若在该窗口种键入exit则退出该窗口，又倘若该窗口是当前会话的唯一窗口，screen则会退出该会话，否则screen将会自动切换到前一个窗口。\n\n**2.创建窗口+执行命令**\n\n~~~shell\n[evanmeek@Evan-PC]# screen vim \n~~~\n\nscreen会先创建一个窗口，并且执行vim命令，若你退出vim，则该窗口也会退出。\n\n**3.一个窗口中再有一个窗口中再有一个窗口中...**\n\n你可以打开一个窗口后再输入命令打开一个窗口，也可以通过组合键C-a c(CTRL+a再按c)，screen会和段话所描述的功能一样。\n\n**4.screen的暂时断开(detach)和重新链接(attach)**\n\n比如在screen窗口下用vim编辑C++源文件\n\n~~~shell\n[evanmeek@Evan-PC]# screen vim test.cpp \n~~~\n\n但写到一半，你发现要修改点东西，但是又不想退出vim编辑器，那么直接键入C-a d，Screen会提示你已挂起(detached).\n\n![挂起提示](终端多窗口神器——Screen/detachedInfo.png)\n\n当你做完其他事你就可以找回该会话，进行重新连接:\n\n找到会话\n\n~~~shell\n[evanmeek@Evan-PC]# screen -ls\nThere are screens on:\n        17944.pts-4.EvanLinux   (Detached)\n        14290.server    (Detached)\n2 Sockets in /run/screens/S-evanmeek.\n~~~\n\n重新连接\n\n~~~shell\n[evanmeek＠Evan-PC]# screen- r 17944\n~~~\n\n这样就可以恢复pts这个会话的窗口了．\n\n---\n\n# 配置你的Screen\n\n前面的几个组合键操作，可以 ，我们总是通过C-a来做开始触发的命令.screen中这个叫做按键绑定，而被绑定的C-a叫做命令字符.\n\n可通过如下键绑定查看所有键绑定．\n\n**C-a ?**\n\n常用的键绑定有：\n\n|键绑定|描述|\n|:---:|:---:|---|\n|C-a ?|显示所有键绑定信息|\n|C-a w|显示所有窗口列表|\n|C-a C-a|切换到之前显示的窗口|\n|C-a c|创建一个新的运行shell的窗口并切换到该窗口|\n|C-a n|切换到下一个窗口|\n|C-a p|切换到前一个窗口|\n|C-a 0~9|切换到0~9窗口|\n|C-a a|发送C-a到当前窗口|\n|C-a d|暂时断开screen会话|\n|C-a k|杀掉当前窗口|\n|C-a [|进入拷贝/回滚模式\n\n我们可以自己设置命令字符，使用C-a ?命令可见， 缺省的命令字符为C-a，而转义字符为a;\n\n![默认的命令字符](终端多窗口神器——Screen/DefalutCommandKey.png);\n\n我们可以修改它，通过如下格式:\n\n**-exy**\n\nx:命令字符\n\ny:转义字符\n\n~~~shell\n[evanmeek@Evan-PC]# screen -e^oo\n~~~\n\n这样原本需要使用Ｃ-a a 执行的操作就需要使用C-o o来执行．\n\n---","slug":"终端多窗口神器——Screen","published":1,"updated":"2019-06-16T17:09:00.793Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uzen003zoumsbuuqbruu","content":"<p>曾几何时，在你使用ssh登录到服务器时要做某个需要点时间的操作时感到烦恼。</p>\n<p>曾几何时，在你想要在终端进行多窗口控制时，感到十分麻烦。</p>\n<p>有了Screen,你就可以获得更好的使用终端多窗口的体验。</p>\n<a id=\"more\"></a>\n<p>我想你肯定遇到以下几种情况:</p>\n<ul>\n<li><p>ftp传输</p>\n</li>\n<li><p>系统备份</p>\n</li>\n<li><p>长时间运行任务</p>\n</li>\n</ul>\n<p>好的，以上的这几种情况在你关掉窗口或断开链接时，任务将会被杀死，一切都没了…只能重新来过。</p>\n<h1 id=\"凶手-SIGHUP-信号\"><a href=\"#凶手-SIGHUP-信号\" class=\"headerlink\" title=\"凶手 SIGHUP 信号\"></a>凶手 SIGHUP 信号</h1><blockquote>\n<p>以下资料来自维基百科 </p>\n<blockquote>\n<p>SIGHUP又称为Unix信号，它是Unix、类Unix以及其他POSIX兼容的操作系统种进程间通讯的一种有限制的方式。它是一种异步的通知机制，用来提醒进程一个事件已经发生。当一个信号发送给一个进程，操作系统中断了进程正常的控制流程，此时，任何非原子操作都将被终端。如果进程定义了信号的处理函数，那么它将被执行，否则就执行默认的处理函数。</p>\n</blockquote>\n</blockquote>\n<p>简单来说呢，这个SIGHUP信号就是Unix信号，它可以通过控制终端以一些特殊的按键发送某些特定的信号，这些信号有特定的功能，不过都是用来处理进程的。</p>\n<h2 id=\"发送信号\"><a href=\"#发送信号\" class=\"headerlink\" title=\"发送信号\"></a>发送信号</h2><p>在一个已运行程序的终端可键入以下组合键从而实现发送某些信号。</p>\n<ul>\n<li><p>Ctrl-C发送INT信号(SIGINT); 缺省情况下，会导致进程终止。</p>\n</li>\n<li><p>Ctrl-Z发送TSTP信号(SIGTSTP); 缺省情况下，会导致进程挂起。</p>\n</li>\n<li><p>Ctrl-\\发送QUIT信号(SIGQUIT); 缺省情况下，会导致进程终止并且将内存中的信息存储到硬盘。</p>\n</li>\n</ul>\n<h2 id=\"前因后果\"><a href=\"#前因后果\" class=\"headerlink\" title=\"前因后果\"></a>前因后果</h2><p>相信大家每次要终止当前正在运行的进程都是键入组合键Ctrl-C，也就是说触发了一个SIGHUP信号————SIGINT，也就导致了进程终止。</p>\n<p><strong>更多有关SIGHUP信号的资料，我会在后面的文章进行更新。</strong></p>\n<hr>\n<h1 id=\"开始使用Screen\"><a href=\"#开始使用Screen\" class=\"headerlink\" title=\"开始使用Screen\"></a>开始使用Screen</h1><p>先简单说说什么是Screen:</p>\n<p>Screen是一个可以在多个进程之间多路复用一个物理终端的窗口管理器。(吃不吃惊，居然是个窗口管理器)。</p>\n<p>Screen就像tty一样，可以创建多个会话，然而会话还可以创建多个screen窗口，并且每个screen都跟真实SSH/Telnet连接窗口一样。</p>\n<p><strong>1.创建一个screen窗口</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[evanmeek@Evan-PC]#</span> screen</span><br></pre></td></tr></table></figure>\n<p>这样就创建了一个可执行shell程序的窗口，若在该窗口种键入exit则退出该窗口，又倘若该窗口是当前会话的唯一窗口，screen则会退出该会话，否则screen将会自动切换到前一个窗口。</p>\n<p><strong>2.创建窗口+执行命令</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[evanmeek@Evan-PC]#</span> screen vim</span><br></pre></td></tr></table></figure>\n<p>screen会先创建一个窗口，并且执行vim命令，若你退出vim，则该窗口也会退出。</p>\n<p><strong>3.一个窗口中再有一个窗口中再有一个窗口中…</strong></p>\n<p>你可以打开一个窗口后再输入命令打开一个窗口，也可以通过组合键C-a c(CTRL+a再按c)，screen会和段话所描述的功能一样。</p>\n<p><strong>4.screen的暂时断开(detach)和重新链接(attach)</strong></p>\n<p>比如在screen窗口下用vim编辑C++源文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[evanmeek@Evan-PC]#</span> screen vim test.cpp</span><br></pre></td></tr></table></figure>\n<p>但写到一半，你发现要修改点东西，但是又不想退出vim编辑器，那么直接键入C-a d，Screen会提示你已挂起(detached).</p>\n<p><img src=\"/2019/05/09/终端多窗口神器——Screen/detachedInfo.png\" alt=\"挂起提示\"></p>\n<p>当你做完其他事你就可以找回该会话，进行重新连接:</p>\n<p>找到会话</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[evanmeek@Evan-PC]#</span> screen -ls</span><br><span class=\"line\">There are screens on:</span><br><span class=\"line\">        17944.pts-4.EvanLinux   (Detached)</span><br><span class=\"line\">        14290.server    (Detached)</span><br><span class=\"line\">2 Sockets in /run/screens/S-evanmeek.</span><br></pre></td></tr></table></figure>\n<p>重新连接</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[evanmeek＠Evan-PC]# screen- r 17944</span><br></pre></td></tr></table></figure>\n<p>这样就可以恢复pts这个会话的窗口了．</p>\n<hr>\n<h1 id=\"配置你的Screen\"><a href=\"#配置你的Screen\" class=\"headerlink\" title=\"配置你的Screen\"></a>配置你的Screen</h1><p>前面的几个组合键操作，可以 ，我们总是通过C-a来做开始触发的命令.screen中这个叫做按键绑定，而被绑定的C-a叫做命令字符.</p>\n<p>可通过如下键绑定查看所有键绑定．</p>\n<p><strong>C-a ?</strong></p>\n<p>常用的键绑定有：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">键绑定</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">C-a ?</td>\n<td style=\"text-align:center\">显示所有键绑定信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-a w</td>\n<td style=\"text-align:center\">显示所有窗口列表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-a C-a</td>\n<td style=\"text-align:center\">切换到之前显示的窗口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-a c</td>\n<td style=\"text-align:center\">创建一个新的运行shell的窗口并切换到该窗口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-a n</td>\n<td style=\"text-align:center\">切换到下一个窗口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-a p</td>\n<td style=\"text-align:center\">切换到前一个窗口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-a 0~9</td>\n<td style=\"text-align:center\">切换到0~9窗口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-a a</td>\n<td style=\"text-align:center\">发送C-a到当前窗口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-a d</td>\n<td style=\"text-align:center\">暂时断开screen会话</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-a k</td>\n<td style=\"text-align:center\">杀掉当前窗口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-a [</td>\n<td style=\"text-align:center\">进入拷贝/回滚模式</td>\n</tr>\n</tbody>\n</table>\n<p>我们可以自己设置命令字符，使用C-a ?命令可见， 缺省的命令字符为C-a，而转义字符为a;</p>\n<p><img src=\"/2019/05/09/终端多窗口神器——Screen/DefalutCommandKey.png\" alt=\"默认的命令字符\">;</p>\n<p>我们可以修改它，通过如下格式:</p>\n<p><strong>-exy</strong></p>\n<p>x:命令字符</p>\n<p>y:转义字符</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[evanmeek@Evan-PC]#</span> screen -e^oo</span><br></pre></td></tr></table></figure>\n<p>这样原本需要使用Ｃ-a a 执行的操作就需要使用C-o o来执行．</p>\n<hr>\n","site":{"data":{}},"excerpt":"<p>曾几何时，在你使用ssh登录到服务器时要做某个需要点时间的操作时感到烦恼。</p>\n<p>曾几何时，在你想要在终端进行多窗口控制时，感到十分麻烦。</p>\n<p>有了Screen,你就可以获得更好的使用终端多窗口的体验。</p>","more":"<p>我想你肯定遇到以下几种情况:</p>\n<ul>\n<li><p>ftp传输</p>\n</li>\n<li><p>系统备份</p>\n</li>\n<li><p>长时间运行任务</p>\n</li>\n</ul>\n<p>好的，以上的这几种情况在你关掉窗口或断开链接时，任务将会被杀死，一切都没了…只能重新来过。</p>\n<h1 id=\"凶手-SIGHUP-信号\"><a href=\"#凶手-SIGHUP-信号\" class=\"headerlink\" title=\"凶手 SIGHUP 信号\"></a>凶手 SIGHUP 信号</h1><blockquote>\n<p>以下资料来自维基百科 </p>\n<blockquote>\n<p>SIGHUP又称为Unix信号，它是Unix、类Unix以及其他POSIX兼容的操作系统种进程间通讯的一种有限制的方式。它是一种异步的通知机制，用来提醒进程一个事件已经发生。当一个信号发送给一个进程，操作系统中断了进程正常的控制流程，此时，任何非原子操作都将被终端。如果进程定义了信号的处理函数，那么它将被执行，否则就执行默认的处理函数。</p>\n</blockquote>\n</blockquote>\n<p>简单来说呢，这个SIGHUP信号就是Unix信号，它可以通过控制终端以一些特殊的按键发送某些特定的信号，这些信号有特定的功能，不过都是用来处理进程的。</p>\n<h2 id=\"发送信号\"><a href=\"#发送信号\" class=\"headerlink\" title=\"发送信号\"></a>发送信号</h2><p>在一个已运行程序的终端可键入以下组合键从而实现发送某些信号。</p>\n<ul>\n<li><p>Ctrl-C发送INT信号(SIGINT); 缺省情况下，会导致进程终止。</p>\n</li>\n<li><p>Ctrl-Z发送TSTP信号(SIGTSTP); 缺省情况下，会导致进程挂起。</p>\n</li>\n<li><p>Ctrl-\\发送QUIT信号(SIGQUIT); 缺省情况下，会导致进程终止并且将内存中的信息存储到硬盘。</p>\n</li>\n</ul>\n<h2 id=\"前因后果\"><a href=\"#前因后果\" class=\"headerlink\" title=\"前因后果\"></a>前因后果</h2><p>相信大家每次要终止当前正在运行的进程都是键入组合键Ctrl-C，也就是说触发了一个SIGHUP信号————SIGINT，也就导致了进程终止。</p>\n<p><strong>更多有关SIGHUP信号的资料，我会在后面的文章进行更新。</strong></p>\n<hr>\n<h1 id=\"开始使用Screen\"><a href=\"#开始使用Screen\" class=\"headerlink\" title=\"开始使用Screen\"></a>开始使用Screen</h1><p>先简单说说什么是Screen:</p>\n<p>Screen是一个可以在多个进程之间多路复用一个物理终端的窗口管理器。(吃不吃惊，居然是个窗口管理器)。</p>\n<p>Screen就像tty一样，可以创建多个会话，然而会话还可以创建多个screen窗口，并且每个screen都跟真实SSH/Telnet连接窗口一样。</p>\n<p><strong>1.创建一个screen窗口</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[evanmeek@Evan-PC]#</span> screen</span><br></pre></td></tr></table></figure>\n<p>这样就创建了一个可执行shell程序的窗口，若在该窗口种键入exit则退出该窗口，又倘若该窗口是当前会话的唯一窗口，screen则会退出该会话，否则screen将会自动切换到前一个窗口。</p>\n<p><strong>2.创建窗口+执行命令</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[evanmeek@Evan-PC]#</span> screen vim</span><br></pre></td></tr></table></figure>\n<p>screen会先创建一个窗口，并且执行vim命令，若你退出vim，则该窗口也会退出。</p>\n<p><strong>3.一个窗口中再有一个窗口中再有一个窗口中…</strong></p>\n<p>你可以打开一个窗口后再输入命令打开一个窗口，也可以通过组合键C-a c(CTRL+a再按c)，screen会和段话所描述的功能一样。</p>\n<p><strong>4.screen的暂时断开(detach)和重新链接(attach)</strong></p>\n<p>比如在screen窗口下用vim编辑C++源文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[evanmeek@Evan-PC]#</span> screen vim test.cpp</span><br></pre></td></tr></table></figure>\n<p>但写到一半，你发现要修改点东西，但是又不想退出vim编辑器，那么直接键入C-a d，Screen会提示你已挂起(detached).</p>\n<p><img src=\"/2019/05/09/终端多窗口神器——Screen/detachedInfo.png\" alt=\"挂起提示\"></p>\n<p>当你做完其他事你就可以找回该会话，进行重新连接:</p>\n<p>找到会话</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[evanmeek@Evan-PC]#</span> screen -ls</span><br><span class=\"line\">There are screens on:</span><br><span class=\"line\">        17944.pts-4.EvanLinux   (Detached)</span><br><span class=\"line\">        14290.server    (Detached)</span><br><span class=\"line\">2 Sockets in /run/screens/S-evanmeek.</span><br></pre></td></tr></table></figure>\n<p>重新连接</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[evanmeek＠Evan-PC]# screen- r 17944</span><br></pre></td></tr></table></figure>\n<p>这样就可以恢复pts这个会话的窗口了．</p>\n<hr>\n<h1 id=\"配置你的Screen\"><a href=\"#配置你的Screen\" class=\"headerlink\" title=\"配置你的Screen\"></a>配置你的Screen</h1><p>前面的几个组合键操作，可以 ，我们总是通过C-a来做开始触发的命令.screen中这个叫做按键绑定，而被绑定的C-a叫做命令字符.</p>\n<p>可通过如下键绑定查看所有键绑定．</p>\n<p><strong>C-a ?</strong></p>\n<p>常用的键绑定有：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">键绑定</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">C-a ?</td>\n<td style=\"text-align:center\">显示所有键绑定信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-a w</td>\n<td style=\"text-align:center\">显示所有窗口列表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-a C-a</td>\n<td style=\"text-align:center\">切换到之前显示的窗口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-a c</td>\n<td style=\"text-align:center\">创建一个新的运行shell的窗口并切换到该窗口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-a n</td>\n<td style=\"text-align:center\">切换到下一个窗口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-a p</td>\n<td style=\"text-align:center\">切换到前一个窗口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-a 0~9</td>\n<td style=\"text-align:center\">切换到0~9窗口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-a a</td>\n<td style=\"text-align:center\">发送C-a到当前窗口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-a d</td>\n<td style=\"text-align:center\">暂时断开screen会话</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-a k</td>\n<td style=\"text-align:center\">杀掉当前窗口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-a [</td>\n<td style=\"text-align:center\">进入拷贝/回滚模式</td>\n</tr>\n</tbody>\n</table>\n<p>我们可以自己设置命令字符，使用C-a ?命令可见， 缺省的命令字符为C-a，而转义字符为a;</p>\n<p><img src=\"/2019/05/09/终端多窗口神器——Screen/DefalutCommandKey.png\" alt=\"默认的命令字符\">;</p>\n<p>我们可以修改它，通过如下格式:</p>\n<p><strong>-exy</strong></p>\n<p>x:命令字符</p>\n<p>y:转义字符</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[evanmeek@Evan-PC]#</span> screen -e^oo</span><br></pre></td></tr></table></figure>\n<p>这样原本需要使用Ｃ-a a 执行的操作就需要使用C-o o来执行．</p>\n<hr>"},{"title":"解决KDE下部分应用不能使用fcitx中文输入法的问题","copyright":true,"date":"2019-05-19T07:56:33.000Z","_content":"\n我有两台设备，都是KDE5-Plasma桌面，但是其中一台可以完美使用中文输入法，另外一台则不可以，为了解决这个问题，便有这篇文章。\n\n<!--more-->\n\n*********** 本教程使用fcitx输入法框架。**************\n\n# 第一步\n\n首先安装一些必要的软件:\n\n~~~shell\n$ sudo pacman -S fcitx fcitx-im fcitx-configtool fcitx-googlepinyin\n~~~\n\n# 第二步\n\n安装完成后编辑:**/etc/environment**文件，加上如下内容:\n\n~~~shell\nexport GTK_IM_MODULE=fcitx\nexport QT_IM_MODULE=fcitx\nexport XMODIFIERS=@im=fcitx\n~~~\n\n# 第三步\n\n注销当前会话，配置输入法为googlepinyin即可使用。\n\n\n> [本文参考](https://code-insight.xyz/manjaro%E6%96%B0%E6%89%8B%E5%BF%AB%E9%80%9F%E8%A3%85%E9%85%8D%E6%8C%87%E5%8D%97/)\n\n---\n","source":"_posts/解决KDE下部分应用不能使用fctix中文输入法的问题.md","raw":"---\ntitle: 解决KDE下部分应用不能使用fcitx中文输入法的问题\ncopyright: true\ndate: 2019-05-19 15:56:33\ncategories: 学习笔记\ntags:\n - Linux\n - KDE\n---\n\n我有两台设备，都是KDE5-Plasma桌面，但是其中一台可以完美使用中文输入法，另外一台则不可以，为了解决这个问题，便有这篇文章。\n\n<!--more-->\n\n*********** 本教程使用fcitx输入法框架。**************\n\n# 第一步\n\n首先安装一些必要的软件:\n\n~~~shell\n$ sudo pacman -S fcitx fcitx-im fcitx-configtool fcitx-googlepinyin\n~~~\n\n# 第二步\n\n安装完成后编辑:**/etc/environment**文件，加上如下内容:\n\n~~~shell\nexport GTK_IM_MODULE=fcitx\nexport QT_IM_MODULE=fcitx\nexport XMODIFIERS=@im=fcitx\n~~~\n\n# 第三步\n\n注销当前会话，配置输入法为googlepinyin即可使用。\n\n\n> [本文参考](https://code-insight.xyz/manjaro%E6%96%B0%E6%89%8B%E5%BF%AB%E9%80%9F%E8%A3%85%E9%85%8D%E6%8C%87%E5%8D%97/)\n\n---\n","slug":"解决KDE下部分应用不能使用fctix中文输入法的问题","published":1,"updated":"2019-06-16T17:09:00.793Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uzeo0043oumsrmj8kyd7","content":"<p>我有两台设备，都是KDE5-Plasma桌面，但是其中一台可以完美使用中文输入法，另外一台则不可以，为了解决这个问题，便有这篇文章。</p>\n<a id=\"more\"></a>\n<p><strong><strong>***</strong></strong> 本教程使用fcitx输入法框架。<strong><strong><strong>**</strong></strong></strong></p>\n<h1 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h1><p>首先安装一些必要的软件:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo pacman -S fcitx fcitx-im fcitx-configtool fcitx-googlepinyin</span><br></pre></td></tr></table></figure>\n<h1 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h1><p>安装完成后编辑:<strong>/etc/environment</strong>文件，加上如下内容:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export GTK_IM_MODULE=fcitx</span><br><span class=\"line\">export QT_IM_MODULE=fcitx</span><br><span class=\"line\">export XMODIFIERS=@im=fcitx</span><br></pre></td></tr></table></figure>\n<h1 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h1><p>注销当前会话，配置输入法为googlepinyin即可使用。</p>\n<blockquote>\n<p><a href=\"https://code-insight.xyz/manjaro%E6%96%B0%E6%89%8B%E5%BF%AB%E9%80%9F%E8%A3%85%E9%85%8D%E6%8C%87%E5%8D%97/\" target=\"_blank\" rel=\"noopener\">本文参考</a></p>\n</blockquote>\n<hr>\n","site":{"data":{}},"excerpt":"<p>我有两台设备，都是KDE5-Plasma桌面，但是其中一台可以完美使用中文输入法，另外一台则不可以，为了解决这个问题，便有这篇文章。</p>","more":"<p><strong><strong>***</strong></strong> 本教程使用fcitx输入法框架。<strong><strong><strong>**</strong></strong></strong></p>\n<h1 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h1><p>首先安装一些必要的软件:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo pacman -S fcitx fcitx-im fcitx-configtool fcitx-googlepinyin</span><br></pre></td></tr></table></figure>\n<h1 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h1><p>安装完成后编辑:<strong>/etc/environment</strong>文件，加上如下内容:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export GTK_IM_MODULE=fcitx</span><br><span class=\"line\">export QT_IM_MODULE=fcitx</span><br><span class=\"line\">export XMODIFIERS=@im=fcitx</span><br></pre></td></tr></table></figure>\n<h1 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h1><p>注销当前会话，配置输入法为googlepinyin即可使用。</p>\n<blockquote>\n<p><a href=\"https://code-insight.xyz/manjaro%E6%96%B0%E6%89%8B%E5%BF%AB%E9%80%9F%E8%A3%85%E9%85%8D%E6%8C%87%E5%8D%97/\" target=\"_blank\" rel=\"noopener\">本文参考</a></p>\n</blockquote>\n<hr>"},{"title":"我儿子的博客","copyright":true,"date":"2019-05-21T08:06:54.000Z","_content":"\n自从教会大学同学搭建博客后，他也开始写博客了，内容挺好玩的，推荐去看看。\n\n<!--more-->\n\n随便截取一个片段，这哥们咋那么傻的可爱。\n\n![预览](我儿子的博客/预览.png)\n\n想去看的话，点击下面的链接吧，他是个新手，所以基本不用指望去他那里能学到啥。\n\n```PS:痔疮，你看到了别打我```\n\n\n# [EvanShady的博客](https://evanshady.github.io/)\n\n\n","source":"_posts/我儿子的博客.md","raw":"---\ntitle: 我儿子的博客\ncopyright: true\ndate: 2019-05-21 16:06:54\ncategories: 分享\ntags:\n - 欢乐时光\n---\n\n自从教会大学同学搭建博客后，他也开始写博客了，内容挺好玩的，推荐去看看。\n\n<!--more-->\n\n随便截取一个片段，这哥们咋那么傻的可爱。\n\n![预览](我儿子的博客/预览.png)\n\n想去看的话，点击下面的链接吧，他是个新手，所以基本不用指望去他那里能学到啥。\n\n```PS:痔疮，你看到了别打我```\n\n\n# [EvanShady的博客](https://evanshady.github.io/)\n\n\n","slug":"我儿子的博客","published":1,"updated":"2019-06-16T17:09:00.793Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uzeq0046oums7ycx8nd9","content":"<p>自从教会大学同学搭建博客后，他也开始写博客了，内容挺好玩的，推荐去看看。</p>\n<a id=\"more\"></a>\n<p>随便截取一个片段，这哥们咋那么傻的可爱。</p>\n<p><img src=\"/2019/05/21/我儿子的博客/预览.png\" alt=\"预览\"></p>\n<p>想去看的话，点击下面的链接吧，他是个新手，所以基本不用指望去他那里能学到啥。</p>\n<p><code>PS:痔疮，你看到了别打我</code></p>\n<h1 id=\"EvanShady的博客\"><a href=\"#EvanShady的博客\" class=\"headerlink\" title=\"EvanShady的博客\"></a><a href=\"https://evanshady.github.io/\" target=\"_blank\" rel=\"noopener\">EvanShady的博客</a></h1>","site":{"data":{}},"excerpt":"<p>自从教会大学同学搭建博客后，他也开始写博客了，内容挺好玩的，推荐去看看。</p>","more":"<p>随便截取一个片段，这哥们咋那么傻的可爱。</p>\n<p><img src=\"/2019/05/21/我儿子的博客/预览.png\" alt=\"预览\"></p>\n<p>想去看的话，点击下面的链接吧，他是个新手，所以基本不用指望去他那里能学到啥。</p>\n<p><code>PS:痔疮，你看到了别打我</code></p>\n<h1 id=\"EvanShady的博客\"><a href=\"#EvanShady的博客\" class=\"headerlink\" title=\"EvanShady的博客\"></a><a href=\"https://evanshady.github.io/\" target=\"_blank\" rel=\"noopener\">EvanShady的博客</a></h1>"},{"title":"常用算法-1","copyright":true,"date":"2019-05-27T04:14:16.000Z","_content":"\n这篇算法文章，是我3个月前的一个笔记，目前正好要做项目，得用到一些算法，所以就直接贴过来.\n\n<!--more-->\n\n# 常用算法\n\n> 本页理解几个常用的算法\n\n---\n\n## 冒泡排序\n\n**冒泡排序是一种稳定的排序算法**\n> 稳定即是，如果相邻的元素相同，不会再去进行调换位置\n\n冒排的运作是(从后往前)。\n\n我们操作数组来进行演示。\n\n我们首先定义一个整型数组里面存储几个整型数据\n\n```Java\n//待排序的数列\nint[] nums = {9,6,4,3,10,25};\n```\n\n>基本思路：比较相邻的元素，如果前一个元素比后一个元素大，那么则调换位置。\n\n**每排序一轮那么下一轮就将排序元素的个数-1，因为每轮排序都会把当前轮数的最大元素放在最后。**\n\n我们尝试先用大脑来演示排序的过程\n```\n//未排序时\n9 6 4 3 10 25\n\n6 9 3 4 10 25 //第一轮 调换了2次\n6 3 4 9 10 //第二轮 调换了2次\n3 4 6 9 //第三轮 调换了2次\n3 4 6 //第四轮 调换了0次\n3 4 //第五轮 调换了0次\n```\n\n我们可以看到我们这组数据只需要排序三轮就可以排序成功，**排序轮数是数组长度-1轮**，调换次数是看数组相邻元素的大小关系，这个我们不用知道，__我们只需要记住，排序轮数是数组长度-1就好。__\n\n那么在代码中我们要如何将其进行调换呢？\n\n有两种方式，通常来说我们可以定义一个临时变量，让相邻元素进行调换位置。\n\n> 了解了基本思路，我们直接进行代码编写吧！\n\n```Java\npublic class Demo{\n    public static void main(String args[]){\n        //待排序的数列\n        int[] nums = {9,6,4,3,10,25};\n        //临时变量，用于调换位置\n        int temp;\n        //第一层循环，控制轮数\n        for(int i = 0;i <nums.length;i++){\n            //第二层，控制每轮要进行排序的元素数量\n            for(int j = 0;j<nums.length-1-i;j++){\n                //如果当前元素比后一个元素大那么则调换元素值\n                if(nums[j]>nums[j+1]){\n                    //我们先把当前元素的后一个元素放入临时变量存储,防止被当前元素覆盖\n                    temp = nums[j+1];\n                    //把当前元素的值覆盖后一个元素\n                    nums[j+1] = nums[j];\n                    //再把当前元素存入后一个元素的值(刚刚保存在temp变量里的)\n                    nums[j] = temp;\n                }\n            }\n        }\n        //遍历输出\n        for(int num:nums){\n            System.out.println(num);\n        }\n    }\n}\n```\n\n刚刚说了有两种方式进行调换，是因为我们操作的数据是整型(int)的所以，我们可以使用加减的方式做到调换位置。\n\n**引用上面的代码，把tem变量删除，将调换元素值的代码更换成如下代码**\n\n```Java\n    /*为了方便理解，我们这里就用上面数组下标为0和1的值(9,6)来进行演*/\n\n    //这个if不用加，我只是让你们知道是哪些代码\n    if(nums[j]>nums[j+1]){\n        //当前元素的值是与后一个元素值的和\n        nums[j] = nums[j]+nums[j+1];\n\n        //上一行代码等同于 nums[j] = 9 + 6\n        //执行完上一行代码，nums[j] = 15;\n\n        //执行完此行代码nums[j+1] = 9\n        //等价于 nums[j+1]= 15 - 6\n        nums[j+1] = nums[j]-nums[j+1];\n\n        //执行完此行代码nums[j] = 6\n        //等价于 nums[j] = 15 - 9\n        nums[j] = nums[j] - nums[j+1];\n    }\n```\n\n第二种调换方式有点绕，不过仔细看看代码的注释那是很容易理解的！\n\n\n下一记: **选择排序算法**\n\n---\n\n## 选择排序算法\n\n> 首先，找到数组中最小的那个元素，其次，将它和数组的第一个元素交换位置（如果第一个元素就是最小元素那么它就和自己交换）。再次，在剩下的元素中找到最小的元素，将它与数组的第二个元素交换位置。如此往复，直到将整个数组排序。这种方法叫做选择排序，因为它在不断地选择剩余元素之中的最小值。\n\n上面这个引用是网上随便抄的一个思路。\n\n这次我们依旧是从小到大排序，选择排序和冒泡排序不同的是每一轮排序，它只调换一次位置，这个具体调换谁，就是选择排序的核心了。\n\n我们每轮排序时都需要找到最小的元素，然后把它的下标记录下来，进行调换，第二轮排序时就不再比较刚刚记录的最小的元素了，所以依靠这种方式就可以实现排序的操作。\n\n下面我们直接看代码\n\n```Java\npublic class Main {\n    public static void main(String[] args) {\n        //需要排序的数组\n        int[] nums = {6, 9, 4, 4, 25, 10};\n        //记录每轮排序时最小元素的下标\n        int minIndex;\n        //第一层循环控制轮数\n        for (int i = 0; i < nums.length - 1; i++) {\n            minIndex = i;//假设当前轮最小元素下标为i\n            //内层循环要记录出当前轮最小元素的下标\n            for (int j = i + 1; j < nums.length; j++) {\n                //比较两个相邻元素的大小\n                if (nums[minIndex] > nums[j]) {\n                    //由于找到新的最小值，所以记录一下\n                    minIndex = j;\n                }\n            }\n            //如果最小值记录的和我们假设的值是一样，说明这一轮最小的元素就是它，所以不需要进行调换位置\n            if (minIndex != i) {\n                //下面代码都是为了让第一个元素和最小元素进行调换位置，因为是从小至大\n                nums[minIndex] += nums[i];\n                nums[i] = nums[minIndex] - nums[i];\n                nums[minIndex] -= nums[i];\n            }\n        }\n        //遍历输出排序后的结果\n        for (int num : nums) {\n            System.out.println(num);\n        }\n    }\n}\n```\n\n小结：选择排序是每一轮排序都把最小的元素和没有排序时的元素进行调换位置，然后每进行一轮后，最小元素不会进入排序的操作。\n\n下一节，二分查找算法\n\n---\n\n## 二分查找法\n\n> 这是一种查询算法，效率高，但有个要求，必须是一串有序的数列。\n\n二分查找，见名知意，即是将数列分为两半来查找，取一个中间值，也就是说数组长度的中间值，基本思路是:\n\n- 定义起始查找位，结束查找位\n- 求得数组长度中间值都\n- 如果要查找的值比中间值小，那么肯定就是在二分的左边，也就是说比中间值小的值。\n- 如果要查找的值比中间值大，那么肯定就是在二分的右边，也就是说说比中间值大的值。\n- 如果要查找的值等于中间值，那么直接返回中间值的下标即可\n- 如果都没找到，那么返回-1.\n\n看了这个概念，我们还得注意几点\n\n需要一个循环，循环是为了让每次查找时未找到可以将起始位置或结束位置改变，起始位置和结束位置取决与中间值和要查的值的关系，如果中间值大，那么起始位置就应该为0，结束位置就应该为中间值-1，也就是说中间值的左边，如果中间值大则反过来，如果相等，则直接返回，因为已经查找到了。\n\n好了，我们直接看代码吧！\n\n```Java\npublic class Main {\n    public static void main(String[] args) {\n        int nums[] = {1,3,5,78,90,100,300};\n        System.out.println(binarySearch(nums,1));\n    }\n    /**\n     * 二分查找法\n     * @param nums　要查找的数列\n     * @param key　要查找的值\n     * @return\n     */\n    static int binarySearch(int[] nums,int key){\n        //起始下标\n        int start = 0;\n        //结束下标\n        int end = nums.length-1;\n        //起始查询的下标不能超过结束下标\n        while(start<=end){\n            //中间的下标，如果是下标长度是偶数，那么则是去小数点取整数的值\n            int middle = (start+end)/2;\n            //如果中间下标的值比要查找的值大\n            if(nums[middle]>key){\n                //要查找的值那肯定是在二分的左边，所以结束下标就以中分下标长度－１开始查找\n                end = middle-1;\n            }else if(nums[middle]<key){\n                //二分的右边开始查找\n                start = middle+1;\n            }else{\n                //如果要查找的值就是二分下标的值，那么直接返回即可\n                return middle;\n            }\n        }\n        //如果没有查找到那么则返回-1代表没有查找到\n        return -1;\n    }\n}\n```\n\n---\n","source":"_posts/常用算法-1.md","raw":"---\ntitle: 常用算法-1\ncopyright: true\ndate: 2019-05-27 12:14:16\ncategories: 学习笔记\ntags:\n  - 算法\n---\n\n这篇算法文章，是我3个月前的一个笔记，目前正好要做项目，得用到一些算法，所以就直接贴过来.\n\n<!--more-->\n\n# 常用算法\n\n> 本页理解几个常用的算法\n\n---\n\n## 冒泡排序\n\n**冒泡排序是一种稳定的排序算法**\n> 稳定即是，如果相邻的元素相同，不会再去进行调换位置\n\n冒排的运作是(从后往前)。\n\n我们操作数组来进行演示。\n\n我们首先定义一个整型数组里面存储几个整型数据\n\n```Java\n//待排序的数列\nint[] nums = {9,6,4,3,10,25};\n```\n\n>基本思路：比较相邻的元素，如果前一个元素比后一个元素大，那么则调换位置。\n\n**每排序一轮那么下一轮就将排序元素的个数-1，因为每轮排序都会把当前轮数的最大元素放在最后。**\n\n我们尝试先用大脑来演示排序的过程\n```\n//未排序时\n9 6 4 3 10 25\n\n6 9 3 4 10 25 //第一轮 调换了2次\n6 3 4 9 10 //第二轮 调换了2次\n3 4 6 9 //第三轮 调换了2次\n3 4 6 //第四轮 调换了0次\n3 4 //第五轮 调换了0次\n```\n\n我们可以看到我们这组数据只需要排序三轮就可以排序成功，**排序轮数是数组长度-1轮**，调换次数是看数组相邻元素的大小关系，这个我们不用知道，__我们只需要记住，排序轮数是数组长度-1就好。__\n\n那么在代码中我们要如何将其进行调换呢？\n\n有两种方式，通常来说我们可以定义一个临时变量，让相邻元素进行调换位置。\n\n> 了解了基本思路，我们直接进行代码编写吧！\n\n```Java\npublic class Demo{\n    public static void main(String args[]){\n        //待排序的数列\n        int[] nums = {9,6,4,3,10,25};\n        //临时变量，用于调换位置\n        int temp;\n        //第一层循环，控制轮数\n        for(int i = 0;i <nums.length;i++){\n            //第二层，控制每轮要进行排序的元素数量\n            for(int j = 0;j<nums.length-1-i;j++){\n                //如果当前元素比后一个元素大那么则调换元素值\n                if(nums[j]>nums[j+1]){\n                    //我们先把当前元素的后一个元素放入临时变量存储,防止被当前元素覆盖\n                    temp = nums[j+1];\n                    //把当前元素的值覆盖后一个元素\n                    nums[j+1] = nums[j];\n                    //再把当前元素存入后一个元素的值(刚刚保存在temp变量里的)\n                    nums[j] = temp;\n                }\n            }\n        }\n        //遍历输出\n        for(int num:nums){\n            System.out.println(num);\n        }\n    }\n}\n```\n\n刚刚说了有两种方式进行调换，是因为我们操作的数据是整型(int)的所以，我们可以使用加减的方式做到调换位置。\n\n**引用上面的代码，把tem变量删除，将调换元素值的代码更换成如下代码**\n\n```Java\n    /*为了方便理解，我们这里就用上面数组下标为0和1的值(9,6)来进行演*/\n\n    //这个if不用加，我只是让你们知道是哪些代码\n    if(nums[j]>nums[j+1]){\n        //当前元素的值是与后一个元素值的和\n        nums[j] = nums[j]+nums[j+1];\n\n        //上一行代码等同于 nums[j] = 9 + 6\n        //执行完上一行代码，nums[j] = 15;\n\n        //执行完此行代码nums[j+1] = 9\n        //等价于 nums[j+1]= 15 - 6\n        nums[j+1] = nums[j]-nums[j+1];\n\n        //执行完此行代码nums[j] = 6\n        //等价于 nums[j] = 15 - 9\n        nums[j] = nums[j] - nums[j+1];\n    }\n```\n\n第二种调换方式有点绕，不过仔细看看代码的注释那是很容易理解的！\n\n\n下一记: **选择排序算法**\n\n---\n\n## 选择排序算法\n\n> 首先，找到数组中最小的那个元素，其次，将它和数组的第一个元素交换位置（如果第一个元素就是最小元素那么它就和自己交换）。再次，在剩下的元素中找到最小的元素，将它与数组的第二个元素交换位置。如此往复，直到将整个数组排序。这种方法叫做选择排序，因为它在不断地选择剩余元素之中的最小值。\n\n上面这个引用是网上随便抄的一个思路。\n\n这次我们依旧是从小到大排序，选择排序和冒泡排序不同的是每一轮排序，它只调换一次位置，这个具体调换谁，就是选择排序的核心了。\n\n我们每轮排序时都需要找到最小的元素，然后把它的下标记录下来，进行调换，第二轮排序时就不再比较刚刚记录的最小的元素了，所以依靠这种方式就可以实现排序的操作。\n\n下面我们直接看代码\n\n```Java\npublic class Main {\n    public static void main(String[] args) {\n        //需要排序的数组\n        int[] nums = {6, 9, 4, 4, 25, 10};\n        //记录每轮排序时最小元素的下标\n        int minIndex;\n        //第一层循环控制轮数\n        for (int i = 0; i < nums.length - 1; i++) {\n            minIndex = i;//假设当前轮最小元素下标为i\n            //内层循环要记录出当前轮最小元素的下标\n            for (int j = i + 1; j < nums.length; j++) {\n                //比较两个相邻元素的大小\n                if (nums[minIndex] > nums[j]) {\n                    //由于找到新的最小值，所以记录一下\n                    minIndex = j;\n                }\n            }\n            //如果最小值记录的和我们假设的值是一样，说明这一轮最小的元素就是它，所以不需要进行调换位置\n            if (minIndex != i) {\n                //下面代码都是为了让第一个元素和最小元素进行调换位置，因为是从小至大\n                nums[minIndex] += nums[i];\n                nums[i] = nums[minIndex] - nums[i];\n                nums[minIndex] -= nums[i];\n            }\n        }\n        //遍历输出排序后的结果\n        for (int num : nums) {\n            System.out.println(num);\n        }\n    }\n}\n```\n\n小结：选择排序是每一轮排序都把最小的元素和没有排序时的元素进行调换位置，然后每进行一轮后，最小元素不会进入排序的操作。\n\n下一节，二分查找算法\n\n---\n\n## 二分查找法\n\n> 这是一种查询算法，效率高，但有个要求，必须是一串有序的数列。\n\n二分查找，见名知意，即是将数列分为两半来查找，取一个中间值，也就是说数组长度的中间值，基本思路是:\n\n- 定义起始查找位，结束查找位\n- 求得数组长度中间值都\n- 如果要查找的值比中间值小，那么肯定就是在二分的左边，也就是说比中间值小的值。\n- 如果要查找的值比中间值大，那么肯定就是在二分的右边，也就是说说比中间值大的值。\n- 如果要查找的值等于中间值，那么直接返回中间值的下标即可\n- 如果都没找到，那么返回-1.\n\n看了这个概念，我们还得注意几点\n\n需要一个循环，循环是为了让每次查找时未找到可以将起始位置或结束位置改变，起始位置和结束位置取决与中间值和要查的值的关系，如果中间值大，那么起始位置就应该为0，结束位置就应该为中间值-1，也就是说中间值的左边，如果中间值大则反过来，如果相等，则直接返回，因为已经查找到了。\n\n好了，我们直接看代码吧！\n\n```Java\npublic class Main {\n    public static void main(String[] args) {\n        int nums[] = {1,3,5,78,90,100,300};\n        System.out.println(binarySearch(nums,1));\n    }\n    /**\n     * 二分查找法\n     * @param nums　要查找的数列\n     * @param key　要查找的值\n     * @return\n     */\n    static int binarySearch(int[] nums,int key){\n        //起始下标\n        int start = 0;\n        //结束下标\n        int end = nums.length-1;\n        //起始查询的下标不能超过结束下标\n        while(start<=end){\n            //中间的下标，如果是下标长度是偶数，那么则是去小数点取整数的值\n            int middle = (start+end)/2;\n            //如果中间下标的值比要查找的值大\n            if(nums[middle]>key){\n                //要查找的值那肯定是在二分的左边，所以结束下标就以中分下标长度－１开始查找\n                end = middle-1;\n            }else if(nums[middle]<key){\n                //二分的右边开始查找\n                start = middle+1;\n            }else{\n                //如果要查找的值就是二分下标的值，那么直接返回即可\n                return middle;\n            }\n        }\n        //如果没有查找到那么则返回-1代表没有查找到\n        return -1;\n    }\n}\n```\n\n---\n","slug":"常用算法-1","published":1,"updated":"2019-06-16T17:09:00.793Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwz8uzg1004loumsrnxc0pn2","content":"<p>这篇算法文章，是我3个月前的一个笔记，目前正好要做项目，得用到一些算法，所以就直接贴过来.</p>\n<a id=\"more\"></a>\n<h1 id=\"常用算法\"><a href=\"#常用算法\" class=\"headerlink\" title=\"常用算法\"></a>常用算法</h1><blockquote>\n<p>本页理解几个常用的算法</p>\n</blockquote>\n<hr>\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><p><strong>冒泡排序是一种稳定的排序算法</strong></p>\n<blockquote>\n<p>稳定即是，如果相邻的元素相同，不会再去进行调换位置</p>\n</blockquote>\n<p>冒排的运作是(从后往前)。</p>\n<p>我们操作数组来进行演示。</p>\n<p>我们首先定义一个整型数组里面存储几个整型数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//待排序的数列</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[] nums = &#123;<span class=\"number\">9</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">10</span>,<span class=\"number\">25</span>&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>基本思路：比较相邻的元素，如果前一个元素比后一个元素大，那么则调换位置。</p>\n</blockquote>\n<p><strong>每排序一轮那么下一轮就将排序元素的个数-1，因为每轮排序都会把当前轮数的最大元素放在最后。</strong></p>\n<p>我们尝试先用大脑来演示排序的过程<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//未排序时</span><br><span class=\"line\">9 6 4 3 10 25</span><br><span class=\"line\"></span><br><span class=\"line\">6 9 3 4 10 25 //第一轮 调换了2次</span><br><span class=\"line\">6 3 4 9 10 //第二轮 调换了2次</span><br><span class=\"line\">3 4 6 9 //第三轮 调换了2次</span><br><span class=\"line\">3 4 6 //第四轮 调换了0次</span><br><span class=\"line\">3 4 //第五轮 调换了0次</span><br></pre></td></tr></table></figure></p>\n<p>我们可以看到我们这组数据只需要排序三轮就可以排序成功，<strong>排序轮数是数组长度-1轮</strong>，调换次数是看数组相邻元素的大小关系，这个我们不用知道，<strong>我们只需要记住，排序轮数是数组长度-1就好。</strong></p>\n<p>那么在代码中我们要如何将其进行调换呢？</p>\n<p>有两种方式，通常来说我们可以定义一个临时变量，让相邻元素进行调换位置。</p>\n<blockquote>\n<p>了解了基本思路，我们直接进行代码编写吧！</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//待排序的数列</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] nums = &#123;<span class=\"number\">9</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">10</span>,<span class=\"number\">25</span>&#125;;</span><br><span class=\"line\">        <span class=\"comment\">//临时变量，用于调换位置</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">        <span class=\"comment\">//第一层循环，控制轮数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt;nums.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//第二层，控制每轮要进行排序的元素数量</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;nums.length-<span class=\"number\">1</span>-i;j++)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果当前元素比后一个元素大那么则调换元素值</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[j]&gt;nums[j+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//我们先把当前元素的后一个元素放入临时变量存储,防止被当前元素覆盖</span></span><br><span class=\"line\">                    temp = nums[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">                    <span class=\"comment\">//把当前元素的值覆盖后一个元素</span></span><br><span class=\"line\">                    nums[j+<span class=\"number\">1</span>] = nums[j];</span><br><span class=\"line\">                    <span class=\"comment\">//再把当前元素存入后一个元素的值(刚刚保存在temp变量里的)</span></span><br><span class=\"line\">                    nums[j] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//遍历输出</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> num:nums)&#123;</span><br><span class=\"line\">            System.out.println(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>刚刚说了有两种方式进行调换，是因为我们操作的数据是整型(int)的所以，我们可以使用加减的方式做到调换位置。</p>\n<p><strong>引用上面的代码，把tem变量删除，将调换元素值的代码更换成如下代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*为了方便理解，我们这里就用上面数组下标为0和1的值(9,6)来进行演*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这个if不用加，我只是让你们知道是哪些代码</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(nums[j]&gt;nums[j+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">    <span class=\"comment\">//当前元素的值是与后一个元素值的和</span></span><br><span class=\"line\">    nums[j] = nums[j]+nums[j+<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//上一行代码等同于 nums[j] = 9 + 6</span></span><br><span class=\"line\">    <span class=\"comment\">//执行完上一行代码，nums[j] = 15;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//执行完此行代码nums[j+1] = 9</span></span><br><span class=\"line\">    <span class=\"comment\">//等价于 nums[j+1]= 15 - 6</span></span><br><span class=\"line\">    nums[j+<span class=\"number\">1</span>] = nums[j]-nums[j+<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//执行完此行代码nums[j] = 6</span></span><br><span class=\"line\">    <span class=\"comment\">//等价于 nums[j] = 15 - 9</span></span><br><span class=\"line\">    nums[j] = nums[j] - nums[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二种调换方式有点绕，不过仔细看看代码的注释那是很容易理解的！</p>\n<p>下一记: <strong>选择排序算法</strong></p>\n<hr>\n<h2 id=\"选择排序算法\"><a href=\"#选择排序算法\" class=\"headerlink\" title=\"选择排序算法\"></a>选择排序算法</h2><blockquote>\n<p>首先，找到数组中最小的那个元素，其次，将它和数组的第一个元素交换位置（如果第一个元素就是最小元素那么它就和自己交换）。再次，在剩下的元素中找到最小的元素，将它与数组的第二个元素交换位置。如此往复，直到将整个数组排序。这种方法叫做选择排序，因为它在不断地选择剩余元素之中的最小值。</p>\n</blockquote>\n<p>上面这个引用是网上随便抄的一个思路。</p>\n<p>这次我们依旧是从小到大排序，选择排序和冒泡排序不同的是每一轮排序，它只调换一次位置，这个具体调换谁，就是选择排序的核心了。</p>\n<p>我们每轮排序时都需要找到最小的元素，然后把它的下标记录下来，进行调换，第二轮排序时就不再比较刚刚记录的最小的元素了，所以依靠这种方式就可以实现排序的操作。</p>\n<p>下面我们直接看代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//需要排序的数组</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] nums = &#123;<span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">25</span>, <span class=\"number\">10</span>&#125;;</span><br><span class=\"line\">        <span class=\"comment\">//记录每轮排序时最小元素的下标</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> minIndex;</span><br><span class=\"line\">        <span class=\"comment\">//第一层循环控制轮数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            minIndex = i;<span class=\"comment\">//假设当前轮最小元素下标为i</span></span><br><span class=\"line\">            <span class=\"comment\">//内层循环要记录出当前轮最小元素的下标</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//比较两个相邻元素的大小</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums[minIndex] &gt; nums[j]) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//由于找到新的最小值，所以记录一下</span></span><br><span class=\"line\">                    minIndex = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果最小值记录的和我们假设的值是一样，说明这一轮最小的元素就是它，所以不需要进行调换位置</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (minIndex != i) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//下面代码都是为了让第一个元素和最小元素进行调换位置，因为是从小至大</span></span><br><span class=\"line\">                nums[minIndex] += nums[i];</span><br><span class=\"line\">                nums[i] = nums[minIndex] - nums[i];</span><br><span class=\"line\">                nums[minIndex] -= nums[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//遍历输出排序后的结果</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums) &#123;</span><br><span class=\"line\">            System.out.println(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>小结：选择排序是每一轮排序都把最小的元素和没有排序时的元素进行调换位置，然后每进行一轮后，最小元素不会进入排序的操作。</p>\n<p>下一节，二分查找算法</p>\n<hr>\n<h2 id=\"二分查找法\"><a href=\"#二分查找法\" class=\"headerlink\" title=\"二分查找法\"></a>二分查找法</h2><blockquote>\n<p>这是一种查询算法，效率高，但有个要求，必须是一串有序的数列。</p>\n</blockquote>\n<p>二分查找，见名知意，即是将数列分为两半来查找，取一个中间值，也就是说数组长度的中间值，基本思路是:</p>\n<ul>\n<li>定义起始查找位，结束查找位</li>\n<li>求得数组长度中间值都</li>\n<li>如果要查找的值比中间值小，那么肯定就是在二分的左边，也就是说比中间值小的值。</li>\n<li>如果要查找的值比中间值大，那么肯定就是在二分的右边，也就是说说比中间值大的值。</li>\n<li>如果要查找的值等于中间值，那么直接返回中间值的下标即可</li>\n<li>如果都没找到，那么返回-1.</li>\n</ul>\n<p>看了这个概念，我们还得注意几点</p>\n<p>需要一个循环，循环是为了让每次查找时未找到可以将起始位置或结束位置改变，起始位置和结束位置取决与中间值和要查的值的关系，如果中间值大，那么起始位置就应该为0，结束位置就应该为中间值-1，也就是说中间值的左边，如果中间值大则反过来，如果相等，则直接返回，因为已经查找到了。</p>\n<p>好了，我们直接看代码吧！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nums[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">78</span>,<span class=\"number\">90</span>,<span class=\"number\">100</span>,<span class=\"number\">300</span>&#125;;</span><br><span class=\"line\">        System.out.println(binarySearch(nums,<span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 二分查找法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums　要查找的数列</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key　要查找的值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums,<span class=\"keyword\">int</span> key)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//起始下标</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//结束下标</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> end = nums.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//起始查询的下标不能超过结束下标</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(start&lt;=end)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//中间的下标，如果是下标长度是偶数，那么则是去小数点取整数的值</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> middle = (start+end)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"comment\">//如果中间下标的值比要查找的值大</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[middle]&gt;key)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//要查找的值那肯定是在二分的左边，所以结束下标就以中分下标长度－１开始查找</span></span><br><span class=\"line\">                end = middle-<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[middle]&lt;key)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//二分的右边开始查找</span></span><br><span class=\"line\">                start = middle+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果要查找的值就是二分下标的值，那么直接返回即可</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果没有查找到那么则返回-1代表没有查找到</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n","site":{"data":{}},"excerpt":"<p>这篇算法文章，是我3个月前的一个笔记，目前正好要做项目，得用到一些算法，所以就直接贴过来.</p>","more":"<h1 id=\"常用算法\"><a href=\"#常用算法\" class=\"headerlink\" title=\"常用算法\"></a>常用算法</h1><blockquote>\n<p>本页理解几个常用的算法</p>\n</blockquote>\n<hr>\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><p><strong>冒泡排序是一种稳定的排序算法</strong></p>\n<blockquote>\n<p>稳定即是，如果相邻的元素相同，不会再去进行调换位置</p>\n</blockquote>\n<p>冒排的运作是(从后往前)。</p>\n<p>我们操作数组来进行演示。</p>\n<p>我们首先定义一个整型数组里面存储几个整型数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//待排序的数列</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[] nums = &#123;<span class=\"number\">9</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">10</span>,<span class=\"number\">25</span>&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>基本思路：比较相邻的元素，如果前一个元素比后一个元素大，那么则调换位置。</p>\n</blockquote>\n<p><strong>每排序一轮那么下一轮就将排序元素的个数-1，因为每轮排序都会把当前轮数的最大元素放在最后。</strong></p>\n<p>我们尝试先用大脑来演示排序的过程<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//未排序时</span><br><span class=\"line\">9 6 4 3 10 25</span><br><span class=\"line\"></span><br><span class=\"line\">6 9 3 4 10 25 //第一轮 调换了2次</span><br><span class=\"line\">6 3 4 9 10 //第二轮 调换了2次</span><br><span class=\"line\">3 4 6 9 //第三轮 调换了2次</span><br><span class=\"line\">3 4 6 //第四轮 调换了0次</span><br><span class=\"line\">3 4 //第五轮 调换了0次</span><br></pre></td></tr></table></figure></p>\n<p>我们可以看到我们这组数据只需要排序三轮就可以排序成功，<strong>排序轮数是数组长度-1轮</strong>，调换次数是看数组相邻元素的大小关系，这个我们不用知道，<strong>我们只需要记住，排序轮数是数组长度-1就好。</strong></p>\n<p>那么在代码中我们要如何将其进行调换呢？</p>\n<p>有两种方式，通常来说我们可以定义一个临时变量，让相邻元素进行调换位置。</p>\n<blockquote>\n<p>了解了基本思路，我们直接进行代码编写吧！</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//待排序的数列</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] nums = &#123;<span class=\"number\">9</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">10</span>,<span class=\"number\">25</span>&#125;;</span><br><span class=\"line\">        <span class=\"comment\">//临时变量，用于调换位置</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">        <span class=\"comment\">//第一层循环，控制轮数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt;nums.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//第二层，控制每轮要进行排序的元素数量</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;nums.length-<span class=\"number\">1</span>-i;j++)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果当前元素比后一个元素大那么则调换元素值</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[j]&gt;nums[j+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//我们先把当前元素的后一个元素放入临时变量存储,防止被当前元素覆盖</span></span><br><span class=\"line\">                    temp = nums[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">                    <span class=\"comment\">//把当前元素的值覆盖后一个元素</span></span><br><span class=\"line\">                    nums[j+<span class=\"number\">1</span>] = nums[j];</span><br><span class=\"line\">                    <span class=\"comment\">//再把当前元素存入后一个元素的值(刚刚保存在temp变量里的)</span></span><br><span class=\"line\">                    nums[j] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//遍历输出</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> num:nums)&#123;</span><br><span class=\"line\">            System.out.println(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>刚刚说了有两种方式进行调换，是因为我们操作的数据是整型(int)的所以，我们可以使用加减的方式做到调换位置。</p>\n<p><strong>引用上面的代码，把tem变量删除，将调换元素值的代码更换成如下代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*为了方便理解，我们这里就用上面数组下标为0和1的值(9,6)来进行演*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这个if不用加，我只是让你们知道是哪些代码</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(nums[j]&gt;nums[j+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">    <span class=\"comment\">//当前元素的值是与后一个元素值的和</span></span><br><span class=\"line\">    nums[j] = nums[j]+nums[j+<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//上一行代码等同于 nums[j] = 9 + 6</span></span><br><span class=\"line\">    <span class=\"comment\">//执行完上一行代码，nums[j] = 15;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//执行完此行代码nums[j+1] = 9</span></span><br><span class=\"line\">    <span class=\"comment\">//等价于 nums[j+1]= 15 - 6</span></span><br><span class=\"line\">    nums[j+<span class=\"number\">1</span>] = nums[j]-nums[j+<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//执行完此行代码nums[j] = 6</span></span><br><span class=\"line\">    <span class=\"comment\">//等价于 nums[j] = 15 - 9</span></span><br><span class=\"line\">    nums[j] = nums[j] - nums[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二种调换方式有点绕，不过仔细看看代码的注释那是很容易理解的！</p>\n<p>下一记: <strong>选择排序算法</strong></p>\n<hr>\n<h2 id=\"选择排序算法\"><a href=\"#选择排序算法\" class=\"headerlink\" title=\"选择排序算法\"></a>选择排序算法</h2><blockquote>\n<p>首先，找到数组中最小的那个元素，其次，将它和数组的第一个元素交换位置（如果第一个元素就是最小元素那么它就和自己交换）。再次，在剩下的元素中找到最小的元素，将它与数组的第二个元素交换位置。如此往复，直到将整个数组排序。这种方法叫做选择排序，因为它在不断地选择剩余元素之中的最小值。</p>\n</blockquote>\n<p>上面这个引用是网上随便抄的一个思路。</p>\n<p>这次我们依旧是从小到大排序，选择排序和冒泡排序不同的是每一轮排序，它只调换一次位置，这个具体调换谁，就是选择排序的核心了。</p>\n<p>我们每轮排序时都需要找到最小的元素，然后把它的下标记录下来，进行调换，第二轮排序时就不再比较刚刚记录的最小的元素了，所以依靠这种方式就可以实现排序的操作。</p>\n<p>下面我们直接看代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//需要排序的数组</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] nums = &#123;<span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">25</span>, <span class=\"number\">10</span>&#125;;</span><br><span class=\"line\">        <span class=\"comment\">//记录每轮排序时最小元素的下标</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> minIndex;</span><br><span class=\"line\">        <span class=\"comment\">//第一层循环控制轮数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            minIndex = i;<span class=\"comment\">//假设当前轮最小元素下标为i</span></span><br><span class=\"line\">            <span class=\"comment\">//内层循环要记录出当前轮最小元素的下标</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//比较两个相邻元素的大小</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums[minIndex] &gt; nums[j]) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//由于找到新的最小值，所以记录一下</span></span><br><span class=\"line\">                    minIndex = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果最小值记录的和我们假设的值是一样，说明这一轮最小的元素就是它，所以不需要进行调换位置</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (minIndex != i) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//下面代码都是为了让第一个元素和最小元素进行调换位置，因为是从小至大</span></span><br><span class=\"line\">                nums[minIndex] += nums[i];</span><br><span class=\"line\">                nums[i] = nums[minIndex] - nums[i];</span><br><span class=\"line\">                nums[minIndex] -= nums[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//遍历输出排序后的结果</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums) &#123;</span><br><span class=\"line\">            System.out.println(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>小结：选择排序是每一轮排序都把最小的元素和没有排序时的元素进行调换位置，然后每进行一轮后，最小元素不会进入排序的操作。</p>\n<p>下一节，二分查找算法</p>\n<hr>\n<h2 id=\"二分查找法\"><a href=\"#二分查找法\" class=\"headerlink\" title=\"二分查找法\"></a>二分查找法</h2><blockquote>\n<p>这是一种查询算法，效率高，但有个要求，必须是一串有序的数列。</p>\n</blockquote>\n<p>二分查找，见名知意，即是将数列分为两半来查找，取一个中间值，也就是说数组长度的中间值，基本思路是:</p>\n<ul>\n<li>定义起始查找位，结束查找位</li>\n<li>求得数组长度中间值都</li>\n<li>如果要查找的值比中间值小，那么肯定就是在二分的左边，也就是说比中间值小的值。</li>\n<li>如果要查找的值比中间值大，那么肯定就是在二分的右边，也就是说说比中间值大的值。</li>\n<li>如果要查找的值等于中间值，那么直接返回中间值的下标即可</li>\n<li>如果都没找到，那么返回-1.</li>\n</ul>\n<p>看了这个概念，我们还得注意几点</p>\n<p>需要一个循环，循环是为了让每次查找时未找到可以将起始位置或结束位置改变，起始位置和结束位置取决与中间值和要查的值的关系，如果中间值大，那么起始位置就应该为0，结束位置就应该为中间值-1，也就是说中间值的左边，如果中间值大则反过来，如果相等，则直接返回，因为已经查找到了。</p>\n<p>好了，我们直接看代码吧！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nums[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">78</span>,<span class=\"number\">90</span>,<span class=\"number\">100</span>,<span class=\"number\">300</span>&#125;;</span><br><span class=\"line\">        System.out.println(binarySearch(nums,<span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 二分查找法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums　要查找的数列</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key　要查找的值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums,<span class=\"keyword\">int</span> key)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//起始下标</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//结束下标</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> end = nums.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//起始查询的下标不能超过结束下标</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(start&lt;=end)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//中间的下标，如果是下标长度是偶数，那么则是去小数点取整数的值</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> middle = (start+end)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"comment\">//如果中间下标的值比要查找的值大</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[middle]&gt;key)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//要查找的值那肯定是在二分的左边，所以结束下标就以中分下标长度－１开始查找</span></span><br><span class=\"line\">                end = middle-<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[middle]&lt;key)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//二分的右边开始查找</span></span><br><span class=\"line\">                start = middle+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果要查找的值就是二分下标的值，那么直接返回即可</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果没有查找到那么则返回-1代表没有查找到</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>"}],"PostAsset":[{"_id":"source/_posts/如何自学编程/群组.png","slug":"群组.png","post":"cjwz8uza5001xoumsnhkxxnki","modified":1,"renderable":0},{"_id":"source/_posts/fcitx5安装与配置/kcm.png","slug":"kcm.png","post":"cjwz8uza0001doums6nlz2w4w","modified":1,"renderable":0},{"_id":"source/_posts/我儿子的博客/预览.png","slug":"预览.png","post":"cjwz8uzeq0046oums7ycx8nd9","modified":1,"renderable":0},{"_id":"source/_posts/C-内存四区之代码区与全局区/代码区示意图.png","post":"cjwz8uz9b0007oumsxe36q803","slug":"代码区示意图.png","modified":1,"renderable":1},{"_id":"source/_posts/C-内存四区之堆区/test.png","post":"cjwz8uz9c0008oumsx3ee3zkj","slug":"test.png","modified":1,"renderable":1},{"_id":"source/_posts/C-指针-基础02/指针位偏移.png","post":"cjwz8uz9k000joums7n75um5k","slug":"指针位偏移.png","modified":1,"renderable":1},{"_id":"source/_posts/Learn-Qt5-HelloWorld/newProject.gif","slug":"newProject.gif","post":"cjwz8uz9l000loumsnvkno49l","modified":1,"renderable":0},{"_id":"source/_posts/Linux-Linux命令行简介-0/1.1.2-0","post":"cjwz8uz9u000youms0c3zuclj","slug":"1.1.2-0","modified":1,"renderable":1},{"_id":"source/_posts/fcitx5安装与配置/输入.gif","slug":"输入.gif","post":"cjwz8uza0001doums6nlz2w4w","modified":1,"renderable":0},{"_id":"source/_posts/hexo-next插入网易云音乐/01.png","post":"cjwz8uza1001houmsxjlt95dx","slug":"01.png","modified":1,"renderable":1},{"_id":"source/_posts/hexo-next插入网易云音乐/插哪.png","post":"cjwz8uza1001houmsxjlt95dx","slug":"插哪.png","modified":1,"renderable":1},{"_id":"source/_posts/2008年5月12日14时28分04秒/操场.webp","post":"cjwz8uz940001oumsmeyjrh5q","slug":"操场.webp","modified":1,"renderable":1},{"_id":"source/_posts/2008年5月12日14时28分04秒/流量图.webp","post":"cjwz8uz940001oumsmeyjrh5q","slug":"流量图.webp","modified":1,"renderable":1},{"_id":"source/_posts/2008年5月12日14时28分04秒/空降.webp","post":"cjwz8uz940001oumsmeyjrh5q","slug":"空降.webp","modified":1,"renderable":1},{"_id":"source/_posts/ManjaroLinux的安装过程/分区.png","post":"cjwz8uza3001poums1xjklqsf","slug":"分区.png","modified":1,"renderable":1},{"_id":"source/_posts/ManjaroLinux的安装过程/分区标识.png","post":"cjwz8uza3001poums1xjklqsf","slug":"分区标识.png","modified":1,"renderable":1},{"_id":"source/_posts/ManjaroLinux的安装过程/安装选择界面.png","post":"cjwz8uza3001poums1xjklqsf","slug":"安装选择界面.png","modified":1,"renderable":1},{"_id":"source/_posts/ManjaroLinux的安装过程/开始安装.png","post":"cjwz8uza3001poums1xjklqsf","slug":"开始安装.png","modified":1,"renderable":1},{"_id":"source/_posts/ManjaroLinux的安装过程/摘要.png","post":"cjwz8uza3001poums1xjklqsf","slug":"摘要.png","modified":1,"renderable":1},{"_id":"source/_posts/ManjaroLinux的安装过程/桌面.png","slug":"桌面.png","post":"cjwz8uza3001poums1xjklqsf","modified":1,"renderable":0},{"_id":"source/_posts/ManjaroLinux的安装过程/编辑文章时截图.png","slug":"编辑文章时截图.png","post":"cjwz8uza3001poums1xjklqsf","modified":1,"renderable":0},{"_id":"source/_posts/如何用hexo-github-pages搭建博客/deploy.png","post":"cjwz8uza4001toums2t67cctc","slug":"deploy.png","modified":1,"renderable":1},{"_id":"source/_posts/如何用hexo-github-pages搭建博客/hexoinit.png","slug":"hexoinit.png","post":"cjwz8uza4001toums2t67cctc","modified":1,"renderable":0},{"_id":"source/_posts/如何用hexo-github-pages搭建博客/ssh目录.png","post":"cjwz8uza4001toums2t67cctc","slug":"ssh目录.png","modified":1,"renderable":1},{"_id":"source/_posts/如何用hexo-github-pages搭建博客/创建仓库.png","post":"cjwz8uza4001toums2t67cctc","slug":"创建仓库.png","modified":1,"renderable":1},{"_id":"source/_posts/如何用hexo-github-pages搭建博客/导入密钥.png","post":"cjwz8uza4001toums2t67cctc","slug":"导入密钥.png","modified":1,"renderable":1},{"_id":"source/_posts/如何用hexo-github-pages搭建博客/打开设置.png","post":"cjwz8uza4001toums2t67cctc","slug":"打开设置.png","modified":1,"renderable":1},{"_id":"source/_posts/如何用hexo-github-pages搭建博客/本地部署.png","slug":"本地部署.png","post":"cjwz8uza4001toums2t67cctc","modified":1,"renderable":0},{"_id":"source/_posts/如何用hexo-github-pages搭建博客/设置SSH.png","post":"cjwz8uza4001toums2t67cctc","slug":"设置SSH.png","modified":1,"renderable":1},{"_id":"source/_posts/如何用hexo-github-pages搭建博客/逆光.jpg","slug":"逆光.jpg","post":"cjwz8uza4001toums2t67cctc","modified":1,"renderable":0},{"_id":"source/_posts/C-读写文件/二进制文件.png","post":"cjwz8uzek003roumsi7magp5a","slug":"二进制文件.png","modified":1,"renderable":1},{"_id":"source/_posts/终端多窗口神器——Screen/DefalutCommandKey.png","post":"cjwz8uzen003zoumsbuuqbruu","slug":"DefalutCommandKey.png","modified":1,"renderable":1},{"_id":"source/_posts/终端多窗口神器——Screen/detachedInfo.png","post":"cjwz8uzen003zoumsbuuqbruu","slug":"detachedInfo.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cjwz8uz940001oumsmeyjrh5q","category_id":"cjwz8uz990004oums5n5erook","_id":"cjwz8uz9h000foumsmy032q5j"},{"post_id":"cjwz8uz970003oumsuxdajcls","category_id":"cjwz8uz9d000aoumsvgy39s03","_id":"cjwz8uz9m000moumss21agn27"},{"post_id":"cjwz8uz9k000joums7n75um5k","category_id":"cjwz8uz9h000goumscj1xqtvv","_id":"cjwz8uz9r000soums6lom0tbr"},{"post_id":"cjwz8uz9b0007oumsxe36q803","category_id":"cjwz8uz9h000goumscj1xqtvv","_id":"cjwz8uz9u000woumsd136najy"},{"post_id":"cjwz8uz9l000loumsnvkno49l","category_id":"cjwz8uz9h000goumscj1xqtvv","_id":"cjwz8uz9v000zoumsjbgbix8d"},{"post_id":"cjwz8uz9o000poumsrqhg1eym","category_id":"cjwz8uz9h000goumscj1xqtvv","_id":"cjwz8uz9w0013oumsxl4fiokv"},{"post_id":"cjwz8uz9c0008oumsx3ee3zkj","category_id":"cjwz8uz9h000goumscj1xqtvv","_id":"cjwz8uz9x0015oums7gbddgao"},{"post_id":"cjwz8uz9q000roums3pgzthcq","category_id":"cjwz8uz9h000goumscj1xqtvv","_id":"cjwz8uz9y0019oumsb4hev2zi"},{"post_id":"cjwz8uz9t000voumsnszsmxl2","category_id":"cjwz8uz9h000goumscj1xqtvv","_id":"cjwz8uz9z001boums6ideqhy1"},{"post_id":"cjwz8uz9d0009oumsok9whcuy","category_id":"cjwz8uz9h000goumscj1xqtvv","_id":"cjwz8uza0001eoumsfi5bjegf"},{"post_id":"cjwz8uz9e000doumswgdaz7x5","category_id":"cjwz8uz9h000goumscj1xqtvv","_id":"cjwz8uza2001ioums22a1b3vp"},{"post_id":"cjwz8uz9x0014oums31st5kp1","category_id":"cjwz8uz9d000aoumsvgy39s03","_id":"cjwz8uza3001moums7fmc7p5y"},{"post_id":"cjwz8uz9y0018oums2oojfq51","category_id":"cjwz8uz9h000goumscj1xqtvv","_id":"cjwz8uza4001qoumsfpw8t1lm"},{"post_id":"cjwz8uz9g000eoums6a7viy0j","category_id":"cjwz8uz9h000goumscj1xqtvv","_id":"cjwz8uza5001uoumsodis69nm"},{"post_id":"cjwz8uz9u000youms0c3zuclj","category_id":"cjwz8uza0001coumsvn4gwnfu","_id":"cjwz8uza6001youmsdm169cqh"},{"post_id":"cjwz8uz9w0012oumsk37jtz6g","category_id":"cjwz8uza0001coumsvn4gwnfu","_id":"cjwz8uza70021oums1rw2jmzq"},{"post_id":"cjwz8uza3001poums1xjklqsf","category_id":"cjwz8uz9h000goumscj1xqtvv","_id":"cjwz8uza70024oums2575tq7x"},{"post_id":"cjwz8uz9z001aoumsuarjyyta","category_id":"cjwz8uza0001coumsvn4gwnfu","_id":"cjwz8uza80026oumshxr5sdbd"},{"post_id":"cjwz8uza0001doums6nlz2w4w","category_id":"cjwz8uza6001zoums2cn89lvh","_id":"cjwz8uza8002aoumsj61roju6"},{"post_id":"cjwz8uza1001houmsxjlt95dx","category_id":"cjwz8uza80027oums1gcxe3t3","_id":"cjwz8uza9002foumsdks6nnm8"},{"post_id":"cjwz8uza2001loums6kk2m0qa","category_id":"cjwz8uza80027oums1gcxe3t3","_id":"cjwz8uzaa002koumsycxs7n2o"},{"post_id":"cjwz8uza4001toums2t67cctc","category_id":"cjwz8uza80027oums1gcxe3t3","_id":"cjwz8uzab002ooums2e27oi8h"},{"post_id":"cjwz8uza5001xoumsnhkxxnki","category_id":"cjwz8uzaa002joums1ac7hq7c","_id":"cjwz8uzac002soumslvsemojs"},{"post_id":"cjwz8uzeh003moumspdibu229","category_id":"cjwz8uz9h000goumscj1xqtvv","_id":"cjwz8uzel003uoumstds63x7t"},{"post_id":"cjwz8uzei003ooumssciuvbmi","category_id":"cjwz8uz9h000goumscj1xqtvv","_id":"cjwz8uzem003xoumszv6iycgz"},{"post_id":"cjwz8uzek003roumsi7magp5a","category_id":"cjwz8uz9h000goumscj1xqtvv","_id":"cjwz8uzeo0040oums916y8vye"},{"post_id":"cjwz8uzel003toumsnvwel8ag","category_id":"cjwz8uzaa002joums1ac7hq7c","_id":"cjwz8uzep0044oums5xmncxku"},{"post_id":"cjwz8uzem003woumsw9mj73y4","category_id":"cjwz8uz9h000goumscj1xqtvv","_id":"cjwz8uzeq0047oums1rvn9ohd"},{"post_id":"cjwz8uzen003zoumsbuuqbruu","category_id":"cjwz8uza6001zoums2cn89lvh","_id":"cjwz8uzer0049oumspvyyeirz"},{"post_id":"cjwz8uzeo0043oumsrmj8kyd7","category_id":"cjwz8uz9h000goumscj1xqtvv","_id":"cjwz8uzer004boumsy8wxb58u"},{"post_id":"cjwz8uzeq0046oums7ycx8nd9","category_id":"cjwz8uz9d000aoumsvgy39s03","_id":"cjwz8uzes004doumsr5j2lo6a"},{"post_id":"cjwz8uzg1004loumsrnxc0pn2","category_id":"cjwz8uz9h000goumscj1xqtvv","_id":"cjwz8uzg2004noumssu46aexa"}],"PostTag":[{"post_id":"cjwz8uz940001oumsmeyjrh5q","tag_id":"cjwz8uz9a0005oums6g02gnpq","_id":"cjwz8uz9e000coumsnsw04w8v"},{"post_id":"cjwz8uz9e000doumswgdaz7x5","tag_id":"cjwz8uz9e000boumsc4f0f8nv","_id":"cjwz8uz9j000ioumsqpk49tfk"},{"post_id":"cjwz8uz9b0007oumsxe36q803","tag_id":"cjwz8uz9e000boumsc4f0f8nv","_id":"cjwz8uz9l000koums3bp5bggv"},{"post_id":"cjwz8uz9c0008oumsx3ee3zkj","tag_id":"cjwz8uz9e000boumsc4f0f8nv","_id":"cjwz8uz9o000qoumsd6ftah3v"},{"post_id":"cjwz8uz9d0009oumsok9whcuy","tag_id":"cjwz8uz9e000boumsc4f0f8nv","_id":"cjwz8uz9u000xoumsfr8qczlk"},{"post_id":"cjwz8uz9g000eoums6a7viy0j","tag_id":"cjwz8uz9e000boumsc4f0f8nv","_id":"cjwz8uza1001goumsn2fen7dp"},{"post_id":"cjwz8uz9g000eoums6a7viy0j","tag_id":"cjwz8uz9r000toumsvs2ngm5y","_id":"cjwz8uza2001koumszx1aoq5d"},{"post_id":"cjwz8uz9g000eoums6a7viy0j","tag_id":"cjwz8uz9v0011oums076s8mll","_id":"cjwz8uza3001ooumsw10efvr0"},{"post_id":"cjwz8uz9g000eoums6a7viy0j","tag_id":"cjwz8uz9y0017oumsb598oj8o","_id":"cjwz8uza4001soumst9czwry5"},{"post_id":"cjwz8uz9k000joums7n75um5k","tag_id":"cjwz8uz9e000boumsc4f0f8nv","_id":"cjwz8uza5001woumsuf3vfifo"},{"post_id":"cjwz8uz9k000joums7n75um5k","tag_id":"cjwz8uz9r000toumsvs2ngm5y","_id":"cjwz8uza70020oumsolqh6xr6"},{"post_id":"cjwz8uz9k000joums7n75um5k","tag_id":"cjwz8uz9v0011oums076s8mll","_id":"cjwz8uza70023oumsmdxxllr6"},{"post_id":"cjwz8uz9l000loumsnvkno49l","tag_id":"cjwz8uz9e000boumsc4f0f8nv","_id":"cjwz8uza80025oums64m8ueur"},{"post_id":"cjwz8uz9l000loumsnvkno49l","tag_id":"cjwz8uza5001voums6lvpq2aq","_id":"cjwz8uza80029oums35h3tnbf"},{"post_id":"cjwz8uz9o000poumsrqhg1eym","tag_id":"cjwz8uza70022oumsph3pohad","_id":"cjwz8uza9002doumsn4r6rfbz"},{"post_id":"cjwz8uz9o000poumsrqhg1eym","tag_id":"cjwz8uza80028oums0m4wfgu4","_id":"cjwz8uza9002goums5euxnzk1"},{"post_id":"cjwz8uz9q000roums3pgzthcq","tag_id":"cjwz8uz9e000boumsc4f0f8nv","_id":"cjwz8uzaa002ioums3jpgffmq"},{"post_id":"cjwz8uz9q000roums3pgzthcq","tag_id":"cjwz8uza5001voums6lvpq2aq","_id":"cjwz8uzaa002loumsfoawo6ws"},{"post_id":"cjwz8uz9t000voumsnszsmxl2","tag_id":"cjwz8uza5001voums6lvpq2aq","_id":"cjwz8uzab002noumsr7skr09o"},{"post_id":"cjwz8uz9t000voumsnszsmxl2","tag_id":"cjwz8uz9e000boumsc4f0f8nv","_id":"cjwz8uzab002poumsxkqo7n4l"},{"post_id":"cjwz8uz9u000youms0c3zuclj","tag_id":"cjwz8uzab002moumslyugumv4","_id":"cjwz8uzac002roumsd1hllaqu"},{"post_id":"cjwz8uz9w0012oumsk37jtz6g","tag_id":"cjwz8uzab002moumslyugumv4","_id":"cjwz8uzad002uoums5xixwz4u"},{"post_id":"cjwz8uz9x0014oums31st5kp1","tag_id":"cjwz8uzac002toumsjsuil495","_id":"cjwz8uzaf002xoumsjy8vst5h"},{"post_id":"cjwz8uz9x0014oums31st5kp1","tag_id":"cjwz8uzab002moumslyugumv4","_id":"cjwz8uzaf002youmspxhoe49q"},{"post_id":"cjwz8uz9y0018oums2oojfq51","tag_id":"cjwz8uzab002moumslyugumv4","_id":"cjwz8uzaf0030oumsopz4jh30"},{"post_id":"cjwz8uz9z001aoumsuarjyyta","tag_id":"cjwz8uzab002moumslyugumv4","_id":"cjwz8uzag0032oums7l7tyqki"},{"post_id":"cjwz8uza0001doums6nlz2w4w","tag_id":"cjwz8uzag0031oumsqx0hex9d","_id":"cjwz8uzah0034oumsjd7871a8"},{"post_id":"cjwz8uza1001houmsxjlt95dx","tag_id":"cjwz8uzag0033oumshjft53ml","_id":"cjwz8uzai0037oumshk1c4dwj"},{"post_id":"cjwz8uza1001houmsxjlt95dx","tag_id":"cjwz8uzah0035oumseonsp9px","_id":"cjwz8uzai0038oumsdekyptv8"},{"post_id":"cjwz8uza2001loums6kk2m0qa","tag_id":"cjwz8uzag0033oumshjft53ml","_id":"cjwz8uzaj003aoumstjkjkpik"},{"post_id":"cjwz8uza3001poums1xjklqsf","tag_id":"cjwz8uzab002moumslyugumv4","_id":"cjwz8uzal003eoumsrp4vmvz0"},{"post_id":"cjwz8uza3001poums1xjklqsf","tag_id":"cjwz8uzaj003boums8tdy08om","_id":"cjwz8uzal003foums30tfo500"},{"post_id":"cjwz8uza3001poums1xjklqsf","tag_id":"cjwz8uzak003coumsfg426pnw","_id":"cjwz8uzal003houmsz3o45sh0"},{"post_id":"cjwz8uza4001toums2t67cctc","tag_id":"cjwz8uzag0033oumshjft53ml","_id":"cjwz8uzam003joumsa662tal2"},{"post_id":"cjwz8uza4001toums2t67cctc","tag_id":"cjwz8uzal003goums70kknw1f","_id":"cjwz8uzam003koumsf4cm96x5"},{"post_id":"cjwz8uza5001xoumsnhkxxnki","tag_id":"cjwz8uzal003ioumshcdfip7l","_id":"cjwz8uzam003loums7gw0epf9"},{"post_id":"cjwz8uzei003ooumssciuvbmi","tag_id":"cjwz8uz9e000boumsc4f0f8nv","_id":"cjwz8uzel003soumskgaj0eoy"},{"post_id":"cjwz8uzek003roumsi7magp5a","tag_id":"cjwz8uz9e000boumsc4f0f8nv","_id":"cjwz8uzem003voumsrj8dn45x"},{"post_id":"cjwz8uzel003toumsnvwel8ag","tag_id":"cjwz8uzab002moumslyugumv4","_id":"cjwz8uzen003youmsc3v8fe4r"},{"post_id":"cjwz8uzeh003moumspdibu229","tag_id":"cjwz8uz9e000boumsc4f0f8nv","_id":"cjwz8uzeo0042oumsw4wc4x7f"},{"post_id":"cjwz8uzeh003moumspdibu229","tag_id":"cjwz8uzek003qoumsx8otz6os","_id":"cjwz8uzeq0045oumswh5ru3q0"},{"post_id":"cjwz8uzem003woumsw9mj73y4","tag_id":"cjwz8uz9e000boumsc4f0f8nv","_id":"cjwz8uzer004aoumskm7poc24"},{"post_id":"cjwz8uzem003woumsw9mj73y4","tag_id":"cjwz8uzeo0041oums6k9w00r5","_id":"cjwz8uzer004coumszttcfhli"},{"post_id":"cjwz8uzen003zoumsbuuqbruu","tag_id":"cjwz8uzab002moumslyugumv4","_id":"cjwz8uzes004foumssdxx0fkn"},{"post_id":"cjwz8uzen003zoumsbuuqbruu","tag_id":"cjwz8uzer0048oums75pe2rj5","_id":"cjwz8uzes004goumsvapsqorq"},{"post_id":"cjwz8uzeo0043oumsrmj8kyd7","tag_id":"cjwz8uzab002moumslyugumv4","_id":"cjwz8uzet004ioumsbq19zvdj"},{"post_id":"cjwz8uzeo0043oumsrmj8kyd7","tag_id":"cjwz8uzes004eoumsllsc0saf","_id":"cjwz8uzex004joumszyk85bqf"},{"post_id":"cjwz8uzeq0046oums7ycx8nd9","tag_id":"cjwz8uzes004houms0r0pnf7w","_id":"cjwz8uzex004koumsvm45sw1i"},{"post_id":"cjwz8uzg1004loumsrnxc0pn2","tag_id":"cjwz8uzg2004moumsgu11ce5k","_id":"cjwz8uzgc004ooums4rw2jsfw"}],"Tag":[{"name":"社会事件","_id":"cjwz8uz9a0005oums6g02gnpq"},{"name":"C++","_id":"cjwz8uz9e000boumsc4f0f8nv"},{"name":"指针","_id":"cjwz8uz9r000toumsvs2ngm5y"},{"name":"学习笔记","_id":"cjwz8uz9v0011oums076s8mll"},{"name":"基础","_id":"cjwz8uz9y0017oumsb598oj8o"},{"name":"Qt5","_id":"cjwz8uza5001voums6lvpq2aq"},{"name":"Qt","_id":"cjwz8uza70022oumsph3pohad"},{"name":"C_++","_id":"cjwz8uza80028oums0m4wfgu4"},{"name":"Linux","_id":"cjwz8uzab002moumslyugumv4"},{"name":"Telegram","_id":"cjwz8uzac002toumsjsuil495"},{"name":"fcitx5","_id":"cjwz8uzag0031oumsqx0hex9d"},{"name":"hexo","_id":"cjwz8uzag0033oumshjft53ml"},{"name":"网易云音乐","_id":"cjwz8uzah0035oumseonsp9px"},{"name":"折腾","_id":"cjwz8uzaj003boums8tdy08om"},{"name":"软件使用","_id":"cjwz8uzak003coumsfg426pnw"},{"name":"博客","_id":"cjwz8uzal003goums70kknw1f"},{"name":"个人感想","_id":"cjwz8uzal003ioumshcdfip7l"},{"name":"编程","_id":"cjwz8uzek003qoumsx8otz6os"},{"name":"经典案例","_id":"cjwz8uzeo0041oums6k9w00r5"},{"name":"软件折腾","_id":"cjwz8uzer0048oums75pe2rj5"},{"name":"KDE","_id":"cjwz8uzes004eoumsllsc0saf"},{"name":"欢乐时光","_id":"cjwz8uzes004houms0r0pnf7w"},{"name":"算法","_id":"cjwz8uzg2004moumsgu11ce5k"}]}}